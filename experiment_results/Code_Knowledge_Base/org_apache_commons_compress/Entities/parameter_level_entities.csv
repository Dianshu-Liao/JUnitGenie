FEN:ID,:LABEL,Parameter Name,Data Type
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(File).target,Parameter_1,target,java.io.File
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(Path).target,Parameter_1,target,java.nio.file.Path
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).archiveEntry",Parameter_1,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).inputStream",Parameter_2,inputStream,java.io.InputStream
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).replace",Parameter_3,replace,boolean
"org.apache.commons.compress.changes.Change.<init>(String,ChangeType).fileName",Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.changes.Change.<init>(String,ChangeType).type",Parameter_2,type,org.apache.commons.compress.changes.Change$ChangeType
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream).entry",Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream).input",Parameter_2,input,java.io.InputStream
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).entry",Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).input",Parameter_2,input,java.io.InputStream
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).replace",Parameter_3,replace,boolean
org.apache.commons.compress.changes.ChangeSet.addAddition(Change).addChange,Parameter_1,addChange,org.apache.commons.compress.changes.Change
org.apache.commons.compress.changes.ChangeSet.addDeletion(Change).deleteChange,Parameter_1,deleteChange,org.apache.commons.compress.changes.Change
org.apache.commons.compress.changes.ChangeSet.delete(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.changes.ChangeSet.deleteDir(String).dirName,Parameter_1,dirName,java.lang.String
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).outputStream",Parameter_2,outputStream,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).archiveEntry",Parameter_3,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry).workingSet",Parameter_1,workingSet,java.util.Set
"org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream).entryIterator",Parameter_1,entryIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream).outputStream",Parameter_2,outputStream,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream).inputStream",Parameter_1,inputStream,org.apache.commons.compress.archivers.ArchiveInputStream
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream).outputStream",Parameter_2,outputStream,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream).zipFile",Parameter_1,zipFile,org.apache.commons.compress.archivers.zip.ZipFile
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream).outputStream",Parameter_2,outputStream,org.apache.commons.compress.archivers.ArchiveOutputStream
org.apache.commons.compress.changes.ChangeSetPerformer.<init>(ChangeSet).changeSet,Parameter_1,changeSet,org.apache.commons.compress.changes.ChangeSet
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.<init>(ArchiveInputStream).inputStream,Parameter_1,inputStream,org.apache.commons.compress.archivers.ArchiveInputStream
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.<init>(ZipFile).zipFile,Parameter_1,zipFile,org.apache.commons.compress.archivers.zip.ZipFile
org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.changes.ChangeSetResults.deleted(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.harmony.unpack200.IcTuple.equals(Object).object,Parameter_1,object,java.lang.Object
org.apache.commons.compress.harmony.unpack200.IcTuple.innerBreakAtDollar(String).className,Parameter_1,className,java.lang.String
org.apache.commons.compress.harmony.unpack200.IcTuple.isAllDigits(String).nameString,Parameter_1,nameString,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String).stringOne",Parameter_1,stringOne,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String).stringTwo",Parameter_2,stringTwo,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).C",Parameter_1,C,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).F",Parameter_2,F,int
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).C2",Parameter_3,C2,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).N",Parameter_4,N,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).cIndex",Parameter_5,cIndex,int
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).c2Index",Parameter_6,c2Index,int
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).nIndex",Parameter_7,nIndex,int
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).tIndex",Parameter_8,tIndex,int
org.apache.commons.compress.harmony.unpack200.BcBands.endsWithLoad(int).codePacked,Parameter_1,codePacked,int
org.apache.commons.compress.harmony.unpack200.BcBands.endsWithStore(int).codePacked,Parameter_1,codePacked,int
org.apache.commons.compress.harmony.unpack200.BcBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.BcBands.startsWithIf(int).codePacked,Parameter_1,codePacked,int
org.apache.commons.compress.harmony.unpack200.BcBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>(int).options,Parameter_1,options,int
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.arrayIsCached(String[]).array,Parameter_1,array,java.lang.String[]
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.cacheArray(String[]).array,Parameter_1,array,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String).array",Parameter_1,array,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String).key",Parameter_2,key,java.lang.String
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.indexesForKey(String).key,Parameter_1,key,java.lang.String
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).type",Parameter_1,type,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).pairCount",Parameter_2,pairCount,int
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).namesIterator",Parameter_3,namesIterator,java.util.Iterator
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).numAnnotations",Parameter_1,numAnnotations,int
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).types",Parameter_2,types,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).pairCounts",Parameter_3,pairCounts,int[]
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).namesIterator",Parameter_4,namesIterator,java.util.Iterator
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getNextValue(int).t,Parameter_1,t,int
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator).numParameters",Parameter_1,numParameters,int
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator).namesIterator",Parameter_2,namesIterator,java.util.Iterator
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands).cpBands",Parameter_2,cpBands,org.apache.commons.compress.harmony.unpack200.CpBands
org.apache.commons.compress.harmony.unpack200.Segment.buildClassFile(int).classNum,Parameter_1,classNum,int
"org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[]).icLocal",Parameter_1,icLocal,org.apache.commons.compress.harmony.unpack200.IcTuple[]
"org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[]).icRelevant",Parameter_2,icRelevant,org.apache.commons.compress.harmony.unpack200.IcTuple[]
"org.apache.commons.compress.harmony.unpack200.Segment.log(int,String).messageLevel",Parameter_1,messageLevel,int
"org.apache.commons.compress.harmony.unpack200.Segment.log(int,String).message",Parameter_2,message,java.lang.String
org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint(boolean).deflateHint,Parameter_1,deflateHint,boolean
org.apache.commons.compress.harmony.unpack200.Segment.readSegment(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.Segment.setLogLevel(int).logLevel,Parameter_1,logLevel,int
org.apache.commons.compress.harmony.unpack200.Segment.setLogStream(OutputStream).logStream,Parameter_1,logStream,java.io.OutputStream
org.apache.commons.compress.harmony.unpack200.Segment.setPreRead(boolean).value,Parameter_1,value,boolean
"org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream).out",Parameter_2,out,java.util.jar.JarOutputStream
org.apache.commons.compress.harmony.unpack200.Segment.unpackRead(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.Segment.unpackWrite(JarOutputStream).out,Parameter_1,out,java.util.jar.JarOutputStream
org.apache.commons.compress.harmony.unpack200.Segment.writeJar(JarOutputStream).out,Parameter_1,out,java.util.jar.JarOutputStream
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File).file,Parameter_1,file,java.io.File
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream).fileInputStream,Parameter_1,fileInputStream,java.io.FileInputStream
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(Path).path,Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[]).first",Parameter_1,first,java.lang.String
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[]).more",Parameter_2,more,java.lang.String[]
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL).url,Parameter_1,url,java.net.URL
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String).object",Parameter_1,object,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String).fieldName",Parameter_2,fieldName,java.lang.String
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPathString(FileInputStream).fis,Parameter_1,fis,java.io.FileInputStream
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream).filterInputStream,Parameter_1,filterInputStream,java.io.FilterInputStream
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream).out",Parameter_2,out,java.util.jar.JarOutputStream
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream).out",Parameter_2,out,java.util.jar.JarOutputStream
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout).layout,Parameter_1,layout,org.apache.commons.compress.harmony.unpack200.AttributeLayout
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands).layout",Parameter_1,layout,org.apache.commons.compress.harmony.unpack200.AttributeLayout
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands).newBands",Parameter_2,newBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeBands(AttributeLayout).layout,Parameter_1,layout,org.apache.commons.compress.harmony.unpack200.AttributeLayout
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int).context",Parameter_2,context,int
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getLayout(int).context,Parameter_1,context,int
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).n",Parameter_4,n,int
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveFileCounts(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveSpecialCounts(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseClassCounts(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseCpCounts(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.SegmentHeader.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMajorVersion(int).version,Parameter_1,version,int
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMinorVersion(int).version,Parameter_1,version,int
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveModtime(long).archiveModtime,Parameter_1,archiveModtime,long
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveSize(long).archiveSize,Parameter_1,archiveSize,long
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setAttributeDefinitionCount(long).valuie,Parameter_1,valuie,long
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setBandHeadersData(byte[]).bandHeaders,Parameter_1,bandHeaders,byte[]
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setSegmentsRemaining(long).value,Parameter_1,value,long
org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String).descriptor,Parameter_1,descriptor,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int).descriptor",Parameter_1,descriptor,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int).widthOfLongsAndDoubles",Parameter_2,widthOfLongsAndDoubles,int
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[]).flags,Parameter_1,flags,int[]
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[]).flags,Parameter_1,flags,long[]
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][]).flags,Parameter_1,flags,long[][]
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String).descriptor,Parameter_1,descriptor,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher).flags",Parameter_1,flags,long[]
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher).matcher",Parameter_2,matcher,org.apache.commons.compress.harmony.unpack200.IMatcher
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher).flags",Parameter_1,flags,long[][]
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher).matcher",Parameter_2,matcher,org.apache.commons.compress.harmony.unpack200.IMatcher
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).layout",Parameter_1,layout,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).longIndex",Parameter_2,longIndex,long
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).pool",Parameter_3,pool,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool).longIndex",Parameter_1,longIndex,long
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool).pool",Parameter_2,pool,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).longIndex",Parameter_1,longIndex,long
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).type",Parameter_2,type,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).pool",Parameter_3,pool,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool
org.apache.commons.compress.harmony.unpack200.AttributeLayout.matches(long).value,Parameter_1,value,long
org.apache.commons.compress.harmony.unpack200.AttributeLayout.setBackwardsCallCount(int).backwardsCallCount,Parameter_1,backwardsCallCount,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).layout",Parameter_3,layout,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).index",Parameter_4,index,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).layout",Parameter_3,layout,java.lang.String
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).index",Parameter_4,index,int
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).isDefault",Parameter_5,isDefault,boolean
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(String).string,Parameter_1,string,java.lang.String
org.apache.commons.compress.harmony.unpack200.CpBands.cpDoubleValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpFloatValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpIntegerValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpLongValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(String).descriptor,Parameter_1,descriptor,java.lang.String
org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpStringValue(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean).string",Parameter_1,string,java.lang.String
"org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean).searchForIndex",Parameter_2,searchForIndex,boolean
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpClass(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDescriptor(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDouble(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpField(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpFloat(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpIMethod(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpInt(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpLong(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpMethod(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpSignature(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpString(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpUtf8(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.CpBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getCodec(String).layoutElement,Parameter_1,layoutElement,java.lang.String
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List).elements",Parameter_2,elements,java.util.List
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader).stream,Parameter_1,stream,java.io.StringReader
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int).occurrenceCount",Parameter_2,occurrenceCount,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readBody(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextAttributeElement(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextLayoutElement(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextUnionCase(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNumber(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readUpToMatchingBracket(StringReader).stream,Parameter_1,stream,java.io.StringReader
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).i",Parameter_1,i,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).currentCallable",Parameter_2,currentCallable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).layoutElement",Parameter_3,layoutElement,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.setBackwardsCalls(int[]).backwardsCalls,Parameter_1,backwardsCalls,int[]
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout).segment",Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout).attributeLayout",Parameter_2,attributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int).count",Parameter_2,count,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int).count",Parameter_2,count,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.setCallable(Callable).callable,Parameter_1,callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addCount(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addNextToAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int).count",Parameter_2,count,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setFirstCallable(boolean).isFirstCallable,Parameter_1,isFirstCallable,boolean
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.<init>(List).body,Parameter_1,body,java.util.List
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getValue(int).index,Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int).count",Parameter_2,count,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement.getLength(char).uintType,Parameter_1,uintType,char
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int).count",Parameter_2,count,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int).count",Parameter_2,count,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int).count",Parameter_2,count,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute).attribute",Parameter_2,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(int).i,Parameter_1,i,int
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(long).l,Parameter_1,l,long
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int).count",Parameter_2,count,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String).regexString",Parameter_1,regexString,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String).compareString",Parameter_2,compareString,java.lang.String
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassPoolEntry(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).cp",Parameter_1,cp,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).desiredIndex",Parameter_2,desiredIndex,long
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).desiredClassName",Parameter_3,desiredClassName,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long).cp",Parameter_1,cp,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long).value",Parameter_2,value,long
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).cp",Parameter_1,cp,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).value",Parameter_2,value,long
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).desiredClassName",Parameter_3,desiredClassName,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long).cp",Parameter_1,cp,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long).longIndex",Parameter_2,longIndex,long
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).nameArray",Parameter_1,nameArray,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).compareString",Parameter_2,compareString,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).desiredIndex",Parameter_3,desiredIndex,int
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).primaryArray",Parameter_1,primaryArray,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).secondaryArray",Parameter_2,secondaryArray,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).primaryCompareString",Parameter_3,primaryCompareString,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).secondaryCompareRegex",Parameter_4,secondaryCompareRegex,java.lang.String
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).desiredIndex",Parameter_5,desiredIndex,int
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>(CpBands).bands,Parameter_1,bands,org.apache.commons.compress.harmony.unpack200.CpBands
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).type",Parameter_1,type,byte
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).className",Parameter_2,className,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).descriptor",Parameter_3,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).globalIndex",Parameter_4,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.doWrite(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).flags",Parameter_3,flags,long
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).attributes",Parameter_4,attributes,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.write(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).startPC",Parameter_1,startPC,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).endPC",Parameter_2,endPC,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).handlerPC",Parameter_3,handlerPC,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).catchType",Parameter_4,catchType,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int).value",Parameter_1,value,java.lang.Float
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int).value",Parameter_1,value,java.lang.Double
"org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.doWrite(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int).tag",Parameter_1,tag,byte
"org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).absPosition",Parameter_2,absPosition,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).absPosition",Parameter_2,absPosition,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[]).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[]).rewrite",Parameter_2,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Parameter_2,codeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String).name",Parameter_2,name,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).instruction",Parameter_1,instruction,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).byteCode",Parameter_2,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).operandManager",Parameter_3,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).codeLength",Parameter_4,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).instruction",Parameter_1,instruction,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).byteCode",Parameter_2,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).operandManager",Parameter_3,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).codeLength",Parameter_4,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String).name",Parameter_2,name,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int).opcode,Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Parameter_2,codeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String).name",Parameter_2,name,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.context(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getOffset(OperandManager).operandManager,Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Parameter_2,codeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Parameter_1,byteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Parameter_2,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Parameter_3,codeLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).rewrite",Parameter_3,rewrite,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).widened",Parameter_4,widened,boolean
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType).cpClass",Parameter_1,cpClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType).method",Parameter_2,method,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setCodeLength(int).length,Parameter_1,length,int
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).localVariableTypeTableLength",Parameter_1,localVariableTypeTableLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).startPcs",Parameter_2,startPcs,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).lengths",Parameter_3,lengths,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).names",Parameter_4,names,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).signatures",Parameter_5,signatures,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).indexes",Parameter_6,indexes,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.add(ClassFileEntry).entry,Parameter_1,entry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addWithNestedEntries(ClassFileEntry).entry,Parameter_1,entry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.get(int).i,Parameter_1,i,int
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexOf(ClassFileEntry).entry,Parameter_1,entry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolve(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[]).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[]).annotations",Parameter_2,annotations,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[]
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.write(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>(CPUTF8).attributeName,Parameter_1,attributeName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int).value",Parameter_1,value,java.lang.Long
"org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setCodeLength(int).length,Parameter_1,length,int
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).localVariableTableLength",Parameter_1,localVariableTableLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).startPcs",Parameter_2,startPcs,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).lengths",Parameter_3,lengths,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).names",Parameter_4,names,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).descriptors",Parameter_5,descriptors,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).indexes",Parameter_6,indexes,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).lineNumberTableLength",Parameter_1,lineNumberTableLength,int
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).startPcs",Parameter_2,startPcs,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).lineNumbers",Parameter_3,lineNumbers,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.setGlobalIndex(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int).utf8",Parameter_1,utf8,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.doWrite(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.equals(Object).arg0,Parameter_1,arg0,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.write(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).tag",Parameter_1,tag,byte
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).value",Parameter_2,value,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).globalIndex",Parameter_3,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).tag",Parameter_1,tag,byte
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).value",Parameter_2,value,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).globalIndex",Parameter_3,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>(ElementValue).elementValue,Parameter_1,elementValue,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).className",Parameter_1,className,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).globalIndex",Parameter_3,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).innerClass",Parameter_1,innerClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).outerClass",Parameter_2,outerClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).innerName",Parameter_3,innerName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).flags",Parameter_4,flags,int
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(InnerClassesEntry).innerClassesEntry,Parameter_1,innerClassesEntry,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.write(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).innerClass",Parameter_1,innerClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).outerClass",Parameter_2,outerClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).innerName",Parameter_3,innerName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).flags",Parameter_4,flags,int
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[]).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[]).parameterAnnotations",Parameter_2,parameterAnnotations,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation[]
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.<init>(Annotation[]).annotations,Parameter_1,annotations,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[]
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>(CPUTF8).attributeName,Parameter_1,attributeName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).numPairs",Parameter_1,numPairs,int
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).type",Parameter_2,type,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).elementNames",Parameter_3,elementNames,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).elementValues",Parameter_4,elementValues,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue[]
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object).tag",Parameter_1,tag,int
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object).value",Parameter_2,value,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).flags",Parameter_3,flags,long
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).attributes",Parameter_4,attributes,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).globalIndex",Parameter_3,globalIndex,int
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).className",Parameter_1,className,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).globalIndex",Parameter_3,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int).value",Parameter_1,value,java.lang.Integer
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int).globalIndex",Parameter_2,globalIndex,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int).length",Parameter_1,length,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int).value",Parameter_2,value,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int).length",Parameter_1,length,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int).value",Parameter_2,value,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int).length",Parameter_1,length,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int).value",Parameter_2,value,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long).length",Parameter_1,length,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long).value",Parameter_2,value,long
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object).length",Parameter_1,length,int
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object).value",Parameter_2,value,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int).attributeName",Parameter_1,attributeName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int).layoutIndex",Parameter_2,layoutIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.setActualValue(int).value,Parameter_1,value,int
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.<init>(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.<init>(int).length,Parameter_1,length,int
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.setIndex(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.<init>(int).offset,Parameter_1,offset,int
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>(ClassFileEntry).entry,Parameter_1,entry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).name",Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).flags",Parameter_3,flags,long
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).attributes",Parameter_4,attributes,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).className",Parameter_1,className,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).descriptor",Parameter_2,descriptor,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).globalIndex",Parameter_3,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int).value",Parameter_1,value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
"org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int).globalIndex",Parameter_2,globalIndex,int
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.doWrite(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>(CPUTF8).attributeName,Parameter_1,attributeName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>(CPUTF8).value,Parameter_1,value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>(CPUTF8).name,Parameter_1,name,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setCurrentClass(String).string,Parameter_1,string,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setNewClass(String).string,Parameter_1,string,java.lang.String
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSegment(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSuperClass(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcCaseCount",Parameter_1,bcCaseCount,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcCaseValue",Parameter_2,bcCaseValue,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcByte",Parameter_3,bcByte,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcShort",Parameter_4,bcShort,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLocal",Parameter_5,bcLocal,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLabel",Parameter_6,bcLabel,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcIntRef",Parameter_7,bcIntRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcFloatRef",Parameter_8,bcFloatRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLongRef",Parameter_9,bcLongRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcDoubleRef",Parameter_10,bcDoubleRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcStringRef",Parameter_11,bcStringRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcClassRef",Parameter_12,bcClassRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcFieldRef",Parameter_13,bcFieldRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcMethodRef",Parameter_14,bcMethodRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcIMethodRef",Parameter_15,bcIMethodRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcThisField",Parameter_16,bcThisField,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcSuperField",Parameter_17,bcSuperField,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcThisMethod",Parameter_18,bcThisMethod,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcSuperMethod",Parameter_19,bcSuperMethod,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcInitRef",Parameter_20,bcInitRef,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).wideByteCodes",Parameter_21,wideByteCodes,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8).attributeName,Parameter_1,attributeName,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.addAttribute(Attribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.renumber(List).byteCodeOffsets,Parameter_1,byteCodeOffsets,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).maxStack",Parameter_1,maxStack,int
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).maxLocals",Parameter_2,maxLocals,int
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).codePacked",Parameter_3,codePacked,byte[]
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).segment",Parameter_4,segment,org.apache.commons.compress.harmony.unpack200.Segment
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).operandManager",Parameter_5,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).exceptionTable",Parameter_6,exceptionTable,java.util.List
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int).opcode,Parameter_1,opcode,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.applyByteCodeTargetFixup(CodeAttribute).codeAttribute,Parameter_1,codeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.doWrite(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).operandManager",Parameter_1,operandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).segment",Parameter_2,segment,org.apache.commons.compress.harmony.unpack200.Segment
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).codeLength",Parameter_3,codeLength,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPosition(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeIndex(int).byteCodeOffset,Parameter_1,byteCodeOffset,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeTargets(int[]).byteCodeTargets,Parameter_1,byteCodeTargets,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNested(ClassFileEntry[]).nested,Parameter_1,nested,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[]
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNestedPositions(int[][]).nestedPositions,Parameter_1,nestedPositions,int[][]
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int).position",Parameter_2,position,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int).position",Parameter_2,position,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandBytes(int[]).operands,Parameter_1,operands,int[]
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int).operand",Parameter_1,operand,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int).position",Parameter_2,position,int
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setRewrite(int[]).rewrite,Parameter_1,rewrite,int[]
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int).opcode,Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[]).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[]).nested",Parameter_2,nested,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[]
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[]).array,Parameter_1,array,java.lang.Object[]
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8).cpUTF8Value,Parameter_1,cpUTF8Value,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.resolve(ClassConstantPool).pool,Parameter_1,pool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.writeBody(DataOutputStream).dos,Parameter_1,dos,java.io.DataOutputStream
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>(CPClass[]).exceptions,Parameter_1,exceptions,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[]
"org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool).className",Parameter_1,className,java.lang.String
"org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool).cp",Parameter_2,cp,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool
org.apache.commons.compress.harmony.unpack200.IcBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.IcBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).methodAttrIndexes",Parameter_1,methodAttrIndexes,int[][]
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).flags",Parameter_2,flags,long[][]
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).context",Parameter_3,context,int
org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassAttrBands(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[]).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[]).classAttrCalls",Parameter_2,classAttrCalls,int[]
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int).codeFlagsCount",Parameter_2,codeFlagsCount,int
org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeBands(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldAttrBands(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldBands(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[]).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[]).fieldAttrCalls",Parameter_2,fieldAttrCalls,int[]
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).RxA",Parameter_2,RxA,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).RxACount",Parameter_3,RxACount,int[]
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).backwardsCallCounts",Parameter_4,backwardsCallCounts,int[]
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).contextName",Parameter_5,contextName,java.lang.String
org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodAttrBands(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodBands(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[]).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[]).methodAttrCalls",Parameter_2,methodAttrCalls,int[]
org.apache.commons.compress.harmony.unpack200.ClassBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.ClassBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).defaultCodec",Parameter_3,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).counts",Parameter_4,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[]).ints",Parameter_1,ints,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[]).reference",Parameter_2,reference,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[]).ints",Parameter_1,ints,int[][]
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[]).reference",Parameter_2,reference,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).counts",Parameter_4,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).counts",Parameter_4,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).count",Parameter_3,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).hiCodec",Parameter_4,hiCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).loCodec",Parameter_5,loCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).count",Parameter_3,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).codec",Parameter_4,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).hasHi",Parameter_5,hasHi,boolean
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).counts",Parameter_3,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).hiCodec",Parameter_4,hiCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).loCodec",Parameter_5,loCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).counts",Parameter_3,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).codec",Parameter_4,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).hasHi",Parameter_5,hasHi,boolean
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).count",Parameter_4,count,int
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).reference",Parameter_5,reference,java.lang.String[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).codec",Parameter_3,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).counts",Parameter_4,counts,int[]
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).reference",Parameter_5,reference,java.lang.String[]
org.apache.commons.compress.harmony.unpack200.BandSet.read(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.BandSet.unpack(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.BandSet.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.FileBands.read(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.FileBands.<init>(Segment).segment,Parameter_1,segment,org.apache.commons.compress.harmony.unpack200.Segment
org.apache.commons.compress.harmony.unpack200.Archive.available(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.unpack200.Archive.setDeflateHint(boolean).deflateHint,Parameter_1,deflateHint,boolean
org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String).logFileName,Parameter_1,logFileName,java.lang.String
"org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean).logFileName",Parameter_1,logFileName,java.lang.String
"org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean).append",Parameter_2,append,boolean
org.apache.commons.compress.harmony.unpack200.Archive.setQuiet(boolean).quiet,Parameter_1,quiet,boolean
org.apache.commons.compress.harmony.unpack200.Archive.setRemovePackFile(boolean).removePackFile,Parameter_1,removePackFile,boolean
org.apache.commons.compress.harmony.unpack200.Archive.setVerbose(boolean).verbose,Parameter_1,verbose,boolean
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream).outputStream",Parameter_2,outputStream,java.util.jar.JarOutputStream
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String).inputFileName",Parameter_1,inputFileName,java.lang.String
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String).outputFileName",Parameter_2,outputFileName,java.lang.String
org.apache.commons.compress.harmony.unpack200.IMatcher.matches(long).value,Parameter_1,value,long
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[]).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[]).args",Parameter_2,args,java.lang.Object[]
org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String).msg,Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char).arg",Parameter_2,arg,char
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int).arg",Parameter_2,arg,int
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object).arg",Parameter_2,arg,java.lang.Object
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).arg1",Parameter_2,arg1,java.lang.Object
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).arg2",Parameter_3,arg2,java.lang.Object
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[]).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[]).args",Parameter_2,args,java.lang.Object[]
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String).locale",Parameter_1,locale,java.util.Locale
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String).resource",Parameter_2,resource,java.lang.String
org.apache.commons.compress.harmony.pack200.CPClass.compareTo(CPClass).arg0,Parameter_1,arg0,org.apache.commons.compress.harmony.pack200.CPClass
org.apache.commons.compress.harmony.pack200.CPClass.<init>(CPUTF8).utf8,Parameter_1,utf8,org.apache.commons.compress.harmony.pack200.CPUTF8
org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClass(List).cPMethodOrFieldList,Parameter_1,cPMethodOrFieldList,java.util.List
org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClassForConstructor(List).cPMethodList,Parameter_1,cPMethodList,java.util.List
org.apache.commons.compress.harmony.pack200.BcBands.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String).superName",Parameter_2,superName,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).owner",Parameter_2,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).desc",Parameter_4,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int).var",Parameter_1,var,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int).increment",Parameter_2,increment,int
org.apache.commons.compress.harmony.pack200.BcBands.visitInsn(int).opcode,Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int).operand",Parameter_2,operand,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label).label",Parameter_2,label,org.objectweb.asm.Label
org.apache.commons.compress.harmony.pack200.BcBands.visitLabel(Label).label,Parameter_1,label,org.objectweb.asm.Label
org.apache.commons.compress.harmony.pack200.BcBands.visitLdcInsn(Object).cst,Parameter_1,cst,java.lang.Object
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).dflt",Parameter_1,dflt,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).keys",Parameter_2,keys,int[]
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).labels",Parameter_3,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).owner",Parameter_2,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).desc",Parameter_4,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int).dimensions",Parameter_2,dimensions,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).min",Parameter_1,min,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).max",Parameter_2,max,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).dflt",Parameter_3,dflt,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).labels",Parameter_4,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String).type",Parameter_2,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int).var",Parameter_2,var,int
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).cpBands",Parameter_1,cpBands,org.apache.commons.compress.harmony.pack200.CpBands
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).segment",Parameter_2,segment,org.apache.commons.compress.harmony.pack200.Segment
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).effort",Parameter_3,effort,int
org.apache.commons.compress.harmony.pack200.CPFloat.compareTo(CPFloat).obj,Parameter_1,obj,org.apache.commons.compress.harmony.pack200.CPFloat
org.apache.commons.compress.harmony.pack200.CPFloat.<init>(float).theFloat,Parameter_1,theFloat,float
org.apache.commons.compress.harmony.pack200.CPDouble.compareTo(CPDouble).obj,Parameter_1,obj,org.apache.commons.compress.harmony.pack200.CPDouble
org.apache.commons.compress.harmony.pack200.CPDouble.<init>(double).theDouble,Parameter_1,theDouble,double
org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.setIndex(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.pack200.CPMethodOrField.compareTo(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClass(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClassForConstructor(int).index,Parameter_1,index,int
"org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType).className",Parameter_1,className,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType).nameAndType",Parameter_2,nameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nameRU",Parameter_2,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).tags",Parameter_3,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).values",Parameter_4,values,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).caseArrayN",Parameter_5,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestTypeRS",Parameter_6,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestNameRU",Parameter_7,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestPairN",Parameter_8,nestPairN,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).numParams",Parameter_1,numParams,int
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).annoN",Parameter_2,annoN,int[]
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).pairN",Parameter_3,pairN,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).typeRS",Parameter_4,typeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nameRU",Parameter_5,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).tags",Parameter_6,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).values",Parameter_7,values,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).caseArrayN",Parameter_8,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestTypeRS",Parameter_9,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestNameRU",Parameter_10,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestPairN",Parameter_11,nestPairN,java.util.List
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nextString(Iterator).valuesIterator,Parameter_1,valuesIterator,java.util.Iterator
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.tagListToArray(List).list,Parameter_1,list,java.util.List
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).cpBands",Parameter_3,cpBands,org.apache.commons.compress.harmony.pack200.CpBands
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).segmentHeader",Parameter_4,segmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).effort",Parameter_5,effort,int
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).value",Parameter_1,value,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).tags",Parameter_2,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).values",Parameter_3,values,java.util.List
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).segmentUnit",Parameter_1,segmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).options",Parameter_3,options,org.apache.commons.compress.harmony.pack200.PackingOptions
"org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[]).segmentUnit",Parameter_1,segmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit
"org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[]).attributes",Parameter_2,attributes,org.objectweb.asm.Attribute[]
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).version",Parameter_1,version,int
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).access",Parameter_2,access,int
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).superName",Parameter_5,superName,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).interfaces",Parameter_6,interfaces,java.lang.String[]
"org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean).visible",Parameter_2,visible,boolean
org.apache.commons.compress.harmony.pack200.Segment.visitAttribute(Attribute).attribute,Parameter_1,attribute,org.objectweb.asm.Attribute
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).flags",Parameter_1,flags,int
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).value",Parameter_5,value,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).outerName",Parameter_2,outerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).innerName",Parameter_3,innerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).flags",Parameter_4,flags,int
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).flags",Parameter_1,flags,int
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).exceptions",Parameter_5,exceptions,java.lang.String[]
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).owner",Parameter_1,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String).source",Parameter_1,source,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String).debug",Parameter_2,debug,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object).value",Parameter_2,value,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String).arg0",Parameter_1,arg0,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String).arg1",Parameter_2,arg1,java.lang.String
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitArray(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).value",Parameter_3,value,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object).value",Parameter_2,value,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String).desc",Parameter_2,desc,java.lang.String
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitArray(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).value",Parameter_3,value,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean).visible",Parameter_2,visible,boolean
org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAttribute(Attribute).attribute,Parameter_1,attribute,org.objectweb.asm.Attribute
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean).visible",Parameter_2,visible,boolean
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAttribute(Attribute).attribute,Parameter_1,attribute,org.objectweb.asm.Attribute
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).owner",Parameter_2,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).desc",Parameter_4,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg0",Parameter_1,arg0,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg1",Parameter_2,arg1,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg2",Parameter_3,arg2,java.lang.Object[]
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg3",Parameter_4,arg3,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg4",Parameter_5,arg4,java.lang.Object[]
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int).var",Parameter_1,var,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int).increment",Parameter_2,increment,int
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitInsn(int).opcode,Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int).operand",Parameter_2,operand,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label).label",Parameter_2,label,org.objectweb.asm.Label
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLabel(Label).label,Parameter_1,label,org.objectweb.asm.Label
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLdcInsn(Object).cst,Parameter_1,cst,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label).line",Parameter_1,line,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label).start",Parameter_2,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).signature",Parameter_3,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).start",Parameter_4,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).end",Parameter_5,end,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).index",Parameter_6,index,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).dflt",Parameter_1,dflt,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).keys",Parameter_2,keys,int[]
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).labels",Parameter_3,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int).maxStack",Parameter_1,maxStack,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int).maxLocals",Parameter_2,maxLocals,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).owner",Parameter_2,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).desc",Parameter_4,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int).desc",Parameter_1,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int).dimensions",Parameter_2,dimensions,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).parameter",Parameter_1,parameter,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).visible",Parameter_3,visible,boolean
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).min",Parameter_1,min,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).max",Parameter_2,max,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).dflt",Parameter_3,dflt,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).labels",Parameter_4,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).start",Parameter_1,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).end",Parameter_2,end,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).handler",Parameter_3,handler,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).type",Parameter_4,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String).type",Parameter_2,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int).opcode",Parameter_1,opcode,int
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int).var",Parameter_2,var,int
org.apache.commons.compress.harmony.pack200.CPInt.compareTo(CPInt).obj,Parameter_1,obj,org.apache.commons.compress.harmony.pack200.CPInt
org.apache.commons.compress.harmony.pack200.CPInt.<init>(int).theInt,Parameter_1,theInt,int
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).propertyName",Parameter_1,propertyName,java.lang.String
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).oldValue",Parameter_2,oldValue,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).newValue",Parameter_3,newValue,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream).file",Parameter_1,file,java.util.jar.JarFile
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream).in",Parameter_1,in,java.util.jar.JarInputStream
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream).out",Parameter_2,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>(String).message,Parameter_1,message,java.lang.String
org.apache.commons.compress.harmony.pack200.CPLong.compareTo(CPLong).obj,Parameter_1,obj,org.apache.commons.compress.harmony.pack200.CPLong
org.apache.commons.compress.harmony.pack200.CPLong.<init>(long).theLong,Parameter_1,theLong,long
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).layoutMap",Parameter_1,layoutMap,java.util.Map
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).availableIndices",Parameter_2,availableIndices,int[]
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).contextType",Parameter_3,contextType,int
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addHighIndices(int[]).availableIndices,Parameter_1,availableIndices,int[]
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).segment",Parameter_1,segment,org.apache.commons.compress.harmony.pack200.Segment
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).effort",Parameter_2,effort,int
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).attributePrototypes",Parameter_3,attributePrototypes,org.objectweb.asm.Attribute[]
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).index",Parameter_1,index,int
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).contextType",Parameter_2,contextType,int
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).name",Parameter_3,name,org.apache.commons.compress.harmony.pack200.CPUTF8
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).layout",Parameter_4,layout,org.apache.commons.compress.harmony.pack200.CPUTF8
org.apache.commons.compress.harmony.pack200.SegmentHeader.addMajorVersion(int).major,Parameter_1,major,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.appendBandCodingSpecifier(int).specifier,Parameter_1,specifier,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.SegmentHeader.setAttribute_definition_count(int).attribute_definition_count,Parameter_1,attribute_definition_count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setClass_count(int).class_count,Parameter_1,class_count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Class_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Descr_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Double_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Field_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Float_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Imethod_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Int_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Long_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Method_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Signature_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_String_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Utf8_count(int).count,Parameter_1,count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setDeflate_hint(boolean).deflate_hint,Parameter_1,deflate_hint,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setFile_count(int).file_count,Parameter_1,file_count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_all_code_flags(boolean).have_all_code_flags,Parameter_1,have_all_code_flags,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_class_flags_hi(boolean).have_class_flags_hi,Parameter_1,have_class_flags_hi,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_code_flags_hi(boolean).have_code_flags_hi,Parameter_1,have_code_flags_hi,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_field_flags_hi(boolean).have_field_flags_hi,Parameter_1,have_field_flags_hi,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_method_flags_hi(boolean).have_method_flags_hi,Parameter_1,have_method_flags_hi,boolean
org.apache.commons.compress.harmony.pack200.SegmentHeader.setIc_count(int).ic_count,Parameter_1,ic_count,int
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveFileCounts(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveSpecialCounts(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeClassCounts(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeCpCounts(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.add(int).obj,Parameter_1,obj,int
org.apache.commons.compress.harmony.pack200.CPSignature.compareTo(Object).arg0,Parameter_1,arg0,java.lang.Object
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).signature",Parameter_1,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).signatureForm",Parameter_2,signatureForm,org.apache.commons.compress.harmony.pack200.CPUTF8
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).classes",Parameter_3,classes,java.util.List
"org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String).attributeName",Parameter_1,attributeName,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String).action",Parameter_2,action,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String).attributeName",Parameter_1,attributeName,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String).action",Parameter_2,action,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String).attributeName",Parameter_1,attributeName,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String).action",Parameter_2,action,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String).attributeName",Parameter_1,attributeName,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String).action",Parameter_2,action,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).prototypes",Parameter_1,prototypes,java.util.List
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).attributeActions",Parameter_2,attributeActions,java.util.Map
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).tag",Parameter_3,tag,int
org.apache.commons.compress.harmony.pack200.PackingOptions.addPassFile(String).passFileName,Parameter_1,passFileName,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).map",Parameter_1,map,java.util.Map
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).type",Parameter_2,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).defaultValue",Parameter_3,defaultValue,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownClassAttributeAction(String).type,Parameter_1,type,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownCodeAttributeAction(String).type,Parameter_1,type,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownFieldAttributeAction(String).type,Parameter_1,type,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownMethodAttributeAction(String).type,Parameter_1,type,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.isPassFile(String).passFileName,Parameter_1,passFileName,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.removePassFile(String).passFileName,Parameter_1,passFileName,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.setDeflateHint(String).deflateHint,Parameter_1,deflateHint,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.setEffort(int).effort,Parameter_1,effort,int
org.apache.commons.compress.harmony.pack200.PackingOptions.setGzip(boolean).gzip,Parameter_1,gzip,boolean
org.apache.commons.compress.harmony.pack200.PackingOptions.setKeepFileOrder(boolean).keepFileOrder,Parameter_1,keepFileOrder,boolean
org.apache.commons.compress.harmony.pack200.PackingOptions.setLogFile(String).logFile,Parameter_1,logFile,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.setModificationTime(String).modificationTime,Parameter_1,modificationTime,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.setQuiet(boolean).quiet,Parameter_1,quiet,boolean
org.apache.commons.compress.harmony.pack200.PackingOptions.setSegmentLimit(long).segmentLimit,Parameter_1,segmentLimit,long
org.apache.commons.compress.harmony.pack200.PackingOptions.setStripDebug(boolean).stripDebug,Parameter_1,stripDebug,boolean
org.apache.commons.compress.harmony.pack200.PackingOptions.setUnknownAttributeAction(String).unknownAttributeAction,Parameter_1,unknownAttributeAction,java.lang.String
org.apache.commons.compress.harmony.pack200.PackingOptions.setVerbose(boolean).verbose,Parameter_1,verbose,boolean
org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long).last",Parameter_2,last,long
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).firstValue",Parameter_3,firstValue,int
org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int).value,Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int).last",Parameter_2,last,int
org.apache.commons.compress.harmony.pack200.BHSDCodec.encodes(long).value,Parameter_1,value,long
org.apache.commons.compress.harmony.pack200.BHSDCodec.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int).b",Parameter_1,b,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int).h",Parameter_2,h,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).b",Parameter_1,b,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).h",Parameter_2,h,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).s",Parameter_3,s,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).b",Parameter_1,b,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).h",Parameter_2,h,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).s",Parameter_3,s,int
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).d",Parameter_4,d,int
org.apache.commons.compress.harmony.pack200.CPUTF8.compareTo(Object).arg0,Parameter_1,arg0,java.lang.Object
org.apache.commons.compress.harmony.pack200.CPUTF8.<init>(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[]).chars",Parameter_1,chars,java.util.List
"org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[]).charArray",Parameter_2,charArray,char[]
org.apache.commons.compress.harmony.pack200.CpBands.addCPClass(String).className,Parameter_1,className,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.addCPUtf8(String).utf8,Parameter_1,utf8,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.existsCpClass(String).className,Parameter_1,className,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.getConstant(Object).value,Parameter_1,value,java.lang.Object
org.apache.commons.compress.harmony.pack200.CpBands.getCPClass(String).className,Parameter_1,className,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).cpClass",Parameter_1,cpClass,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).owner",Parameter_1,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).cpClass",Parameter_1,cpClass,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).owner",Parameter_1,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).cpClass",Parameter_1,cpClass,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).owner",Parameter_1,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String).signature",Parameter_2,signature,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.getCPSignature(String).signature,Parameter_1,signature,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.getCPUtf8(String).utf8,Parameter_1,utf8,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.removeCpUtf8(String).string,Parameter_1,string,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.writeCpClass(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpDescr(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpDouble(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpFloat(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpInt(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpLong(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).cp",Parameter_1,cp,java.util.Set
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).name",Parameter_3,name,java.lang.String
org.apache.commons.compress.harmony.pack200.CpBands.writeCpSignature(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpString(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.CpBands.writeCpUtf8(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int).segment",Parameter_1,segment,org.apache.commons.compress.harmony.pack200.Segment
"org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int).effort",Parameter_2,effort,int
org.apache.commons.compress.harmony.pack200.NewAttributeBands.addAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
org.apache.commons.compress.harmony.pack200.NewAttributeBands.getCodec(String).layoutElement,Parameter_1,layoutElement,java.lang.String
org.apache.commons.compress.harmony.pack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader).reader,Parameter_1,reader,java.io.StringReader
org.apache.commons.compress.harmony.pack200.NewAttributeBands.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readBody(StringReader).reader,Parameter_1,reader,java.io.StringReader
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream).i",Parameter_1,i,int
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextAttributeElement(StringReader).reader,Parameter_1,reader,java.io.StringReader
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextLayoutElement(StringReader).reader,Parameter_1,reader,java.io.StringReader
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextUnionCase(StringReader).reader,Parameter_1,reader,java.io.StringReader
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNumber(StringReader).stream,Parameter_1,stream,java.io.StringReader
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readUpToMatchingBracket(StringReader).reader,Parameter_1,reader,java.io.StringReader
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).i",Parameter_1,i,int
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).currentCallable",Parameter_2,currentCallable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).layoutElement",Parameter_3,layoutElement,org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).effort",Parameter_1,effort,int
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).cpBands",Parameter_2,cpBands,org.apache.commons.compress.harmony.pack200.CpBands
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).header",Parameter_3,header,org.apache.commons.compress.harmony.pack200.SegmentHeader
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).def",Parameter_4,def,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.pack(OutputStream).ouputStream,Parameter_1,ouputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.setCallable(Callable).callable,Parameter_1,callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallableIndex(int).backwardsCallableIndex,Parameter_1,backwardsCallableIndex,int
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).relative",Parameter_1,relative,java.util.List
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).bciRenumbering",Parameter_2,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).labelsToOffsets",Parameter_3,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.getLength(char).uint_type,Parameter_1,uint_type,char
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream).attribute",Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.hasTag(long).l,Parameter_1,l,long
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.CPNameAndType.compareTo(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature).name",Parameter_1,name,org.apache.commons.compress.harmony.pack200.CPUTF8
"org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature).signature",Parameter_2,signature,org.apache.commons.compress.harmony.pack200.CPSignature
org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions).options,Parameter_1,options,org.apache.commons.compress.harmony.pack200.PackingOptions
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream).jarFile",Parameter_1,jarFile,java.util.jar.JarFile
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream).jarInputStream",Parameter_1,jarInputStream,java.util.jar.JarInputStream
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean).jarFile",Parameter_1,jarFile,java.util.jar.JarFile
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean).keepFileOrder",Parameter_2,keepFileOrder,boolean
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean).jarInputStream",Parameter_1,jarInputStream,java.util.jar.JarInputStream
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean).keepFileOrder",Parameter_2,keepFileOrder,boolean
org.apache.commons.compress.harmony.pack200.PackingUtils.log(String).message,Parameter_1,message,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream).jarEntry",Parameter_1,jarEntry,java.util.jar.JarEntry
"org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List).packingFileList,Parameter_1,packingFileList,java.util.List
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.log(LogRecord).logRecord,Parameter_1,logRecord,java.util.logging.LogRecord
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.setVerbose(boolean).isVerbose,Parameter_1,isVerbose,boolean
"org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String).resourceBundleName",Parameter_2,resourceBundleName,java.lang.String
org.apache.commons.compress.harmony.pack200.NewAttribute.addContext(int).context,Parameter_1,context,int
org.apache.commons.compress.harmony.pack200.NewAttribute.getLabel(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(int).context,Parameter_1,context,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Parameter_1,cr,org.objectweb.asm.ClassReader
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Parameter_2,off,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Parameter_3,len,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Parameter_4,buf,char[]
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Parameter_5,codeOff,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Parameter_6,labels,org.objectweb.asm.Label[]
org.apache.commons.compress.harmony.pack200.NewAttribute.readClass(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.pack200.NewAttribute.readConst(int).index,Parameter_1,index,int
org.apache.commons.compress.harmony.pack200.NewAttribute.readUTF8(int).index,Parameter_1,index,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).classReader",Parameter_1,classReader,org.objectweb.asm.ClassReader
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).type",Parameter_2,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).layout",Parameter_3,layout,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).contents",Parameter_4,contents,byte[]
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).buf",Parameter_5,buf,char[]
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).codeOff",Parameter_6,codeOff,int
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).labels",Parameter_7,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).layout",Parameter_2,layout,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).context",Parameter_3,context,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Parameter_1,cr,org.objectweb.asm.ClassReader
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Parameter_2,off,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Parameter_3,len,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Parameter_4,buf,char[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Parameter_5,codeOff,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Parameter_6,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Parameter_1,cr,org.objectweb.asm.ClassReader
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Parameter_2,off,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Parameter_3,len,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Parameter_4,buf,char[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Parameter_5,codeOff,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Parameter_6,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int).context",Parameter_2,context,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Parameter_1,cr,org.objectweb.asm.ClassReader
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Parameter_2,off,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Parameter_3,len,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Parameter_4,buf,char[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Parameter_5,codeOff,int
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Parameter_6,labels,org.objectweb.asm.Label[]
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int).type",Parameter_1,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int).context",Parameter_2,context,int
org.apache.commons.compress.harmony.pack200.Pack200Adapter.addPropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
org.apache.commons.compress.harmony.pack200.Pack200Adapter.completed(double).value,Parameter_1,value,double
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).propertyName",Parameter_1,propertyName,java.lang.String
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).oldValue",Parameter_2,oldValue,java.lang.Object
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).newValue",Parameter_3,newValue,java.lang.Object
org.apache.commons.compress.harmony.pack200.Pack200Adapter.removePropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
org.apache.commons.compress.harmony.pack200.CPString.compareTo(CPString).arg0,Parameter_1,arg0,org.apache.commons.compress.harmony.pack200.CPString
org.apache.commons.compress.harmony.pack200.CPString.<init>(CPUTF8).utf8,Parameter_1,utf8,org.apache.commons.compress.harmony.pack200.CPUTF8
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).outerName",Parameter_2,outerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).innerName",Parameter_3,innerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).flags",Parameter_4,flags,int
"org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple).outerName",Parameter_1,outerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple).icTuple",Parameter_2,icTuple,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple
org.apache.commons.compress.harmony.pack200.IcBands.getIcTuple(CPClass).inner,Parameter_1,inner,org.apache.commons.compress.harmony.pack200.CPClass
org.apache.commons.compress.harmony.pack200.IcBands.getInnerClassesForOuter(String).outerClassName,Parameter_1,outerClassName,java.lang.String
org.apache.commons.compress.harmony.pack200.IcBands.getOuter(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).outerName",Parameter_2,outerName,java.lang.String
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).innerName",Parameter_3,innerName,java.lang.String
org.apache.commons.compress.harmony.pack200.IcBands.pack(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).segmentHeader",Parameter_1,segmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).cpBands",Parameter_2,cpBands,org.apache.commons.compress.harmony.pack200.CpBands
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).effort",Parameter_3,effort,int
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).C",Parameter_1,C,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).F",Parameter_2,F,int
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).C2",Parameter_3,C2,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).N",Parameter_4,N,org.apache.commons.compress.harmony.pack200.CPUTF8
org.apache.commons.compress.harmony.pack200.IntList.add(int).object,Parameter_1,object,int
"org.apache.commons.compress.harmony.pack200.IntList.add(int,int).location",Parameter_1,location,int
"org.apache.commons.compress.harmony.pack200.IntList.add(int,int).object",Parameter_2,object,int
org.apache.commons.compress.harmony.pack200.IntList.addAll(IntList).list,Parameter_1,list,org.apache.commons.compress.harmony.pack200.IntList
org.apache.commons.compress.harmony.pack200.IntList.get(int).location,Parameter_1,location,int
org.apache.commons.compress.harmony.pack200.IntList.growAtEnd(int).required,Parameter_1,required,int
org.apache.commons.compress.harmony.pack200.IntList.growAtFront(int).required,Parameter_1,required,int
"org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int).location",Parameter_1,location,int
"org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int).required",Parameter_2,required,int
org.apache.commons.compress.harmony.pack200.IntList.increment(int).location,Parameter_1,location,int
org.apache.commons.compress.harmony.pack200.IntList.remove(int).location,Parameter_1,location,int
org.apache.commons.compress.harmony.pack200.IntList.<init>(int).capacity,Parameter_1,capacity,int
org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String).descriptor,Parameter_1,descriptor,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).context",Parameter_1,context,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).visible",Parameter_3,visible,boolean
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nameRU",Parameter_4,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).tags",Parameter_5,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).values",Parameter_6,values,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).caseArrayN",Parameter_7,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestTypeRS",Parameter_8,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestNameRU",Parameter_9,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestPairN",Parameter_10,nestPairN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nameRU",Parameter_1,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).tags",Parameter_2,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).values",Parameter_3,values,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).caseArrayN",Parameter_4,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestTypeRS",Parameter_5,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestNameRU",Parameter_6,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestPairN",Parameter_7,nestPairN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).major",Parameter_1,major,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).flags",Parameter_2,flags,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).className",Parameter_3,className,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).superName",Parameter_5,superName,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).interfaces",Parameter_6,interfaces,java.lang.String[]
org.apache.commons.compress.harmony.pack200.ClassBands.addClassAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
org.apache.commons.compress.harmony.pack200.ClassBands.addCodeAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).owner",Parameter_1,owner,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).flags",Parameter_1,flags,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).value",Parameter_5,value,java.lang.Object
org.apache.commons.compress.harmony.pack200.ClassBands.addFieldAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).start",Parameter_1,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).end",Parameter_2,end,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).handler",Parameter_3,handler,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).type",Parameter_4,type,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label).line",Parameter_1,line,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label).start",Parameter_2,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).signature",Parameter_3,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).start",Parameter_4,start,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).end",Parameter_5,end,org.objectweb.asm.Label
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).indx",Parameter_6,indx,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int).maxStack",Parameter_1,maxStack,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int).maxLocals",Parameter_2,maxLocals,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).flags",Parameter_1,flags,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).desc",Parameter_3,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).signature",Parameter_4,signature,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).exceptions",Parameter_5,exceptions,java.lang.String[]
org.apache.commons.compress.harmony.pack200.ClassBands.addMethodAttribute(NewAttribute).attribute,Parameter_1,attribute,org.apache.commons.compress.harmony.pack200.NewAttribute
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).parameter",Parameter_1,parameter,int
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).visible",Parameter_3,visible,boolean
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nameRU",Parameter_4,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).tags",Parameter_5,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).values",Parameter_6,values,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).caseArrayN",Parameter_7,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestTypeRS",Parameter_8,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestNameRU",Parameter_9,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestPairN",Parameter_10,nestPairN,java.util.List
org.apache.commons.compress.harmony.pack200.ClassBands.addSourceFile(String).source,Parameter_1,source,java.lang.String
org.apache.commons.compress.harmony.pack200.ClassBands.currentClassReferencesInnerClass(CPClass).inner,Parameter_1,inner,org.apache.commons.compress.harmony.pack200.CPClass
"org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map).bciRenumbering",Parameter_1,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map).labelsToOffsets",Parameter_2,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.ClassBands.getInts(CPClass[]).cpClasses,Parameter_1,cpClasses,org.apache.commons.compress.harmony.pack200.CPClass[]
org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClass(String).possibleInner,Parameter_1,possibleInner,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass).possibleInner",Parameter_1,possibleInner,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass).possibleOuter",Parameter_2,possibleOuter,org.apache.commons.compress.harmony.pack200.CPClass
org.apache.commons.compress.harmony.pack200.ClassBands.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).list",Parameter_1,list,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).bciRenumbering",Parameter_2,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).labelsToOffsets",Parameter_3,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).relative",Parameter_1,relative,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).firstOffset",Parameter_2,firstOffset,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).list",Parameter_3,list,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).bciRenumbering",Parameter_4,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).labelsToOffsets",Parameter_5,labelsToOffsets,java.util.Map
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).relative",Parameter_1,relative,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).list",Parameter_2,list,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).bciRenumbering",Parameter_3,bciRenumbering,org.apache.commons.compress.harmony.pack200.IntList
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).labelsToOffsets",Parameter_4,labelsToOffsets,java.util.Map
org.apache.commons.compress.harmony.pack200.ClassBands.sum(int[]).ints,Parameter_1,ints,int[]
org.apache.commons.compress.harmony.pack200.ClassBands.writeClassAttributeBands(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeAttributeBands(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeBands(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.ClassBands.writeFieldAttributeBands(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.ClassBands.writeMethodAttributeBands(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).segment",Parameter_1,segment,org.apache.commons.compress.harmony.pack200.Segment
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).numClasses",Parameter_2,numClasses,int
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).effort",Parameter_3,effort,int
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).stripDebug",Parameter_4,stripDebug,boolean
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).parameter",Parameter_1,parameter,int
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).desc",Parameter_2,desc,java.lang.String
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nameRU",Parameter_3,nameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).tags",Parameter_4,tags,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).values",Parameter_5,values,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).caseArrayN",Parameter_6,caseArrayN,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestTypeRS",Parameter_7,nestTypeRS,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestNameRU",Parameter_8,nestNameRU,java.util.List
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestPairN",Parameter_9,nestPairN,java.util.List
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.<init>(int).numParams,Parameter_1,numParams,int
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).band",Parameter_2,band,int[]
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).defaultCodec",Parameter_3,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
org.apache.commons.compress.harmony.pack200.BandSet.cpEntryListToArray(List).list,Parameter_1,list,java.util.List
org.apache.commons.compress.harmony.pack200.BandSet.cpEntryOrNullListToArray(List).list,Parameter_1,list,java.util.List
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).ints",Parameter_2,ints,int[]
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).defaultCodec",Parameter_3,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).flags",Parameter_2,flags,long[]
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).loCodec",Parameter_3,loCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).hiCodec",Parameter_4,hiCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).haveHiFlags",Parameter_5,haveHiFlags,boolean
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).flags",Parameter_2,flags,long[][]
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).loCodec",Parameter_3,loCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).hiCodec",Parameter_4,hiCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).haveHiFlags",Parameter_5,haveHiFlags,boolean
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec).codec",Parameter_2,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec).band",Parameter_1,band,int[]
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec).codec",Parameter_2,codec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).band",Parameter_1,band,int[]
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).defaultCodec",Parameter_2,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).bandData",Parameter_3,bandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).results",Parameter_4,results,org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults
org.apache.commons.compress.harmony.pack200.BandSet.flatten(long[][]).flags,Parameter_1,flags,long[][]
org.apache.commons.compress.harmony.pack200.BandSet.integerListToArray(List).integerList,Parameter_1,integerList,java.util.List
org.apache.commons.compress.harmony.pack200.BandSet.longListToArray(List).longList,Parameter_1,longList,java.util.List
org.apache.commons.compress.harmony.pack200.BandSet.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.harmony.pack200.BandSet.timeToStop(BandAnalysisResults).results,Parameter_1,results,org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).band",Parameter_1,band,int[]
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).defaultCodec",Parameter_2,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).bandData",Parameter_3,bandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).results",Parameter_4,results,org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).encoded",Parameter_5,encoded,byte[]
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).potentialCodecs",Parameter_6,potentialCodecs,org.apache.commons.compress.harmony.pack200.BHSDCodec[]
"org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader).effort",Parameter_1,effort,int
"org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader).header",Parameter_2,header,org.apache.commons.compress.harmony.pack200.SegmentHeader
org.apache.commons.compress.harmony.pack200.FileBands.flatten(byte[][]).bytes,Parameter_1,bytes,byte[][]
org.apache.commons.compress.harmony.pack200.FileBands.pack(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).cpBands",Parameter_1,cpBands,org.apache.commons.compress.harmony.pack200.CpBands
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).segmentHeader",Parameter_2,segmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).options",Parameter_3,options,org.apache.commons.compress.harmony.pack200.PackingOptions
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).segmentUnit",Parameter_4,segmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).effort",Parameter_5,effort,int
org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long).last",Parameter_2,last,long
"org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.harmony.pack200.RunCodec.encode(int).value,Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int).last",Parameter_2,last,int
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec).codecUsed",Parameter_2,codecUsed,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec).band",Parameter_1,band,int[]
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec).codecUsed",Parameter_2,codecUsed,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).k",Parameter_1,k,int
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).aCodec",Parameter_2,aCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).bCodec",Parameter_3,bCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long).last",Parameter_2,last,long
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).firstValue",Parameter_3,firstValue,int
org.apache.commons.compress.harmony.pack200.Codec.encode(int).value,Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.Codec.encode(int,int).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.Codec.encode(int,int).last",Parameter_2,last,int
org.apache.commons.compress.harmony.pack200.Codec.encode(int[]).ints,Parameter_1,ints,int[]
org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long).last",Parameter_2,last,long
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream).n",Parameter_1,n,int
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int).value,Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int).last",Parameter_2,last,int
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).favoured",Parameter_1,favoured,int[]
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).tokens",Parameter_2,tokens,int[]
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).unfavoured",Parameter_3,unfavoured,int[]
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).favouredCodec",Parameter_1,favouredCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).tokenCodec",Parameter_2,tokenCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).unvafouredCodec",Parameter_3,unvafouredCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).favouredCodec",Parameter_1,favouredCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).l",Parameter_2,l,int
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).unfavouredCodec",Parameter_3,unfavouredCodec,org.apache.commons.compress.harmony.pack200.Codec
org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int).i,Parameter_1,i,int
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).value",Parameter_1,value,int
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).defaultCodec",Parameter_3,defaultCodec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec).codec",Parameter_1,codec,org.apache.commons.compress.harmony.pack200.Codec
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec).defaultForBand",Parameter_2,defaultForBand,org.apache.commons.compress.harmony.pack200.Codec
org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec).defaultCodec,Parameter_1,defaultCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[]).item",Parameter_1,item,int
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[]).buf",Parameter_2,buf,char[]
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUnsignedShort(int).index,Parameter_1,index,int
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[]).arg0",Parameter_1,arg0,int
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[]).arg1",Parameter_2,arg1,char[]
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.setFileName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).packingFile",Parameter_1,packingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).javaClasses",Parameter_2,javaClasses,java.util.List
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).files",Parameter_3,files,java.util.List
org.apache.commons.compress.harmony.pack200.Archive.estimateSize(PackingFile).packingFile,Parameter_1,packingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile
org.apache.commons.compress.harmony.pack200.Archive.splitIntoSegments(List).packingFileList,Parameter_1,packingFileList,java.util.List
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).jarFile",Parameter_1,jarFile,java.util.jar.JarFile
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).options",Parameter_3,options,org.apache.commons.compress.harmony.pack200.PackingOptions
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).inputStream",Parameter_1,inputStream,java.util.jar.JarInputStream
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).options",Parameter_3,options,org.apache.commons.compress.harmony.pack200.PackingOptions
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.setContents(byte[]).contents,Parameter_1,contents,byte[]
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry).jarEntry",Parameter_2,jarEntry,java.util.jar.JarEntry
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).contents",Parameter_2,contents,byte[]
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).modtime",Parameter_3,modtime,long
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.addPackedByteAmount(int).amount,Parameter_1,amount,int
"org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List).classes",Parameter_1,classes,java.util.List
"org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List).files",Parameter_2,files,java.util.List
org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>(String).format,Parameter_1,format,java.lang.String
org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).names",Parameter_1,names,java.util.Set
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).provider",Parameter_2,provider,org.apache.commons.compress.archivers.ArchiveStreamProvider
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).map",Parameter_3,map,java.util.TreeMap
org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).actualEncoding",Parameter_3,actualEncoding,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).actualEncoding",Parameter_3,actualEncoding,java.lang.String
org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String).entryEncoding,Parameter_1,entryEncoding,java.lang.String
org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(String).entryEncoding,Parameter_1,entryEncoding,java.lang.String
org.apache.commons.compress.archivers.ArchiveException.<init>(String).message,Parameter_1,message,java.lang.String
"org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception).message",Parameter_1,message,java.lang.String
"org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception).cause",Parameter_2,cause,java.lang.Exception
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream).is,Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String).is",Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String).encoding",Parameter_2,encoding,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String).msg,Parameter_1,msg,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable).msg",Parameter_1,msg,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable).cause",Parameter_2,cause,java.lang.Throwable
org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(Throwable).cause,Parameter_1,cause,java.lang.Throwable
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).ino",Parameter_1,ino,int
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).parentIno",Parameter_2,parentIno,int
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).type",Parameter_3,type,int
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).name",Parameter_4,name,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(String).devname,Parameter_1,devname,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(Date).dumpDate,Parameter_1,dumpDate,java.util.Date
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(String).fileSystem,Parameter_1,fileSystem,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(int).firstrec,Parameter_1,firstrec,int
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(int).flags,Parameter_1,flags,int
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(String).hostname,Parameter_1,hostname,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(String).label,Parameter_1,label,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(int).level,Parameter_1,level,int
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(int).ntrec,Parameter_1,ntrec,int
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(Date).previousDumpDate,Parameter_1,previousDumpDate,java.util.Date
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(int).volume,Parameter_1,volume,int
"org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(String).alg,Parameter_1,alg,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[]).buffer,Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).encoding",Parameter_1,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).b",Parameter_2,b,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).len",Parameter_4,len,int
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[]).buffer,Parameter_1,buffer,byte[]
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[]).buffer,Parameter_1,buffer,byte[]
org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(long).offset,Parameter_1,offset,long
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean).decompress,Parameter_1,decompress,boolean
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.dump.TapeInputStream.readRange(int).len,Parameter_1,len,int
"org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean).recsPerBlock",Parameter_1,recsPerBlock,int
"org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean).isCompressed",Parameter_2,isCompressed,boolean
org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long).len,Parameter_1,len,long
org.apache.commons.compress.archivers.dump.TapeInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[]).buffer,Parameter_1,buffer,byte[]
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(Object).o,Parameter_1,o,java.lang.Object
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int).idx,Parameter_1,idx,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date).atime,Parameter_1,atime,java.util.Date
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(Date).ctime,Parameter_1,ctime,java.util.Date
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(boolean).isDeleted,Parameter_1,isDeleted,boolean
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(int).generation,Parameter_1,generation,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int).gid,Parameter_1,gid,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date).mtime,Parameter_1,mtime,java.util.Date
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int).mode,Parameter_1,mode,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(int).nlink,Parameter_1,nlink,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long).offset,Parameter_1,offset,long
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String).simpleName,Parameter_1,simpleName,java.lang.String
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE).type,Parameter_1,type,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int).uid,Parameter_1,uid,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(int).volume,Parameter_1,volume,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(byte[]).buffer,Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String).simpleName",Parameter_2,simpleName,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).simpleName",Parameter_2,simpleName,java.lang.String
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).ino",Parameter_3,ino,int
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).type",Parameter_4,type,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.find(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCdata(int).idx,Parameter_1,idx,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.setIno(int).ino,Parameter_1,ino,int
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.find(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.find(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.find(int).code,Parameter_1,code,int
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).inputStream",Parameter_2,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).archiverName",Parameter_1,archiverName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).encoding",Parameter_3,encoding,java.lang.String
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String).encoding",Parameter_2,encoding,java.lang.String
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(JarEntry).entry,Parameter_1,entry,java.util.jar.JarEntry
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipEntry).entry,Parameter_1,entry,java.util.zip.ZipEntry
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).folderFirstPackStreamIndex",Parameter_1,folderFirstPackStreamIndex,int[]
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).packStreamOffsets",Parameter_2,packStreamOffsets,long[]
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).folderFirstFileIndex",Parameter_3,folderFirstFileIndex,int[]
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).fileFolderIndex",Parameter_4,fileFolderIndex,int[]
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderOffset",Parameter_1,nextHeaderOffset,long
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderSize",Parameter_2,nextHeaderSize,long
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderCrc",Parameter_3,nextHeaderCrc,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date).date,Parameter_1,date,java.util.Date
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long).ntfsTime,Parameter_1,ntfsTime,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable).c1",Parameter_1,c1,java.lang.Iterable
"org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable).c2",Parameter_2,c2,java.lang.Iterable
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date).accessDate,Parameter_1,accessDate,java.util.Date
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long).ntfsAccessDate,Parameter_1,ntfsAccessDate,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean).isAntiItem,Parameter_1,isAntiItem,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(int).crc,Parameter_1,crc,int
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long).crc,Parameter_1,crc,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable).methods,Parameter_1,methods,java.lang.Iterable
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(SevenZMethodConfiguration[]).methods,Parameter_1,methods,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[]
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(int).crc,Parameter_1,crc,int
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long).crc,Parameter_1,crc,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date).creationDate,Parameter_1,creationDate,java.util.Date
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long).ntfsCreationDate,Parameter_1,ntfsCreationDate,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean).isDirectory,Parameter_1,isDirectory,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean).hasAcessDate,Parameter_1,hasAcessDate,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean).hasCrc,Parameter_1,hasCrc,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean).hasCreationDate,Parameter_1,hasCreationDate,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean).hasLastModifiedDate,Parameter_1,hasLastModifiedDate,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean).hasStream,Parameter_1,hasStream,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean).hasWindowsAttributes,Parameter_1,hasWindowsAttributes,boolean
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date).lastModifiedDate,Parameter_1,lastModifiedDate,java.util.Date
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long).ntfsLastModifiedDate,Parameter_1,ntfsLastModifiedDate,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int).windowsAttributes,Parameter_1,windowsAttributes,int
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable).i,Parameter_1,i,java.lang.Iterable
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).entry",Parameter_2,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(SevenZArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod).method,Parameter_1,method,org.apache.commons.compress.archivers.sevenz.SevenZMethod
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable).methods,Parameter_1,methods,java.lang.Iterable
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[]).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[]).options",Parameter_2,options,java.nio.file.OpenOption[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).header",Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).bits",Parameter_2,bits,java.util.BitSet
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput).header,Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry).header",Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput).header,Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream).m",Parameter_1,m,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream).bos",Parameter_2,bos,java.io.OutputStream
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput).header,Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long).header",Parameter_1,header,java.io.DataOutput
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long).value",Parameter_2,value,long
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput).header,Parameter_1,header,java.io.DataOutput
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File).fileName,Parameter_1,fileName,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[]).fileName",Parameter_1,fileName,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[]).password",Parameter_2,password,char[]
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[]).password",Parameter_2,password,char[]
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).maxMemoryLimitKb",Parameter_1,maxMemoryLimitKb,int
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).useDefaultNameForUnnamedEntries",Parameter_2,useDefaultNameForUnnamedEntries,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).tryToRecoverBrokenArchives",Parameter_3,tryToRecoverBrokenArchives,boolean
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withMaxMemoryLimitInKb(int).maxMemoryLimitKiB,Parameter_1,maxMemoryLimitKiB,int
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withTryToRecoverBrokenArchives(boolean).tryToRecoverBrokenArchives,Parameter_1,tryToRecoverBrokenArchives,boolean
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withUseDefaultNameForUnnamedEntries(boolean).useDefaultNameForUnnamedEntries,Parameter_1,useDefaultNameForUnnamedEntries,boolean
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).decompressionMethodId",Parameter_1,decompressionMethodId,byte[]
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).numInStreams",Parameter_2,numInStreams,long
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).numOutStreams",Parameter_3,numOutStreams,long
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).properties",Parameter_4,properties,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).password",Parameter_1,password,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).numCyclesPower",Parameter_2,numCyclesPower,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).salt",Parameter_3,salt,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).password",Parameter_1,password,char[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).numCyclesPower",Parameter_2,numCyclesPower,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).salt",Parameter_3,salt,byte[]
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[]).chars,Parameter_1,chars,char[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).passwordBytes",Parameter_5,passwordBytes,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.getOptionsAsProperties(Object).options,Parameter_1,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).coder",Parameter_2,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).archiveName",Parameter_3,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).passwordBytes",Parameter_4,passwordBytes,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream).opts",Parameter_1,opts,org.apache.commons.compress.archivers.sevenz.AES256Options
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).is",Parameter_2,is,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).method",Parameter_2,method,org.apache.commons.compress.archivers.sevenz.SevenZMethod
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).options",Parameter_3,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod).method,Parameter_1,method,org.apache.commons.compress.archivers.sevenz.SevenZMethod
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.<init>(FilterOptions).opts,Parameter_1,opts,org.tukaani.xz.FilterOptions
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater).inflaterInputStream",Parameter_1,inflaterInputStream,java.util.zip.InflaterInputStream
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater).inflater",Parameter_2,inflater,java.util.zip.Inflater
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater).deflaterOutputStream",Parameter_1,deflaterOutputStream,java.util.zip.DeflaterOutputStream
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater).deflater",Parameter_2,deflater,java.util.zip.Deflater
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod).method,Parameter_1,method,org.apache.commons.compress.archivers.sevenz.SevenZMethod
"org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object).method",Parameter_1,method,org.apache.commons.compress.archivers.sevenz.SevenZMethod
"org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object).options",Parameter_2,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object).options,Parameter_1,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder).coder,Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream).coder",Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long).inIndex",Parameter_1,inIndex,long
"org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long).outIndex",Parameter_2,outIndex,long
org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[]).args,Parameter_1,args,java.lang.String[]
org.apache.commons.compress.archivers.sevenz.CLI.main(String[]).args,Parameter_1,args,java.lang.String[]
"org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry).archive",Parameter_1,archive,org.apache.commons.compress.archivers.sevenz.SevenZFile
"org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int).options",Parameter_1,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int).defaultValue",Parameter_2,defaultValue,int
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object).options",Parameter_2,options,java.lang.Object
org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsAsProperties(Object).options,Parameter_1,options,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream).coder",Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.archivers.sevenz.AbstractCoder.isOptionInstance(Object).opts,Parameter_1,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>(Class[]).optionClasses,Parameter_1,optionClasses,java.lang.Class[]
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object).opts",Parameter_2,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder).coder,Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object).opts,Parameter_1,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object).opts,Parameter_1,opts,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream).coder",Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object).opts,Parameter_1,opts,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Parameter_1,archiveName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Parameter_3,uncompressedLength,long
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Parameter_4,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Parameter_5,password,byte[]
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Parameter_6,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object).opts",Parameter_2,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder).coder,Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object).opts,Parameter_1,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object).opts,Parameter_1,opts,java.lang.Object
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object).opts,Parameter_1,opts,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream).coder",Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream).in",Parameter_2,in,java.io.InputStream
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object).opts,Parameter_1,opts,java.lang.Object
"org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long).what",Parameter_1,what,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long).value",Parameter_2,value,long
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int).buf",Parameter_1,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int).expectRemaining",Parameter_2,expectRemaining,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[]).buf",Parameter_1,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[]).to",Parameter_2,to,byte[]
org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File).file,Parameter_1,file,java.io.File
org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer).in,Parameter_1,in,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long).input",Parameter_1,input,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long).bytesToSkip",Parameter_2,bytesToSkip,long
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).folder",Parameter_1,folder,org.apache.commons.compress.archivers.sevenz.Folder
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).folderOffset",Parameter_2,folderOffset,long
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).firstPackStreamIndex",Parameter_3,firstPackStreamIndex,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).entry",Parameter_4,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean).entryIndex",Parameter_1,entryIndex,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean).isRandomAccess",Parameter_2,isRandomAccess,boolean
org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive).archive,Parameter_1,archive,org.apache.commons.compress.archivers.sevenz.Archive
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int).archiveEntries",Parameter_1,archiveEntries,java.util.Map
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int).index",Parameter_2,index,int
org.apache.commons.compress.archivers.sevenz.SevenZFile.getInputStream(SevenZArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).startHeader",Parameter_1,startHeader,org.apache.commons.compress.archivers.sevenz.StartHeader
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).password",Parameter_2,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).verifyCrc",Parameter_3,verifyCrc,boolean
org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int).size",Parameter_2,size,int
org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer).input,Parameter_1,input,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int).size",Parameter_2,size,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).password",Parameter_3,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer).header,Parameter_1,header,java.nio.ByteBuffer
org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]).password,Parameter_1,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long).startHeaderCrc,Parameter_1,startHeaderCrc,long
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive).archive",Parameter_2,archive,org.apache.commons.compress.archivers.sevenz.Archive
"org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry).folderIndex",Parameter_1,folderIndex,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry).file",Parameter_2,file,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckAndCollectStatistics(ByteBuffer).header,Parameter_1,header,java.nio.ByteBuffer
org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckArchiveProperties(ByteBuffer).header,Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics).header",Parameter_1,header,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics).stats",Parameter_2,stats,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).entryIndex",Parameter_1,entryIndex,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).isInSameFolder",Parameter_2,isInSameFolder,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).folderIndex",Parameter_3,folderIndex,int
org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToLocateEndHeader(byte[]).password,Parameter_1,password,byte[]
org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File).fileName,Parameter_1,fileName,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[]).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[]).password",Parameter_2,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[]).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[]).password",Parameter_2,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).password",Parameter_2,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).options",Parameter_3,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions).options",Parameter_2,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[]).password",Parameter_2,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[]).password",Parameter_2,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).password",Parameter_2,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).options",Parameter_3,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions).options",Parameter_2,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).password",Parameter_3,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).password",Parameter_3,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).closeOnError",Parameter_4,closeOnError,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).maxMemoryLimitKiB",Parameter_5,maxMemoryLimitKiB,int
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).useDefaultNameForUnnamedEntries",Parameter_6,useDefaultNameForUnnamedEntries,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).tryToRecoverBrokenArchives",Parameter_7,tryToRecoverBrokenArchives,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).password",Parameter_3,password,byte[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).closeOnError",Parameter_4,closeOnError,boolean
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).options",Parameter_5,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).password",Parameter_3,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).password",Parameter_3,password,char[]
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).options",Parameter_4,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).options",Parameter_3,options,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.assertValidity(int).maxMemoryLimitKiB,Parameter_1,maxMemoryLimitKiB,int
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setDefaultName(String).defaultName,Parameter_1,defaultName,java.lang.String
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKb(int).maxMemoryLimitKiB,Parameter_1,maxMemoryLimitKiB,int
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKiB(int).maxMemoryLimitKiB,Parameter_1,maxMemoryLimitKiB,int
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(byte[]).password,Parameter_1,password,byte[]
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(char[]).password,Parameter_1,password,char[]
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(String).password,Parameter_1,password,java.lang.String
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setSeekableByteChannel(SeekableByteChannel).seekableByteChannel,Parameter_1,seekableByteChannel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setTryToRecoverBrokenArchives(boolean).tryToRecoverBrokenArchives,Parameter_1,tryToRecoverBrokenArchives,boolean
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setUseDefaultNameForUnnamedEntries(boolean).useDefaultNameForUnnamedEntries,Parameter_1,useDefaultNameForUnnamedEntries,boolean
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int).len,Parameter_1,len,int
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long).size",Parameter_2,size,long
org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int).index,Parameter_1,index,int
org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int).index,Parameter_1,index,int
org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder).coder,Parameter_1,coder,org.apache.commons.compress.archivers.sevenz.Coder
org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[]).a,Parameter_1,a,long[]
org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[]).a,Parameter_1,a,java.lang.Object[]
org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[]).id,Parameter_1,id,byte[]
org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int).size,Parameter_1,size,int
org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[]).password,Parameter_1,password,char[]
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).password",Parameter_1,password,char[]
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).salt",Parameter_2,salt,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).iv",Parameter_3,iv,byte[]
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).numCyclesPower",Parameter_4,numCyclesPower,int
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>(int).totalUnpackStreams,Parameter_1,totalUnpackStreams,int
org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int).i,Parameter_1,i,int
org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[]).from,Parameter_1,from,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).from",Parameter_1,from,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).to",Parameter_2,to,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).offset",Parameter_3,offset,int
org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long).dosTime,Parameter_1,dosTime,long
org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long).dosTime,Parameter_1,dosTime,long
org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong).zipDosTime,Parameter_1,zipDosTime,org.apache.commons.compress.archivers.zip.ZipLong
"org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[]).f",Parameter_1,f,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
"org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[]).orig",Parameter_2,orig,byte[]
org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long).time,Parameter_1,time,long
org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long).time,Parameter_1,time,long
org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long).t,Parameter_1,t,long
org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long).l,Parameter_1,l,long
"org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable).message",Parameter_1,message,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable).cause",Parameter_2,cause,java.lang.Throwable
org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[]).array,Parameter_1,array,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).originalNameBytes",Parameter_2,originalNameBytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).commentBytes",Parameter_3,commentBytes,byte[]
org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte).b,Parameter_1,b,byte
org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date).time,Parameter_1,time,java.util.Date
org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long).t,Parameter_1,t,long
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).t",Parameter_1,t,long
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).offset",Parameter_3,offset,int
org.apache.commons.compress.archivers.zip.ZipUtil.toLong(BigInteger).big,Parameter_1,big,java.math.BigInteger
org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int).i,Parameter_1,i,int
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int).buffer",Parameter_1,buffer,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int).increment",Parameter_2,increment,int
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String).charsetName,Parameter_1,charsetName,java.lang.String
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String).actual,Parameter_1,actual,java.lang.String
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(long).nameCRC32,Parameter_1,nameCRC32,long
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(byte[]).unicodeName,Parameter_1,unicodeName,byte[]
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[]).text",Parameter_1,text,java.lang.String
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[]).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).text",Parameter_1,text,java.lang.String
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).len",Parameter_4,len,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier).payloadSupplier",Parameter_2,payloadSupplier,org.apache.commons.compress.parallel.InputStreamSupplier
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier).payloadSupplier",Parameter_2,payloadSupplier,org.apache.commons.compress.parallel.InputStreamSupplier
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater).inf",Parameter_2,inf,java.util.zip.Inflater
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).inf",Parameter_2,inf,java.util.zip.Inflater
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).size",Parameter_3,size,int
org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int).mode,Parameter_1,mode,int
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean).dirFlag,Parameter_1,dirFlag,boolean
org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int).gid,Parameter_1,gid,int
org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int).mode,Parameter_1,mode,int
org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int).uid,Parameter_1,uid,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream).entry",Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream).rawStream",Parameter_2,rawStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).encodable",Parameter_2,encodable,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).name",Parameter_3,name,java.nio.ByteBuffer
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry).ae,Parameter_1,ae,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode).effectiveMode,Parameter_1,effectiveMode,org.apache.commons.compress.archivers.zip.Zip64Mode
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean).phased,Parameter_1,phased,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean).actuallyNeedsZip64",Parameter_1,actuallyNeedsZip64,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean).phased",Parameter_2,phased,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean).src",Parameter_1,src,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean).phased",Parameter_2,phased,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).name",Parameter_2,name,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).entryMetaData",Parameter_3,entryMetaData,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).needsZip64Extra",Parameter_4,needsZip64Extra,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).name",Parameter_2,name,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).encodable",Parameter_3,encodable,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).phased",Parameter_4,phased,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).archiveOffset",Parameter_5,archiveOffset,long
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean).utfFallback",Parameter_1,utfFallback,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean).usesDataDescriptor",Parameter_2,usesDataDescriptor,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).bytesWritten",Parameter_1,bytesWritten,long
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).crc",Parameter_2,crc,long
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).effectiveMode",Parameter_3,effectiveMode,org.apache.commons.compress.archivers.zip.Zip64Mode
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).lfhOffset",Parameter_2,lfhOffset,long
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).needsZip64Extra",Parameter_3,needsZip64Extra,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLargeForZip32(ZipArchiveEntry).zipArchiveEntry,Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode).entry1",Parameter_1,entry1,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode).requestedMode",Parameter_2,requestedMode,org.apache.commons.compress.archivers.zip.Zip64Mode
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean).archiveEntry",Parameter_1,archiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean).phased",Parameter_2,phased,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean).actuallyNeedsZip64,Parameter_1,actuallyNeedsZip64,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(String).comment,Parameter_1,comment,java.lang.String
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy).b,Parameter_1,b,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Charset).encoding,Parameter_1,encoding,java.nio.charset.Charset
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String).encoding,Parameter_1,encoding,java.lang.String
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(boolean).fallbackToUTF8,Parameter_1,fallbackToUTF8,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(int).level,Parameter_1,level,int
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(int).method,Parameter_1,method,int
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode).mode,Parameter_1,mode,org.apache.commons.compress.archivers.zip.Zip64Mode
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode).entry",Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode).mode",Parameter_2,mode,org.apache.commons.compress.archivers.zip.Zip64Mode
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean).zipMethod",Parameter_1,zipMethod,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean).phased",Parameter_2,phased,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode).effectiveMode,Parameter_1,effectiveMode,org.apache.commons.compress.archivers.zip.Zip64Mode
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).zipMethod",Parameter_1,zipMethod,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).zip64",Parameter_2,zip64,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).usedDataDescriptor",Parameter_3,usedDataDescriptor,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(int).zipMethod,Parameter_1,zipMethod,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean).phased",Parameter_2,phased,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[]).preamble,Parameter_1,preamble,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).preamble",Parameter_1,preamble,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File).file,Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long).zipSplitSize",Parameter_2,zipSplitSize,long
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long).zipSplitSize",Parameter_2,zipSplitSize,long
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[]).options",Parameter_2,options,java.nio.file.OpenOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean).offset",Parameter_1,offset,long
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean).usesDataDescriptor",Parameter_2,usesDataDescriptor,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).position",Parameter_4,position,long
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[]).array,Parameter_1,array,byte[]
org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long).l,Parameter_1,l,long
org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long).l,Parameter_1,l,long
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasUncompressedSize",Parameter_1,hasUncompressedSize,boolean
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasCompressedSize",Parameter_2,hasCompressedSize,boolean
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasRelativeHeaderOffset",Parameter_3,hasRelativeHeaderOffset,boolean
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasDiskStart",Parameter_4,hasDiskStart,boolean
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger).compressedSize,Parameter_1,compressedSize,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(ZipLong).ds,Parameter_1,ds,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger).rho,Parameter_1,rho,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger).size,Parameter_1,size,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger).size",Parameter_1,size,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger).compressedSize",Parameter_2,compressedSize,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).size",Parameter_1,size,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).compressedSize",Parameter_2,compressedSize,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).relativeHeaderOffset",Parameter_3,relativeHeaderOffset,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).diskStart",Parameter_4,diskStart,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).offset",Parameter_3,offset,int
org.apache.commons.compress.archivers.zip.ZipLong.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipLong.<init>(int).value,Parameter_1,value,int
org.apache.commons.compress.archivers.zip.ZipLong.<init>(long).value,Parameter_1,value,long
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int).alignment,Parameter_1,alignment,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean).alignment",Parameter_1,alignment,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean).allowMethodChange",Parameter_2,allowMethodChange,boolean
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).alignment",Parameter_1,alignment,int
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).allowMethodChange",Parameter_2,allowMethodChange,boolean
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).padding",Parameter_3,padding,int
"org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int).totalNumberOfValues",Parameter_2,totalNumberOfValues,int
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).node",Parameter_1,node,int
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).path",Parameter_2,path,int
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).depth",Parameter_3,depth,int
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).value",Parameter_4,value,int
org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream).stream,Parameter_1,stream,org.apache.commons.compress.archivers.zip.BitStream
org.apache.commons.compress.archivers.zip.BinaryTree.<init>(int).depth,Parameter_1,depth,int
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long).compressionElapsed",Parameter_1,compressionElapsed,long
"org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long).mergingElapsed",Parameter_2,mergingElapsed,long
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).what",Parameter_1,what,java.lang.String
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).dynamicLength",Parameter_2,dynamicLength,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).prefixLength",Parameter_3,prefixLength,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger).z,Parameter_1,z,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger).z,Parameter_1,z,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger).t,Parameter_1,t,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger).t,Parameter_1,t,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger).t,Parameter_1,t,org.apache.commons.compress.archivers.zip.ZipEightByteInteger
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long).disk",Parameter_1,disk,long
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long).localOffset",Parameter_2,localOffset,long
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.createNewSplitSegmentFile(Integer).zipSplitSegmentSuffixIndex,Parameter_1,zipSplitSegmentSuffixIndex,java.lang.Integer
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getSplitSegmentFileName(Integer).zipSplitSegmentSuffixIndex,Parameter_1,zipSplitSegmentSuffixIndex,java.lang.Integer
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.prepareToWriteUnsplittableContent(long).unsplittableContentSize,Parameter_1,unsplittableContentSize,long
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(int).i,Parameter_1,i,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).atPosition",Parameter_4,atPosition,long
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).segment",Parameter_1,segment,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).position",Parameter_2,position,long
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).b",Parameter_3,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).off",Parameter_4,off,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).len",Parameter_5,len,int
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long).zipFile",Parameter_1,zipFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long).splitSize",Parameter_2,splitSize,long
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long).zipFile",Parameter_1,zipFile,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long).splitSize",Parameter_2,splitSize,long
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).ze",Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipExtraField
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).data",Parameter_2,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).len",Parameter_4,len,int
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).local",Parameter_5,local,boolean
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[]).data,Parameter_1,data,org.apache.commons.compress.archivers.zip.ZipExtraField[]
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[]).data,Parameter_1,data,org.apache.commons.compress.archivers.zip.ZipExtraField[]
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean).local",Parameter_2,local,boolean
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).local",Parameter_2,local,boolean
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).parsingBehavior",Parameter_3,parsingBehavior,org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).local",Parameter_2,local,boolean
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).onUnparseableData",Parameter_3,onUnparseableData,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class).clazz,Parameter_1,clazz,java.lang.Class
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).local",Parameter_4,local,boolean
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Parameter_5,claimedLength,int
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<init>(int).k,Parameter_1,k,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).local",Parameter_4,local,boolean
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Parameter_5,claimedLength,int
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).pos",Parameter_4,pos,long
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(FileChannel).channel,Parameter_1,channel,java.nio.channels.FileChannel
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path).file,Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[]).options",Parameter_2,options,java.nio.file.OpenOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry).zipArchiveEntry,Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).dictionarySize",Parameter_1,dictionarySize,int
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).numberOfTrees",Parameter_2,numberOfTrees,int
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).in",Parameter_3,in,java.io.InputStream
"org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int).distance",Parameter_1,distance,int
"org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.zip.CircularBuffer.put(int).value,Parameter_1,value,int
org.apache.commons.compress.archivers.zip.CircularBuffer.<init>(int).size,Parameter_1,size,int
"org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte).previousCode",Parameter_1,previousCode,int
"org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte).character",Parameter_2,character,byte
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong).unixTime,Parameter_1,unixTime,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long).unixTime,Parameter_1,unixTime,long
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong).unixTime,Parameter_1,unixTime,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong).l,Parameter_1,l,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong).l,Parameter_1,l,org.apache.commons.compress.archivers.zip.ZipLong
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte).flags,Parameter_1,flags,byte
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyFileTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date).d,Parameter_1,d,java.util.Date
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong).l,Parameter_1,l,org.apache.commons.compress.archivers.zip.ZipLong
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int).minimum",Parameter_1,minimum,int
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile).zipFile,Parameter_1,zipFile,org.apache.commons.compress.archivers.zip.ZipFile
org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path).path,Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).maxNumberOfDisks",Parameter_2,maxNumberOfDisks,long
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).openOptions",Parameter_3,openOptions,java.nio.file.OpenOption[]
org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.zip.ZipFile.toPlatform(int).versionMadeBy,Parameter_1,versionMadeBy,int
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).minDistanceFromEnd",Parameter_2,minDistanceFromEnd,long
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).maxDistanceFromEnd",Parameter_3,maxDistanceFromEnd,long
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).sig",Parameter_4,sig,byte[]
org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate).target",Parameter_1,target,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
"org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate).predicate",Parameter_2,predicate,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate
"org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long).start",Parameter_1,start,long
"org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long).remaining",Parameter_2,remaining,long
org.apache.commons.compress.archivers.zip.ZipFile.getDataOffset(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map).noUTF8Flag,Parameter_1,noUTF8Flag,java.util.Map
org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map).entriesWithoutUTF8Flag,Parameter_1,entriesWithoutUTF8Flag,java.util.Map
org.apache.commons.compress.archivers.zip.ZipFile.sanityCheckLFHOffset(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.setDataOffset(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int).count,Parameter_1,count,int
org.apache.commons.compress.archivers.zip.ZipFile.sortByOffset(ZipArchiveEntry[]).allEntries,Parameter_1,allEntries,org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]
org.apache.commons.compress.archivers.zip.ZipFile.<init>(File).file,Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).ignoreLocalFileHeader",Parameter_4,ignoreLocalFileHeader,boolean
org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path).path,Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).ignoreLocalFileHeader",Parameter_4,ignoreLocalFileHeader,boolean
org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel).channel,Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).channelDescription",Parameter_2,channelDescription,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).encoding",Parameter_3,encoding,java.nio.charset.Charset
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).useUnicodeExtraFields",Parameter_4,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).closeOnError",Parameter_5,closeOnError,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).ignoreLocalFileHeader",Parameter_6,ignoreLocalFileHeader,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).channelDescription",Parameter_2,channelDescription,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).useUnicodeExtraFields",Parameter_4,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).channelDescription",Parameter_2,channelDescription,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).useUnicodeExtraFields",Parameter_4,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).ignoreLocalFileHeader",Parameter_5,ignoreLocalFileHeader,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).channel",Parameter_1,channel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).channelDescription",Parameter_2,channelDescription,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).useUnicodeExtraFields",Parameter_4,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).closeOnError",Parameter_5,closeOnError,boolean
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).ignoreLocalFileHeader",Parameter_6,ignoreLocalFileHeader,boolean
org.apache.commons.compress.archivers.zip.ZipFile.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer).pos",Parameter_1,pos,long
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).start",Parameter_1,start,long
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).remaining",Parameter_2,remaining,long
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).archive",Parameter_3,archive,java.nio.channels.FileChannel
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setIgnoreLocalFileHeader(boolean).ignoreLocalFileHeader,Parameter_1,ignoreLocalFileHeader,boolean
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setMaxNumberOfDisks(long).maxNumberOfDisks,Parameter_1,maxNumberOfDisks,long
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setSeekableByteChannel(SeekableByteChannel).seekableByteChannel,Parameter_1,seekableByteChannel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setUseUnicodeExtraFields(boolean).useUnicodeExtraFields,Parameter_1,useUnicodeExtraFields,boolean
org.apache.commons.compress.archivers.zip.ZipFile$Entry.equals(Object).other,Parameter_1,other,java.lang.Object
"org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[]).name",Parameter_1,name,byte[]
"org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[]).comment",Parameter_2,comment,byte[]
org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object).o,Parameter_1,o,java.lang.Object
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean).b,Parameter_1,b,boolean
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int).value,Parameter_1,value,int
org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).value",Parameter_1,value,int
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).offset",Parameter_3,offset,int
org.apache.commons.compress.archivers.zip.ZipShort.equals(Object).o,Parameter_1,o,java.lang.Object
org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipShort.<init>(int).value,Parameter_1,value,int
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).channel",Parameter_1,channel,java.nio.channels.FileChannel
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).buffer",Parameter_2,buffer,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).position",Parameter_3,position,long
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer).channel",Parameter_1,channel,java.nio.channels.WritableByteChannel
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer).buffer",Parameter_2,buffer,java.nio.ByteBuffer
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).position",Parameter_4,position,long
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long).position",Parameter_2,position,long
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[]).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).text",Parameter_1,text,java.lang.String
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).len",Parameter_4,len,int
org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.createExtraField(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).field",Parameter_1,field,org.apache.commons.compress.archivers.zip.ZipExtraField
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).data",Parameter_2,data,byte[]
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).len",Parameter_4,len,int
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).local",Parameter_5,local,boolean
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).enc",Parameter_1,enc,java.nio.charset.CharsetEncoder
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).cb",Parameter_2,cb,java.nio.CharBuffer
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).out",Parameter_3,out,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char).cb",Parameter_1,cb,java.nio.CharBuffer
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char).c",Parameter_2,c,char
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int).enc",Parameter_1,enc,java.nio.charset.CharsetEncoder
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int).charCount",Parameter_2,charCount,int
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int).enc",Parameter_1,enc,java.nio.charset.CharsetEncoder
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int).charChount",Parameter_2,charChount,int
org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean).charset",Parameter_1,charset,java.nio.charset.Charset
"org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean).useReplacement",Parameter_2,useReplacement,boolean
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier).source",Parameter_2,source,org.apache.commons.compress.parallel.InputStreamSupplier
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier).zipArchiveEntryRequestSupplier,Parameter_1,zipArchiveEntryRequestSupplier,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Parameter_1,zipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier).source",Parameter_2,source,org.apache.commons.compress.parallel.InputStreamSupplier
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier).zipArchiveEntryRequestSupplier,Parameter_1,zipArchiveEntryRequestSupplier,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier).scatterGatherBackingStoreSupplier,Parameter_1,scatterGatherBackingStoreSupplier,org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable).callable,Parameter_1,callable,java.util.concurrent.Callable
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submitStreamAwareCallable(Callable).callable,Parameter_1,callable,java.util.concurrent.Callable
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream).targetStream,Parameter_1,targetStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService).executorService,Parameter_1,executorService,java.util.concurrent.ExecutorService
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier).executorService",Parameter_1,executorService,java.util.concurrent.ExecutorService
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier).backingStoreSupplier",Parameter_2,backingStoreSupplier,org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).executorService",Parameter_1,executorService,java.util.concurrent.ExecutorService
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).backingStoreSupplier",Parameter_2,backingStoreSupplier,org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).compressionLevel",Parameter_3,compressionLevel,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Parameter_1,lastModifiedTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Parameter_2,lastAccessTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).creationTime",Parameter_3,creationTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String).entryName,Parameter_1,entryName,java.lang.String
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String).entryName,Parameter_1,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipExtraField
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipExtraField
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Parameter_1,lastModifiedTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Parameter_2,lastAccessTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).creationTime",Parameter_3,creationTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Parameter_1,lastModifiedTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Parameter_2,lastAccessTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).creationTime",Parameter_3,creationTime,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int).src",Parameter_1,src,org.apache.commons.compress.archivers.zip.ZipExtraField[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List).headerId",Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List).fs",Parameter_2,fs,java.util.List
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findUnparseable(List).fs,Parameter_1,fs,java.util.List
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort).type,Parameter_1,type,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean).includeUnparseable,Parameter_1,includeUnparseable,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(ExtraFieldParsingBehavior).parsingBehavior,Parameter_1,parsingBehavior,org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAddExtraField(ZipExtraField).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipExtraField
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalRemoveExtraField(ZipShort).type,Parameter_1,type,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalSetLastModifiedTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean).f",Parameter_1,f,org.apache.commons.compress.archivers.zip.ZipExtraField[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean).local",Parameter_2,local,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).local",Parameter_2,local,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).parsingBehavior",Parameter_3,parsingBehavior,org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort).type,Parameter_1,type,org.apache.commons.compress.archivers.zip.ZipShort
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAlignment(int).alignment,Parameter_1,alignment,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[]).options",Parameter_2,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[]).b,Parameter_1,b,byte[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCommentSource(CommentSource).commentSource,Parameter_1,commentSource,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCreationTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDataOffset(long).dataOffset,Parameter_1,dataOffset,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDiskNumberStart(long).diskNumberStart,Parameter_1,diskNumberStart,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[]).extra,Parameter_1,extra,byte[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]).fields,Parameter_1,fields,org.apache.commons.compress.archivers.zip.ZipExtraField[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit).generalPurposeBit,Parameter_1,generalPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int).internalAttributes,Parameter_1,internalAttributes,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastAccessTime(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastModifiedTime(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLocalHeaderOffset(long).localHeaderOffset,Parameter_1,localHeaderOffset,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int).method,Parameter_1,method,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[]).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[]).rawName",Parameter_2,rawName,byte[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setNameSource(NameSource).nameSource,Parameter_1,nameSource,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int).platform,Parameter_1,platform,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int).rawFlag,Parameter_1,rawFlag,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setStreamContiguous(boolean).isStreamContiguous,Parameter_1,isStreamContiguous,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long).timeEpochMillis,Parameter_1,timeEpochMillis,long
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int).mode,Parameter_1,mode,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int).versionMadeBy,Parameter_1,versionMadeBy,int
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int).versionRequired,Parameter_1,versionRequired,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).extraFieldFactory",Parameter_1,extraFieldFactory,java.util.function.Function
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).inputFile",Parameter_2,inputFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).entryName",Parameter_3,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).extraFieldFactory",Parameter_1,extraFieldFactory,java.util.function.Function
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).inputPath",Parameter_2,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).entryName",Parameter_3,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).options",Parameter_4,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String).extraFieldFactory",Parameter_1,extraFieldFactory,java.util.function.Function
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry).extraFieldFactory",Parameter_1,extraFieldFactory,java.util.function.Function
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry).entry",Parameter_2,entry,java.util.zip.ZipEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipEntry).entry,Parameter_1,entry,java.util.zip.ZipEntry
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).field",Parameter_1,field,org.apache.commons.compress.archivers.zip.ZipExtraField
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).data",Parameter_2,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).len",Parameter_4,len,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).local",Parameter_5,local,boolean
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.createExtraField(ZipShort).headerId,Parameter_1,headerId,org.apache.commons.compress.archivers.zip.ZipShort
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).field",Parameter_1,field,org.apache.commons.compress.archivers.zip.ZipExtraField
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).data",Parameter_2,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).len",Parameter_4,len,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).local",Parameter_5,local,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).local",Parameter_4,local,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Parameter_5,claimedLength,int
org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature).reason,Parameter_1,reason,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry).reason",Parameter_1,reason,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry).method",Parameter_1,method,org.apache.commons.compress.archivers.zip.ZipMethod
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[]).comment",Parameter_1,comment,java.lang.String
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[]).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).text",Parameter_1,text,java.lang.String
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).off",Parameter_3,off,int
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).len",Parameter_4,len,int
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>(Path).dir,Parameter_1,dir,java.nio.file.Path
org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int).code,Parameter_1,code,int
org.apache.commons.compress.archivers.zip.ZipMethod.isZstd(int).method,Parameter_1,method,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[]).expected",Parameter_1,expected,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[]).signature",Parameter_2,signature,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).bos",Parameter_1,bos,java.io.ByteArrayOutputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).lastRead",Parameter_3,lastRead,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).expectedDDLen",Parameter_4,expectedDDLen,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).bos",Parameter_1,bos,java.io.ByteArrayOutputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).lastRead",Parameter_3,lastRead,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).expectedDDLen",Parameter_4,expectedDDLen,int
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry).ae,Parameter_1,ae,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isApkSigningBlock(byte[]).suspectLocalFileHeader,Parameter_1,suspectLocalFileHeader,byte[]
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int).b,Parameter_1,b,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong).size",Parameter_1,size,org.apache.commons.compress.archivers.zip.ZipLong
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong).cSize",Parameter_2,cSize,org.apache.commons.compress.archivers.zip.ZipLong
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int).off",Parameter_2,off,int
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readRange(int).len,Parameter_1,len,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.setExtraFieldSupport(Function).extraFieldSupport,Parameter_1,extraFieldSupport,java.util.function.Function
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).allowStoredEntriesWithDataDescriptor",Parameter_4,allowStoredEntriesWithDataDescriptor,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).useUnicodeExtraFields",Parameter_3,useUnicodeExtraFields,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).allowStoredEntriesWithDataDescriptor",Parameter_4,allowStoredEntriesWithDataDescriptor,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).skipSplitSig",Parameter_5,skipSplitSig,boolean
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.readCount(int).bytesRead,Parameter_1,bytesRead,int
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File).file,Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int).compressionLevel",Parameter_2,compressionLevel,int
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path).path,Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int).compressionLevel",Parameter_2,compressionLevel,int
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest).zipArchiveEntryRequest,Parameter_1,zipArchiveEntryRequest,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream).target,Parameter_1,target,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor).backingStore",Parameter_1,backingStore,org.apache.commons.compress.parallel.ScatterGatherBackingStore
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor).streamCompressor",Parameter_2,streamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).zipArchiveEntryRequest",Parameter_1,zipArchiveEntryRequest,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).crc",Parameter_2,crc,long
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).compressedSize",Parameter_3,compressedSize,long
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).size",Parameter_4,size,long
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.writeNextZipEntry(ZipArchiveOutputStream).target,Parameter_1,target,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.<init>(ScatterZipOutputStream).scatter,Parameter_1,scatter,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry).ze,Parameter_1,ze,org.apache.commons.compress.archivers.zip.ZipArchiveEntry
org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>(String).reason,Parameter_1,reason,java.lang.String
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger).value,Parameter_1,value,java.math.BigInteger
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toUnsignedBigInteger(long).value,Parameter_1,value,long
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object).o,Parameter_1,o,java.lang.Object
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(BigInteger).value,Parameter_1,value,java.math.BigInteger
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(long).value,Parameter_1,value,long
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater).os",Parameter_1,os,java.io.DataOutput
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater).deflater",Parameter_2,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore).compressionLevel",Parameter_1,compressionLevel,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore).bs",Parameter_2,bs,org.apache.commons.compress.parallel.ScatterGatherBackingStore
org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream).os,Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater).deflater",Parameter_2,deflater,java.util.zip.Deflater
org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore).bs,Parameter_1,bs,org.apache.commons.compress.parallel.ScatterGatherBackingStore
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater).os",Parameter_1,os,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater).deflater",Parameter_2,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int).source",Parameter_1,source,java.io.InputStream
"org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int).method",Parameter_2,method,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).method",Parameter_4,method,int
org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.zip.StreamCompressor.<init>(Deflater).deflater,Parameter_1,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput).deflater",Parameter_1,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput).raf",Parameter_2,raf,java.io.DataOutput
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream).deflater",Parameter_1,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream).os",Parameter_2,os,java.io.OutputStream
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore).deflater",Parameter_1,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore).bs",Parameter_2,bs,org.apache.commons.compress.parallel.ScatterGatherBackingStore
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel).deflater",Parameter_1,deflater,java.util.zip.Deflater
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel).channel",Parameter_2,channel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File).lastSegmentFile,Parameter_1,lastSegmentFile,java.io.File
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path).lastSegmentPath,Parameter_1,lastSegmentPath,java.nio.file.Path
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]).files,Parameter_1,files,java.io.File[]
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable).lastSegmentFile",Parameter_1,lastSegmentFile,java.io.File
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable).files",Parameter_2,files,java.lang.Iterable
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]).channels,Parameter_1,channels,java.nio.channels.SeekableByteChannel[]
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable).lastSegmentChannel",Parameter_1,lastSegmentChannel,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable).channels",Parameter_2,channels,java.lang.Iterable
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[]).paths",Parameter_1,paths,java.util.List
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[]).openOptions",Parameter_2,openOptions,java.nio.file.OpenOption[]
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]).paths,Parameter_1,paths,java.nio.file.Path[]
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable).lastSegmentPath",Parameter_1,lastSegmentPath,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable).paths",Parameter_2,paths,java.lang.Iterable
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.assertSplitSignature(List).channels,Parameter_1,channels,java.util.List
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>(List).channels,Parameter_1,channels,java.util.List
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path).file1",Parameter_1,file1,java.nio.file.Path
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path).file2",Parameter_2,file2,java.nio.file.Path
org.apache.commons.compress.archivers.zip.BitStream.nextBits(int).n,Parameter_1,n,int
org.apache.commons.compress.archivers.zip.BitStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).supplier",Parameter_1,supplier,org.apache.commons.compress.archivers.examples.Expander$ArchiveEntrySupplier
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).writer",Parameter_2,writer,org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).targetDirectory",Parameter_3,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File).archive",Parameter_1,archive,org.apache.commons.compress.archivers.ArchiveInputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path).archive",Parameter_1,archive,org.apache.commons.compress.archivers.ArchiveInputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path).targetDirectory",Parameter_2,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(File,File).archive",Parameter_1,archive,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(File,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File).archive",Parameter_1,archive,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).archive",Parameter_1,archive,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).closeableConsumer",Parameter_3,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path).archive",Parameter_1,archive,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path).targetDirectory",Parameter_2,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File).archive",Parameter_1,archive,org.apache.commons.compress.archivers.sevenz.SevenZFile
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path).archive",Parameter_1,archive,org.apache.commons.compress.archivers.sevenz.SevenZFile
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path).targetDirectory",Parameter_2,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).archive",Parameter_2,archive,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).targetDirectory",Parameter_3,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).archive",Parameter_2,archive,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).targetDirectory",Parameter_3,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).archive",Parameter_2,archive,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).targetDirectory",Parameter_3,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).archive",Parameter_2,archive,java.io.InputStream
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).targetDirectory",Parameter_3,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).archive",Parameter_2,archive,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).targetDirectory",Parameter_3,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).archive",Parameter_2,archive,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).targetDirectory",Parameter_3,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).archive",Parameter_2,archive,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).targetDirectory",Parameter_3,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).archive",Parameter_2,archive,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).targetDirectory",Parameter_3,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File).archive",Parameter_1,archive,org.apache.commons.compress.archivers.tar.TarFile
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path).archive",Parameter_1,archive,org.apache.commons.compress.archivers.tar.TarFile
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path).targetDirectory",Parameter_2,targetDirectory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File).archive",Parameter_1,archive,org.apache.commons.compress.archivers.zip.ZipFile
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File).targetDirectory",Parameter_2,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path).archive",Parameter_1,archive,org.apache.commons.compress.archivers.zip.ZipFile
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path).targetDirectory",Parameter_2,targetDirectory,java.nio.file.Path
org.apache.commons.compress.archivers.examples.Expander.prefersSeekableByteChannel(String).format,Parameter_1,format,java.lang.String
org.apache.commons.compress.archivers.examples.Expander.toPath(File).targetDirectory,Parameter_1,targetDirectory,java.io.File
"org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream).entry",Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream).out",Parameter_2,out,java.io.OutputStream
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.track(Closeable).closeable,Parameter_1,closeable,java.io.Closeable
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.<init>(CloseableConsumer).consumer,Parameter_1,consumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
org.apache.commons.compress.archivers.examples.CloseableConsumer.accept(Closeable).c,Parameter_1,c,java.io.Closeable
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File).target",Parameter_1,target,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File).directory",Parameter_2,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path).target",Parameter_1,target,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path).directory",Parameter_2,directory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).target",Parameter_1,target,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).directory",Parameter_2,directory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).fileVisitOptions",Parameter_3,fileVisitOptions,java.util.EnumSet
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).linkOptions",Parameter_4,linkOptions,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File).target",Parameter_1,target,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File).directory",Parameter_2,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path).target",Parameter_1,target,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path).directory",Parameter_2,directory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).target",Parameter_2,target,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).directory",Parameter_3,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).target",Parameter_2,target,java.io.OutputStream
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).directory",Parameter_3,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).target",Parameter_2,target,java.io.OutputStream
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).directory",Parameter_3,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).target",Parameter_2,target,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).directory",Parameter_3,directory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).target",Parameter_2,target,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).directory",Parameter_3,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).target",Parameter_2,target,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).directory",Parameter_3,directory,java.io.File
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).closeableConsumer",Parameter_4,closeableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).format",Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).target",Parameter_2,target,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).directory",Parameter_3,directory,java.nio.file.Path
org.apache.commons.compress.archivers.examples.Archiver.prefersSeekableByteChannel(String).format,Parameter_1,format,java.lang.String
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes).dir",Parameter_1,dir,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes).attrs",Parameter_2,attrs,java.nio.file.attribute.BasicFileAttributes
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).attrs",Parameter_2,attrs,java.nio.file.attribute.BasicFileAttributes
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).isFile",Parameter_3,isFile,boolean
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes).attrs",Parameter_2,attrs,java.nio.file.attribute.BasicFileAttributes
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).target",Parameter_1,target,org.apache.commons.compress.archivers.ArchiveOutputStream
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).directory",Parameter_2,directory,java.nio.file.Path
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).linkOptions",Parameter_3,linkOptions,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long).length",Parameter_2,length,long
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).length",Parameter_2,length,long
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).userId",Parameter_3,userId,int
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).groupId",Parameter_4,groupId,int
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).mode",Parameter_5,mode,int
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).lastModified",Parameter_6,lastModified,long
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).value",Parameter_1,value,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).max",Parameter_2,max,int
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).offset",Parameter_1,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).newOffset",Parameter_2,newOffset,int
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).fill",Parameter_3,fill,char
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.ar.ArArchiveEntry
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int).longFileMode,Parameter_1,longFileMode,int
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String).data,Parameter_1,data,java.lang.String
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.ar.ArArchiveEntry
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).byteArray",Parameter_1,byteArray,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).byteArray",Parameter_1,byteArray,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).treatBlankAsZero",Parameter_4,treatBlankAsZero,boolean
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).byteArray",Parameter_1,byteArray,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).base",Parameter_4,base,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).byteArray",Parameter_1,byteArray,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).base",Parameter_4,base,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).treatBlankAsZero",Parameter_5,treatBlankAsZero,boolean
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).byteArray",Parameter_1,byteArray,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String).bsdLongName,Parameter_1,bsdLongName,java.lang.String
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int).offset,Parameter_1,offset,int
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).length",Parameter_1,length,byte[]
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.trackReadBytes(long).read,Parameter_1,read,long
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream).args",Parameter_1,args,java.lang.String[]
"org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
org.apache.commons.compress.archivers.Lister.detectFormat(Path).file,Parameter_1,file,java.nio.file.Path
org.apache.commons.compress.archivers.Lister.main(String[]).args,Parameter_1,args,java.lang.String[]
"org.apache.commons.compress.archivers.Lister.list(Path,String[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.Lister.list(Path,String[]).args",Parameter_2,args,java.lang.String[]
org.apache.commons.compress.archivers.Lister.list7z(Path).file,Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.Lister.listStream(Path,String[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.Lister.listStream(Path,String[]).args",Parameter_2,args,java.lang.String[]
org.apache.commons.compress.archivers.Lister.listZipUsingTarFile(Path).file,Parameter_1,file,java.nio.file.Path
org.apache.commons.compress.archivers.Lister.listZipUsingZipFile(Path).file,Parameter_1,file,java.nio.file.Path
org.apache.commons.compress.archivers.Lister.println(ArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.Lister.println(String).line,Parameter_1,line,java.lang.String
"org.apache.commons.compress.archivers.Lister.<init>(boolean,String[]).quiet",Parameter_1,quiet,boolean
"org.apache.commons.compress.archivers.Lister.<init>(boolean,String[]).args",Parameter_2,args,java.lang.String[]
org.apache.commons.compress.archivers.arj.ArjArchiveEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(LocalFileHeader).localFileHeader,Parameter_1,localFileHeader,org.apache.commons.compress.archivers.arj.LocalFileHeader
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(ArchiveEntry).ae,Parameter_1,ae,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream).dataIn,Parameter_1,dataIn,java.io.DataInputStream
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream).dataIn,Parameter_1,dataIn,java.io.DataInputStream
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream).dataIn,Parameter_1,dataIn,java.io.DataInputStream
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).firstHeaderSize",Parameter_1,firstHeaderSize,int
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).firstHeader",Parameter_2,firstHeader,java.io.DataInputStream
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).localFileHeader",Parameter_3,localFileHeader,org.apache.commons.compress.archivers.arj.LocalFileHeader
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int).len",Parameter_2,len,int
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream).dataIn,Parameter_1,dataIn,java.io.DataInputStream
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.compress.archivers.arj.LocalFileHeader.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.archivers.ArchiveEntry.resolveIn(Path).parentPath,Parameter_1,parentPath,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List).headers",Parameter_1,headers,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List).sparseHeaders",Parameter_2,sparseHeaders,java.util.List
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).available",Parameter_1,available,long
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).skipped",Parameter_2,skipped,long
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).expected",Parameter_3,expected,long
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[]).record,Parameter_1,record,byte[]
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(int).markLimit,Parameter_1,markLimit,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).numToRead",Parameter_3,numToRead,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).numToRead",Parameter_3,numToRead,int
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(boolean).atEof,Parameter_1,atEof,boolean
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(TarArchiveEntry).currEntry,Parameter_1,currEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipSparse(long).n,Parameter_1,n,long
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean).lenient",Parameter_2,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).encoding",Parameter_4,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).encoding",Parameter_4,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).lenient",Parameter_5,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).paxHeaders",Parameter_1,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).header",Parameter_2,header,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).value",Parameter_3,value,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).paxHeaders",Parameter_1,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).header",Parameter_2,header,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).value",Parameter_3,value,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).maxValue",Parameter_4,maxValue,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).paxHeaders",Parameter_1,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).header",Parameter_2,header,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).seconds",Parameter_3,seconds,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).nanos",Parameter_4,nanos,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).paxHeaders",Parameter_1,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).header",Parameter_2,header,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).value",Parameter_3,value,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).maxValue",Parameter_4,maxValue,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry).paxHeaders",Parameter_1,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry).entry",Parameter_2,entry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encodeExtendedPaxHeadersContents(Map).headers,Parameter_1,headers,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).field",Parameter_1,field,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).value",Parameter_2,value,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).maxValue",Parameter_3,maxValue,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).field",Parameter_1,field,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).value",Parameter_2,value,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).maxValue",Parameter_3,maxValue,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).additionalMsg",Parameter_4,additionalMsg,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).field",Parameter_1,field,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).value",Parameter_2,value,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).maxValue",Parameter_3,maxValue,long
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).entry",Parameter_1,entry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).paxHeaders",Parameter_3,paxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).paxHeaderName",Parameter_4,paxHeaderName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).linkType",Parameter_5,linkType,byte
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).fieldName",Parameter_6,fieldName,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int).bigNumberMode,Parameter_1,bigNumberMode,int
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int).longFileMode,Parameter_1,longFileMode,int
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char).c,Parameter_1,c,char
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry).from",Parameter_1,from,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry).to",Parameter_2,to,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).wBuf",Parameter_1,wBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).wOffset",Parameter_2,wOffset,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).numToWrite",Parameter_3,numToWrite,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).entry",Parameter_1,entry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).headers",Parameter_3,headers,java.util.Map
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[]).record,Parameter_1,record,byte[]
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream).os,Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).encoding",Parameter_4,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).charset",Parameter_3,charset,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String).charset",Parameter_2,charset,java.lang.String
"org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List).headers",Parameter_1,headers,java.util.Map
"org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List).sparseHeaders",Parameter_2,sparseHeaders,java.util.List
org.apache.commons.compress.archivers.tar.TarFile.getInputStream(TarArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.tar.TarArchiveEntry
org.apache.commons.compress.archivers.tar.TarFile.isEOFRecord(ByteBuffer).headerBuf,Parameter_1,headerBuf,java.nio.ByteBuffer
org.apache.commons.compress.archivers.tar.TarFile.repositionForwardBy(long).offset,Parameter_1,offset,long
org.apache.commons.compress.archivers.tar.TarFile.repositionForwardTo(long).newPosition,Parameter_1,newPosition,long
org.apache.commons.compress.archivers.tar.TarFile.setAtEOF(boolean).b,Parameter_1,b,boolean
org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[]).content,Parameter_1,content,byte[]
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean).content",Parameter_1,content,byte[]
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean).lenient",Parameter_2,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String).content",Parameter_1,content,byte[]
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String).encoding",Parameter_2,encoding,java.lang.String
org.apache.commons.compress.archivers.tar.TarFile.<init>(File).archive,Parameter_1,archive,java.io.File
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean).archive",Parameter_1,archive,java.io.File
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean).lenient",Parameter_2,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String).archive",Parameter_1,archive,java.io.File
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String).encoding",Parameter_2,encoding,java.lang.String
org.apache.commons.compress.archivers.tar.TarFile.<init>(Path).archivePath,Parameter_1,archivePath,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean).archivePath",Parameter_1,archivePath,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean).lenient",Parameter_2,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String).archivePath",Parameter_1,archivePath,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String).encoding",Parameter_2,encoding,java.lang.String
org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel).content,Parameter_1,content,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).archive",Parameter_1,archive,java.nio.channels.SeekableByteChannel
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).recordSize",Parameter_3,recordSize,int
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).encoding",Parameter_4,encoding,java.lang.String
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).lenient",Parameter_5,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer).pos",Parameter_1,pos,long
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer).pos",Parameter_1,pos,long
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).pos",Parameter_1,pos,long
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).numToRead",Parameter_3,numToRead,int
org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>(byte[]).headerBuf,Parameter_1,headerBuf,byte[]
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.equals(Object).o,Parameter_1,o,java.lang.Object
"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long).offset",Parameter_1,offset,long
"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long).numbytes",Parameter_2,numbytes,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long).seconds,Parameter_1,seconds,long
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean).fileName",Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean).preserveAbsolutePath",Parameter_2,preserveAbsolutePath,boolean
org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String).value",Parameter_2,value,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(Object).it,Parameter_1,it,java.lang.Object
org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry).it,Parameter_1,it,org.apache.commons.compress.archivers.tar.TarArchiveEntry
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[]).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[]).header",Parameter_2,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).value",Parameter_1,value,byte
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).outbuf",Parameter_3,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).value",Parameter_1,value,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).outbuf",Parameter_3,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).length",Parameter_4,length,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map).headers,Parameter_1,headers,java.util.Map
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map).headers,Parameter_1,headers,java.util.Map
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map).headers,Parameter_1,headers,java.util.Map
org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeader(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(TarArchiveEntry).desc,Parameter_1,desc,org.apache.commons.compress.archivers.tar.TarArchiveEntry
org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidPrefix(byte[]).header,Parameter_1,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[]).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[]).header",Parameter_2,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).header",Parameter_1,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).lenient",Parameter_4,lenient,boolean
org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[]).header,Parameter_1,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding).header",Parameter_1,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).header",Parameter_1,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).oldStyle",Parameter_3,oldStyle,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).lenient",Parameter_4,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).header",Parameter_2,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).encoding",Parameter_3,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).oldStyle",Parameter_4,oldStyle,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).lenient",Parameter_5,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).header",Parameter_2,header,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).encoding",Parameter_3,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).oldStyle",Parameter_4,oldStyle,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).lenient",Parameter_5,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String).val",Parameter_2,val,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).key",Parameter_1,key,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).val",Parameter_2,val,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).headers",Parameter_3,headers,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).normalizedName",Parameter_2,normalizedName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[]).options",Parameter_2,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setCreationTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDataOffset(long).dataOffset,Parameter_1,dataOffset,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int).devNo,Parameter_1,devNo,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int).devNo,Parameter_1,devNo,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int).groupId,Parameter_1,groupId,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long).groupId,Parameter_1,groupId,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String).groupName,Parameter_1,groupName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int).userId",Parameter_1,userId,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int).groupId",Parameter_2,groupId,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastAccessTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastModifiedTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String).link,Parameter_1,link,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int).mode,Parameter_1,mode,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date).time,Parameter_1,time,java.util.Date
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long).time,Parameter_1,time,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String).userName",Parameter_1,userName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String).groupName",Parameter_2,groupName,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSparseHeaders(List).sparseHeaders,Parameter_1,sparseHeaders,java.util.List
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setStatusChangeTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int).userId,Parameter_1,userId,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long).userId,Parameter_1,userId,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String).userName,Parameter_1,userName,java.lang.String
org.apache.commons.compress.archivers.tar.TarArchiveEntry.updateEntryFromPaxHeaders(Map).headers,Parameter_1,headers,java.util.Map
org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[]).outbuf,Parameter_1,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).outbuf",Parameter_1,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).starMode",Parameter_3,starMode,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).outbuf",Parameter_2,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).starMode",Parameter_5,starMode,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).time",Parameter_1,time,java.nio.file.attribute.FileTime
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).outbuf",Parameter_3,outbuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).fieldLength",Parameter_4,fieldLength,int
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(boolean).preserveAbsolutePath,Parameter_1,preserveAbsolutePath,boolean
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[]).headerBuf,Parameter_1,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding).headerBuf",Parameter_1,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).headerBuf",Parameter_1,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).lenient",Parameter_3,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).headerBuf",Parameter_1,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).encoding",Parameter_2,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).lenient",Parameter_3,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).dataOffset",Parameter_4,dataOffset,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File).file,Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).headerBuf",Parameter_2,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).encoding",Parameter_3,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).lenient",Parameter_4,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).globalPaxHeaders",Parameter_1,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).headerBuf",Parameter_2,headerBuf,byte[]
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).encoding",Parameter_3,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).lenient",Parameter_4,lenient,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).dataOffset",Parameter_5,dataOffset,long
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path).file,Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).file",Parameter_1,file,java.nio.file.Path
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).fileName",Parameter_2,fileName,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).linkOptions",Parameter_3,linkOptions,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean).preserveAbsolutePath",Parameter_2,preserveAbsolutePath,boolean
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte).linkFlag",Parameter_2,linkFlag,byte
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).linkFlag",Parameter_2,linkFlag,byte
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).preserveAbsolutePath",Parameter_3,preserveAbsolutePath,boolean
org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[]).buf,Parameter_1,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).current",Parameter_4,current,int
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).currentByte",Parameter_5,currentByte,byte
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).negative",Parameter_5,negative,boolean
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).negative",Parameter_5,negative,boolean
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).encoding",Parameter_5,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).buf",Parameter_2,buf,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).value",Parameter_1,value,long
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).buffer",Parameter_2,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).negative",Parameter_4,negative,boolean
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).negative",Parameter_4,negative,boolean
"org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String).sparseMap,Parameter_1,sparseMap,java.lang.String
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).encoding",Parameter_4,encoding,org.apache.commons.compress.archivers.zip.ZipEncoding
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String).sparseMap,Parameter_1,sparseMap,java.lang.String
"org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int).recordSize",Parameter_2,recordSize,int
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).sparseHeaders",Parameter_2,sparseHeaders,java.util.List
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).globalPaxHeaders",Parameter_3,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).sparseHeaders",Parameter_2,sparseHeaders,java.util.List
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).globalPaxHeaders",Parameter_3,globalPaxHeaders,java.util.Map
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).headerSize",Parameter_4,headerSize,long
"org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int).offset",Parameter_2,offset,int
org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).entries",Parameter_3,entries,int
org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[]).header,Parameter_1,header,byte[]
org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(ArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.ArchiveOutputStream.count(int).written,Parameter_1,written,int
org.apache.commons.compress.archivers.ArchiveOutputStream.count(long).written,Parameter_1,written,long
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.ArchiveOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(ArchiveEntry).archiveEntry,Parameter_1,archiveEntry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.archivers.ArchiveInputStream.count(int).read,Parameter_1,read,int
org.apache.commons.compress.archivers.ArchiveInputStream.count(long).read,Parameter_1,read,long
org.apache.commons.compress.archivers.ArchiveInputStream.forEach(IOConsumer).action,Parameter_1,action,org.apache.commons.io.function.IOConsumer
org.apache.commons.compress.archivers.ArchiveInputStream.mark(int).readlimit,Parameter_1,readlimit,int
org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long).pushedBack,Parameter_1,pushedBack,long
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String).charsetName",Parameter_2,charsetName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encode(String).str,Parameter_1,str,java.lang.String
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int).count,Parameter_1,count,int
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(CpioArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).number",Parameter_1,number,long
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).radix",Parameter_3,radix,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).number",Parameter_1,number,long
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).swapHalfWord",Parameter_3,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(byte[]).str,Parameter_1,str,byte[]
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry).e,Parameter_1,e,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean).entry",Parameter_1,entry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean).swapHalfWord",Parameter_2,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short).format",Parameter_2,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).format",Parameter_2,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).blockSize",Parameter_3,blockSize,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).format",Parameter_2,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).blockSize",Parameter_3,blockSize,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).encoding",Parameter_4,encoding,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int).length",Parameter_1,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int).radix",Parameter_2,radix,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean).length",Parameter_1,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean).swapHalfWord",Parameter_2,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int).length,Parameter_1,length,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean).hasCrc,Parameter_1,hasCrc,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean).swapHalfWord,Parameter_1,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readRange(int).len,Parameter_1,len,int
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int).length,Parameter_1,length,int
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).encoding",Parameter_3,encoding,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String).encoding",Parameter_2,encoding,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean).number",Parameter_1,number,byte[]
"org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean).swapHalfWord",Parameter_2,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long).mode,Parameter_1,mode,long
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).number",Parameter_1,number,long
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).length",Parameter_2,length,int
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).swapHalfWord",Parameter_3,swapHalfWord,boolean
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(long).nameSize,Parameter_1,nameSize,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long).chksum,Parameter_1,chksum,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long).device,Parameter_1,device,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long).maj,Parameter_1,maj,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long).min,Parameter_1,min,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long).gid,Parameter_1,gid,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long).inode,Parameter_1,inode,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long).mode,Parameter_1,mode,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long).nlink,Parameter_1,nlink,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long).device,Parameter_1,device,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long).rmaj,Parameter_1,rmaj,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long).rmin,Parameter_1,rmin,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long).size,Parameter_1,size,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long).time,Parameter_1,time,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long).uid,Parameter_1,uid,long
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String).inputFile",Parameter_1,inputFile,java.io.File
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Parameter_1,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Parameter_2,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).options",Parameter_3,options,java.nio.file.LinkOption[]
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short).format,Parameter_1,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).format",Parameter_1,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).inputFile",Parameter_2,inputFile,java.io.File
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).entryName",Parameter_3,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).format",Parameter_1,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).inputPath",Parameter_2,inputPath,java.nio.file.Path
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).entryName",Parameter_3,entryName,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).options",Parameter_4,options,java.nio.file.LinkOption[]
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String).format",Parameter_1,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).format",Parameter_1,format,short
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).name",Parameter_2,name,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).size",Parameter_3,size,long
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long).size",Parameter_2,size,long
"org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String).systemProperty",Parameter_1,systemProperty,java.lang.String
"org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String).defaultClassName",Parameter_2,defaultClassName,java.lang.String
org.apache.commons.compress.java.util.jar.Pack200$Packer.addPropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream).in",Parameter_1,in,java.util.jar.JarFile
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream).in",Parameter_1,in,java.util.jar.JarInputStream
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream).out",Parameter_2,out,java.io.OutputStream
org.apache.commons.compress.java.util.jar.Pack200$Packer.removePropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.addPropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.removePropertyChangeListener(PropertyChangeListener).listener,Parameter_1,listener,java.beans.PropertyChangeListener
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream).in",Parameter_1,in,java.io.File
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream).out",Parameter_2,out,java.util.jar.JarOutputStream
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream).out",Parameter_2,out,java.util.jar.JarOutputStream
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).size",Parameter_2,size,long
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).expectedCrc32",Parameter_3,expectedCrc32,int
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).size",Parameter_2,size,long
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).expectedCrc32",Parameter_3,expectedCrc32,long
org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable).c,Parameter_1,c,java.io.Closeable
"org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream).sourceFile",Parameter_1,sourceFile,java.io.File
"org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream).outputStream",Parameter_2,outputStream,java.io.OutputStream
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream).output",Parameter_2,output,java.io.OutputStream
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).output",Parameter_2,output,java.io.OutputStream
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).bufferSize",Parameter_3,bufferSize,int
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).len",Parameter_2,len,long
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).output",Parameter_3,output,java.io.OutputStream
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).length",Parameter_2,length,long
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).output",Parameter_3,output,java.io.OutputStream
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).bufferSize",Parameter_4,bufferSize,int
"org.apache.commons.compress.utils.IOUtils.read(File,byte[]).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.utils.IOUtils.read(File,byte[]).array",Parameter_2,array,byte[]
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[]).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[]).array",Parameter_2,array,byte[]
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).array",Parameter_2,array,byte[]
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).length",Parameter_4,length,int
"org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer).channel",Parameter_1,channel,java.nio.channels.ReadableByteChannel
"org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer).byteBuffer",Parameter_2,byteBuffer,java.nio.ByteBuffer
"org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int).length",Parameter_2,length,int
"org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int).input",Parameter_1,input,java.nio.channels.ReadableByteChannel
"org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int).length",Parameter_2,length,int
"org.apache.commons.compress.utils.IOUtils.skip(InputStream,long).input",Parameter_1,input,java.io.InputStream
"org.apache.commons.compress.utils.IOUtils.skip(InputStream,long).toSkip",Parameter_2,toSkip,long
org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream).input,Parameter_1,input,java.io.InputStream
org.apache.commons.compress.utils.Sets.newHashSet(Object[]).elements,Parameter_1,elements,java.lang.Object[]
org.apache.commons.compress.utils.ByteUtils.checkReadLength(int).length,Parameter_1,length,int
org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int).supplier",Parameter_1,supplier,org.apache.commons.compress.utils.ByteUtils$ByteSupplier
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int).length",Parameter_2,length,int
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int).in",Parameter_1,in,java.io.DataInput
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int).length",Parameter_2,length,int
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int).length",Parameter_2,length,int
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).value",Parameter_2,value,long
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).off",Parameter_3,off,int
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).length",Parameter_4,length,int
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).consumer",Parameter_1,consumer,org.apache.commons.compress.utils.ByteUtils$ByteConsumer
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).value",Parameter_2,value,long
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).length",Parameter_3,length,int
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).out",Parameter_1,out,java.io.DataOutput
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).value",Parameter_2,value,long
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).length",Parameter_3,length,int
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).value",Parameter_2,value,long
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).length",Parameter_3,length,int
org.apache.commons.compress.utils.ByteUtils$ByteConsumer.accept(int).b,Parameter_1,b,int
org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.<init>(InputStream).is,Parameter_1,is,java.io.InputStream
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.accept(int).b,Parameter_1,b,int
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.<init>(OutputStream).os,Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator).collection",Parameter_1,collection,java.util.Collection
"org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator).iterator",Parameter_2,iterator,java.util.Iterator
"org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int).a",Parameter_1,a,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int).size",Parameter_2,size,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[]).buffer1",Parameter_1,buffer1,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[]).buffer2",Parameter_2,buffer2,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).buffer1",Parameter_1,buffer1,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).buffer2",Parameter_2,buffer2,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).ignoreTrailingNulls",Parameter_3,ignoreTrailingNulls,boolean
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).buffer1",Parameter_1,buffer1,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).offset1",Parameter_2,offset1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).length1",Parameter_3,length1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).buffer2",Parameter_4,buffer2,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).offset2",Parameter_5,offset2,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).length2",Parameter_6,length2,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).buffer1",Parameter_1,buffer1,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).offset1",Parameter_2,offset1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).length1",Parameter_3,length1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).buffer2",Parameter_4,buffer2,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).offset2",Parameter_5,offset2,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).length2",Parameter_6,length2,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).ignoreTrailingNulls",Parameter_7,ignoreTrailingNulls,boolean
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).buffer1",Parameter_1,buffer1,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).offset1",Parameter_2,offset1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).length1",Parameter_3,length1,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).buffer2",Parameter_4,buffer2,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).offset2",Parameter_5,offset2,int
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).length2",Parameter_6,length2,int
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[]).expected",Parameter_1,expected,java.lang.String
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[]).buffer",Parameter_2,buffer,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).expected",Parameter_1,expected,java.lang.String
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).buffer",Parameter_2,buffer,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).offset",Parameter_3,offset,int
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).length",Parameter_4,length,int
org.apache.commons.compress.utils.ArchiveUtils.sanitize(String).s,Parameter_1,s,java.lang.String
org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String).inputString,Parameter_1,inputString,java.lang.String
org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[]).inputBytes,Parameter_1,inputBytes,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).inputBytes",Parameter_1,inputBytes,byte[]
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry).entry,Parameter_1,entry,org.apache.commons.compress.archivers.ArchiveEntry
org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class).clazz,Parameter_1,clazz,java.lang.Class
org.apache.commons.compress.utils.Charsets.toCharset(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.compress.utils.Charsets.toCharset(String).charset,Parameter_1,charset,java.lang.String
"org.apache.commons.compress.utils.ExactMath.add(int,long).x",Parameter_1,x,int
"org.apache.commons.compress.utils.ExactMath.add(int,long).y",Parameter_2,y,long
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer).pos",Parameter_1,pos,long
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long).start",Parameter_1,start,long
"org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long).remaining",Parameter_2,remaining,long
org.apache.commons.compress.utils.Lists.newArrayList(Iterator).iterator,Parameter_1,iterator,java.util.Iterator
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).checksum",Parameter_1,checksum,java.util.zip.Checksum
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).size",Parameter_3,size,long
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).expectedChecksum",Parameter_4,expectedChecksum,long
org.apache.commons.compress.utils.SkipShieldingInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.utils.SkipShieldingInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream).checksum",Parameter_1,checksum,java.util.zip.Checksum
"org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
"org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long).size",Parameter_2,size,long
org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(ByteBuffer).src,Parameter_1,src,java.nio.ByteBuffer
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int).out",Parameter_1,out,java.nio.channels.WritableByteChannel
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int).blockSize",Parameter_2,blockSize,int
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.write(ByteBuffer).buffer,Parameter_1,buffer,java.nio.ByteBuffer
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.utils.BitInputStream.ensureCache(int).count,Parameter_1,count,int
org.apache.commons.compress.utils.BitInputStream.processBitsGreater57(int).count,Parameter_1,count,int
org.apache.commons.compress.utils.BitInputStream.readBits(int).count,Parameter_1,count,int
org.apache.commons.compress.utils.BitInputStream.readCachedBits(int).count,Parameter_1,count,int
"org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder).byteOrder",Parameter_2,byteOrder,java.nio.ByteOrder
org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime).time,Parameter_1,time,java.nio.file.attribute.FileTime
org.apache.commons.compress.utils.TimeUtils.isUnixTime(long).seconds,Parameter_1,seconds,long
org.apache.commons.compress.utils.TimeUtils.ntfsTimeToDate(long).ntfsTime,Parameter_1,ntfsTime,long
org.apache.commons.compress.utils.TimeUtils.ntfsTimeToFileTime(long).ntfsTime,Parameter_1,ntfsTime,long
org.apache.commons.compress.utils.TimeUtils.toDate(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.utils.TimeUtils.toFileTime(Date).date,Parameter_1,date,java.util.Date
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(Date).date,Parameter_1,date,java.util.Date
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long).javaTime,Parameter_1,javaTime,long
org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.utils.TimeUtils.truncateToHundredNanos(FileTime).fileTime,Parameter_1,fileTime,java.nio.file.attribute.FileTime
org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long).time,Parameter_1,time,long
org.apache.commons.compress.utils.CountingOutputStream.count(long).written,Parameter_1,written,long
org.apache.commons.compress.utils.CountingOutputStream.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.utils.CountingOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.utils.CountingOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int).radix",Parameter_2,radix,int
org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int).radix",Parameter_2,radix,int
org.apache.commons.compress.utils.CountingInputStream.count(long).read,Parameter_1,read,long
org.apache.commons.compress.utils.CountingInputStream.read(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.utils.CountingInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long).newPosition,Parameter_1,newPosition,long
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer).buf,Parameter_1,buf,java.nio.ByteBuffer
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int).newLength,Parameter_1,newLength,int
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long).newSize,Parameter_1,newSize,long
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer).b,Parameter_1,b,java.nio.ByteBuffer
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(int).size,Parameter_1,size,int
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]).files,Parameter_1,files,java.io.File[]
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]).paths,Parameter_1,paths,java.nio.file.Path[]
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]).channels,Parameter_1,channels,java.nio.channels.SeekableByteChannel[]
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long).newPosition,Parameter_1,newPosition,long
"org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long).channelNumber",Parameter_1,channelNumber,long
"org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long).relativeOffset",Parameter_2,relativeOffset,long
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.read(ByteBuffer).dst,Parameter_1,dst,java.nio.ByteBuffer
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.truncate(long).size,Parameter_1,size,long
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.write(ByteBuffer).src,Parameter_1,src,java.nio.ByteBuffer
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>(List).channels,Parameter_1,channels,java.util.List
org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path).path,Parameter_1,path,java.nio.file.Path
org.apache.commons.compress.utils.FileNameUtils.getBaseName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.utils.FileNameUtils.getExtension(Path).path,Parameter_1,path,java.nio.file.Path
org.apache.commons.compress.utils.FileNameUtils.getExtension(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer).pos",Parameter_1,pos,long
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer).buf",Parameter_2,buf,java.nio.ByteBuffer
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).start",Parameter_1,start,long
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).remaining",Parameter_2,remaining,long
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).channel",Parameter_3,channel,java.nio.channels.SeekableByteChannel
org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class).service,Parameter_1,service,java.lang.Class
"org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader).service",Parameter_1,service,java.lang.Class
"org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader).classLoader",Parameter_2,classLoader,java.lang.ClassLoader
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).data",Parameter_2,data,java.lang.String
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).charset",Parameter_3,charset,java.nio.charset.Charset
org.apache.commons.compress.CompressFilterOutputStream.write(File).file,Parameter_1,file,java.io.File
org.apache.commons.compress.CompressFilterOutputStream.write(Path).path,Parameter_1,path,java.nio.file.Path
org.apache.commons.compress.CompressFilterOutputStream.writeUsAscii(String).data,Parameter_1,data,java.lang.String
org.apache.commons.compress.CompressFilterOutputStream.writeUsAsciiRaw(String).data,Parameter_1,data,java.lang.String
org.apache.commons.compress.CompressFilterOutputStream.writeUtf8(String).data,Parameter_1,data,java.lang.String
org.apache.commons.compress.CompressFilterOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.compressors.CompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(HuffmanDecoder).decoder,Parameter_1,decoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[]).litTable,Parameter_1,litTable,int[]
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[]).litTable,Parameter_1,litTable,int[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode).reader",Parameter_1,reader,org.apache.commons.compress.utils.BitInputStream
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode).tree",Parameter_2,tree,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).reader",Parameter_1,reader,org.apache.commons.compress.utils.BitInputStream
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).literals",Parameter_2,literals,int[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).distances",Parameter_3,distances,int[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int).reader",Parameter_1,reader,org.apache.commons.compress.utils.BitInputStream
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int).numBits",Parameter_2,numBits,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(int).numBits,Parameter_1,numBits,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leaf(int).symbol,Parameter_1,symbol,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.<init>(int).bits,Parameter_1,bits,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte).b,Parameter_1,b,byte
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.incCounter(int).counter,Parameter_1,counter,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).distance",Parameter_1,distance,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).buff",Parameter_3,buff,byte[]
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(int).bits,Parameter_1,bits,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.mark(int).readLimit,Parameter_1,readLimit,int
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean).doCache,Parameter_1,doCache,boolean
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>(InputStream).is,Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters).params",Parameter_2,params,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize).blockSize,Parameter_1,blockSize,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).blockSize",Parameter_1,blockSize,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withContentChecksum",Parameter_2,withContentChecksum,boolean
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withBlockChecksum",Parameter_3,withBlockChecksum,boolean
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withBlockDependency",Parameter_4,withBlockDependency,boolean
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.init(boolean).firstFrame,Parameter_1,firstFrame,boolean
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readSignature(boolean).firstFrame,Parameter_1,firstFrame,boolean
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.skipSkippableFrame(byte[]).b,Parameter_1,b,byte[]
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Parameter_2,decompressConcatenated,boolean
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int).offset",Parameter_1,offset,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).expanded",Parameter_1,expanded,byte[]
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordLiteral(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeBlocksAndReturnUnfinishedPair(int).length,Parameter_1,length,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeWritablePairs(int).lengthOfBlocksAfterLastPair,Parameter_1,lengthOfBlocksAfterLastPair,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters).params",Parameter_2,params,org.apache.commons.compress.compressors.lz77support.Parameters
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int).litLength",Parameter_1,litLength,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int).brLength",Parameter_2,brLength,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream).length",Parameter_1,length,int
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream).out",Parameter_2,out,java.io.OutputStream
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.canBeWritten(int).lengthOfBlocksAfterThisPair,Parameter_1,lengthOfBlocksAfterThisPair,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependLiteral(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.splitWithNewBackReferenceLengthOf(int).newBackReferenceLength,Parameter_1,newBackReferenceLength,int
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeTo(OutputStream).out,Parameter_1,out,java.io.OutputStream
org.apache.commons.compress.compressors.lz4.XXHash32.<init>(int).seed,Parameter_1,seed,int
org.apache.commons.compress.compressors.gzip.GzipParameters.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.compressors.gzip.GzipParameters.requireNonNulByte(String).text,Parameter_1,text,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipParameters.setBufferSize(int).bufferSize,Parameter_1,bufferSize,int
org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String).comment,Parameter_1,comment,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int).compressionLevel,Parameter_1,compressionLevel,int
org.apache.commons.compress.compressors.gzip.GzipParameters.setDeflateStrategy(int).deflateStrategy,Parameter_1,deflateStrategy,int
org.apache.commons.compress.compressors.gzip.GzipParameters.setExtraField(ExtraField).extra,Parameter_1,extra,org.apache.commons.compress.compressors.gzip.ExtraField
org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipParameters.setFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipParameters.setFileNameCharset(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.compress.compressors.gzip.GzipParameters.setHeaderCRC(boolean).headerCRC,Parameter_1,headerCRC,boolean
org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationInstant(Instant).modificationTime,Parameter_1,modificationTime,java.time.Instant
org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long).modificationTimeSeconds,Parameter_1,modificationTimeSeconds,long
org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int).operatingSystem,Parameter_1,operatingSystem,int
org.apache.commons.compress.compressors.gzip.GzipParameters.setOS(OS).os,Parameter_1,os,org.apache.commons.compress.compressors.gzip.GzipParameters$OS
org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerCrc(long).trailerCrc,Parameter_1,trailerCrc,long
org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerISize(long).trailerISize,Parameter_1,trailerISize,long
org.apache.commons.compress.compressors.gzip.GzipParameters$OS.from(int).code,Parameter_1,code,int
org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[]).buffer,Parameter_1,buffer,byte[]
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset).value",Parameter_1,value,java.lang.String
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberHeader(GzipParameters).parameters,Parameter_1,parameters,org.apache.commons.compress.compressors.gzip.GzipParameters
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters).parameters",Parameter_2,parameters,org.apache.commons.compress.compressors.gzip.GzipParameters
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput).inData,Parameter_1,inData,java.io.DataInput
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean).isFirstMember,Parameter_1,isFirstMember,boolean
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(Builder).builder,Parameter_1,builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Parameter_2,decompressConcatenated,boolean
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setDecompressConcatenated(boolean).decompressConcatenated,Parameter_1,decompressConcatenated,boolean
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setFileNameCharset(Charset).fileNameCharset,Parameter_1,fileNameCharset,java.nio.charset.Charset
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberEnd(IOConsumer).onMemberEnd,Parameter_1,onMemberEnd,org.apache.commons.io.function.IOConsumer
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberStart(IOConsumer).onMemberStart,Parameter_1,onMemberStart,org.apache.commons.io.function.IOConsumer
org.apache.commons.compress.compressors.gzip.ExtraField.fromBytes(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[]).id",Parameter_1,id,java.lang.String
"org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[]).payload",Parameter_2,payload,byte[]
org.apache.commons.compress.compressors.gzip.ExtraField.equals(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.compress.compressors.gzip.ExtraField.findFirstSubField(String).id,Parameter_1,id,java.lang.String
org.apache.commons.compress.compressors.gzip.ExtraField.getSubField(int).index,Parameter_1,index,int
org.apache.commons.compress.compressors.gzip.ExtraField$SubField.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).si1",Parameter_1,si1,byte
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).si2",Parameter_2,si2,byte
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).payload",Parameter_3,payload,byte[]
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte).previousCode",Parameter_1,previousCode,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte).character",Parameter_2,character,byte
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).previousCode",Parameter_1,previousCode,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).character",Parameter_2,character,byte
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).maxTableSize",Parameter_3,maxTableSize,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean).code",Parameter_1,code,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean).addedUnfinishedEntry",Parameter_2,addedUnfinishedEntry,boolean
org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(int).offset,Parameter_1,offset,int
org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int).maxCodeSize,Parameter_1,maxCodeSize,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int).maxCodeSize",Parameter_1,maxCodeSize,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int).memoryLimiKiB",Parameter_2,memoryLimiKiB,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int).codeSize,Parameter_1,codeSize,int
org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(int).cs,Parameter_1,cs,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int).offset",Parameter_1,offset,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int).value",Parameter_2,value,int
org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int).newSize,Parameter_1,newSize,int
"org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder).byteOrder",Parameter_2,byteOrder,java.nio.ByteOrder
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte).previousCode",Parameter_1,previousCode,int
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte).character",Parameter_2,character,byte
org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int).memoryLimitInKiB",Parameter_2,memoryLimitInKiB,int
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int).preset",Parameter_2,preset,int
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Parameter_2,decompressConcatenated,boolean
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).decompressConcatenated",Parameter_2,decompressConcatenated,boolean
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).memoryLimitInKb",Parameter_3,memoryLimitInKb,int
org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean).doCache,Parameter_1,doCache,boolean
org.apache.commons.compress.compressors.CompressorInputStream.count(int).read,Parameter_1,read,int
org.apache.commons.compress.compressors.CompressorInputStream.count(long).read,Parameter_1,read,long
org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long).pushedBack,Parameter_1,pushedBack,long
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long).x,Parameter_1,x,long
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long).numBytes",Parameter_1,numBytes,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long).num",Parameter_2,num,long
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters).params",Parameter_2,params,org.apache.commons.compress.compressors.lz77support.Parameters
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream).is,Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int).is",Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long).x,Parameter_1,x,long
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect).dialect",Parameter_2,dialect,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).blockSize",Parameter_2,blockSize,int
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).dialect",Parameter_3,dialect,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int).blockSize,Parameter_1,blockSize,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(int).b,Parameter_1,b,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int).len",Parameter_1,len,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).tag",Parameter_1,tag,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).offsetBytes",Parameter_2,offsetBytes,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).offset",Parameter_4,offset,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int).len",Parameter_1,len,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int).len",Parameter_1,len,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int).numBytes",Parameter_1,numBytes,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int).num",Parameter_2,num,int
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeUncompressedSize(long).uncompressedSize,Parameter_1,uncompressedSize,long
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long).uncompressedSize",Parameter_2,uncompressedSize,long
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).os",Parameter_1,os,java.io.OutputStream
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).uncompressedSize",Parameter_2,uncompressedSize,long
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).blockSize",Parameter_3,blockSize,int
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).uncompressedSize",Parameter_2,uncompressedSize,long
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).params",Parameter_3,params,org.apache.commons.compress.compressors.lz77support.Parameters
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).from",Parameter_2,from,int
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map).props",Parameter_2,props,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).props",Parameter_3,props,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int).limit,Parameter_1,limit,int
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).count",Parameter_3,count,int
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long).count,Parameter_1,count,long
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File).file,Parameter_1,file,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map).properties",Parameter_2,properties,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).file",Parameter_1,file,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).properties",Parameter_3,properties,java.util.Map
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).file",Parameter_2,file,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).mode",Parameter_3,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).properties",Parameter_4,properties,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map).properties",Parameter_2,properties,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).mode",Parameter_2,mode,org.apache.commons.compress.compressors.pack200.Pack200Strategy
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).properties",Parameter_3,properties,java.util.Map
org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File).jar,Parameter_1,jar,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File).from",Parameter_1,from,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File).to",Parameter_2,to,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).from",Parameter_1,from,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).to",Parameter_2,to,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).props",Parameter_3,props,java.util.Map
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map).jar",Parameter_1,jar,java.io.File
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map).props",Parameter_2,props,java.util.Map
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).decompressUntilEOF",Parameter_3,decompressUntilEOF,boolean
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream).out",Parameter_2,out,java.io.OutputStream
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters).parameters",Parameter_2,parameters,org.apache.commons.compress.compressors.deflate.DeflateParameters
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters).parameters",Parameter_2,parameters,org.apache.commons.compress.compressors.deflate.DeflateParameters
org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int).compressionLevel,Parameter_1,compressionLevel,int
org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean).zlibHeader,Parameter_1,zlibHeader,boolean
org.apache.commons.compress.compressors.CompressorException.<init>(String).message,Parameter_1,message,java.lang.String
"org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable).message",Parameter_1,message,java.lang.String
"org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable).cause",Parameter_2,cause,java.lang.Throwable
org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set).compressorNames",Parameter_2,compressorNames,java.util.Set
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).names",Parameter_1,names,java.util.Set
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).provider",Parameter_2,provider,org.apache.commons.compress.compressors.CompressorStreamProvider
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).map",Parameter_3,map,java.util.TreeMap
org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String).url",Parameter_2,url,java.lang.String
org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set).compressorNames",Parameter_2,compressorNames,java.util.Set
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).in",Parameter_2,in,java.io.InputStream
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).actualDecompressConcatenated",Parameter_3,actualDecompressConcatenated,boolean
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream).name",Parameter_1,name,java.lang.String
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream).out",Parameter_2,out,java.io.OutputStream
org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean).decompressConcatenated,Parameter_1,decompressConcatenated,boolean
org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean).decompressUntilEOF,Parameter_1,decompressUntilEOF,boolean
"org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int).decompressUntilEOF",Parameter_1,decompressUntilEOF,boolean
"org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int).memoryLimitInKb",Parameter_2,memoryLimitInKb,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream).outStream,Parameter_1,outStream,java.io.OutputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int).outStream",Parameter_1,outStream,java.io.OutputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int).level",Parameter_2,level,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).outStream",Parameter_1,outStream,java.io.OutputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).level",Parameter_2,level,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).closeFrameOnFlush",Parameter_3,closeFrameOnFlush,boolean
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).outStream",Parameter_1,outStream,java.io.OutputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).level",Parameter_2,level,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).closeFrameOnFlush",Parameter_3,closeFrameOnFlush,boolean
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).useChecksum",Parameter_4,useChecksum,boolean
"org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean).doCache,Parameter_1,doCache,boolean
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.mark(int).readLimit,Parameter_1,readLimit,int
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[]).b,Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool).bufferPool",Parameter_2,bufferPool,com.github.luben.zstd.BufferPool
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.prefill(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long).offset",Parameter_1,offset,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long).length",Parameter_2,length,long
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startLiteral(long).length,Parameter_1,length,long
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToCopy(int).bytesToCopy,Parameter_1,bytesToCopy,int
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToReadLiteral(int).bytesToRead,Parameter_1,bytesToRead,int
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int).is",Parameter_1,is,java.io.InputStream
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int).windowSize",Parameter_2,windowSize,int
org.apache.commons.compress.compressors.lz77support.Parameters.builder(int).windowSize,Parameter_1,windowSize,int
org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int).x,Parameter_1,x,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).windowSize",Parameter_1,windowSize,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).minBackReferenceLength",Parameter_2,minBackReferenceLength,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxBackReferenceLength",Parameter_3,maxBackReferenceLength,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxOffset",Parameter_4,maxOffset,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxLiteralLength",Parameter_5,maxLiteralLength,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).niceBackReferenceLength",Parameter_6,niceBackReferenceLength,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxCandidates",Parameter_7,maxCandidates,int
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).lazyMatching",Parameter_8,lazyMatching,boolean
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).lazyThreshold",Parameter_9,lazyThreshold,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyMatching(boolean).lazy,Parameter_1,lazy,boolean
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyThreshold(int).threshold,Parameter_1,threshold,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxBackReferenceLength(int).maxBackReferenceLength,Parameter_1,maxBackReferenceLength,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxLiteralLength(int).maxLiteralLength,Parameter_1,maxLiteralLength,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxNumberOfCandidates(int).maxCandidates,Parameter_1,maxCandidates,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxOffset(int).maxOffset,Parameter_1,maxOffset,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMinBackReferenceLength(int).minBackReferenceLength,Parameter_1,minBackReferenceLength,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withNiceBackReferenceLength(int).niceLen,Parameter_1,niceLen,int
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.<init>(int).windowSize,Parameter_1,windowSize,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).len",Parameter_3,len,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushBackReference(int).matchLength,Parameter_1,matchLength,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertString(int).pos,Parameter_1,pos,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertStringsInMatch(int).matchLength,Parameter_1,matchLength,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatch(int).matchHead,Parameter_1,matchHead,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatchForNextPosition(int).prevMatchLength,Parameter_1,prevMatchLength,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte).oldHash",Parameter_1,oldHash,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte).nextByte",Parameter_2,nextByte,byte
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prefill(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback).params",Parameter_1,params,org.apache.commons.compress.compressors.lz77support.Parameters
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback).callback",Parameter_2,callback,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).blockType",Parameter_1,blockType,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).length",Parameter_3,length,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int).offset",Parameter_1,offset,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(BlockType).type,Parameter_1,type,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback.accept(Block).b,Parameter_1,b,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int).length",Parameter_2,length,int
org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean).doCache,Parameter_1,doCache,boolean
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(long).n,Parameter_1,n,long
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int).memoryLimitKiB",Parameter_2,memoryLimitKiB,int
org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.FileNameUtil.getCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.FileNameUtil.isCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String).uncompressSuffix",Parameter_1,uncompressSuffix,java.util.Map
"org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String).defaultExtension",Parameter_2,defaultExtension,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long).inputLength,Parameter_1,inputLength,long
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).code",Parameter_1,code,int[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).length",Parameter_2,length,byte[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).minLen",Parameter_3,minLen,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).maxLen",Parameter_4,maxLen,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).alphaSize",Parameter_5,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).len",Parameter_1,len,byte[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).freq",Parameter_2,freq,int[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).dat",Parameter_3,dat,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).alphaSize",Parameter_4,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).maxLen",Parameter_5,maxLen,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int).u,Parameter_1,u,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int).c,Parameter_1,c,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int).n",Parameter_1,n,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int).v",Parameter_2,v,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int).alphaSize",Parameter_2,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int).alphaSize",Parameter_2,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int).nSelectors",Parameter_2,nSelectors,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int).alphaSize",Parameter_2,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int).nSelectors",Parameter_2,nSelectors,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int).nGroups",Parameter_1,nGroups,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int).alphaSize",Parameter_2,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).buf",Parameter_1,buf,byte[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).offs",Parameter_2,offs,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int).b,Parameter_1,b,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream).out,Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int).out",Parameter_1,out,java.io.OutputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int).blockSize",Parameter_2,blockSize,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.<init>(int).blockSize100k,Parameter_1,blockSize100k,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).a",Parameter_1,a,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).b",Parameter_2,b,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).c",Parameter_3,c,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).p1",Parameter_2,p1,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).p2",Parameter_3,p2,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).n",Parameter_4,n,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).eclass",Parameter_2,eclass,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).loSt",Parameter_3,loSt,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).hiSt",Parameter_4,hiSt,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).eclass",Parameter_2,eclass,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).lo",Parameter_3,lo,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).hi",Parameter_4,hi,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).block",Parameter_2,block,byte[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).nblock",Parameter_3,nblock,int
org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int).sp,Parameter_1,sp,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).sp",Parameter_1,sp,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).lz",Parameter_2,lz,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).hz",Parameter_3,hz,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).zz1",Parameter_2,zz1,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).zz2",Parameter_3,zz2,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).fmap",Parameter_1,fmap,int[]
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyp1",Parameter_2,yyp1,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyp2",Parameter_3,yyp2,int
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyn",Parameter_4,yyn,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream).bin,Parameter_1,bin,org.apache.commons.compress.utils.BitInputStream
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream).bin,Parameter_1,bin,org.apache.commons.compress.utils.BitInputStream
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream).bin,Parameter_1,bin,org.apache.commons.compress.utils.BitInputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int).bin",Parameter_1,bin,org.apache.commons.compress.utils.BitInputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int).n",Parameter_2,n,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).checkVal",Parameter_1,checkVal,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).limitExclusive",Parameter_2,limitExclusive,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).name",Parameter_3,name,java.lang.String
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).limit",Parameter_1,limit,int[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).base",Parameter_2,base,int[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).perm",Parameter_3,perm,int[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).length",Parameter_4,length,char[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).minLen",Parameter_5,minLen,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).maxLen",Parameter_6,maxLen,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).alphaSize",Parameter_7,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int).signature",Parameter_1,signature,byte[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int).length",Parameter_2,length,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int).alphaSize",Parameter_1,alphaSize,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int).nGroups",Parameter_2,nGroups,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean).isFirstStream,Parameter_1,isFirstStream,boolean
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).dest",Parameter_1,dest,byte[]
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).offs",Parameter_2,offs,int
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.readNextByte(BitInputStream).in,Parameter_1,in,org.apache.commons.compress.utils.BitInputStream
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream).in,Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean).in",Parameter_1,in,java.io.InputStream
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Parameter_2,decompressConcatenated,boolean
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.initTT(int).length,Parameter_1,length,int
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.<init>(int).blockSize100k,Parameter_1,blockSize100k,int
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String).fileName,Parameter_1,fileName,java.lang.String
org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String).fileName,Parameter_1,fileName,java.lang.String
"org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int).baseCrc",Parameter_1,baseCrc,int
"org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int).inCh",Parameter_2,inCh,int
org.apache.commons.compress.compressors.bzip2.CRC.update(int).inCh,Parameter_1,inCh,int
"org.apache.commons.compress.compressors.bzip2.CRC.update(int,int).inCh",Parameter_1,inCh,int
"org.apache.commons.compress.compressors.bzip2.CRC.update(int,int).repeat",Parameter_2,repeat,int
org.apache.commons.compress.compressors.bzip2.Rand.rNums(int).i,Parameter_1,i,int
"org.apache.commons.compress.MemoryLimitException.buildMessage(long,int).memoryNeededInKb",Parameter_1,memoryNeededInKb,long
"org.apache.commons.compress.MemoryLimitException.buildMessage(long,int).memoryLimitInKb",Parameter_2,memoryLimitInKb,int
"org.apache.commons.compress.MemoryLimitException.<init>(long,int).memoryNeededKiB",Parameter_1,memoryNeededKiB,long
"org.apache.commons.compress.MemoryLimitException.<init>(long,int).memoryLimitKiB",Parameter_2,memoryLimitKiB,int
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).memoryNeededKiB",Parameter_1,memoryNeededKiB,long
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).memoryLimitKiB",Parameter_2,memoryLimitKiB,int
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).cause",Parameter_3,cause,java.lang.Exception
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).memoryNeededKiB",Parameter_1,memoryNeededKiB,long
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).memoryLimitKiB",Parameter_2,memoryLimitKiB,int
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).cause",Parameter_3,cause,java.lang.Throwable
org.apache.commons.compress.PasswordRequiredException.<init>(String).name,Parameter_1,name,java.lang.String
