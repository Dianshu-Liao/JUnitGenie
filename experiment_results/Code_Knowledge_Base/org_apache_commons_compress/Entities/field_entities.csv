FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target,Field,No Comment,private final Path target;,java.nio.file.Path target,"private , final "
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.outputStream,Field,No Comment,private final OutputStream outputStream;,java.io.OutputStream outputStream,"private , final "
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed,Field,No Comment,private boolean closed;,boolean closed,private 
org.apache.commons.compress.changes.Change.targetFileName,Field,Entry name to delete.,private final String targetFileName;,java.lang.String targetFileName,"private , final "
org.apache.commons.compress.changes.Change.entry,Field,New entry to add.,private final E entry;,org.apache.commons.compress.archivers.ArchiveEntry entry,"private , final "
org.apache.commons.compress.changes.Change.inputStream,Field,Source for new entry.,private final InputStream inputStream;,java.io.InputStream inputStream,"private , final "
org.apache.commons.compress.changes.Change.replaceMode,Field,Change should replaceMode existing entries.,private final boolean replaceMode;,boolean replaceMode,"private , final "
org.apache.commons.compress.changes.Change.type,Field,Type of change.,private final ChangeType type;,org.apache.commons.compress.changes.Change$ChangeType type,"private , final "
org.apache.commons.compress.changes.ChangeSet.changes,Field,No Comment,private final Set<Change<E>> changes = new LinkedHashSet<>();,java.util.Set changes,"private , final "
org.apache.commons.compress.changes.ChangeSetPerformer.changes,Field,No Comment,private final Set<Change<E>> changes;,java.util.Set changes,"private , final "
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.inputStream,Field,No Comment,private final ArchiveInputStream<E> inputStream;,org.apache.commons.compress.archivers.ArchiveInputStream inputStream,"private , final "
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.next,Field,No Comment,private E next;,org.apache.commons.compress.archivers.ArchiveEntry next,private 
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.zipFile,Field,No Comment,private final ZipFile zipFile;,org.apache.commons.compress.archivers.zip.ZipFile zipFile,"private , final "
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.nestedEnumeration,Field,No Comment,private final Enumeration<ZipArchiveEntry> nestedEnumeration;,java.util.Enumeration nestedEnumeration,"private , final "
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.currentEntry,Field,No Comment,private ZipArchiveEntry currentEntry;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry currentEntry,private 
org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet,Field,No Comment,private final List<String> addedFromChangeSet = new ArrayList<>();,java.util.List addedFromChangeSet,"private , final "
org.apache.commons.compress.changes.ChangeSetResults.addedFromStream,Field,No Comment,private final List<String> addedFromStream = new ArrayList<>();,java.util.List addedFromStream,"private , final "
org.apache.commons.compress.changes.ChangeSetResults.deleted,Field,No Comment,private final List<String> deleted = new ArrayList<>();,java.util.List deleted,"private , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.EMPTY_STRING_ARRAY,Field,No Comment,private static final String[] EMPTY_STRING_ARRAY = {};,java.lang.String[] EMPTY_STRING_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.NESTED_CLASS_FLAG,Field,No Comment,public static final int NESTED_CLASS_FLAG = 0x00010000;,int NESTED_CLASS_FLAG,"public , static , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.EMPTY_ARRAY,Field,No Comment,static final IcTuple[] EMPTY_ARRAY = {};,org.apache.commons.compress.harmony.unpack200.IcTuple[] EMPTY_ARRAY,"static , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.cIndex,Field,No Comment,private final int cIndex;,int cIndex,"private , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.c2Index,Field,No Comment,private final int c2Index;,int c2Index,"private , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.nIndex,Field,No Comment,private final int nIndex;,int nIndex,"private , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.tIndex,Field,No Comment,private final int tIndex;,int tIndex,"private , final "
org.apache.commons.compress.harmony.unpack200.IcTuple.C,Field,this class,protected String C;,java.lang.String C,protected 
org.apache.commons.compress.harmony.unpack200.IcTuple.F,Field,flags,protected int F;,int F,protected 
org.apache.commons.compress.harmony.unpack200.IcTuple.C2,Field,outer class,protected String C2;,java.lang.String C2,protected 
org.apache.commons.compress.harmony.unpack200.IcTuple.N,Field,name,protected String N;,java.lang.String N,protected 
org.apache.commons.compress.harmony.unpack200.IcTuple.predictSimple,Field,No Comment,private boolean predictSimple;,boolean predictSimple,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.predictOuter,Field,No Comment,private boolean predictOuter;,boolean predictOuter,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.cachedOuterClassString,Field,No Comment,private String cachedOuterClassString;,java.lang.String cachedOuterClassString,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.cachedSimpleClassName,Field,No Comment,private String cachedSimpleClassName;,java.lang.String cachedSimpleClassName,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.initialized,Field,No Comment,private boolean initialized;,boolean initialized,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.anonymous,Field,No Comment,private boolean anonymous;,boolean anonymous,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.outerIsAnonymous,Field,No Comment,private boolean outerIsAnonymous;,boolean outerIsAnonymous,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.member,Field,No Comment,private boolean member = true;,boolean member,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.cachedOuterClassIndex,Field,No Comment,private int cachedOuterClassIndex = -1;,int cachedOuterClassIndex,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.cachedSimpleClassNameIndex,Field,No Comment,private int cachedSimpleClassNameIndex = -1;,int cachedSimpleClassNameIndex,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.IcTuple.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.BcBands.methodByteCodePacked,Field,The bytecodes for each method in each class as they come (i.e. in their packed format).,private byte[][][] methodByteCodePacked;,byte[][][] methodByteCodePacked,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcCaseCount,Field,TODO: Haven't resolved references yet. Do we want to?,private int[] bcCaseCount;,int[] bcCaseCount,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcCaseValue,Field,No Comment,private int[] bcCaseValue;,int[] bcCaseValue,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcByte,Field,No Comment,private int[] bcByte;,int[] bcByte,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcLocal,Field,No Comment,private int[] bcLocal;,int[] bcLocal,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcShort,Field,No Comment,private int[] bcShort;,int[] bcShort,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcLabel,Field,No Comment,private int[] bcLabel;,int[] bcLabel,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcIntRef,Field,No Comment,private int[] bcIntRef;,int[] bcIntRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcFloatRef,Field,No Comment,private int[] bcFloatRef;,int[] bcFloatRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcLongRef,Field,No Comment,private int[] bcLongRef;,int[] bcLongRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcDoubleRef,Field,No Comment,private int[] bcDoubleRef;,int[] bcDoubleRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcStringRef,Field,No Comment,private int[] bcStringRef;,int[] bcStringRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcClassRef,Field,No Comment,private int[] bcClassRef;,int[] bcClassRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcFieldRef,Field,No Comment,private int[] bcFieldRef;,int[] bcFieldRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcMethodRef,Field,No Comment,private int[] bcMethodRef;,int[] bcMethodRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcIMethodRef,Field,No Comment,private int[] bcIMethodRef;,int[] bcIMethodRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcThisField,Field,No Comment,private int[] bcThisField;,int[] bcThisField,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcSuperField,Field,No Comment,private int[] bcSuperField;,int[] bcSuperField,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcThisMethod,Field,No Comment,private int[] bcThisMethod;,int[] bcThisMethod,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcSuperMethod,Field,No Comment,private int[] bcSuperMethod;,int[] bcSuperMethod,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcInitRef,Field,No Comment,private int[] bcInitRef;,int[] bcInitRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcEscRef,Field,No Comment,private int[] bcEscRef;,int[] bcEscRef,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcEscRefSize,Field,No Comment,private int[] bcEscRefSize;,int[] bcEscRefSize,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcEscSize,Field,No Comment,private int[] bcEscSize;,int[] bcEscSize,private 
org.apache.commons.compress.harmony.unpack200.BcBands.bcEscByte,Field,No Comment,private int[][] bcEscByte;,int[][] bcEscByte,private 
org.apache.commons.compress.harmony.unpack200.BcBands.wideByteCodes,Field,No Comment,private List<Integer> wideByteCodes;,java.util.List wideByteCodes,private 
org.apache.commons.compress.harmony.unpack200.SegmentOptions.DEFLATE_HINT,Field,No Comment,private static final int DEFLATE_HINT = 1 << 5;,int DEFLATE_HINT,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_ALL_CODE_FLAGS,Field,No Comment,private static final int HAVE_ALL_CODE_FLAGS = 1 << 2;,int HAVE_ALL_CODE_FLAGS,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_CLASS_FLAGS_HI,Field,No Comment,private static final int HAVE_CLASS_FLAGS_HI = 1 << 9;,int HAVE_CLASS_FLAGS_HI,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_CODE_FLAGS_HI,Field,No Comment,private static final int HAVE_CODE_FLAGS_HI = 1 << 10;,int HAVE_CODE_FLAGS_HI,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_CP_NUMBERS,Field,No Comment,private static final int HAVE_CP_NUMBERS = 1 << 1;,int HAVE_CP_NUMBERS,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_FIELD_FLAGS_HI,Field,No Comment,private static final int HAVE_FIELD_FLAGS_HI = 1 << 10;,int HAVE_FIELD_FLAGS_HI,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_FILE_HEADERS,Field,No Comment,private static final int HAVE_FILE_HEADERS = 1 << 4;,int HAVE_FILE_HEADERS,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_FILE_MODTIME,Field,No Comment,private static final int HAVE_FILE_MODTIME = 1 << 6;,int HAVE_FILE_MODTIME,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_FILE_OPTIONS,Field,No Comment,private static final int HAVE_FILE_OPTIONS = 1 << 7;,int HAVE_FILE_OPTIONS,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_FILE_SIZE_HI,Field,No Comment,private static final int HAVE_FILE_SIZE_HI = 1 << 8;,int HAVE_FILE_SIZE_HI,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_METHOD_FLAGS_HI,Field,No Comment,private static final int HAVE_METHOD_FLAGS_HI = 1 << 11;,int HAVE_METHOD_FLAGS_HI,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.HAVE_SPECIAL_FORMATS,Field,No Comment,private static final int HAVE_SPECIAL_FORMATS = 1 << 0;,int HAVE_SPECIAL_FORMATS,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.UNUSED,Field,"* The bit flags that are defined as unused by the specification; specifically, every bit above bit 13 and bit 3.",private static final int UNUSED = -1 << 13 | 1 << 3;,int UNUSED,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentOptions.options,Field,No Comment,private final int options;,int options,"private , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.knownArrays,Field,No Comment,"protected IdentityHashMap<String[], CachedArray> knownArrays = new IdentityHashMap<>(1000);",java.util.IdentityHashMap knownArrays,protected 
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.lastIndexes,Field,No Comment,protected List<Integer> lastIndexes;,java.util.List lastIndexes,protected 
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.lastArray,Field,No Comment,protected String[] lastArray;,java.lang.String[] lastArray,protected 
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.lastKey,Field,No Comment,protected String lastKey;,java.lang.String lastKey,protected 
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.primaryArray,Field,No Comment,String[] primaryArray;,java.lang.String[] primaryArray,default
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.lastKnownSize,Field,No Comment,int lastKnownSize;,int lastKnownSize,default
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.primaryTable,Field,No Comment,"HashMap<String, List<Integer>> primaryTable;",java.util.HashMap primaryTable,default
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.rvaUTF8,Field,No Comment,private static CPUTF8 rvaUTF8;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 rvaUTF8,"private , static "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.riaUTF8,Field,No Comment,private static CPUTF8 riaUTF8;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 riaUTF8,"private , static "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.rvpaUTF8,Field,No Comment,private static CPUTF8 rvpaUTF8;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 rvpaUTF8,"private , static "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.ripaUTF8,Field,No Comment,private static CPUTF8 ripaUTF8;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 ripaUTF8,"private , static "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.type,Field,No Comment,private final String type;,java.lang.String type,"private , final "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.unpack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.attributes,Field,No Comment,private List<Attribute> attributes;,java.util.List attributes,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.param_NB,Field,No Comment,public int[] param_NB;,int[] param_NB,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.anno_N,Field,No Comment,public int[] anno_N;,int[] anno_N,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.type_RS,Field,No Comment,public CPUTF8[][] type_RS;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[][] type_RS,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.pair_N,Field,No Comment,public int[][] pair_N;,int[][] pair_N,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.name_RU,Field,No Comment,public CPUTF8[] name_RU;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] name_RU,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.T,Field,No Comment,public int[] T;,int[] T,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseI_KI,Field,No Comment,public CPInteger[] caseI_KI;,org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger[] caseI_KI,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseD_KD,Field,No Comment,public CPDouble[] caseD_KD;,org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble[] caseD_KD,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseF_KF,Field,No Comment,public CPFloat[] caseF_KF;,org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat[] caseF_KF,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseJ_KJ,Field,No Comment,public CPLong[] caseJ_KJ;,org.apache.commons.compress.harmony.unpack200.bytecode.CPLong[] caseJ_KJ,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.casec_RS,Field,No Comment,public CPUTF8[] casec_RS;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] casec_RS,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseet_RS,Field,No Comment,public String[] caseet_RS;,java.lang.String[] caseet_RS,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseec_RU,Field,No Comment,public String[] caseec_RU;,java.lang.String[] caseec_RU,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.cases_RU,Field,No Comment,public CPUTF8[] cases_RU;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] cases_RU,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.casearray_N,Field,No Comment,public int[] casearray_N;,int[] casearray_N,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nesttype_RS,Field,No Comment,public CPUTF8[] nesttype_RS;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] nesttype_RS,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nestpair_N,Field,No Comment,public int[] nestpair_N;,int[] nestpair_N,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nestname_RU,Field,No Comment,public CPUTF8[] nestname_RU;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] nestname_RU,public 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseI_KI_Index,Field,No Comment,private int caseI_KI_Index;,int caseI_KI_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseD_KD_Index,Field,No Comment,private int caseD_KD_Index;,int caseD_KD_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseF_KF_Index,Field,No Comment,private int caseF_KF_Index;,int caseF_KF_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseJ_KJ_Index,Field,No Comment,private int caseJ_KJ_Index;,int caseJ_KJ_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.casec_RS_Index,Field,No Comment,private int casec_RS_Index;,int casec_RS_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseet_RS_Index,Field,No Comment,private int caseet_RS_Index;,int caseet_RS_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.caseec_RU_Index,Field,No Comment,private int caseec_RU_Index;,int caseec_RU_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.cases_RU_Index,Field,No Comment,private int cases_RU_Index;,int cases_RU_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.casearray_N_Index,Field,No Comment,private int casearray_N_Index;,int casearray_N_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.T_index,Field,No Comment,private int T_index;,int T_index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nesttype_RS_Index,Field,No Comment,private int nesttype_RS_Index;,int nesttype_RS_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nestpair_N_Index,Field,No Comment,private int nestpair_N_Index;,int nestpair_N_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.nestname_RU_Iterator,Field,No Comment,private Iterator<CPUTF8> nestname_RU_Iterator;,java.util.Iterator nestname_RU_Iterator,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.anno_N_Index,Field,No Comment,private int anno_N_Index;,int anno_N_Index,private 
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.pair_N_Index,Field,No Comment,private int pair_N_Index;,int pair_N_Index,private 
org.apache.commons.compress.harmony.unpack200.Segment.LOG_LEVEL_VERBOSE,Field,* Log level verbose {@value},public static final int LOG_LEVEL_VERBOSE = 2;,int LOG_LEVEL_VERBOSE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.Segment.LOG_LEVEL_STANDARD,Field,* Log level standard {@value},public static final int LOG_LEVEL_STANDARD = 1;,int LOG_LEVEL_STANDARD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.Segment.LOG_LEVEL_QUIET,Field,* Log level quiet {@value},public static final int LOG_LEVEL_QUIET = 0;,int LOG_LEVEL_QUIET,"public , static , final "
org.apache.commons.compress.harmony.unpack200.Segment.header,Field,No Comment,private SegmentHeader header;,org.apache.commons.compress.harmony.unpack200.SegmentHeader header,private 
org.apache.commons.compress.harmony.unpack200.Segment.cpBands,Field,No Comment,private CpBands cpBands;,org.apache.commons.compress.harmony.unpack200.CpBands cpBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.attrDefinitionBands,Field,No Comment,private AttrDefinitionBands attrDefinitionBands;,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands attrDefinitionBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.icBands,Field,No Comment,private IcBands icBands;,org.apache.commons.compress.harmony.unpack200.IcBands icBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.classBands,Field,No Comment,private ClassBands classBands;,org.apache.commons.compress.harmony.unpack200.ClassBands classBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.bcBands,Field,No Comment,private BcBands bcBands;,org.apache.commons.compress.harmony.unpack200.BcBands bcBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.fileBands,Field,No Comment,private FileBands fileBands;,org.apache.commons.compress.harmony.unpack200.FileBands fileBands,private 
org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint,Field,No Comment,private boolean overrideDeflateHint;,boolean overrideDeflateHint,private 
org.apache.commons.compress.harmony.unpack200.Segment.deflateHint,Field,No Comment,private boolean deflateHint;,boolean deflateHint,private 
org.apache.commons.compress.harmony.unpack200.Segment.doPreRead,Field,No Comment,private boolean doPreRead;,boolean doPreRead,private 
org.apache.commons.compress.harmony.unpack200.Segment.logLevel,Field,No Comment,private int logLevel;,int logLevel,private 
org.apache.commons.compress.harmony.unpack200.Segment.logPrintWriter,Field,No Comment,private PrintWriter logPrintWriter;,java.io.PrintWriter logPrintWriter,private 
org.apache.commons.compress.harmony.unpack200.Segment.classFilesContents,Field,No Comment,private byte[][] classFilesContents;,byte[][] classFilesContents,private 
org.apache.commons.compress.harmony.unpack200.Segment.fileDeflate,Field,No Comment,private boolean[] fileDeflate;,boolean[] fileDeflate,private 
org.apache.commons.compress.harmony.unpack200.Segment.fileIsClass,Field,No Comment,private boolean[] fileIsClass;,boolean[] fileIsClass,private 
org.apache.commons.compress.harmony.unpack200.Segment.internalBuffer,Field,No Comment,private InputStream internalBuffer;,java.io.InputStream internalBuffer,private 
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.classLayouts,Field,No Comment,"private final Map<Integer, AttributeLayout> classLayouts = new HashMap<>();",java.util.Map classLayouts,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.fieldLayouts,Field,No Comment,"private final Map<Integer, AttributeLayout> fieldLayouts = new HashMap<>();",java.util.Map fieldLayouts,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.methodLayouts,Field,No Comment,"private final Map<Integer, AttributeLayout> methodLayouts = new HashMap<>();",java.util.Map methodLayouts,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.codeLayouts,Field,No Comment,"private final Map<Integer, AttributeLayout> codeLayouts = new HashMap<>();",java.util.Map codeLayouts,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.layouts,Field,"* The order of the maps in this array should not be changed as their indices correspond to the value of their context constants\n     * (AttributeLayout.CONTEXT_CLASS etc.)\n     * <p>\n     * All elements are of type {@code Map<Integer, AttributeLayout>}.\n     * </p>","// Cannot create a generic array\n@SuppressWarnings(""unchecked"")\nprivate final Map<Integer, AttributeLayout>[] layouts = new Map[] { classLayouts, fieldLayouts, methodLayouts, codeLayouts };",java.util.Map[] layouts,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.layoutsToBands,Field,No Comment,"private final Map<AttributeLayout, NewAttributeBands> layoutsToBands = new HashMap<>();",java.util.Map layoutsToBands,"private , final "
org.apache.commons.compress.harmony.unpack200.SegmentHeader.EMPTY_BYTE_ARRAY,Field,No Comment,private static final byte[] EMPTY_BYTE_ARRAY = {};,byte[] EMPTY_BYTE_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentHeader.magic,Field,* The magic header for a Pack200 Segment is 0xCAFED00D. I wonder where they get their inspiration from ...,"private static final int[] magic = { 0xCA, 0xFE, 0xD0, 0x0D };",int[] magic,"private , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentHeader.archiveMajor,Field,No Comment,private int archiveMajor;,int archiveMajor,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.archiveMinor,Field,No Comment,private int archiveMinor;,int archiveMinor,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.archiveModtime,Field,No Comment,private long archiveModtime;,long archiveModtime,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.archiveSize,Field,No Comment,private long archiveSize;,long archiveSize,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.attributeDefinitionCount,Field,No Comment,private int attributeDefinitionCount;,int attributeDefinitionCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.bandHeadersInputStream,Field,No Comment,private InputStream bandHeadersInputStream;,java.io.InputStream bandHeadersInputStream,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.bandHeadersSize,Field,No Comment,private int bandHeadersSize;,int bandHeadersSize,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.classCount,Field,No Comment,private int classCount;,int classCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpClassCount,Field,No Comment,private int cpClassCount;,int cpClassCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpDescriptorCount,Field,No Comment,private int cpDescriptorCount;,int cpDescriptorCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpDoubleCount,Field,No Comment,private int cpDoubleCount;,int cpDoubleCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpFieldCount,Field,No Comment,private int cpFieldCount;,int cpFieldCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpFloatCount,Field,No Comment,private int cpFloatCount;,int cpFloatCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpIMethodCount,Field,No Comment,private int cpIMethodCount;,int cpIMethodCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpIntCount,Field,No Comment,private int cpIntCount;,int cpIntCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpLongCount,Field,No Comment,private int cpLongCount;,int cpLongCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpMethodCount,Field,No Comment,private int cpMethodCount;,int cpMethodCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpSignatureCount,Field,No Comment,private int cpSignatureCount;,int cpSignatureCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpStringCount,Field,No Comment,private int cpStringCount;,int cpStringCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.cpUTF8Count,Field,No Comment,private int cpUTF8Count;,int cpUTF8Count,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.defaultClassMajorVersion,Field,No Comment,private int defaultClassMajorVersion;,int defaultClassMajorVersion,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.defaultClassMinorVersion,Field,No Comment,private int defaultClassMinorVersion;,int defaultClassMinorVersion,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.innerClassCount,Field,No Comment,private int innerClassCount;,int innerClassCount,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.numberOfFiles,Field,No Comment,private int numberOfFiles;,int numberOfFiles,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.segmentsRemaining,Field,No Comment,private int segmentsRemaining;,int segmentsRemaining,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.options,Field,No Comment,private SegmentOptions options;,org.apache.commons.compress.harmony.unpack200.SegmentOptions options,private 
org.apache.commons.compress.harmony.unpack200.SegmentHeader.segment,Field,No Comment,private final Segment segment;,org.apache.commons.compress.harmony.unpack200.Segment segment,"private , final "
org.apache.commons.compress.harmony.unpack200.SegmentHeader.archiveSizeOffset,Field,No Comment,private int archiveSizeOffset;,int archiveSizeOffset,private 
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_ABSTRACT,Field,$NON-NLS-1$,"public static final String ACC_ABSTRACT = ""ACC_ABSTRACT"";",java.lang.String ACC_ABSTRACT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_ANNOTATION,Field,$NON-NLS-1$,"public static final String ACC_ANNOTATION = ""ACC_ANNOTATION"";",java.lang.String ACC_ANNOTATION,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_ENUM,Field,$NON-NLS-1$,"public static final String ACC_ENUM = ""ACC_ENUM"";",java.lang.String ACC_ENUM,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_FINAL,Field,$NON-NLS-1$,"public static final String ACC_FINAL = ""ACC_FINAL"";",java.lang.String ACC_FINAL,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_INTERFACE,Field,$NON-NLS-1$,"public static final String ACC_INTERFACE = ""ACC_INTERFACE"";",java.lang.String ACC_INTERFACE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_NATIVE,Field,$NON-NLS-1$,"public static final String ACC_NATIVE = ""ACC_NATIVE"";",java.lang.String ACC_NATIVE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_PRIVATE,Field,$NON-NLS-1$,"public static final String ACC_PRIVATE = ""ACC_PRIVATE"";",java.lang.String ACC_PRIVATE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_PROTECTED,Field,$NON-NLS-1$,"public static final String ACC_PROTECTED = ""ACC_PROTECTED"";",java.lang.String ACC_PROTECTED,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_PUBLIC,Field,$NON-NLS-1$,"public static final String ACC_PUBLIC = ""ACC_PUBLIC"";",java.lang.String ACC_PUBLIC,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_STATIC,Field,$NON-NLS-1$,"public static final String ACC_STATIC = ""ACC_STATIC"";",java.lang.String ACC_STATIC,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_STRICT,Field,$NON-NLS-1$,"public static final String ACC_STRICT = ""ACC_STRICT"";",java.lang.String ACC_STRICT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_SYNCHRONIZED,Field,$NON-NLS-1$,"public static final String ACC_SYNCHRONIZED = ""ACC_SYNCHRONIZED"";",java.lang.String ACC_SYNCHRONIZED,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_SYNTHETIC,Field,$NON-NLS-1$,"public static final String ACC_SYNTHETIC = ""ACC_SYNTHETIC"";",java.lang.String ACC_SYNTHETIC,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_TRANSIENT,Field,$NON-NLS-1$,"public static final String ACC_TRANSIENT = ""ACC_TRANSIENT"";",java.lang.String ACC_TRANSIENT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ACC_VOLATILE,Field,$NON-NLS-1$,"public static final String ACC_VOLATILE = ""ACC_VOLATILE"";",java.lang.String ACC_VOLATILE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_ANNOTATION_DEFAULT,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_ANNOTATION_DEFAULT = ""AnnotationDefault"";",java.lang.String ATTRIBUTE_ANNOTATION_DEFAULT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_CLASS_FILE_VERSION,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_CLASS_FILE_VERSION = ""class-file version"";",java.lang.String ATTRIBUTE_CLASS_FILE_VERSION,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_CODE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_CODE = ""Code"";",java.lang.String ATTRIBUTE_CODE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_CONSTANT_VALUE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_CONSTANT_VALUE = ""ConstantValue"";",java.lang.String ATTRIBUTE_CONSTANT_VALUE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_DEPRECATED,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_DEPRECATED = ""Deprecated"";",java.lang.String ATTRIBUTE_DEPRECATED,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_ENCLOSING_METHOD,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_ENCLOSING_METHOD = ""EnclosingMethod"";",java.lang.String ATTRIBUTE_ENCLOSING_METHOD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_EXCEPTIONS,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_EXCEPTIONS = ""Exceptions"";",java.lang.String ATTRIBUTE_EXCEPTIONS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_INNER_CLASSES,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_INNER_CLASSES = ""InnerClasses"";",java.lang.String ATTRIBUTE_INNER_CLASSES,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_LINE_NUMBER_TABLE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_LINE_NUMBER_TABLE = ""LineNumberTable"";",java.lang.String ATTRIBUTE_LINE_NUMBER_TABLE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_LOCAL_VARIABLE_TABLE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_LOCAL_VARIABLE_TABLE = ""LocalVariableTable"";",java.lang.String ATTRIBUTE_LOCAL_VARIABLE_TABLE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_LOCAL_VARIABLE_TYPE_TABLE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_LOCAL_VARIABLE_TYPE_TABLE = ""LocalVariableTypeTable"";",java.lang.String ATTRIBUTE_LOCAL_VARIABLE_TYPE_TABLE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_RUNTIME_INVISIBLE_ANNOTATIONS,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_RUNTIME_INVISIBLE_ANNOTATIONS = ""RuntimeInvisibleAnnotations"";",java.lang.String ATTRIBUTE_RUNTIME_INVISIBLE_ANNOTATIONS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = ""RuntimeInvisibleParameterAnnotations"";",java.lang.String ATTRIBUTE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_RUNTIME_VISIBLE_ANNOTATIONS,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_RUNTIME_VISIBLE_ANNOTATIONS = ""RuntimeVisibleAnnotations"";",java.lang.String ATTRIBUTE_RUNTIME_VISIBLE_ANNOTATIONS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = ""RuntimeVisibleParameterAnnotations"";",java.lang.String ATTRIBUTE_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_SIGNATURE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_SIGNATURE = ""Signature"";",java.lang.String ATTRIBUTE_SIGNATURE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.ATTRIBUTE_SOURCE_FILE,Field,$NON-NLS-1$,"public static final String ATTRIBUTE_SOURCE_FILE = ""SourceFile"";",java.lang.String ATTRIBUTE_SOURCE_FILE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.CONTEXT_CLASS,Field,* {@value},public static final int CONTEXT_CLASS = 0;,int CONTEXT_CLASS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.CONTEXT_CODE,Field,* {@value},public static final int CONTEXT_CODE = 3;,int CONTEXT_CODE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.CONTEXT_FIELD,Field,* {@value},public static final int CONTEXT_FIELD = 1;,int CONTEXT_FIELD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.CONTEXT_METHOD,Field,* {@value},public static final int CONTEXT_METHOD = 2;,int CONTEXT_METHOD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.contextNames,Field,* Context names.,"public static final String[] contextNames = { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n""Class"", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n""Field"", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n""Method"", //$NON-NLS-1$\n""Code"" };",java.lang.String[] contextNames,"public , static , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.context,Field,No Comment,private final int context;,int context,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.index,Field,No Comment,private final int index;,int index,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.layout,Field,No Comment,private final String layout;,java.lang.String layout,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.mask,Field,No Comment,private long mask;,long mask,private 
org.apache.commons.compress.harmony.unpack200.AttributeLayout.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.isDefault,Field,No Comment,private final boolean isDefault;,boolean isDefault,"private , final "
org.apache.commons.compress.harmony.unpack200.AttributeLayout.backwardsCallCount,Field,No Comment,private int backwardsCallCount;,int backwardsCallCount,private 
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.attributeDefinitionHeader,Field,No Comment,private int[] attributeDefinitionHeader;,int[] attributeDefinitionHeader,private 
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.attributeDefinitionLayout,Field,No Comment,private String[] attributeDefinitionLayout;,java.lang.String[] attributeDefinitionLayout,private 
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.attributeDefinitionName,Field,No Comment,private String[] attributeDefinitionName;,java.lang.String[] attributeDefinitionName,private 
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.attributeDefinitionMap,Field,No Comment,private AttributeLayoutMap attributeDefinitionMap;,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap attributeDefinitionMap,private 
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.cpUTF8,Field,No Comment,private final String[] cpUTF8;,java.lang.String[] cpUTF8,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.EMPTY_STRING,Field,$NON-NLS-1$,"private static final String EMPTY_STRING = """";",java.lang.String EMPTY_STRING,"private , static , final "
org.apache.commons.compress.harmony.unpack200.CpBands.pool,Field,No Comment,private final SegmentConstantPool pool = new SegmentConstantPool(this);,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool pool,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.cpClass,Field,No Comment,private String[] cpClass;,java.lang.String[] cpClass,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpClassInts,Field,No Comment,private int[] cpClassInts;,int[] cpClassInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpDescriptorNameInts,Field,No Comment,private int[] cpDescriptorNameInts;,int[] cpDescriptorNameInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpDescriptorTypeInts,Field,No Comment,private int[] cpDescriptorTypeInts;,int[] cpDescriptorTypeInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpDescriptor,Field,No Comment,private String[] cpDescriptor;,java.lang.String[] cpDescriptor,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpDouble,Field,No Comment,private double[] cpDouble;,double[] cpDouble,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldClass,Field,No Comment,private String[] cpFieldClass;,java.lang.String[] cpFieldClass,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldDescriptor,Field,No Comment,private String[] cpFieldDescriptor;,java.lang.String[] cpFieldDescriptor,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldClassInts,Field,No Comment,private int[] cpFieldClassInts;,int[] cpFieldClassInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldDescriptorInts,Field,No Comment,private int[] cpFieldDescriptorInts;,int[] cpFieldDescriptorInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpFloat,Field,No Comment,private float[] cpFloat;,float[] cpFloat,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodClass,Field,No Comment,private String[] cpIMethodClass;,java.lang.String[] cpIMethodClass,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodDescriptor,Field,No Comment,private String[] cpIMethodDescriptor;,java.lang.String[] cpIMethodDescriptor,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodClassInts,Field,No Comment,private int[] cpIMethodClassInts;,int[] cpIMethodClassInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodDescriptorInts,Field,No Comment,private int[] cpIMethodDescriptorInts;,int[] cpIMethodDescriptorInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpInt,Field,No Comment,private int[] cpInt;,int[] cpInt,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpLong,Field,No Comment,private long[] cpLong;,long[] cpLong,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodClass,Field,No Comment,private String[] cpMethodClass;,java.lang.String[] cpMethodClass,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodDescriptor,Field,No Comment,private String[] cpMethodDescriptor;,java.lang.String[] cpMethodDescriptor,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodClassInts,Field,No Comment,private int[] cpMethodClassInts;,int[] cpMethodClassInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodDescriptorInts,Field,No Comment,private int[] cpMethodDescriptorInts;,int[] cpMethodDescriptorInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpSignature,Field,No Comment,private String[] cpSignature;,java.lang.String[] cpSignature,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureInts,Field,No Comment,private int[] cpSignatureInts;,int[] cpSignatureInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpString,Field,No Comment,private String[] cpString;,java.lang.String[] cpString,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpStringInts,Field,No Comment,private int[] cpStringInts;,int[] cpStringInts,private 
org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8,Field,No Comment,private String[] cpUTF8;,java.lang.String[] cpUTF8,private 
org.apache.commons.compress.harmony.unpack200.CpBands.stringsToCPUTF8,Field,No Comment,"private final Map<String, CPUTF8> stringsToCPUTF8 = new HashMap<>();",java.util.Map stringsToCPUTF8,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.stringsToCPStrings,Field,No Comment,"private final Map<String, CPString> stringsToCPStrings = new HashMap<>();",java.util.Map stringsToCPStrings,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.longsToCPLongs,Field,No Comment,"private final Map<Long, CPLong> longsToCPLongs = new HashMap<>();",java.util.Map longsToCPLongs,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.integersToCPIntegers,Field,No Comment,"private final Map<Integer, CPInteger> integersToCPIntegers = new HashMap<>();",java.util.Map integersToCPIntegers,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.floatsToCPFloats,Field,No Comment,"private final Map<Float, CPFloat> floatsToCPFloats = new HashMap<>();",java.util.Map floatsToCPFloats,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.stringsToCPClass,Field,No Comment,"private final Map<String, CPClass> stringsToCPClass = new HashMap<>();",java.util.Map stringsToCPClass,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.doublesToCPDoubles,Field,No Comment,"private final Map<Double, CPDouble> doublesToCPDoubles = new HashMap<>();",java.util.Map doublesToCPDoubles,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.descriptorsToCPNameAndTypes,Field,No Comment,"private final Map<String, CPNameAndType> descriptorsToCPNameAndTypes = new HashMap<>();",java.util.Map descriptorsToCPNameAndTypes,"private , final "
org.apache.commons.compress.harmony.unpack200.CpBands.mapClass,Field,No Comment,"private Map<String, Integer> mapClass;",java.util.Map mapClass,private 
org.apache.commons.compress.harmony.unpack200.CpBands.mapDescriptor,Field,No Comment,"private Map<String, Integer> mapDescriptor;",java.util.Map mapDescriptor,private 
org.apache.commons.compress.harmony.unpack200.CpBands.mapUTF8,Field,No Comment,"private Map<String, Integer> mapUTF8;",java.util.Map mapUTF8,private 
org.apache.commons.compress.harmony.unpack200.CpBands.mapSignature,Field,TODO: Not used,"private Map<String, Integer> mapSignature;",java.util.Map mapSignature,private 
org.apache.commons.compress.harmony.unpack200.CpBands.intOffset,Field,No Comment,private int intOffset;,int intOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.floatOffset,Field,No Comment,private int floatOffset;,int floatOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.longOffset,Field,No Comment,private int longOffset;,int longOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.doubleOffset,Field,No Comment,private int doubleOffset;,int doubleOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.stringOffset,Field,No Comment,private int stringOffset;,int stringOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.classOffset,Field,No Comment,private int classOffset;,int classOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.signatureOffset,Field,No Comment,private int signatureOffset;,int signatureOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.descrOffset,Field,No Comment,private int descrOffset;,int descrOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.fieldOffset,Field,No Comment,private int fieldOffset;,int fieldOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.methodOffset,Field,No Comment,private int methodOffset;,int methodOffset,private 
org.apache.commons.compress.harmony.unpack200.CpBands.imethodOffset,Field,No Comment,private int imethodOffset;,int imethodOffset,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.attributeLayout,Field,No Comment,private final AttributeLayout attributeLayout;,org.apache.commons.compress.harmony.unpack200.AttributeLayout attributeLayout,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.backwardsCallCount,Field,No Comment,private int backwardsCallCount;,int backwardsCallCount,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.attributeLayoutElements,Field,No Comment,protected List<AttributeLayoutElement> attributeLayoutElements;,java.util.List attributeLayoutElements,protected 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.callableIndex,Field,No Comment,private final int callableIndex;,int callableIndex,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.callable,Field,No Comment,private Callable callable;,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable callable,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.body,Field,No Comment,private final List<LayoutElement> body;,java.util.List body,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.isBackwardsCallable,Field,No Comment,private boolean isBackwardsCallable;,boolean isBackwardsCallable,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.isFirstCallable,Field,No Comment,private boolean isFirstCallable;,boolean isFirstCallable,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.count,Field,No Comment,private int count;,int count,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.index,Field,No Comment,private int index;,int index,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.tag,Field,No Comment,private final String tag;,java.lang.String tag,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.band,Field,No Comment,private int[] band;,int[] band,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.tag,Field,No Comment,private final String tag;,java.lang.String tag,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.band,Field,No Comment,private Object band;,java.lang.Object band,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.length,Field,No Comment,private final int length;,int length,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.countElement,Field,No Comment,private final Integral countElement;,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral countElement,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.layoutElements,Field,No Comment,private final List<LayoutElement> layoutElements = new ArrayList<>();,java.util.List layoutElements,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.unionTag,Field,No Comment,private final Integral unionTag;,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral unionTag,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.unionCases,Field,No Comment,private final List<UnionCase> unionCases;,java.util.List unionCases,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.defaultCaseBody,Field,No Comment,private final List<LayoutElement> defaultCaseBody;,java.util.List defaultCaseBody,"private , final "
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.caseCounts,Field,No Comment,private int[] caseCounts;,int[] caseCounts,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.defaultCount,Field,No Comment,private int defaultCount;,int defaultCount,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.body,Field,No Comment,private List<LayoutElement> body;,java.util.List body,private 
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.tags,Field,No Comment,private final List<Integer> tags;,java.util.List tags,"private , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.ALL,Field,* Value {@value}.,public static final int ALL = 0;,int ALL,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.UTF_8,Field,* Value {@value}.,public static final int UTF_8 = 1;,int UTF_8,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_INT,Field,* Value {@value}.,public static final int CP_INT = 2;,int CP_INT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_FLOAT,Field,* Value {@value}.,public static final int CP_FLOAT = 3;,int CP_FLOAT,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_LONG,Field,* Value {@value}.,public static final int CP_LONG = 4;,int CP_LONG,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_DOUBLE,Field,* Value {@value}.,public static final int CP_DOUBLE = 5;,int CP_DOUBLE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_STRING,Field,* Value {@value}.,public static final int CP_STRING = 6;,int CP_STRING,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_CLASS,Field,* Value {@value}.,public static final int CP_CLASS = 7;,int CP_CLASS,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.SIGNATURE,Field,TODO and more to come --,public static final int SIGNATURE = 8;,int SIGNATURE,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_DESCR,Field,* Value {@value}.,public static final int CP_DESCR = 9;,int CP_DESCR,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_FIELD,Field,* Value {@value}.,public static final int CP_FIELD = 10;,int CP_FIELD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_METHOD,Field,* Value {@value}.,public static final int CP_METHOD = 11;,int CP_METHOD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.CP_IMETHOD,Field,* Value {@value}.,public static final int CP_IMETHOD = 12;,int CP_IMETHOD,"public , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.REGEX_MATCH_ALL,Field,* Value {@value}.,"protected static final String REGEX_MATCH_ALL = "".*"";",java.lang.String REGEX_MATCH_ALL,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.INITSTRING,Field,* Value {@value}.,"protected static final String INITSTRING = ""<init>"";",java.lang.String INITSTRING,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.REGEX_MATCH_INIT,Field,* Value {@value}.,"protected static final String REGEX_MATCH_INIT = ""^"" + INITSTRING + "".*"";",java.lang.String REGEX_MATCH_INIT,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.bands,Field,No Comment,private final CpBands bands;,org.apache.commons.compress.harmony.unpack200.CpBands bands,"private , final "
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.arrayCache,Field,No Comment,private final SegmentConstantPoolArrayCache arrayCache = new SegmentConstantPoolArrayCache();,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache arrayCache,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.index,Field,No Comment,private int index;,int index,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.name,Field,No Comment,public String name;,java.lang.String name,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.utf8,Field,No Comment,private final CPUTF8 utf8;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 utf8,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.className,Field,No Comment,CPClass className;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.classNameIndex,Field,No Comment,transient int classNameIndex;,int classNameIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.nameAndType,Field,No Comment,protected CPNameAndType nameAndType;,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.nameAndTypeIndex,Field,No Comment,transient int nameAndTypeIndex;,int nameAndTypeIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.cachedToString,Field,No Comment,protected String cachedToString;,java.lang.String cachedToString,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.attributes,Field,No Comment,List<Attribute> attributes;,java.util.List attributes,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.flags,Field,No Comment,short flags;,short flags,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.name,Field,No Comment,CPUTF8 name;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.nameIndex,Field,No Comment,transient int nameIndex;,int nameIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.descriptor,Field,No Comment,protected final CPUTF8 descriptor;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor,"protected , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.descriptorIndex,Field,No Comment,transient int descriptorIndex;,int descriptorIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.startPC,Field,No Comment,private final int startPC;,int startPC,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.endPC,Field,No Comment,private final int endPC;,int endPC,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.handlerPC,Field,No Comment,private final int handlerPC;,int handlerPC,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.catchType,Field,No Comment,private final CPClass catchType;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass catchType,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.startPcRenumbered,Field,No Comment,private int startPcRenumbered;,int startPcRenumbered,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.endPcRenumbered,Field,No Comment,private int endPcRenumbered;,int endPcRenumbered,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.handlerPcRenumbered,Field,No Comment,private int handlerPcRenumbered;,int handlerPcRenumbered,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.catchTypeIndex,Field,No Comment,private int catchTypeIndex;,int catchTypeIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Class,Field,No Comment,public static final byte CP_Class = 7;,byte CP_Class,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Double,Field,No Comment,public static final byte CP_Double = 6;,byte CP_Double,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Fieldref,Field,No Comment,public static final byte CP_Fieldref = 9;,byte CP_Fieldref,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Float,Field,No Comment,public static final byte CP_Float = 4;,byte CP_Float,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Integer,Field,No Comment,public static final byte CP_Integer = 3;,byte CP_Integer,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_InterfaceMethodref,Field,No Comment,public static final byte CP_InterfaceMethodref = 11;,byte CP_InterfaceMethodref,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Long,Field,No Comment,public static final byte CP_Long = 5;,byte CP_Long,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_Methodref,Field,No Comment,public static final byte CP_Methodref = 10;,byte CP_Methodref,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_NameAndType,Field,No Comment,public static final byte CP_NameAndType = 12;,byte CP_NameAndType,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_String,Field,No Comment,public static final byte CP_String = 8;,byte CP_String,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.CP_UTF8,Field,No Comment,public static final byte CP_UTF8 = 1;,byte CP_UTF8,"public , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.tag,Field,No Comment,byte tag;,byte tag,default
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.globalIndex,Field,No Comment,protected int globalIndex;,int globalIndex,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.widened,Field,No Comment,protected boolean widened;,boolean widened,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.widened,Field,No Comment,protected boolean widened;,boolean widened,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.WIDENED,Field,No Comment,protected static final boolean WIDENED = true;,boolean WIDENED,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.byteCodeArray,Field,No Comment,protected static final ByteCodeForm[] byteCodeArray = new ByteCodeForm[256];,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm[] byteCodeArray,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.byteCodesByName,Field,No Comment,"protected static final Map<String, ByteCodeForm> byteCodesByName = new HashMap<>(256);",java.util.Map byteCodesByName,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.opcode,Field,No Comment,private final int opcode;,int opcode,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.rewrite,Field,No Comment,private final int[] rewrite;,int[] rewrite,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.firstOperandIndex,Field,No Comment,private int firstOperandIndex;,int firstOperandIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.operandLength,Field,No Comment,private int operandLength;,int operandLength,private 
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.widened,Field,No Comment,protected boolean widened;,boolean widened,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.classIndex,Field,No Comment,private int classIndex;,int classIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.methodIndex,Field,No Comment,private int methodIndex;,int methodIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.cpClass,Field,No Comment,private final CPClass cpClass;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass cpClass,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.method,Field,No Comment,private final CPNameAndType method;,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType method,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.localVariableTypeTableLength,Field,No Comment,private final int localVariableTypeTableLength;,int localVariableTypeTableLength,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.startPcs,Field,No Comment,private final int[] startPcs;,int[] startPcs,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.lengths,Field,No Comment,private final int[] lengths;,int[] lengths,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.nameIndexes,Field,No Comment,private int[] nameIndexes;,int[] nameIndexes,private 
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.signatureIndexes,Field,No Comment,private int[] signatureIndexes;,int[] signatureIndexes,private 
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.indexes,Field,No Comment,private final int[] indexes;,int[] indexes,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.names,Field,No Comment,private final CPUTF8[] names;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] names,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.signatures,Field,No Comment,private final CPUTF8[] signatures;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] signatures,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.codeLength,Field,No Comment,private int codeLength;,int codeLength,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.entriesContainsSet,Field,No Comment,protected HashSet<ClassFileEntry> entriesContainsSet = new HashSet<>();,java.util.HashSet entriesContainsSet,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.othersContainsSet,Field,No Comment,protected HashSet<ClassFileEntry> othersContainsSet = new HashSet<>();,java.util.HashSet othersContainsSet,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.mustStartClassPool,Field,No Comment,private final HashSet<ClassFileEntry> mustStartClassPool = new HashSet<>();,java.util.HashSet mustStartClassPool,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexCache,Field,No Comment,"protected Map<ClassFileEntry, Integer> indexCache;",java.util.Map indexCache,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.others,Field,No Comment,private final List<ClassFileEntry> others = new ArrayList<>(500);,java.util.List others,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.entries,Field,No Comment,private final List<ClassFileEntry> entries = new ArrayList<>(500);,java.util.List entries,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolved,Field,No Comment,private boolean resolved;,boolean resolved,private 
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.numAnnotations,Field,No Comment,private final int numAnnotations;,int numAnnotations,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.annotations,Field,No Comment,private final Annotation[] annotations;,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[] annotations,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.MAGIC,Field,No Comment,private static final int MAGIC = 0xCAFEBABE;,int MAGIC,"private , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.major,Field,No Comment,public int major;,int major,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.minor,Field,No Comment,public int minor;,int minor,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.pool,Field,No Comment,public ClassConstantPool pool = new ClassConstantPool();,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool pool,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.accessFlags,Field,No Comment,public int accessFlags;,int accessFlags,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.thisClass,Field,No Comment,public int thisClass;,int thisClass,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.superClass,Field,No Comment,public int superClass;,int superClass,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.interfaces,Field,No Comment,public int[] interfaces;,int[] interfaces,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.fields,Field,No Comment,public ClassFileEntry[] fields;,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[] fields,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.methods,Field,No Comment,public ClassFileEntry[] methods;,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[] methods,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.attributes,Field,No Comment,public Attribute[] attributes;,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute[] attributes,public 
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumbered,Field,No Comment,protected boolean renumbered;,boolean renumbered,protected 
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.localVariableTableLength,Field,No Comment,private final int localVariableTableLength;,int localVariableTableLength,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.startPcs,Field,No Comment,private final int[] startPcs;,int[] startPcs,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.lengths,Field,No Comment,private final int[] lengths;,int[] lengths,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.nameIndexes,Field,No Comment,private int[] nameIndexes;,int[] nameIndexes,private 
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.descriptorIndexes,Field,No Comment,private int[] descriptorIndexes;,int[] descriptorIndexes,private 
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.indexes,Field,No Comment,private final int[] indexes;,int[] indexes,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.names,Field,No Comment,private final CPUTF8[] names;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] names,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.descriptors,Field,No Comment,private final CPUTF8[] descriptors;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] descriptors,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.codeLength,Field,No Comment,private int codeLength;,int codeLength,private 
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.lineNumberTableLength,Field,No Comment,private final int lineNumberTableLength;,int lineNumberTableLength,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.startPcs,Field,No Comment,private final int[] startPcs;,int[] startPcs,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.lineNumbers,Field,No Comment,private final int[] lineNumbers;,int[] lineNumbers,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.utf8,Field,No Comment,private final String utf8;,java.lang.String utf8,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.NONE,Field,No Comment,protected static final ClassFileEntry[] NONE = {};,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[] NONE,"protected , static , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolved,Field,No Comment,private boolean resolved;,boolean resolved,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.value,Field,No Comment,private final Object value;,java.lang.Object value,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.elementValue,Field,No Comment,private final ElementValue elementValue;,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue elementValue,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.innerClasses,Field,No Comment,private final List<InnerClassesEntry> innerClasses = new ArrayList<>();,java.util.List innerClasses,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.nestedClassFileEntries,Field,No Comment,private final List<ConstantPoolEntry> nestedClassFileEntries = new ArrayList<>();,java.util.List nestedClassFileEntries,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.innerClassInfo,Field,No Comment,CPClass innerClassInfo;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass innerClassInfo,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.outerClassInfo,Field,No Comment,CPClass outerClassInfo;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass outerClassInfo,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.innerClassName,Field,No Comment,CPUTF8 innerClassName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 innerClassName,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.innerClassInfoIndex,Field,No Comment,int innerClassInfoIndex = -1;,int innerClassInfoIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.outerClassInfoIndex,Field,No Comment,int outerClassInfoIndex = -1;,int outerClassInfoIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.innerNameIndex,Field,No Comment,int innerNameIndex = -1;,int innerNameIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.innerClassAccessFlags,Field,No Comment,int innerClassAccessFlags = -1;,int innerClassAccessFlags,default
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.numParameters,Field,No Comment,private final int numParameters;,int numParameters,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.parameterAnnotations,Field,No Comment,private final ParameterAnnotation[] parameterAnnotations;,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation[] parameterAnnotations,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.annotations,Field,No Comment,private final Annotation[] annotations;,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[] annotations,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.numAnnotations,Field,No Comment,private final int numAnnotations;,int numAnnotations,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.numPairs,Field,No Comment,private final int numPairs;,int numPairs,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.elementNames,Field,No Comment,private final CPUTF8[] elementNames;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[] elementNames,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.elementValues,Field,No Comment,private final ElementValue[] elementValues;,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue[] elementValues,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.type,Field,No Comment,private final CPUTF8 type;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 type,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.typeIndex,Field,Resolved values,private int typeIndex;,int typeIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.nameIndexes,Field,No Comment,private int[] nameIndexes;,int[] nameIndexes,private 
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.value,Field,No Comment,private final Object value;,java.lang.Object value,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.tag,Field,No Comment,private final int tag;,int tag,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.constantValueIndex,Field,resolved value index if it's a constant,private int constantValueIndex = -1;,int constantValueIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.descriptor,Field,No Comment,CPUTF8 descriptor;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 descriptor,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.descriptorIndex,Field,No Comment,transient int descriptorIndex;,int descriptorIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.name,Field,No Comment,CPUTF8 name;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.nameIndex,Field,No Comment,transient int nameIndex;,int nameIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.lengths,Field,No Comment,private final List<Integer> lengths = new ArrayList<>();,java.util.List lengths,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.body,Field,No Comment,private final List<Object> body = new ArrayList<>();,java.util.List body,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.pool,Field,No Comment,private ClassConstantPool pool;,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool pool,private 
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.layoutIndex,Field,No Comment,private final int layoutIndex;,int layoutIndex,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.actualValue,Field,No Comment,int actualValue;,int actualValue,default
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.index,Field,No Comment,private final int index;,int index,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.length,Field,No Comment,private final int length;,int length,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.offset,Field,No Comment,private final int offset;,int offset,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.index,Field,No Comment,private int index;,int index,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.constantIndex,Field,No Comment,private int constantIndex;,int constantIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.entry,Field,No Comment,private final ClassFileEntry entry;,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry entry,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.className,Field,No Comment,CPClass className;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass className,default
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.classNameIndex,Field,No Comment,transient int classNameIndex;,int classNameIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.nameAndType,Field,No Comment,private final CPNameAndType nameAndType;,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType nameAndType,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.nameAndTypeIndex,Field,No Comment,transient int nameAndTypeIndex;,int nameAndTypeIndex,transient 
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.nameIndex,Field,No Comment,private transient int nameIndex;,int nameIndex,"private , transient "
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.name,Field,No Comment,private final CPUTF8 name;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.hashCodeComputed,Field,No Comment,private boolean hashCodeComputed;,boolean hashCodeComputed,private 
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.cachedHashCode,Field,No Comment,private int cachedHashCode;,int cachedHashCode,private 
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.attributeName,Field,No Comment,protected final CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"protected , final "
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.attributeNameIndex,Field,No Comment,private int attributeNameIndex;,int attributeNameIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.signatureIndex,Field,No Comment,private int signatureIndex;,int signatureIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.signature,Field,No Comment,private final CPUTF8 signature;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 signature,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.name,Field,No Comment,private final CPUTF8 name;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 name,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.nameIndex,Field,No Comment,private int nameIndex;,int nameIndex,private 
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcCaseCount,Field,No Comment,int[] bcCaseCount;,int[] bcCaseCount,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcCaseValue,Field,No Comment,int[] bcCaseValue;,int[] bcCaseValue,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcByte,Field,No Comment,int[] bcByte;,int[] bcByte,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcShort,Field,No Comment,int[] bcShort;,int[] bcShort,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLocal,Field,No Comment,int[] bcLocal;,int[] bcLocal,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLabel,Field,No Comment,int[] bcLabel;,int[] bcLabel,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcIntRef,Field,No Comment,int[] bcIntRef;,int[] bcIntRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcFloatRef,Field,No Comment,int[] bcFloatRef;,int[] bcFloatRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLongRef,Field,No Comment,int[] bcLongRef;,int[] bcLongRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcDoubleRef,Field,No Comment,int[] bcDoubleRef;,int[] bcDoubleRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcStringRef,Field,No Comment,int[] bcStringRef;,int[] bcStringRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcClassRef,Field,No Comment,int[] bcClassRef;,int[] bcClassRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcFieldRef,Field,No Comment,int[] bcFieldRef;,int[] bcFieldRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcMethodRef,Field,No Comment,int[] bcMethodRef;,int[] bcMethodRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcIMethodRef,Field,No Comment,int[] bcIMethodRef;,int[] bcIMethodRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcThisField,Field,No Comment,int[] bcThisField;,int[] bcThisField,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcSuperField,Field,No Comment,int[] bcSuperField;,int[] bcSuperField,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcThisMethod,Field,No Comment,int[] bcThisMethod;,int[] bcThisMethod,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcSuperMethod,Field,No Comment,int[] bcSuperMethod;,int[] bcSuperMethod,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcInitRef,Field,No Comment,int[] bcInitRef;,int[] bcInitRef,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.wideByteCodes,Field,No Comment,int[] wideByteCodes;,int[] wideByteCodes,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcCaseCountIndex,Field,No Comment,int bcCaseCountIndex;,int bcCaseCountIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcCaseValueIndex,Field,No Comment,int bcCaseValueIndex;,int bcCaseValueIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcByteIndex,Field,No Comment,int bcByteIndex;,int bcByteIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcShortIndex,Field,No Comment,int bcShortIndex;,int bcShortIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLocalIndex,Field,No Comment,int bcLocalIndex;,int bcLocalIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLabelIndex,Field,No Comment,int bcLabelIndex;,int bcLabelIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcIntRefIndex,Field,No Comment,int bcIntRefIndex;,int bcIntRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcFloatRefIndex,Field,No Comment,int bcFloatRefIndex;,int bcFloatRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcLongRefIndex,Field,No Comment,int bcLongRefIndex;,int bcLongRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcDoubleRefIndex,Field,No Comment,int bcDoubleRefIndex;,int bcDoubleRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcStringRefIndex,Field,No Comment,int bcStringRefIndex;,int bcStringRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcClassRefIndex,Field,No Comment,int bcClassRefIndex;,int bcClassRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcFieldRefIndex,Field,No Comment,int bcFieldRefIndex;,int bcFieldRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcMethodRefIndex,Field,No Comment,int bcMethodRefIndex;,int bcMethodRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcIMethodRefIndex,Field,No Comment,int bcIMethodRefIndex;,int bcIMethodRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcThisFieldIndex,Field,No Comment,int bcThisFieldIndex;,int bcThisFieldIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcSuperFieldIndex,Field,No Comment,int bcSuperFieldIndex;,int bcSuperFieldIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcThisMethodIndex,Field,No Comment,int bcThisMethodIndex;,int bcThisMethodIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcSuperMethodIndex,Field,No Comment,int bcSuperMethodIndex;,int bcSuperMethodIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.bcInitRefIndex,Field,No Comment,int bcInitRefIndex;,int bcInitRefIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.wideByteCodeIndex,Field,No Comment,int wideByteCodeIndex;,int wideByteCodeIndex,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.segment,Field,No Comment,Segment segment;,org.apache.commons.compress.harmony.unpack200.Segment segment,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.currentClass,Field,No Comment,String currentClass;,java.lang.String currentClass,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.superClass,Field,No Comment,String superClass;,java.lang.String superClass,default
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.newClass,Field,No Comment,String newClass;,java.lang.String newClass,default
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.attributes,Field,No Comment,public List<Attribute> attributes = new ArrayList<>();,java.util.List attributes,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.byteCodeOffsets,Field,instances,public List<Integer> byteCodeOffsets = new ArrayList<>();,java.util.List byteCodeOffsets,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.byteCodes,Field,No Comment,public List<ByteCode> byteCodes = new ArrayList<>();,java.util.List byteCodes,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.codeLength,Field,No Comment,public int codeLength;,int codeLength,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.exceptionTable,Field,No Comment,public List<ExceptionTableEntry> exceptionTable;,java.util.List exceptionTable,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.maxLocals,Field,No Comment,public int maxLocals;,int maxLocals,public 
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.maxStack,Field,No Comment,public int maxStack;,int maxStack,public 
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.noArgByteCodes,Field,No Comment,private static ByteCode[] noArgByteCodes = new ByteCode[255];,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode[] noArgByteCodes,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.byteCodeForm,Field,No Comment,private final ByteCodeForm byteCodeForm;,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm byteCodeForm,"private , final "
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.nested,Field,No Comment,private ClassFileEntry[] nested;,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[] nested,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.nestedPositions,Field,No Comment,private int[][] nestedPositions;,int[][] nestedPositions,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.rewrite,Field,No Comment,private int[] rewrite;,int[] rewrite,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.byteCodeOffset,Field,No Comment,private int byteCodeOffset = -1;,int byteCodeOffset,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.byteCodeTargets,Field,No Comment,private int[] byteCodeTargets;,int[] byteCodeTargets,private 
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.attributeName,Field,No Comment,private static CPUTF8 attributeName;,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 attributeName,"private , static "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.exceptionIndexes,Field,No Comment,private transient int[] exceptionIndexes;,int[] exceptionIndexes,"private , transient "
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.exceptions,Field,No Comment,private final CPClass[] exceptions;,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[] exceptions,"private , final "
org.apache.commons.compress.harmony.unpack200.IcBands.icAll,Field,No Comment,private IcTuple[] icAll;,org.apache.commons.compress.harmony.unpack200.IcTuple[] icAll,private 
org.apache.commons.compress.harmony.unpack200.IcBands.cpUTF8,Field,No Comment,private final String[] cpUTF8;,java.lang.String[] cpUTF8,"private , final "
org.apache.commons.compress.harmony.unpack200.IcBands.cpClass,Field,No Comment,private final String[] cpClass;,java.lang.String[] cpClass,"private , final "
org.apache.commons.compress.harmony.unpack200.IcBands.thisClassToTuple,Field,No Comment,"private Map<String, IcTuple> thisClassToTuple;",java.util.Map thisClassToTuple,private 
org.apache.commons.compress.harmony.unpack200.IcBands.outerClassToTuples,Field,No Comment,"private Map<String, List<IcTuple>> outerClassToTuples;",java.util.Map outerClassToTuples,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classFieldCount,Field,No Comment,private int[] classFieldCount;,int[] classFieldCount,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classFlags,Field,No Comment,private long[] classFlags;,long[] classFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classAccessFlags,Field,Access flags for writing to the class,private long[] classAccessFlags;,long[] classAccessFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classInterfacesInts,Field,No Comment,private int[][] classInterfacesInts;,int[][] classInterfacesInts,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classMethodCount,Field,No Comment,private int[] classMethodCount;,int[] classMethodCount,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classSuperInts,Field,No Comment,private int[] classSuperInts;,int[] classSuperInts,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classThis,Field,No Comment,private String[] classThis;,java.lang.String[] classThis,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classThisInts,Field,No Comment,private int[] classThisInts;,int[] classThisInts,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classAttributes,Field,No Comment,private ArrayList<Attribute>[] classAttributes;,java.util.ArrayList[] classAttributes,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classVersionMajor,Field,No Comment,private int[] classVersionMajor;,int[] classVersionMajor,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.classVersionMinor,Field,No Comment,private int[] classVersionMinor;,int[] classVersionMinor,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.icLocal,Field,No Comment,private IcTuple[][] icLocal;,org.apache.commons.compress.harmony.unpack200.IcTuple[][] icLocal,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeAttributes,Field,No Comment,private List<Attribute>[] codeAttributes;,java.util.List[] codeAttributes,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHandlerCount,Field,No Comment,private int[] codeHandlerCount;,int[] codeHandlerCount,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeMaxNALocals,Field,No Comment,private int[] codeMaxNALocals;,int[] codeMaxNALocals,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeMaxStack,Field,No Comment,private int[] codeMaxStack;,int[] codeMaxStack,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.fieldAttributes,Field,No Comment,private ArrayList<Attribute>[][] fieldAttributes;,java.util.ArrayList[][] fieldAttributes,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.fieldDescr,Field,No Comment,private String[][] fieldDescr;,java.lang.String[][] fieldDescr,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.fieldDescrInts,Field,No Comment,private int[][] fieldDescrInts;,int[][] fieldDescrInts,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.fieldFlags,Field,No Comment,private long[][] fieldFlags;,long[][] fieldFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.fieldAccessFlags,Field,No Comment,private long[][] fieldAccessFlags;,long[][] fieldAccessFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.methodAttributes,Field,No Comment,private ArrayList<Attribute>[][] methodAttributes;,java.util.ArrayList[][] methodAttributes,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.methodDescr,Field,No Comment,private String[][] methodDescr;,java.lang.String[][] methodDescr,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.methodDescrInts,Field,No Comment,private int[][] methodDescrInts;,int[][] methodDescrInts,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.methodFlags,Field,No Comment,private long[][] methodFlags;,long[][] methodFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.methodAccessFlags,Field,No Comment,private long[][] methodAccessFlags;,long[][] methodAccessFlags,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.attrMap,Field,No Comment,private final AttributeLayoutMap attrMap;,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap attrMap,"private , final "
org.apache.commons.compress.harmony.unpack200.ClassBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.unpack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.unpack200.ClassBands.options,Field,No Comment,private final SegmentOptions options;,org.apache.commons.compress.harmony.unpack200.SegmentOptions options,"private , final "
org.apache.commons.compress.harmony.unpack200.ClassBands.classCount,Field,No Comment,private final int classCount;,int classCount,"private , final "
org.apache.commons.compress.harmony.unpack200.ClassBands.methodAttrCalls,Field,No Comment,private int[] methodAttrCalls;,int[] methodAttrCalls,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHandlerStartP,Field,No Comment,private int[][] codeHandlerStartP;,int[][] codeHandlerStartP,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHandlerEndPO,Field,No Comment,private int[][] codeHandlerEndPO;,int[][] codeHandlerEndPO,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHandlerCatchPO,Field,No Comment,private int[][] codeHandlerCatchPO;,int[][] codeHandlerCatchPO,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHandlerClassRCN,Field,No Comment,private int[][] codeHandlerClassRCN;,int[][] codeHandlerClassRCN,private 
org.apache.commons.compress.harmony.unpack200.ClassBands.codeHasAttributes,Field,No Comment,private boolean[] codeHasAttributes;,boolean[] codeHasAttributes,private 
org.apache.commons.compress.harmony.unpack200.BandSet.segment,Field,* Segment.,protected Segment segment;,org.apache.commons.compress.harmony.unpack200.Segment segment,protected 
org.apache.commons.compress.harmony.unpack200.BandSet.header,Field,* Segment header.,protected SegmentHeader header;,org.apache.commons.compress.harmony.unpack200.SegmentHeader header,protected 
org.apache.commons.compress.harmony.unpack200.FileBands.fileBits,Field,No Comment,private byte[][] fileBits;,byte[][] fileBits,private 
org.apache.commons.compress.harmony.unpack200.FileBands.fileModtime,Field,No Comment,private int[] fileModtime;,int[] fileModtime,private 
org.apache.commons.compress.harmony.unpack200.FileBands.fileName,Field,No Comment,private String[] fileName;,java.lang.String[] fileName,private 
org.apache.commons.compress.harmony.unpack200.FileBands.fileOptions,Field,No Comment,private int[] fileOptions;,int[] fileOptions,private 
org.apache.commons.compress.harmony.unpack200.FileBands.fileSize,Field,No Comment,private long[] fileSize;,long[] fileSize,private 
org.apache.commons.compress.harmony.unpack200.FileBands.cpUTF8,Field,No Comment,private final String[] cpUTF8;,java.lang.String[] cpUTF8,"private , final "
org.apache.commons.compress.harmony.unpack200.FileBands.in,Field,No Comment,private InputStream in;,java.io.InputStream in,private 
org.apache.commons.compress.harmony.unpack200.Archive.MAGIC,Field,No Comment,"private static final int[] MAGIC = { 0xCA, 0xFE, 0xD0, 0x0D };",int[] MAGIC,"private , static , final "
org.apache.commons.compress.harmony.unpack200.Archive.inputStream,Field,No Comment,private BoundedInputStream inputStream;,org.apache.commons.io.input.BoundedInputStream inputStream,private 
org.apache.commons.compress.harmony.unpack200.Archive.outputStream,Field,No Comment,private final JarOutputStream outputStream;,java.util.jar.JarOutputStream outputStream,"private , final "
org.apache.commons.compress.harmony.unpack200.Archive.removePackFile,Field,No Comment,private boolean removePackFile;,boolean removePackFile,private 
org.apache.commons.compress.harmony.unpack200.Archive.logLevel,Field,No Comment,private int logLevel = Segment.LOG_LEVEL_STANDARD;,int logLevel,private 
org.apache.commons.compress.harmony.unpack200.Archive.logFile,Field,No Comment,private FileOutputStream logFile;,java.io.FileOutputStream logFile,private 
org.apache.commons.compress.harmony.unpack200.Archive.overrideDeflateHint,Field,No Comment,private boolean overrideDeflateHint;,boolean overrideDeflateHint,private 
org.apache.commons.compress.harmony.unpack200.Archive.deflateHint,Field,No Comment,private boolean deflateHint;,boolean deflateHint,private 
org.apache.commons.compress.harmony.unpack200.Archive.inputPath,Field,No Comment,private final Path inputPath;,java.nio.file.Path inputPath,"private , final "
org.apache.commons.compress.harmony.unpack200.Archive.inputSize,Field,No Comment,private final long inputSize;,long inputSize,"private , final "
org.apache.commons.compress.harmony.unpack200.Archive.outputFileName,Field,No Comment,private final String outputFileName;,java.lang.String outputFileName,"private , final "
org.apache.commons.compress.harmony.unpack200.Archive.closeStreams,Field,No Comment,private final boolean closeStreams;,boolean closeStreams,"private , final "
org.apache.commons.compress.harmony.archive.internal.nls.Messages.bundle,Field,ResourceBundle holding the system messages.,private static ResourceBundle bundle;,java.util.ResourceBundle bundle,"private , static "
org.apache.commons.compress.harmony.pack200.CPClass.className,Field,No Comment,private final String className;,java.lang.String className,"private , final "
org.apache.commons.compress.harmony.pack200.CPClass.utf8,Field,No Comment,private final CPUTF8 utf8;,org.apache.commons.compress.harmony.pack200.CPUTF8 utf8,"private , final "
org.apache.commons.compress.harmony.pack200.CPClass.isInnerClass,Field,No Comment,private final boolean isInnerClass;,boolean isInnerClass,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.MULTIANEWARRAY,Field,No Comment,private static final int MULTIANEWARRAY = 197;,int MULTIANEWARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.ALOAD_0,Field,No Comment,private static final int ALOAD_0 = 42;,int ALOAD_0,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.WIDE,Field,No Comment,private static final int WIDE = 196;,int WIDE,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.INVOKEINTERFACE,Field,No Comment,private static final int INVOKEINTERFACE = 185;,int INVOKEINTERFACE,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.TABLESWITCH,Field,No Comment,private static final int TABLESWITCH = 170;,int TABLESWITCH,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.IINC,Field,No Comment,private static final int IINC = 132;,int IINC,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.LOOKUPSWITCH,Field,No Comment,private static final int LOOKUPSWITCH = 171;,int LOOKUPSWITCH,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.endMarker,Field,No Comment,private static final int endMarker = 255;,int endMarker,"private , static , final "
org.apache.commons.compress.harmony.pack200.BcBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.segment,Field,No Comment,private final Segment segment;,org.apache.commons.compress.harmony.pack200.Segment segment,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcCodes,Field,No Comment,private final IntList bcCodes = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcCodes,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcCaseCount,Field,No Comment,private final IntList bcCaseCount = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcCaseCount,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcCaseValue,Field,No Comment,private final IntList bcCaseValue = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcCaseValue,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcByte,Field,No Comment,private final IntList bcByte = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcByte,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcShort,Field,No Comment,private final IntList bcShort = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcShort,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcLocal,Field,No Comment,private final IntList bcLocal = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcLocal,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcLabel,Field,Integers and Labels,private final List bcLabel = new ArrayList();,java.util.List bcLabel,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcIntref,Field,No Comment,private final List<CPInt> bcIntref = new ArrayList<>();,java.util.List bcIntref,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcFloatRef,Field,No Comment,private final List<CPFloat> bcFloatRef = new ArrayList<>();,java.util.List bcFloatRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcLongRef,Field,No Comment,private final List<CPLong> bcLongRef = new ArrayList<>();,java.util.List bcLongRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcDoubleRef,Field,No Comment,private final List<CPDouble> bcDoubleRef = new ArrayList<>();,java.util.List bcDoubleRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcStringRef,Field,No Comment,private final List<CPString> bcStringRef = new ArrayList<>();,java.util.List bcStringRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcClassRef,Field,No Comment,private final List<CPClass> bcClassRef = new ArrayList<>();,java.util.List bcClassRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcFieldRef,Field,No Comment,private final List<CPMethodOrField> bcFieldRef = new ArrayList<>();,java.util.List bcFieldRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcMethodRef,Field,No Comment,private final List<CPMethodOrField> bcMethodRef = new ArrayList<>();,java.util.List bcMethodRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcIMethodRef,Field,No Comment,private final List<CPMethodOrField> bcIMethodRef = new ArrayList<>();,java.util.List bcIMethodRef,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcThisField,Field,Integers and CPMethodOrField,private List bcThisField = new ArrayList<>();,java.util.List bcThisField,private 
org.apache.commons.compress.harmony.pack200.BcBands.bcSuperField,Field,No Comment,private final List bcSuperField = new ArrayList<>();,java.util.List bcSuperField,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.bcThisMethod,Field,No Comment,private List bcThisMethod = new ArrayList<>();,java.util.List bcThisMethod,private 
org.apache.commons.compress.harmony.pack200.BcBands.bcSuperMethod,Field,No Comment,private List bcSuperMethod = new ArrayList<>();,java.util.List bcSuperMethod,private 
org.apache.commons.compress.harmony.pack200.BcBands.bcInitRef,Field,No Comment,private List bcInitRef = new ArrayList<>();,java.util.List bcInitRef,private 
org.apache.commons.compress.harmony.pack200.BcBands.currentClass,Field,No Comment,private String currentClass;,java.lang.String currentClass,private 
org.apache.commons.compress.harmony.pack200.BcBands.superClass,Field,No Comment,private String superClass;,java.lang.String superClass,private 
org.apache.commons.compress.harmony.pack200.BcBands.currentNewClass,Field,No Comment,private String currentNewClass;,java.lang.String currentNewClass,private 
org.apache.commons.compress.harmony.pack200.BcBands.bciRenumbering,Field,No Comment,private final IntList bciRenumbering = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bciRenumbering,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.labelsToOffsets,Field,No Comment,"private final Map<Label, Integer> labelsToOffsets = new HashMap<>();",java.util.Map labelsToOffsets,"private , final "
org.apache.commons.compress.harmony.pack200.BcBands.byteCodeOffset,Field,No Comment,private int byteCodeOffset;,int byteCodeOffset,private 
org.apache.commons.compress.harmony.pack200.BcBands.renumberedOffset,Field,No Comment,private int renumberedOffset;,int renumberedOffset,private 
org.apache.commons.compress.harmony.pack200.BcBands.bcLabelRelativeOffsets,Field,No Comment,private final IntList bcLabelRelativeOffsets = new IntList();,org.apache.commons.compress.harmony.pack200.IntList bcLabelRelativeOffsets,"private , final "
org.apache.commons.compress.harmony.pack200.CPFloat.theFloat,Field,No Comment,private final float theFloat;,float theFloat,"private , final "
org.apache.commons.compress.harmony.pack200.CPDouble.theDouble,Field,No Comment,private final double theDouble;,double theDouble,"private , final "
org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.index,Field,No Comment,private int index = -1;,int index,private 
org.apache.commons.compress.harmony.pack200.CPMethodOrField.className,Field,No Comment,private final CPClass className;,org.apache.commons.compress.harmony.pack200.CPClass className,"private , final "
org.apache.commons.compress.harmony.pack200.CPMethodOrField.nameAndType,Field,No Comment,private final CPNameAndType nameAndType;,org.apache.commons.compress.harmony.pack200.CPNameAndType nameAndType,"private , final "
org.apache.commons.compress.harmony.pack200.CPMethodOrField.indexInClass,Field,No Comment,private int indexInClass = -1;,int indexInClass,private 
org.apache.commons.compress.harmony.pack200.CPMethodOrField.indexInClassForConstructor,Field,No Comment,private int indexInClassForConstructor = -1;,int indexInClassForConstructor,private 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.CONTEXT_CLASS,Field,No Comment,public static final int CONTEXT_CLASS = 0;,int CONTEXT_CLASS,"public , static , final "
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.CONTEXT_FIELD,Field,No Comment,public static final int CONTEXT_FIELD = 1;,int CONTEXT_FIELD,"public , static , final "
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.CONTEXT_METHOD,Field,No Comment,public static final int CONTEXT_METHOD = 2;,int CONTEXT_METHOD,"public , static , final "
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.type,Field,No Comment,private final String type;,java.lang.String type,"private , final "
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.numBackwardsCalls,Field,No Comment,private int numBackwardsCalls;,int numBackwardsCalls,private 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.param_NB,Field,TODO: Lazy instantiation?,public IntList param_NB = new IntList();,org.apache.commons.compress.harmony.pack200.IntList param_NB,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.anno_N,Field,No Comment,public IntList anno_N = new IntList();,org.apache.commons.compress.harmony.pack200.IntList anno_N,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.type_RS,Field,No Comment,public List<CPSignature> type_RS = new ArrayList<>();,java.util.List type_RS,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pair_N,Field,No Comment,public IntList pair_N = new IntList();,org.apache.commons.compress.harmony.pack200.IntList pair_N,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.name_RU,Field,No Comment,public List<CPUTF8> name_RU = new ArrayList<>();,java.util.List name_RU,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.T,Field,No Comment,public List<String> T = new ArrayList<>();,java.util.List T,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseI_KI,Field,No Comment,public List<CPConstant<?>> caseI_KI = new ArrayList<>();,java.util.List caseI_KI,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseD_KD,Field,No Comment,public List<CPConstant<?>> caseD_KD = new ArrayList<>();,java.util.List caseD_KD,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseF_KF,Field,No Comment,public List<CPConstant<?>> caseF_KF = new ArrayList<>();,java.util.List caseF_KF,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseJ_KJ,Field,No Comment,public List<CPConstant<?>> caseJ_KJ = new ArrayList<>();,java.util.List caseJ_KJ,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.casec_RS,Field,No Comment,public List<CPSignature> casec_RS = new ArrayList<>();,java.util.List casec_RS,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseet_RS,Field,No Comment,public List<CPSignature> caseet_RS = new ArrayList<>();,java.util.List caseet_RS,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.caseec_RU,Field,No Comment,public List<CPUTF8> caseec_RU = new ArrayList<>();,java.util.List caseec_RU,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.cases_RU,Field,No Comment,public List<CPUTF8> cases_RU = new ArrayList<>();,java.util.List cases_RU,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.casearray_N,Field,No Comment,public IntList casearray_N = new IntList();,org.apache.commons.compress.harmony.pack200.IntList casearray_N,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nesttype_RS,Field,No Comment,public List<CPSignature> nesttype_RS = new ArrayList<>();,java.util.List nesttype_RS,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nestpair_N,Field,No Comment,public IntList nestpair_N = new IntList();,org.apache.commons.compress.harmony.pack200.IntList nestpair_N,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nestname_RU,Field,No Comment,public List<CPUTF8> nestname_RU = new ArrayList<>();,java.util.List nestname_RU,public 
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.context,Field,No Comment,private final int context;,int context,"private , final "
org.apache.commons.compress.harmony.pack200.Segment.ASM_API,Field,See https://asm.ow2.io/Javadoc/org/objectweb/asm/Opcodes.html#ASM4,public static int ASM_API = Opcodes.ASM4;,int ASM_API,"public , static "
org.apache.commons.compress.harmony.pack200.Segment.segmentHeader,Field,No Comment,private SegmentHeader segmentHeader;,org.apache.commons.compress.harmony.pack200.SegmentHeader segmentHeader,private 
org.apache.commons.compress.harmony.pack200.Segment.cpBands,Field,No Comment,private CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,private 
org.apache.commons.compress.harmony.pack200.Segment.attributeDefinitionBands,Field,No Comment,private AttributeDefinitionBands attributeDefinitionBands;,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands attributeDefinitionBands,private 
org.apache.commons.compress.harmony.pack200.Segment.icBands,Field,No Comment,private IcBands icBands;,org.apache.commons.compress.harmony.pack200.IcBands icBands,private 
org.apache.commons.compress.harmony.pack200.Segment.classBands,Field,No Comment,private ClassBands classBands;,org.apache.commons.compress.harmony.pack200.ClassBands classBands,private 
org.apache.commons.compress.harmony.pack200.Segment.bcBands,Field,No Comment,private BcBands bcBands;,org.apache.commons.compress.harmony.pack200.BcBands bcBands,private 
org.apache.commons.compress.harmony.pack200.Segment.fileBands,Field,No Comment,private FileBands fileBands;,org.apache.commons.compress.harmony.pack200.FileBands fileBands,private 
org.apache.commons.compress.harmony.pack200.Segment.fieldVisitor,Field,No Comment,private final SegmentFieldVisitor fieldVisitor = new SegmentFieldVisitor();,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor fieldVisitor,"private , final "
org.apache.commons.compress.harmony.pack200.Segment.methodVisitor,Field,No Comment,private final SegmentMethodVisitor methodVisitor = new SegmentMethodVisitor();,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor methodVisitor,"private , final "
org.apache.commons.compress.harmony.pack200.Segment.currentClassReader,Field,No Comment,private Pack200ClassReader currentClassReader;,org.apache.commons.compress.harmony.pack200.Pack200ClassReader currentClassReader,private 
org.apache.commons.compress.harmony.pack200.Segment.options,Field,No Comment,private PackingOptions options;,org.apache.commons.compress.harmony.pack200.PackingOptions options,private 
org.apache.commons.compress.harmony.pack200.Segment.stripDebug,Field,No Comment,private boolean stripDebug;,boolean stripDebug,private 
org.apache.commons.compress.harmony.pack200.Segment.nonStandardAttributePrototypes,Field,No Comment,private Attribute[] nonStandardAttributePrototypes;,org.objectweb.asm.Attribute[] nonStandardAttributePrototypes,private 
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.indexInCaseArrayN,Field,No Comment,private final int indexInCaseArrayN;,int indexInCaseArrayN,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.caseArrayN,Field,No Comment,private final List<Integer> caseArrayN;,java.util.List caseArrayN,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.values,Field,No Comment,private final List<Object> values;,java.util.List values,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.nameRU,Field,No Comment,private final List<String> nameRU;,java.util.List nameRU,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.tags,Field,No Comment,private final List<String> tags;,java.util.List tags,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$PassException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.context,Field,No Comment,private int context = -1;,int context,private 
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.parameter,Field,No Comment,private int parameter = -1;,int parameter,private 
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.desc,Field,No Comment,private String desc;,java.lang.String desc,private 
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visible,Field,No Comment,private boolean visible;,boolean visible,private 
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.nameRU,Field,No Comment,private final List<String> nameRU = new ArrayList<>();,java.util.List nameRU,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.tags,Field,tags,private final List<String> tags = new ArrayList<>();,java.util.List tags,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.values,Field,No Comment,private final List<Object> values = new ArrayList<>();,java.util.List values,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.caseArrayN,Field,No Comment,private final List<Integer> caseArrayN = new ArrayList<>();,java.util.List caseArrayN,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.nestTypeRS,Field,No Comment,private final List<String> nestTypeRS = new ArrayList<>();,java.util.List nestTypeRS,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.nestNameRU,Field,No Comment,private final List<String> nestNameRU = new ArrayList<>();,java.util.List nestNameRU,"private , final "
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.nestPairN,Field,No Comment,private final List<Integer> nestPairN = new ArrayList<>();,java.util.List nestPairN,"private , final "
org.apache.commons.compress.harmony.pack200.CPInt.theInt,Field,No Comment,private final int theInt;,int theInt,"private , final "
org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.options,Field,No Comment,private final PackingOptions options = new PackingOptions();,org.apache.commons.compress.harmony.pack200.PackingOptions options,"private , final "
org.apache.commons.compress.harmony.pack200.Pack200Exception.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 5168177401552611803L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.harmony.pack200.CPLong.theLong,Field,No Comment,private final long theLong;,long theLong,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.CONTEXT_CLASS,Field,* {@value},public static final int CONTEXT_CLASS = 0;,int CONTEXT_CLASS,"public , static , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.CONTEXT_CODE,Field,* {@value},public static final int CONTEXT_CODE = 3;,int CONTEXT_CODE,"public , static , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.CONTEXT_FIELD,Field,* {@value},public static final int CONTEXT_FIELD = 1;,int CONTEXT_FIELD,"public , static , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.CONTEXT_METHOD,Field,* {@value},public static final int CONTEXT_METHOD = 2;,int CONTEXT_METHOD,"public , static , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.classAttributeLayouts,Field,No Comment,private final List<AttributeDefinition> classAttributeLayouts = new ArrayList<>();,java.util.List classAttributeLayouts,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.methodAttributeLayouts,Field,No Comment,private final List<AttributeDefinition> methodAttributeLayouts = new ArrayList<>();,java.util.List methodAttributeLayouts,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.fieldAttributeLayouts,Field,No Comment,private final List<AttributeDefinition> fieldAttributeLayouts = new ArrayList<>();,java.util.List fieldAttributeLayouts,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.codeAttributeLayouts,Field,No Comment,private final List<AttributeDefinition> codeAttributeLayouts = new ArrayList<>();,java.util.List codeAttributeLayouts,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.attributeDefinitions,Field,No Comment,private final List<AttributeDefinition> attributeDefinitions = new ArrayList<>();,java.util.List attributeDefinitions,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.segment,Field,No Comment,private final Segment segment;,org.apache.commons.compress.harmony.pack200.Segment segment,"private , final "
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.index,Field,No Comment,public int index;,int index,public 
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.contextType,Field,No Comment,public int contextType;,int contextType,public 
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.name,Field,No Comment,public CPUTF8 name;,org.apache.commons.compress.harmony.pack200.CPUTF8 name,public 
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.layout,Field,No Comment,public CPUTF8 layout;,org.apache.commons.compress.harmony.pack200.CPUTF8 layout,public 
org.apache.commons.compress.harmony.pack200.SegmentHeader.magic,Field,No Comment,"private static final int[] magic = { 0xCA, 0xFE, 0xD0, 0x0D };",int[] magic,"private , static , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_minver,Field,No Comment,private static final int archive_minver = 7;,int archive_minver,"private , static , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_majver,Field,No Comment,private static final int archive_majver = 150;,int archive_majver,"private , static , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_options,Field,No Comment,private int archive_options;,int archive_options,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Utf8_count,Field,No Comment,private int cp_Utf8_count;,int cp_Utf8_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Int_count,Field,No Comment,private int cp_Int_count;,int cp_Int_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Float_count,Field,No Comment,private int cp_Float_count;,int cp_Float_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Long_count,Field,No Comment,private int cp_Long_count;,int cp_Long_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Double_count,Field,No Comment,private int cp_Double_count;,int cp_Double_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_String_count,Field,No Comment,private int cp_String_count;,int cp_String_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Class_count,Field,No Comment,private int cp_Class_count;,int cp_Class_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Signature_count,Field,No Comment,private int cp_Signature_count;,int cp_Signature_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Descr_count,Field,No Comment,private int cp_Descr_count;,int cp_Descr_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Field_count,Field,No Comment,private int cp_Field_count;,int cp_Field_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Method_count,Field,No Comment,private int cp_Method_count;,int cp_Method_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.cp_Imethod_count,Field,No Comment,private int cp_Imethod_count;,int cp_Imethod_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.attribute_definition_count,Field,No Comment,private int attribute_definition_count;,int attribute_definition_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.band_headers,Field,No Comment,private final IntList band_headers = new IntList();,org.apache.commons.compress.harmony.pack200.IntList band_headers,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_all_code_flags,Field,true by default,private boolean have_all_code_flags = true;,boolean have_all_code_flags,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_size_hi,Field,No Comment,private int archive_size_hi;,int archive_size_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_size_lo,Field,No Comment,private int archive_size_lo;,int archive_size_lo,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_next_count,Field,No Comment,private int archive_next_count;,int archive_next_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.archive_modtime,Field,No Comment,private int archive_modtime;,int archive_modtime,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.file_count,Field,No Comment,private int file_count;,int file_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.deflate_hint,Field,No Comment,private boolean deflate_hint;,boolean deflate_hint,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_modtime,Field,No Comment,private final boolean have_file_modtime = true;,boolean have_file_modtime,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_options,Field,No Comment,private final boolean have_file_options = true;,boolean have_file_options,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_size_hi,Field,No Comment,private boolean have_file_size_hi;,boolean have_file_size_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_class_flags_hi,Field,No Comment,private boolean have_class_flags_hi;,boolean have_class_flags_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_field_flags_hi,Field,No Comment,private boolean have_field_flags_hi;,boolean have_field_flags_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_method_flags_hi,Field,No Comment,private boolean have_method_flags_hi;,boolean have_method_flags_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.have_code_flags_hi,Field,No Comment,private boolean have_code_flags_hi;,boolean have_code_flags_hi,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.ic_count,Field,No Comment,private int ic_count;,int ic_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.class_count,Field,No Comment,private int class_count;,int class_count,private 
org.apache.commons.compress.harmony.pack200.SegmentHeader.majverCounter,Field,No Comment,private final Counter majverCounter = new Counter();,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter majverCounter,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.objs,Field,No Comment,private final int[] objs = new int[8];,int[] objs,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.counts,Field,No Comment,private final int[] counts = new int[8];,int[] counts,"private , final "
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.length,Field,No Comment,private int length;,int length,private 
org.apache.commons.compress.harmony.pack200.CPSignature.signatureForm,Field,No Comment,private final CPUTF8 signatureForm;,org.apache.commons.compress.harmony.pack200.CPUTF8 signatureForm,"private , final "
org.apache.commons.compress.harmony.pack200.CPSignature.classes,Field,No Comment,private final List<CPClass> classes;,java.util.List classes,"private , final "
org.apache.commons.compress.harmony.pack200.CPSignature.signature,Field,No Comment,private final String signature;,java.lang.String signature,"private , final "
org.apache.commons.compress.harmony.pack200.CPSignature.formStartsWithBracket,Field,No Comment,private final boolean formStartsWithBracket;,boolean formStartsWithBracket,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.EMPTY_ATTRIBUTE_ARRAY,Field,No Comment,private static final Attribute[] EMPTY_ATTRIBUTE_ARRAY = {};,org.objectweb.asm.Attribute[] EMPTY_ATTRIBUTE_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.SEGMENT_LIMIT,Field,No Comment,public static final long SEGMENT_LIMIT = 1_000_000L;,long SEGMENT_LIMIT,"public , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.STRIP,Field,No Comment,"public static final String STRIP = ""strip"";",java.lang.String STRIP,"public , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.ERROR,Field,No Comment,"public static final String ERROR = ""error"";",java.lang.String ERROR,"public , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.PASS,Field,No Comment,"public static final String PASS = ""pass"";",java.lang.String PASS,"public , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.KEEP,Field,No Comment,"public static final String KEEP = ""keep"";",java.lang.String KEEP,"public , static , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.gzip,Field,All options are initially set to their defaults,private boolean gzip = true;,boolean gzip,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.stripDebug,Field,No Comment,private boolean stripDebug;,boolean stripDebug,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.keepFileOrder,Field,No Comment,private boolean keepFileOrder = true;,boolean keepFileOrder,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.segmentLimit,Field,No Comment,private long segmentLimit = SEGMENT_LIMIT;,long segmentLimit,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.effort,Field,No Comment,private int effort = 5;,int effort,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.deflateHint,Field,No Comment,private String deflateHint = KEEP;,java.lang.String deflateHint,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.modificationTime,Field,No Comment,private String modificationTime = KEEP;,java.lang.String modificationTime,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.passFiles,Field,No Comment,private final List<String> passFiles = new ArrayList<>();,java.util.List passFiles,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.unknownAttributeAction,Field,No Comment,private String unknownAttributeAction = PASS;,java.lang.String unknownAttributeAction,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.classAttributeActions,Field,No Comment,"private final Map<String, String> classAttributeActions = new HashMap<>();",java.util.Map classAttributeActions,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.fieldAttributeActions,Field,No Comment,"private final Map<String, String> fieldAttributeActions = new HashMap<>();",java.util.Map fieldAttributeActions,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.methodAttributeActions,Field,No Comment,"private final Map<String, String> methodAttributeActions = new HashMap<>();",java.util.Map methodAttributeActions,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.codeAttributeActions,Field,No Comment,"private final Map<String, String> codeAttributeActions = new HashMap<>();",java.util.Map codeAttributeActions,"private , final "
org.apache.commons.compress.harmony.pack200.PackingOptions.verbose,Field,No Comment,private boolean verbose;,boolean verbose,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.logFile,Field,No Comment,private String logFile;,java.lang.String logFile,private 
org.apache.commons.compress.harmony.pack200.PackingOptions.unknownAttributeTypes,Field,No Comment,private Attribute[] unknownAttributeTypes;,org.objectweb.asm.Attribute[] unknownAttributeTypes,private 
org.apache.commons.compress.harmony.pack200.BHSDCodec.b,Field,"* The maximum number of bytes in each coding word. B must be a value between [1..5]. For a pass-through coding (where each byte is encoded as itself, aka\n     * {@link #BYTE1}, B is 1 (each byte takes a maximum of 1 byte).",private final int b;,int b,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.d,Field,"* Whether delta encoding is used (0=false,1=true).",private final int d;,int d,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.h,Field,* The radix of the encoding.,private final int h;,int h,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.l,Field,* The co-parameter of h; 256-h.,private final int l;,int l,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.s,Field,"* Represents signed numbers or not, 0 (unsigned), 1 (signed, one's complement) or 2 (signed, two's complement).",private final int s;,int s,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.cardinality,Field,No Comment,private long cardinality;,long cardinality,private 
org.apache.commons.compress.harmony.pack200.BHSDCodec.smallest,Field,No Comment,private final long smallest;,long smallest,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.largest,Field,No Comment,private final long largest;,long largest,"private , final "
org.apache.commons.compress.harmony.pack200.BHSDCodec.powers,Field,* radix^i powers,private final long[] powers;,long[] powers,"private , final "
org.apache.commons.compress.harmony.pack200.CPUTF8.string,Field,No Comment,private final String string;,java.lang.String string,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.defaultAttributeNames,Field,Don't need to include default attribute names in the constant pool bands,private final Set<String> defaultAttributeNames = new HashSet<>();,java.util.Set defaultAttributeNames,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Utf8,Field,No Comment,private final Set<CPUTF8> cp_Utf8 = new TreeSet<>();,java.util.Set cp_Utf8,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Int,Field,No Comment,private final Set<CPInt> cp_Int = new TreeSet<>();,java.util.Set cp_Int,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Float,Field,No Comment,private final Set<CPFloat> cp_Float = new TreeSet<>();,java.util.Set cp_Float,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Long,Field,No Comment,private final Set<CPLong> cp_Long = new TreeSet<>();,java.util.Set cp_Long,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Double,Field,No Comment,private final Set<CPDouble> cp_Double = new TreeSet<>();,java.util.Set cp_Double,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_String,Field,No Comment,private final Set<CPString> cp_String = new TreeSet<>();,java.util.Set cp_String,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Class,Field,No Comment,private final Set<CPClass> cp_Class = new TreeSet<>();,java.util.Set cp_Class,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Signature,Field,No Comment,private final Set<CPSignature> cp_Signature = new TreeSet<>();,java.util.Set cp_Signature,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Descr,Field,No Comment,private final Set<CPNameAndType> cp_Descr = new TreeSet<>();,java.util.Set cp_Descr,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Field,Field,No Comment,private final Set<CPMethodOrField> cp_Field = new TreeSet<>();,java.util.Set cp_Field,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Method,Field,No Comment,private final Set<CPMethodOrField> cp_Method = new TreeSet<>();,java.util.Set cp_Method,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.cp_Imethod,Field,No Comment,private final Set<CPMethodOrField> cp_Imethod = new TreeSet<>();,java.util.Set cp_Imethod,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpUtf8,Field,No Comment,"private final Map<String, CPUTF8> stringsToCpUtf8 = new HashMap<>();",java.util.Map stringsToCpUtf8,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpNameAndType,Field,No Comment,"private final Map<String, CPNameAndType> stringsToCpNameAndType = new HashMap<>();",java.util.Map stringsToCpNameAndType,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpClass,Field,No Comment,"private final Map<String, CPClass> stringsToCpClass = new HashMap<>();",java.util.Map stringsToCpClass,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpSignature,Field,No Comment,"private final Map<String, CPSignature> stringsToCpSignature = new HashMap<>();",java.util.Map stringsToCpSignature,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpMethod,Field,No Comment,"private final Map<String, CPMethodOrField> stringsToCpMethod = new HashMap<>();",java.util.Map stringsToCpMethod,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpField,Field,No Comment,"private final Map<String, CPMethodOrField> stringsToCpField = new HashMap<>();",java.util.Map stringsToCpField,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.stringsToCpIMethod,Field,No Comment,"private final Map<String, CPMethodOrField> stringsToCpIMethod = new HashMap<>();",java.util.Map stringsToCpIMethod,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.objectsToCPConstant,Field,No Comment,"private final Map<Object, CPConstant<?>> objectsToCPConstant = new HashMap<>();",java.util.Map objectsToCPConstant,"private , final "
org.apache.commons.compress.harmony.pack200.CpBands.segment,Field,No Comment,private final Segment segment;,org.apache.commons.compress.harmony.pack200.Segment segment,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands.attributeLayoutElements,Field,No Comment,protected List<AttributeLayoutElement> attributeLayoutElements;,java.util.List attributeLayoutElements,protected 
org.apache.commons.compress.harmony.pack200.NewAttributeBands.backwardsCallCounts,Field,No Comment,private int[] backwardsCallCounts;,int[] backwardsCallCounts,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands.def,Field,No Comment,private final AttributeDefinition def;,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition def,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands.usedAtLeastOnce,Field,No Comment,private boolean usedAtLeastOnce;,boolean usedAtLeastOnce,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands.lastPIntegral,Field,used when parsing,private Integral lastPIntegral;,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral lastPIntegral,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.callableIndex,Field,No Comment,private final int callableIndex;,int callableIndex,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.callable,Field,No Comment,private Callable callable;,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable callable,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.body,Field,No Comment,private final List<LayoutElement> body;,java.util.List body,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.isBackwardsCallable,Field,No Comment,private boolean isBackwardsCallable;,boolean isBackwardsCallable,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.backwardsCallableIndex,Field,No Comment,private int backwardsCallableIndex;,int backwardsCallableIndex,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.tag,Field,No Comment,private final String tag;,java.lang.String tag,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.band,Field,No Comment,private final List band = new ArrayList();,java.util.List band,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.defaultCodec,Field,No Comment,private final BHSDCodec defaultCodec;,org.apache.commons.compress.harmony.pack200.BHSDCodec defaultCodec,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.previousIntegral,Field,used for bytecode offsets (OH and POH),private Integral previousIntegral;,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral previousIntegral,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.previousPValue,Field,No Comment,private int previousPValue;,int previousPValue,private 
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.tag,Field,No Comment,private final String tag;,java.lang.String tag,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.band,Field,No Comment,private final List<ConstantPoolEntry> band = new ArrayList<>();,java.util.List band,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.nullsAllowed,Field,No Comment,private final boolean nullsAllowed;,boolean nullsAllowed,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.countElement,Field,No Comment,private final Integral countElement;,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral countElement,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.layoutElements,Field,No Comment,private final List<LayoutElement> layoutElements = new ArrayList<>();,java.util.List layoutElements,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.unionTag,Field,No Comment,private final Integral unionTag;,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral unionTag,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.unionCases,Field,No Comment,private final List<UnionCase> unionCases;,java.util.List unionCases,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.defaultCaseBody,Field,No Comment,private final List<LayoutElement> defaultCaseBody;,java.util.List defaultCaseBody,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.body,Field,No Comment,private final List<LayoutElement> body;,java.util.List body,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.tags,Field,No Comment,private final List<Integer> tags;,java.util.List tags,"private , final "
org.apache.commons.compress.harmony.pack200.CPNameAndType.name,Field,No Comment,private final CPUTF8 name;,org.apache.commons.compress.harmony.pack200.CPUTF8 name,"private , final "
org.apache.commons.compress.harmony.pack200.CPNameAndType.signature,Field,No Comment,private final CPSignature signature;,org.apache.commons.compress.harmony.pack200.CPSignature signature,"private , final "
org.apache.commons.compress.harmony.pack200.PackingUtils.packingLogger,Field,No Comment,private static PackingLogger packingLogger;,org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger packingLogger,"private , static "
org.apache.commons.compress.harmony.pack200.PackingUtils.fileHandler,Field,No Comment,private static FileHandler fileHandler;,java.util.logging.FileHandler fileHandler,"private , static "
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.verbose,Field,No Comment,private boolean verbose;,boolean verbose,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.contextClass,Field,No Comment,private boolean contextClass;,boolean contextClass,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.contextMethod,Field,No Comment,private boolean contextMethod;,boolean contextMethod,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.contextField,Field,No Comment,private boolean contextField;,boolean contextField,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.contextCode,Field,No Comment,private boolean contextCode;,boolean contextCode,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.layout,Field,No Comment,private final String layout;,java.lang.String layout,"private , final "
org.apache.commons.compress.harmony.pack200.NewAttribute.contents,Field,No Comment,private byte[] contents;,byte[] contents,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.codeOff,Field,No Comment,private int codeOff;,int codeOff,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.labels,Field,No Comment,private Label[] labels;,org.objectweb.asm.Label[] labels,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.classReader,Field,No Comment,private ClassReader classReader;,org.objectweb.asm.ClassReader classReader,private 
org.apache.commons.compress.harmony.pack200.NewAttribute.buf,Field,No Comment,private char[] buf;,char[] buf,private 
org.apache.commons.compress.harmony.pack200.Pack200Adapter.DEFAULT_BUFFER_SIZE,Field,No Comment,protected static final int DEFAULT_BUFFER_SIZE = 8192;,int DEFAULT_BUFFER_SIZE,"protected , static , final "
org.apache.commons.compress.harmony.pack200.Pack200Adapter.support,Field,No Comment,private final PropertyChangeSupport support = new PropertyChangeSupport(this);,java.beans.PropertyChangeSupport support,"private , final "
org.apache.commons.compress.harmony.pack200.Pack200Adapter.properties,Field,No Comment,"private final SortedMap<String, String> properties = new TreeMap<>();",java.util.SortedMap properties,"private , final "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaUnsignedCodecs1,Field,* Non-delta unsigned codecs 1.,"public static BHSDCodec[] nonDeltaUnsignedCodecs1 = { // (1,256) is a special case and is considered separately so shouldn't be included here\n//        CodecEncoding.getCanonicalCodec(1), // (1,256)\n// (2,256)\nCodecEncoding.getCanonicalCodec(5), // (3,256)\nCodecEncoding.getCanonicalCodec(9), // (4,256)\nCodecEncoding.getCanonicalCodec(13) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaUnsignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaUnsignedCodecs2,Field,* Non-delta unsigned codecs 2.,"public static BHSDCodec[] nonDeltaUnsignedCodecs2 = { // (5,4)\nCodecEncoding.getCanonicalCodec(17), // (5,16)\nCodecEncoding.getCanonicalCodec(20), // (5,32)\nCodecEncoding.getCanonicalCodec(23), // (5,64)\nCodecEncoding.getCanonicalCodec(26), // (5,128)\nCodecEncoding.getCanonicalCodec(29) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaUnsignedCodecs2,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaUnsignedCodecs3,Field,* Non-delta unsigned codecs 3.,"public static BHSDCodec[] nonDeltaUnsignedCodecs3 = { // (2,192)\nCodecEncoding.getCanonicalCodec(47), // (2,224)\nCodecEncoding.getCanonicalCodec(48), // (2,240)\nCodecEncoding.getCanonicalCodec(49), // (2,248)\nCodecEncoding.getCanonicalCodec(50), // (2,252)\nCodecEncoding.getCanonicalCodec(51) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaUnsignedCodecs3,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaUnsignedCodecs4,Field,* Non-delta unsigned codecs 4.,"public static BHSDCodec[] nonDeltaUnsignedCodecs4 = { // (3,192)\nCodecEncoding.getCanonicalCodec(70), // (3,224)\nCodecEncoding.getCanonicalCodec(71), // (3,240)\nCodecEncoding.getCanonicalCodec(72), // (3,248)\nCodecEncoding.getCanonicalCodec(73), // (3,252)\nCodecEncoding.getCanonicalCodec(74) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaUnsignedCodecs4,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaUnsignedCodecs5,Field,* Non-delta unsigned codecs 5.,"public static BHSDCodec[] nonDeltaUnsignedCodecs5 = { // (4,192)\nCodecEncoding.getCanonicalCodec(93), // (4,224)\nCodecEncoding.getCanonicalCodec(94), // (4,240)\nCodecEncoding.getCanonicalCodec(95), // (4,248)\nCodecEncoding.getCanonicalCodec(96), // (4,252)\nCodecEncoding.getCanonicalCodec(97) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaUnsignedCodecs5,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaUnsignedCodecs1,Field,* Delta unsigned codecs 1.,"public static BHSDCodec[] deltaUnsignedCodecs1 = { // (1,256,0,1)\nCodecEncoding.getCanonicalCodec(3), // (2,256,0,1)\nCodecEncoding.getCanonicalCodec(7), // (3,256,0,1)\nCodecEncoding.getCanonicalCodec(11), // (4,256,0,1)\nCodecEncoding.getCanonicalCodec(15) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaUnsignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaUnsignedCodecs2,Field,* Delta unsigned codecs 2.,"public static BHSDCodec[] deltaUnsignedCodecs2 = { // (5,4,0,1)\nCodecEncoding.getCanonicalCodec(32), // (5,16,0,1)\nCodecEncoding.getCanonicalCodec(35), // (5,32,0,1)\nCodecEncoding.getCanonicalCodec(38), // (5,64,0,1)\nCodecEncoding.getCanonicalCodec(41), // (5,128,0,1)\nCodecEncoding.getCanonicalCodec(44) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaUnsignedCodecs2,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaUnsignedCodecs3,Field,* Delta unsigned codecs 3.,"public static BHSDCodec[] deltaUnsignedCodecs3 = { // (2,8,0,1)\nCodecEncoding.getCanonicalCodec(52), // (2,16,0,1)\nCodecEncoding.getCanonicalCodec(54), // (2,32,0,1)\nCodecEncoding.getCanonicalCodec(56), // (2,64,0,1)\nCodecEncoding.getCanonicalCodec(58), // (2,128,0,1)\nCodecEncoding.getCanonicalCodec(60), // (2,192,0,1)\nCodecEncoding.getCanonicalCodec(62), // (2,224,0,1)\nCodecEncoding.getCanonicalCodec(64), // (2,240,0,1)\nCodecEncoding.getCanonicalCodec(66), // (2,248,0,1)\nCodecEncoding.getCanonicalCodec(68) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaUnsignedCodecs3,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaUnsignedCodecs4,Field,* Delta unsigned codecs 4.,"public static BHSDCodec[] deltaUnsignedCodecs4 = { // (3,8,0,1)\nCodecEncoding.getCanonicalCodec(75), // (3,16,0,1)\nCodecEncoding.getCanonicalCodec(77), // (3,32,0,1)\nCodecEncoding.getCanonicalCodec(79), // (3,64,0,1)\nCodecEncoding.getCanonicalCodec(81), // (3,128,0,1)\nCodecEncoding.getCanonicalCodec(83), // (3,192,0,1)\nCodecEncoding.getCanonicalCodec(85), // (3,224,0,1)\nCodecEncoding.getCanonicalCodec(87), // (3,240,0,1)\nCodecEncoding.getCanonicalCodec(89), // (3,248,0,1)\nCodecEncoding.getCanonicalCodec(91) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaUnsignedCodecs4,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaUnsignedCodecs5,Field,* Delta unsigned codecs 5.,"public static BHSDCodec[] deltaUnsignedCodecs5 = { // (4,8,0,1)\nCodecEncoding.getCanonicalCodec(98), // (4,16,0,1)\nCodecEncoding.getCanonicalCodec(100), // (4,32,0,1)\nCodecEncoding.getCanonicalCodec(102), // (4,64,0,1)\nCodecEncoding.getCanonicalCodec(104), // (4,128,0,1)\nCodecEncoding.getCanonicalCodec(106), // (4,192,0,1)\nCodecEncoding.getCanonicalCodec(108), // (4,224,0,1)\nCodecEncoding.getCanonicalCodec(110), // (4,240,0,1)\nCodecEncoding.getCanonicalCodec(112), // (4,248,0,1)\nCodecEncoding.getCanonicalCodec(114) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaUnsignedCodecs5,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaSignedCodecs1,Field,* Delta signed codecs 1.,"public static BHSDCodec[] deltaSignedCodecs1 = { // (1,256,1,1)\nCodecEncoding.getCanonicalCodec(4), // (2,256,1,1)\nCodecEncoding.getCanonicalCodec(8), // (3,256,1,1)\nCodecEncoding.getCanonicalCodec(12), // (4,256,1,1)\nCodecEncoding.getCanonicalCodec(16) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaSignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaSignedCodecs2,Field,* Delta signed codecs 2.,"public static BHSDCodec[] deltaSignedCodecs2 = { // (5,4,1,1)\nCodecEncoding.getCanonicalCodec(33), // (5,16,1,1)\nCodecEncoding.getCanonicalCodec(36), // (5,32,1,1)\nCodecEncoding.getCanonicalCodec(39), // (5,64,1,1)\nCodecEncoding.getCanonicalCodec(42), // (5,128,1,1)\nCodecEncoding.getCanonicalCodec(45) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaSignedCodecs2,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaSignedCodecs3,Field,* Delta signed codecs 3.,"public static BHSDCodec[] deltaSignedCodecs3 = { // (2,8,1,1)\nCodecEncoding.getCanonicalCodec(53), // (2,16,1,1)\nCodecEncoding.getCanonicalCodec(55), // (2,32,1,1)\nCodecEncoding.getCanonicalCodec(57), // (2,64,1,1)\nCodecEncoding.getCanonicalCodec(59), // (2,128,1,1)\nCodecEncoding.getCanonicalCodec(61), // (2,192,1,1)\nCodecEncoding.getCanonicalCodec(63), // (2,224,1,1)\nCodecEncoding.getCanonicalCodec(65), // (2,240,1,1)\nCodecEncoding.getCanonicalCodec(67), // (2,248,1,1)\nCodecEncoding.getCanonicalCodec(69) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaSignedCodecs3,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaSignedCodecs4,Field,* Delta signed codecs 4.,"public static BHSDCodec[] deltaSignedCodecs4 = { // (3,8,1,1)\nCodecEncoding.getCanonicalCodec(76), // (3,16,1,1)\nCodecEncoding.getCanonicalCodec(78), // (3,32,1,1)\nCodecEncoding.getCanonicalCodec(80), // (3,64,1,1)\nCodecEncoding.getCanonicalCodec(82), // (3,128,1,1)\nCodecEncoding.getCanonicalCodec(84), // (3,192,1,1)\nCodecEncoding.getCanonicalCodec(86), // (3,224,1,1)\nCodecEncoding.getCanonicalCodec(88), // (3,240,1,1)\nCodecEncoding.getCanonicalCodec(90), // (3,248,1,1)\nCodecEncoding.getCanonicalCodec(92) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaSignedCodecs4,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaSignedCodecs5,Field,* Delta signed codecs 5.,"public static BHSDCodec[] deltaSignedCodecs5 = { // (4,8,1,1)\nCodecEncoding.getCanonicalCodec(99), // (4,16,1,1)\nCodecEncoding.getCanonicalCodec(101), // (4,32,1,1)\nCodecEncoding.getCanonicalCodec(103), // (4,64,1,1)\nCodecEncoding.getCanonicalCodec(105), // (4,128,1,1)\nCodecEncoding.getCanonicalCodec(107), // (4,192,1,1)\nCodecEncoding.getCanonicalCodec(109), // (4,224,1,1)\nCodecEncoding.getCanonicalCodec(111), // (4,240,1,1)\nCodecEncoding.getCanonicalCodec(113), // (4,248,1,1)\nCodecEncoding.getCanonicalCodec(115) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaSignedCodecs5,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.deltaDoubleSignedCodecs1,Field,* Delta double signed codecs 1.,"public static BHSDCodec[] deltaDoubleSignedCodecs1 = { // (5,4,2,1)\nCodecEncoding.getCanonicalCodec(34), // (5,16,2,1)\nCodecEncoding.getCanonicalCodec(37), // (5,32,2,1)\nCodecEncoding.getCanonicalCodec(40), // (5,64,2,1)\nCodecEncoding.getCanonicalCodec(43), // (5,128,2,1)\nCodecEncoding.getCanonicalCodec(46) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] deltaDoubleSignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaSignedCodecs1,Field,* Non-delta signed codecs 1.,"public static BHSDCodec[] nonDeltaSignedCodecs1 = { // (1,256,1)\nCodecEncoding.getCanonicalCodec(2), // (2,256,1)\nCodecEncoding.getCanonicalCodec(6), // (3,256,1)\nCodecEncoding.getCanonicalCodec(10), // (4,256,1)\nCodecEncoding.getCanonicalCodec(14) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaSignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaSignedCodecs2,Field,* Non-delta signed codecs 2.,"public static BHSDCodec[] nonDeltaSignedCodecs2 = { // (5,4,1)\nCodecEncoding.getCanonicalCodec(18), // (5,16,1)\nCodecEncoding.getCanonicalCodec(21), // (5,32,1)\nCodecEncoding.getCanonicalCodec(24), // (5,64,1)\nCodecEncoding.getCanonicalCodec(27), // (5,128,1)\nCodecEncoding.getCanonicalCodec(30) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaSignedCodecs2,"public , static "
org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.nonDeltaDoubleSignedCodecs1,Field,* Non-delta double signed codecs 1.,"public static BHSDCodec[] nonDeltaDoubleSignedCodecs1 = { // (5,4,2)\nCodecEncoding.getCanonicalCodec(19), // (5,16,2)\nCodecEncoding.getCanonicalCodec(22), // (5,32,2)\nCodecEncoding.getCanonicalCodec(25), // (5,64,2)\nCodecEncoding.getCanonicalCodec(28), // (5,128,2)\nCodecEncoding.getCanonicalCodec(31) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] nonDeltaDoubleSignedCodecs1,"public , static "
org.apache.commons.compress.harmony.pack200.CPString.string,Field,No Comment,private final String string;,java.lang.String string,"private , final "
org.apache.commons.compress.harmony.pack200.CPString.utf8,Field,No Comment,private final CPUTF8 utf8;,org.apache.commons.compress.harmony.pack200.CPUTF8 utf8,"private , final "
org.apache.commons.compress.harmony.pack200.IcBands.innerClasses,Field,No Comment,private final Set<IcTuple> innerClasses = new TreeSet<>();,java.util.Set innerClasses,"private , final "
org.apache.commons.compress.harmony.pack200.IcBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.IcBands.bit16Count,Field,No Comment,private int bit16Count;,int bit16Count,private 
org.apache.commons.compress.harmony.pack200.IcBands.outerToInner,Field,No Comment,"private final Map<String, List<IcTuple>> outerToInner = new HashMap<>();",java.util.Map outerToInner,"private , final "
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.C,Field,this class,protected CPClass C;,org.apache.commons.compress.harmony.pack200.CPClass C,protected 
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.F,Field,flags,protected int F;,int F,protected 
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.C2,Field,outer class,protected CPClass C2;,org.apache.commons.compress.harmony.pack200.CPClass C2,protected 
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.N,Field,name,protected CPUTF8 N;,org.apache.commons.compress.harmony.pack200.CPUTF8 N,protected 
org.apache.commons.compress.harmony.pack200.IntList.array,Field,No Comment,private int[] array;,int[] array,private 
org.apache.commons.compress.harmony.pack200.IntList.firstIndex,Field,No Comment,private int firstIndex;,int firstIndex,private 
org.apache.commons.compress.harmony.pack200.IntList.lastIndex,Field,No Comment,private int lastIndex;,int lastIndex,private 
org.apache.commons.compress.harmony.pack200.IntList.modCount,Field,No Comment,private int modCount;,int modCount,private 
org.apache.commons.compress.harmony.pack200.ClassBands.EMPTY_LONG_ARRAY,Field,No Comment,private static final long[] EMPTY_LONG_ARRAY = {};,long[] EMPTY_LONG_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.ClassBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.attrBands,Field,No Comment,private final AttributeDefinitionBands attrBands;,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands attrBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_this,Field,No Comment,private final CPClass[] class_this;,org.apache.commons.compress.harmony.pack200.CPClass[] class_this,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_super,Field,No Comment,private final CPClass[] class_super;,org.apache.commons.compress.harmony.pack200.CPClass[] class_super,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_interface,Field,No Comment,private final CPClass[][] class_interface;,org.apache.commons.compress.harmony.pack200.CPClass[][] class_interface,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_interface_count,Field,No Comment,private final int[] class_interface_count;,int[] class_interface_count,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.major_versions,Field,No Comment,private final int[] major_versions;,int[] major_versions,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_flags,Field,No Comment,private final long[] class_flags;,long[] class_flags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_attr_calls,Field,No Comment,private int[] class_attr_calls;,int[] class_attr_calls,private 
org.apache.commons.compress.harmony.pack200.ClassBands.classSourceFile,Field,No Comment,private final List<CPUTF8> classSourceFile = new ArrayList<>();,java.util.List classSourceFile,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classEnclosingMethodClass,Field,No Comment,private final List<ConstantPoolEntry> classEnclosingMethodClass = new ArrayList<>();,java.util.List classEnclosingMethodClass,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classEnclosingMethodDesc,Field,No Comment,private final List<ConstantPoolEntry> classEnclosingMethodDesc = new ArrayList<>();,java.util.List classEnclosingMethodDesc,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classSignature,Field,No Comment,private final List<CPSignature> classSignature = new ArrayList<>();,java.util.List classSignature,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classFileVersionMinor,Field,No Comment,private final IntList classFileVersionMinor = new IntList();,org.apache.commons.compress.harmony.pack200.IntList classFileVersionMinor,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classFileVersionMajor,Field,No Comment,private final IntList classFileVersionMajor = new IntList();,org.apache.commons.compress.harmony.pack200.IntList classFileVersionMajor,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_field_count,Field,No Comment,private final int[] class_field_count;,int[] class_field_count,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.field_descr,Field,No Comment,private final CPNameAndType[][] field_descr;,org.apache.commons.compress.harmony.pack200.CPNameAndType[][] field_descr,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.field_flags,Field,No Comment,private final long[][] field_flags;,long[][] field_flags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.field_attr_calls,Field,No Comment,private int[] field_attr_calls;,int[] field_attr_calls,private 
org.apache.commons.compress.harmony.pack200.ClassBands.fieldConstantValueKQ,Field,No Comment,private final List<CPConstant<?>> fieldConstantValueKQ = new ArrayList<>();,java.util.List fieldConstantValueKQ,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.fieldSignature,Field,No Comment,private final List<CPSignature> fieldSignature = new ArrayList<>();,java.util.List fieldSignature,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_method_count,Field,No Comment,private final int[] class_method_count;,int[] class_method_count,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_descr,Field,No Comment,private final CPNameAndType[][] method_descr;,org.apache.commons.compress.harmony.pack200.CPNameAndType[][] method_descr,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_flags,Field,No Comment,private final long[][] method_flags;,long[][] method_flags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_attr_calls,Field,No Comment,private int[] method_attr_calls;,int[] method_attr_calls,private 
org.apache.commons.compress.harmony.pack200.ClassBands.methodSignature,Field,No Comment,private final List<CPSignature> methodSignature = new ArrayList<>();,java.util.List methodSignature,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.methodExceptionNumber,Field,No Comment,private final IntList methodExceptionNumber = new IntList();,org.apache.commons.compress.harmony.pack200.IntList methodExceptionNumber,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.methodExceptionClasses,Field,No Comment,private final List<CPClass> methodExceptionClasses = new ArrayList<>();,java.util.List methodExceptionClasses,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHeaders,Field,No Comment,private int[] codeHeaders;,int[] codeHeaders,private 
org.apache.commons.compress.harmony.pack200.ClassBands.codeMaxStack,Field,No Comment,private final IntList codeMaxStack = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeMaxStack,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeMaxLocals,Field,No Comment,private final IntList codeMaxLocals = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeMaxLocals,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHandlerCount,Field,No Comment,private final IntList codeHandlerCount = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeHandlerCount,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHandlerStartP,Field,No Comment,private final List codeHandlerStartP = new ArrayList();,java.util.List codeHandlerStartP,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHandlerEndPO,Field,No Comment,private final List codeHandlerEndPO = new ArrayList();,java.util.List codeHandlerEndPO,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHandlerCatchPO,Field,No Comment,private final List codeHandlerCatchPO = new ArrayList();,java.util.List codeHandlerCatchPO,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeHandlerClass,Field,No Comment,private final List<CPClass> codeHandlerClass = new ArrayList<>();,java.util.List codeHandlerClass,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeFlags,Field,No Comment,private final List<Long> codeFlags = new ArrayList<>();,java.util.List codeFlags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.code_attr_calls,Field,No Comment,private int[] code_attr_calls;,int[] code_attr_calls,private 
org.apache.commons.compress.harmony.pack200.ClassBands.codeLineNumberTableN,Field,No Comment,private final IntList codeLineNumberTableN = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLineNumberTableN,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLineNumberTableBciP,Field,No Comment,private final List codeLineNumberTableBciP = new ArrayList();,java.util.List codeLineNumberTableBciP,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLineNumberTableLine,Field,No Comment,private final IntList codeLineNumberTableLine = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLineNumberTableLine,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableN,Field,No Comment,private final IntList codeLocalVariableTableN = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLocalVariableTableN,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableBciP,Field,No Comment,private final List codeLocalVariableTableBciP = new ArrayList();,java.util.List codeLocalVariableTableBciP,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableSpanO,Field,No Comment,private final List codeLocalVariableTableSpanO = new ArrayList();,java.util.List codeLocalVariableTableSpanO,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableNameRU,Field,No Comment,private final List<ConstantPoolEntry> codeLocalVariableTableNameRU = new ArrayList<>();,java.util.List codeLocalVariableTableNameRU,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableTypeRS,Field,No Comment,private final List<ConstantPoolEntry> codeLocalVariableTableTypeRS = new ArrayList<>();,java.util.List codeLocalVariableTableTypeRS,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTableSlot,Field,No Comment,private final IntList codeLocalVariableTableSlot = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLocalVariableTableSlot,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableN,Field,No Comment,private final IntList codeLocalVariableTypeTableN = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLocalVariableTypeTableN,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableBciP,Field,No Comment,private final List codeLocalVariableTypeTableBciP = new ArrayList();,java.util.List codeLocalVariableTypeTableBciP,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableSpanO,Field,No Comment,private final List codeLocalVariableTypeTableSpanO = new ArrayList();,java.util.List codeLocalVariableTypeTableSpanO,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableNameRU,Field,No Comment,private final List<ConstantPoolEntry> codeLocalVariableTypeTableNameRU = new ArrayList<>();,java.util.List codeLocalVariableTypeTableNameRU,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableTypeRS,Field,No Comment,private final List<ConstantPoolEntry> codeLocalVariableTypeTableTypeRS = new ArrayList<>();,java.util.List codeLocalVariableTypeTableTypeRS,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeLocalVariableTypeTableSlot,Field,No Comment,private final IntList codeLocalVariableTypeTableSlot = new IntList();,org.apache.commons.compress.harmony.pack200.IntList codeLocalVariableTypeTableSlot,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_RVA_bands,Field,No Comment,private final MetadataBandGroup class_RVA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup class_RVA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.class_RIA_bands,Field,No Comment,private final MetadataBandGroup class_RIA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup class_RIA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.field_RVA_bands,Field,No Comment,private final MetadataBandGroup field_RVA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup field_RVA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.field_RIA_bands,Field,No Comment,private final MetadataBandGroup field_RIA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup field_RIA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_RVA_bands,Field,No Comment,private final MetadataBandGroup method_RVA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup method_RVA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_RIA_bands,Field,No Comment,private final MetadataBandGroup method_RIA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup method_RIA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_RVPA_bands,Field,No Comment,private final MetadataBandGroup method_RVPA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup method_RVPA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_RIPA_bands,Field,No Comment,private final MetadataBandGroup method_RIPA_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup method_RIPA_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.method_AD_bands,Field,No Comment,private final MetadataBandGroup method_AD_bands;,org.apache.commons.compress.harmony.pack200.MetadataBandGroup method_AD_bands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classAttributeBands,Field,No Comment,private final List<NewAttributeBands> classAttributeBands = new ArrayList<>();,java.util.List classAttributeBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.methodAttributeBands,Field,No Comment,private final List<NewAttributeBands> methodAttributeBands = new ArrayList<>();,java.util.List methodAttributeBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.fieldAttributeBands,Field,No Comment,private final List<NewAttributeBands> fieldAttributeBands = new ArrayList<>();,java.util.List fieldAttributeBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.codeAttributeBands,Field,No Comment,private final List<NewAttributeBands> codeAttributeBands = new ArrayList<>();,java.util.List codeAttributeBands,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.tempFieldFlags,Field,No Comment,private final List<Long> tempFieldFlags = new ArrayList<>();,java.util.List tempFieldFlags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.tempFieldDesc,Field,No Comment,private final List<CPNameAndType> tempFieldDesc = new ArrayList<>();,java.util.List tempFieldDesc,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.tempMethodFlags,Field,No Comment,private final List<Long> tempMethodFlags = new ArrayList<>();,java.util.List tempMethodFlags,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.tempMethodDesc,Field,No Comment,private final List<CPNameAndType> tempMethodDesc = new ArrayList<>();,java.util.List tempMethodDesc,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.tempMethodRVPA,Field,No Comment,private TempParamAnnotation tempMethodRVPA;,org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation tempMethodRVPA,private 
org.apache.commons.compress.harmony.pack200.ClassBands.tempMethodRIPA,Field,No Comment,private TempParamAnnotation tempMethodRIPA;,org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation tempMethodRIPA,private 
org.apache.commons.compress.harmony.pack200.ClassBands.anySyntheticClasses,Field,No Comment,private boolean anySyntheticClasses;,boolean anySyntheticClasses,private 
org.apache.commons.compress.harmony.pack200.ClassBands.anySyntheticFields,Field,No Comment,private boolean anySyntheticFields;,boolean anySyntheticFields,private 
org.apache.commons.compress.harmony.pack200.ClassBands.anySyntheticMethods,Field,No Comment,private boolean anySyntheticMethods;,boolean anySyntheticMethods,private 
org.apache.commons.compress.harmony.pack200.ClassBands.segment,Field,No Comment,private final Segment segment;,org.apache.commons.compress.harmony.pack200.Segment segment,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.classReferencesInnerClass,Field,No Comment,"private final Map<CPClass, Set<CPClass>> classReferencesInnerClass = new HashMap<>();",java.util.Map classReferencesInnerClass,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.stripDebug,Field,No Comment,private final boolean stripDebug;,boolean stripDebug,"private , final "
org.apache.commons.compress.harmony.pack200.ClassBands.index,Field,No Comment,private int index;,int index,private 
org.apache.commons.compress.harmony.pack200.ClassBands.numMethodArgs,Field,No Comment,private int numMethodArgs;,int numMethodArgs,private 
org.apache.commons.compress.harmony.pack200.ClassBands.class_InnerClasses_N,Field,No Comment,private int[] class_InnerClasses_N;,int[] class_InnerClasses_N,private 
org.apache.commons.compress.harmony.pack200.ClassBands.class_InnerClasses_RC,Field,No Comment,private CPClass[] class_InnerClasses_RC;,org.apache.commons.compress.harmony.pack200.CPClass[] class_InnerClasses_RC,private 
org.apache.commons.compress.harmony.pack200.ClassBands.class_InnerClasses_F,Field,No Comment,private int[] class_InnerClasses_F;,int[] class_InnerClasses_F,private 
org.apache.commons.compress.harmony.pack200.ClassBands.classInnerClassesOuterRCN,Field,No Comment,private List<CPClass> classInnerClassesOuterRCN;,java.util.List classInnerClassesOuterRCN,private 
org.apache.commons.compress.harmony.pack200.ClassBands.classInnerClassesNameRUN,Field,No Comment,private List<CPUTF8> classInnerClassesNameRUN;,java.util.List classInnerClassesNameRUN,private 
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.numParams,Field,No Comment,int numParams;,int numParams,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.annoN,Field,No Comment,int[] annoN;,int[] annoN,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.pairN,Field,No Comment,IntList pairN = new IntList();,org.apache.commons.compress.harmony.pack200.IntList pairN,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.typeRS,Field,No Comment,List<String> typeRS = new ArrayList<>();,java.util.List typeRS,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.nameRU,Field,No Comment,List<String> nameRU = new ArrayList<>();,java.util.List nameRU,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.tags,Field,No Comment,List<String> tags = new ArrayList<>();,java.util.List tags,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.values,Field,No Comment,List<Object> values = new ArrayList<>();,java.util.List values,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.caseArrayN,Field,No Comment,List<Integer> caseArrayN = new ArrayList<>();,java.util.List caseArrayN,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.nestTypeRS,Field,No Comment,List<String> nestTypeRS = new ArrayList<>();,java.util.List nestTypeRS,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.nestNameRU,Field,No Comment,List<String> nestNameRU = new ArrayList<>();,java.util.List nestNameRU,default
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.nestPairN,Field,No Comment,List<Integer> nestPairN = new ArrayList<>();,java.util.List nestPairN,default
org.apache.commons.compress.harmony.pack200.BandSet.EMPTY_BYTE_ARRAY,Field,No Comment,private static final byte[] EMPTY_BYTE_ARRAY = {};,byte[] EMPTY_BYTE_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.BandSet.effortThresholds,Field,Note: these values have been tuned - please test carefully if changing them,"private static final int[] effortThresholds = { 0, 0, 1000, 500, 100, 100, 100, 100, 100, 0 };",int[] effortThresholds,"private , static , final "
org.apache.commons.compress.harmony.pack200.BandSet.segmentHeader,Field,No Comment,protected final SegmentHeader segmentHeader;,org.apache.commons.compress.harmony.pack200.SegmentHeader segmentHeader,"protected , final "
org.apache.commons.compress.harmony.pack200.BandSet.effort,Field,No Comment,final int effort;,int effort,final 
org.apache.commons.compress.harmony.pack200.BandSet.canonicalLargest,Field,No Comment,private long[] canonicalLargest;,long[] canonicalLargest,private 
org.apache.commons.compress.harmony.pack200.BandSet.canonicalSmallest,Field,No Comment,private long[] canonicalSmallest;,long[] canonicalSmallest,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.numCodecsTried,Field,The number of Codecs tried so far,private int numCodecsTried;,int numCodecsTried,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.saved,Field,The number of bytes saved by using betterCodec instead of the default codec,private int saved;,int saved,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.extraMetadata,Field,band_headers band),private int[] extraMetadata;,int[] extraMetadata,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.encodedBand,Field,The results of encoding the band with betterCodec,private byte[] encodedBand;,byte[] encodedBand,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.betterCodec,Field,best so far,private Codec betterCodec;,org.apache.commons.compress.harmony.pack200.Codec betterCodec,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.band,Field,No Comment,private final int[] band;,int[] band,"private , final "
org.apache.commons.compress.harmony.pack200.BandSet$BandData.smallest,Field,No Comment,private int smallest = Integer.MAX_VALUE;,int smallest,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.largest,Field,No Comment,private int largest = Integer.MIN_VALUE;,int largest,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.smallestDelta,Field,No Comment,private int smallestDelta;,int smallestDelta,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.largestDelta,Field,No Comment,private int largestDelta;,int largestDelta,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.deltaIsAscending,Field,No Comment,private int deltaIsAscending;,int deltaIsAscending,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.smallDeltaCount,Field,No Comment,private int smallDeltaCount;,int smallDeltaCount,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.averageAbsoluteDelta,Field,No Comment,private double averageAbsoluteDelta;,double averageAbsoluteDelta,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.averageAbsoluteValue,Field,No Comment,private double averageAbsoluteValue;,double averageAbsoluteValue,private 
org.apache.commons.compress.harmony.pack200.BandSet$BandData.distinctValues,Field,No Comment,"private Map<Integer, Integer> distinctValues;",java.util.Map distinctValues,private 
org.apache.commons.compress.harmony.pack200.FileBands.fileName,Field,No Comment,private final CPUTF8[] fileName;,org.apache.commons.compress.harmony.pack200.CPUTF8[] fileName,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.file_name,Field,No Comment,private int[] file_name;,int[] file_name,private 
org.apache.commons.compress.harmony.pack200.FileBands.file_modtime,Field,No Comment,private final int[] file_modtime;,int[] file_modtime,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.file_size,Field,No Comment,private final long[] file_size;,long[] file_size,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.file_options,Field,No Comment,private final int[] file_options;,int[] file_options,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.file_bits,Field,No Comment,private final byte[][] file_bits;,byte[][] file_bits,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.fileList,Field,No Comment,private final List<PackingFile> fileList;,java.util.List fileList,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.options,Field,No Comment,private final PackingOptions options;,org.apache.commons.compress.harmony.pack200.PackingOptions options,"private , final "
org.apache.commons.compress.harmony.pack200.FileBands.cpBands,Field,No Comment,private final CpBands cpBands;,org.apache.commons.compress.harmony.pack200.CpBands cpBands,"private , final "
org.apache.commons.compress.harmony.pack200.RunCodec.k,Field,No Comment,private int k;,int k,private 
org.apache.commons.compress.harmony.pack200.RunCodec.aCodec,Field,No Comment,private final Codec aCodec;,org.apache.commons.compress.harmony.pack200.Codec aCodec,"private , final "
org.apache.commons.compress.harmony.pack200.RunCodec.bCodec,Field,No Comment,private final Codec bCodec;,org.apache.commons.compress.harmony.pack200.Codec bCodec,"private , final "
org.apache.commons.compress.harmony.pack200.RunCodec.last,Field,No Comment,private int last;,int last,private 
org.apache.commons.compress.harmony.pack200.Codec.BCI5,Field,"* BCI5 = (5,4): Used for storing branching information in bytecode.","public static final BHSDCodec BCI5 = new BHSDCodec(5, 4);",org.apache.commons.compress.harmony.pack200.BHSDCodec BCI5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.BRANCH5,Field,"* BRANCH5 = (5,4,2): Used for storing branching information in bytecode.","public static final BHSDCodec BRANCH5 = new BHSDCodec(5, 4, 2);",org.apache.commons.compress.harmony.pack200.BHSDCodec BRANCH5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.BYTE1,Field,"* BYTE1 = (1,256): Used for storing plain bytes.","public static final BHSDCodec BYTE1 = new BHSDCodec(1, 256);",org.apache.commons.compress.harmony.pack200.BHSDCodec BYTE1,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.CHAR3,Field,"* CHAR3 = (3,128): Used for storing text (UTF-8) strings. This isn't quite the same as UTF-8, but has similar properties; ASCII characters &lt; 127 are\n     * stored in a single byte.","public static final BHSDCodec CHAR3 = new BHSDCodec(3, 128);",org.apache.commons.compress.harmony.pack200.BHSDCodec CHAR3,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.DELTA5,Field,"* DELTA5 = (5,64,1,1): Used for the majority of numerical codings where there is a correlated sequence of signed values.","public static final BHSDCodec DELTA5 = new BHSDCodec(5, 64, 1, 1);",org.apache.commons.compress.harmony.pack200.BHSDCodec DELTA5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.MDELTA5,Field,"* MDELTA5 = (5,64,2,1): Used for the majority of numerical codings where there is a correlated sequence of signed values, but where most of them are\n     * expected to be non-negative.","public static final BHSDCodec MDELTA5 = new BHSDCodec(5, 64, 2, 1);",org.apache.commons.compress.harmony.pack200.BHSDCodec MDELTA5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.SIGNED5,Field,"* SIGNED5 = (5,64,1): Used for small signed values.","public static final BHSDCodec SIGNED5 = new BHSDCodec(5, 64, 1);",org.apache.commons.compress.harmony.pack200.BHSDCodec SIGNED5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.UDELTA5,Field,"* UDELTA5 = (5,64,0,1): Used for the majority of numerical codings where there is a correlated sequence of unsigned values.","public static final BHSDCodec UDELTA5 = new BHSDCodec(5, 64, 0, 1);",org.apache.commons.compress.harmony.pack200.BHSDCodec UDELTA5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.UNSIGNED5,Field,"* UNSIGNED5 = (5,64): Used for small unsigned values.","public static final BHSDCodec UNSIGNED5 = new BHSDCodec(5, 64);",org.apache.commons.compress.harmony.pack200.BHSDCodec UNSIGNED5,"public , static , final "
org.apache.commons.compress.harmony.pack200.Codec.lastBandLength,Field,No Comment,public int lastBandLength;,int lastBandLength,public 
org.apache.commons.compress.harmony.pack200.PopulationCodec.favouredCodec,Field,No Comment,private final Codec favouredCodec;,org.apache.commons.compress.harmony.pack200.Codec favouredCodec,"private , final "
org.apache.commons.compress.harmony.pack200.PopulationCodec.tokenCodec,Field,No Comment,private Codec tokenCodec;,org.apache.commons.compress.harmony.pack200.Codec tokenCodec,private 
org.apache.commons.compress.harmony.pack200.PopulationCodec.unfavouredCodec,Field,No Comment,private final Codec unfavouredCodec;,org.apache.commons.compress.harmony.pack200.Codec unfavouredCodec,"private , final "
org.apache.commons.compress.harmony.pack200.PopulationCodec.l,Field,No Comment,private int l;,int l,private 
org.apache.commons.compress.harmony.pack200.PopulationCodec.favoured,Field,No Comment,private int[] favoured;,int[] favoured,private 
org.apache.commons.compress.harmony.pack200.CodecEncoding.EMPTY_INT_ARRAY,Field,No Comment,private static final int[] EMPTY_INT_ARRAY = {};,int[] EMPTY_INT_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.CodecEncoding.canonicalCodec,Field,"* The canonical encodings are defined to allow a single byte to represent one of the standard encodings. The following values are defined in the Pack200\n     * specification, and this array cannot be changed.","private static final BHSDCodec[] canonicalCodec = { null, new BHSDCodec(1, 256), new BHSDCodec(1, 256, 1), new BHSDCodec(1, 256, 0, 1), new BHSDCodec(1, 256, 1, 1), new BHSDCodec(2, 256), new BHSDCodec(2, 256, 1), new BHSDCodec(2, 256, 0, 1), new BHSDCodec(2, 256, 1, 1), new BHSDCodec(3, 256), new BHSDCodec(3, 256, 1), new BHSDCodec(3, 256, 0, 1), new BHSDCodec(3, 256, 1, 1), new BHSDCodec(4, 256), new BHSDCodec(4, 256, 1), new BHSDCodec(4, 256, 0, 1), new BHSDCodec(4, 256, 1, 1), new BHSDCodec(5, 4), new BHSDCodec(5, 4, 1), new BHSDCodec(5, 4, 2), new BHSDCodec(5, 16), new BHSDCodec(5, 16, 1), new BHSDCodec(5, 16, 2), new BHSDCodec(5, 32), new BHSDCodec(5, 32, 1), new BHSDCodec(5, 32, 2), new BHSDCodec(5, 64), new BHSDCodec(5, 64, 1), new BHSDCodec(5, 64, 2), new BHSDCodec(5, 128), new BHSDCodec(5, 128, 1), new BHSDCodec(5, 128, 2), new BHSDCodec(5, 4, 0, 1), new BHSDCodec(5, 4, 1, 1), new BHSDCodec(5, 4, 2, 1), new BHSDCodec(5, 16, 0, 1), new BHSDCodec(5, 16, 1, 1), new BHSDCodec(5, 16, 2, 1), new BHSDCodec(5, 32, 0, 1), new BHSDCodec(5, 32, 1, 1), new BHSDCodec(5, 32, 2, 1), new BHSDCodec(5, 64, 0, 1), new BHSDCodec(5, 64, 1, 1), new BHSDCodec(5, 64, 2, 1), new BHSDCodec(5, 128, 0, 1), new BHSDCodec(5, 128, 1, 1), new BHSDCodec(5, 128, 2, 1), new BHSDCodec(2, 192), new BHSDCodec(2, 224), new BHSDCodec(2, 240), new BHSDCodec(2, 248), new BHSDCodec(2, 252), new BHSDCodec(2, 8, 0, 1), new BHSDCodec(2, 8, 1, 1), new BHSDCodec(2, 16, 0, 1), new BHSDCodec(2, 16, 1, 1), new BHSDCodec(2, 32, 0, 1), new BHSDCodec(2, 32, 1, 1), new BHSDCodec(2, 64, 0, 1), new BHSDCodec(2, 64, 1, 1), new BHSDCodec(2, 128, 0, 1), new BHSDCodec(2, 128, 1, 1), new BHSDCodec(2, 192, 0, 1), new BHSDCodec(2, 192, 1, 1), new BHSDCodec(2, 224, 0, 1), new BHSDCodec(2, 224, 1, 1), new BHSDCodec(2, 240, 0, 1), new BHSDCodec(2, 240, 1, 1), new BHSDCodec(2, 248, 0, 1), new BHSDCodec(2, 248, 1, 1), new BHSDCodec(3, 192), new BHSDCodec(3, 224), new BHSDCodec(3, 240), new BHSDCodec(3, 248), new BHSDCodec(3, 252), new BHSDCodec(3, 8, 0, 1), new BHSDCodec(3, 8, 1, 1), new BHSDCodec(3, 16, 0, 1), new BHSDCodec(3, 16, 1, 1), new BHSDCodec(3, 32, 0, 1), new BHSDCodec(3, 32, 1, 1), new BHSDCodec(3, 64, 0, 1), new BHSDCodec(3, 64, 1, 1), new BHSDCodec(3, 128, 0, 1), new BHSDCodec(3, 128, 1, 1), new BHSDCodec(3, 192, 0, 1), new BHSDCodec(3, 192, 1, 1), new BHSDCodec(3, 224, 0, 1), new BHSDCodec(3, 224, 1, 1), new BHSDCodec(3, 240, 0, 1), new BHSDCodec(3, 240, 1, 1), new BHSDCodec(3, 248, 0, 1), new BHSDCodec(3, 248, 1, 1), new BHSDCodec(4, 192), new BHSDCodec(4, 224), new BHSDCodec(4, 240), new BHSDCodec(4, 248), new BHSDCodec(4, 252), new BHSDCodec(4, 8, 0, 1), new BHSDCodec(4, 8, 1, 1), new BHSDCodec(4, 16, 0, 1), new BHSDCodec(4, 16, 1, 1), new BHSDCodec(4, 32, 0, 1), new BHSDCodec(4, 32, 1, 1), new BHSDCodec(4, 64, 0, 1), new BHSDCodec(4, 64, 1, 1), new BHSDCodec(4, 128, 0, 1), new BHSDCodec(4, 128, 1, 1), new BHSDCodec(4, 192, 0, 1), new BHSDCodec(4, 192, 1, 1), new BHSDCodec(4, 224, 0, 1), new BHSDCodec(4, 224, 1, 1), new BHSDCodec(4, 240, 0, 1), new BHSDCodec(4, 240, 1, 1), new BHSDCodec(4, 248, 0, 1), new BHSDCodec(4, 248, 1, 1) };",org.apache.commons.compress.harmony.pack200.BHSDCodec[] canonicalCodec,"private , static , final "
org.apache.commons.compress.harmony.pack200.CodecEncoding.canonicalCodecsToSpecifiers,Field,No Comment,"private static Map<BHSDCodec, Integer> canonicalCodecsToSpecifiers;",java.util.Map canonicalCodecsToSpecifiers,"private , static "
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.lastConstantHadWideIndex,Field,No Comment,private boolean lastConstantHadWideIndex;,boolean lastConstantHadWideIndex,private 
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.lastUnsignedShort,Field,No Comment,private int lastUnsignedShort;,int lastUnsignedShort,private 
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.anySyntheticAttributes,Field,No Comment,private boolean anySyntheticAttributes;,boolean anySyntheticAttributes,private 
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.fileName,Field,No Comment,private String fileName;,java.lang.String fileName,private 
org.apache.commons.compress.harmony.pack200.Archive.EMPTY_BYTE_ARRAY,Field,No Comment,private static final byte[] EMPTY_BYTE_ARRAY = {};,byte[] EMPTY_BYTE_ARRAY,"private , static , final "
org.apache.commons.compress.harmony.pack200.Archive.jarInputStream,Field,No Comment,private final JarInputStream jarInputStream;,java.util.jar.JarInputStream jarInputStream,"private , final "
org.apache.commons.compress.harmony.pack200.Archive.outputStream,Field,No Comment,private final OutputStream outputStream;,java.io.OutputStream outputStream,"private , final "
org.apache.commons.compress.harmony.pack200.Archive.jarFile,Field,No Comment,private JarFile jarFile;,java.util.jar.JarFile jarFile,private 
org.apache.commons.compress.harmony.pack200.Archive.currentSegmentSize,Field,No Comment,private long currentSegmentSize;,long currentSegmentSize,private 
org.apache.commons.compress.harmony.pack200.Archive.options,Field,No Comment,private final PackingOptions options;,org.apache.commons.compress.harmony.pack200.PackingOptions options,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.contents,Field,No Comment,private byte[] contents;,byte[] contents,private 
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.modtime,Field,No Comment,private final long modtime;,long modtime,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.deflateHint,Field,No Comment,private final boolean deflateHint;,boolean deflateHint,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.isDirectory,Field,No Comment,private final boolean isDirectory;,boolean isDirectory,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.classList,Field,No Comment,private final List<Pack200ClassReader> classList;,java.util.List classList,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.fileList,Field,No Comment,private final List<PackingFile> fileList;,java.util.List fileList,"private , final "
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.byteAmount,Field,No Comment,private int byteAmount;,int byteAmount,private 
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.packedByteAmount,Field,No Comment,private int packedByteAmount;,int packedByteAmount,private 
org.apache.commons.compress.archivers.StreamingNotSupportedException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.StreamingNotSupportedException.format,Field,No Comment,private final String format;,java.lang.String format,"private , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE,Field,No Comment,private static final int TAR_HEADER_SIZE = 512;,int TAR_HEADER_SIZE,"private , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_TEST_ENTRY_COUNT,Field,No Comment,private static final int TAR_TEST_ENTRY_COUNT = 10;,int TAR_TEST_ENTRY_COUNT,"private , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE,Field,No Comment,private static final int DUMP_SIGNATURE_SIZE = 32;,int DUMP_SIGNATURE_SIZE,"private , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE,Field,No Comment,private static final int SIGNATURE_SIZE = 12;,int SIGNATURE_SIZE,"private , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT,Field,* The singleton instance using the platform default encoding.\n     *\n     * @since 1.21,public static final ArchiveStreamFactory DEFAULT = new ArchiveStreamFactory();,org.apache.commons.compress.archivers.ArchiveStreamFactory DEFAULT,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.APK,Field,"* Constant (value {@value}) used to identify the APK archive format.\n     * <p>\n     * APK file extensions are .apk, .xapk, .apks, .apkm\n     * </p>\n     *\n     * @since 1.22","public static final String APK = ""apk"";",java.lang.String APK,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.XAPK,Field,"* Constant (value {@value}) used to identify the XAPK archive format.\n     * <p>\n     * APK file extensions are .apk, .xapk, .apks, .apkm\n     * </p>\n     *\n     * @since 1.22","public static final String XAPK = ""xapk"";",java.lang.String XAPK,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.APKS,Field,"* Constant (value {@value}) used to identify the APKS archive format.\n     * <p>\n     * APK file extensions are .apk, .xapk, .apks, .apkm\n     * </p>\n     *\n     * @since 1.22","public static final String APKS = ""apks"";",java.lang.String APKS,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.APKM,Field,"* Constant (value {@value}) used to identify the APKM archive format.\n     * <p>\n     * APK file extensions are .apk, .xapk, .apks, .apkm\n     * </p>\n     *\n     * @since 1.22","public static final String APKM = ""apkm"";",java.lang.String APKM,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.AR,Field,* Constant (value {@value}) used to identify the AR archive format.\n     *\n     * @since 1.1,"public static final String AR = ""ar"";",java.lang.String AR,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.ARJ,Field,* Constant (value {@value}) used to identify the ARJ archive format. Not supported as an output stream type.\n     *\n     * @since 1.6,"public static final String ARJ = ""arj"";",java.lang.String ARJ,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.CPIO,Field,* Constant (value {@value}) used to identify the CPIO archive format.\n     *\n     * @since 1.1,"public static final String CPIO = ""cpio"";",java.lang.String CPIO,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP,Field,* Constant (value {@value}) used to identify the Unix DUMP archive format. Not supported as an output stream type.\n     *\n     * @since 1.3,"public static final String DUMP = ""dump"";",java.lang.String DUMP,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.JAR,Field,* Constant (value {@value}) used to identify the JAR archive format.\n     *\n     * @since 1.1,"public static final String JAR = ""jar"";",java.lang.String JAR,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR,Field,* Constant used to identify the TAR archive format.\n     *\n     * @since 1.1,"public static final String TAR = ""tar"";",java.lang.String TAR,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.ZIP,Field,* Constant (value {@value}) used to identify the ZIP archive format.\n     *\n     * @since 1.1,"public static final String ZIP = ""zip"";",java.lang.String ZIP,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.SEVEN_Z,Field,* Constant (value {@value}) used to identify the 7z archive format.\n     *\n     * @since 1.8,"public static final String SEVEN_Z = ""7z"";",java.lang.String SEVEN_Z,"public , static , final "
org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding,Field,"* Entry encoding, null for the default.",private volatile String entryEncoding;,java.lang.String entryEncoding,"private , volatile "
org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders,Field,No Comment,"private SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders;",java.util.SortedMap archiveInputStreamProviders,private 
org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders,Field,No Comment,"private SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders;",java.util.SortedMap archiveOutputStreamProviders,private 
org.apache.commons.compress.archivers.ArchiveException.serialVersionUID,Field,Serial.,private static final long serialVersionUID = 2772690708123267100L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.CURRENT_PATH_SEGMENT,Field,No Comment,"private static final String CURRENT_PATH_SEGMENT = ""."";",java.lang.String CURRENT_PATH_SEGMENT,"private , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.PARENT_PATH_SEGMENT,Field,No Comment,"private static final String PARENT_PATH_SEGMENT = "".."";",java.lang.String PARENT_PATH_SEGMENT,"private , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary,Field,No Comment,private final DumpArchiveSummary summary;,org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active,Field,No Comment,private DumpArchiveEntry active;,org.apache.commons.compress.archivers.dump.DumpArchiveEntry active,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed,Field,No Comment,private boolean isClosed;,boolean isClosed,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF,Field,No Comment,private boolean hasHitEOF;,boolean hasHitEOF,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize,Field,No Comment,private long entrySize;,long entrySize,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset,Field,No Comment,private long entryOffset;,long entryOffset,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx,Field,No Comment,private int readIdx;,int readIdx,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf,Field,No Comment,private final byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];,byte[] readBuf,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer,Field,No Comment,private byte[] blockBuffer;,byte[] blockBuffer,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset,Field,No Comment,private int recordOffset;,int recordOffset,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos,Field,No Comment,private long filepos;,long filepos,private 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw,Field,No Comment,protected TapeInputStream raw;,org.apache.commons.compress.archivers.dump.TapeInputStream raw,protected 
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names,Field,Map of ino -> dirent entry. We can use this to reconstruct full paths.,"private final Map<Integer, Dirent> names = new HashMap<>();",java.util.Map names,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending,Field,Map of ino -> (directory) entry when we're missing one or more elements in the path.,"private final Map<Integer, DumpArchiveEntry> pending = new HashMap<>();",java.util.Map pending,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue,Field,Queue of (directory) entries where we now have the full path.,private final Queue<DumpArchiveEntry> queue;,java.util.Queue queue,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding,Field,* The encoding to use for file names and labels.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.dump.Dirent.ino,Field,No Comment,private final int ino;,int ino,"private , final "
org.apache.commons.compress.archivers.dump.Dirent.parentIno,Field,No Comment,private final int parentIno;,int parentIno,"private , final "
org.apache.commons.compress.archivers.dump.Dirent.type,Field,No Comment,private final int type;,int type,"private , final "
org.apache.commons.compress.archivers.dump.Dirent.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate,Field,No Comment,private long dumpDate;,long dumpDate,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate,Field,No Comment,private long previousDumpDate;,long previousDumpDate,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume,Field,No Comment,private int volume;,int volume,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label,Field,No Comment,private String label;,java.lang.String label,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level,Field,No Comment,private int level;,int level,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys,Field,No Comment,private String filesys;,java.lang.String filesys,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname,Field,No Comment,private String devname;,java.lang.String devname,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname,Field,No Comment,private String hostname;,java.lang.String hostname,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags,Field,No Comment,private int flags;,int flags,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec,Field,No Comment,private int firstrec;,int firstrec,private 
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec,Field,No Comment,private int ntrec;,int ntrec,private 
org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.dump.InvalidFormatException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.dump.InvalidFormatException.offset,Field,No Comment,protected long offset;,long offset,protected 
org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE,Field,No Comment,private static final int RECORD_SIZE = DumpArchiveConstants.TP_SIZE;,int RECORD_SIZE,"private , static , final "
org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer,Field,No Comment,private byte[] blockBuffer = new byte[DumpArchiveConstants.TP_SIZE];,byte[] blockBuffer,private 
org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx,Field,No Comment,private int currBlkIdx = -1;,int currBlkIdx,private 
org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize,Field,No Comment,private int blockSize = DumpArchiveConstants.TP_SIZE;,int blockSize,private 
org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset,Field,No Comment,private int readOffset = DumpArchiveConstants.TP_SIZE;,int readOffset,private 
org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed,Field,No Comment,private boolean isCompressed;,boolean isCompressed,private 
org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead,Field,No Comment,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name,Field,No Comment,private String name;,java.lang.String name,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type,Field,No Comment,private TYPE type = TYPE.UNKNOWN;,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode,Field,No Comment,private int mode;,int mode,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions,Field,No Comment,private Set<PERMISSION> permissions = Collections.emptySet();,java.util.Set permissions,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size,Field,No Comment,private long size;,long size,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime,Field,No Comment,private long atime;,long atime,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime,Field,No Comment,private long mtime;,long mtime,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid,Field,No Comment,private int uid;,int uid,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid,Field,No Comment,private int gid;,int gid,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary,Field,* Currently unused,private final DumpArchiveSummary summary = null;,org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header,Field,* This value is available from the standard index.,private final TapeSegmentHeader header = new TapeSegmentHeader();,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header,"private , final "
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName,Field,No Comment,private String simpleName;,java.lang.String simpleName,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName,Field,No Comment,private String originalName;,java.lang.String originalName,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume,Field,* This value is available from the QFA index.,private int volume;,int volume,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset,Field,No Comment,private long offset;,long offset,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino,Field,No Comment,private int ino;,int ino,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink,Field,No Comment,private int nlink;,int nlink,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime,Field,No Comment,private long ctime;,long ctime,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation,Field,No Comment,private int generation;,int generation,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted,Field,No Comment,private boolean isDeleted;,boolean isDeleted,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.type,Field,No Comment,private DumpArchiveConstants.SEGMENT_TYPE type;,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE type,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.volume,Field,No Comment,private int volume;,int volume,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.ino,Field,No Comment,private int ino;,int ino,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.count,Field,No Comment,private int count;,int count,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.holes,Field,No Comment,private int holes;,int holes,private 
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.cdata,Field,map of any 'holes',private final byte[] cdata = new byte[512];,byte[] cdata,"private , final "
org.apache.commons.compress.archivers.dump.ShortFileException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.TP_SIZE,Field,* TP_SIZE value {@value}.,public static final int TP_SIZE = 1024;,int TP_SIZE,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NTREC,Field,* NTREC value {@value}.,public static final int NTREC = 10;,int NTREC,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.HIGH_DENSITY_NTREC,Field,* HIGH_DENSITY_NTREC value {@value}.,public static final int HIGH_DENSITY_NTREC = 32;,int HIGH_DENSITY_NTREC,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.OFS_MAGIC,Field,* OFS_MAGIC value {@value}.,public static final int OFS_MAGIC = 60011;,int OFS_MAGIC,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NFS_MAGIC,Field,* NFS_MAGIC value {@value}.,public static final int NFS_MAGIC = 60012;,int NFS_MAGIC,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.FS_UFS2_MAGIC,Field,* FS_UFS2_MAGIC value {@value}.,public static final int FS_UFS2_MAGIC = 0x19540119;,int FS_UFS2_MAGIC,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.CHECKSUM,Field,* CHECKSUM value {@value}.,public static final int CHECKSUM = 84446;,int CHECKSUM,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.LBLSIZE,Field,* LBLSIZE value {@value}.,public static final int LBLSIZE = 16;,int LBLSIZE,"public , static , final "
org.apache.commons.compress.archivers.dump.DumpArchiveConstants.NAMELEN,Field,* NAMELEN value {@value}.,public static final int NAMELEN = 64;,int NAMELEN,"public , static , final "
org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded,Field,No Comment,private boolean jarMarkerAdded;,boolean jarMarkerAdded,private 
org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex,Field,* The first Archive.packStream index of each folder.,final int[] folderFirstPackStreamIndex;,int[] folderFirstPackStreamIndex,final 
org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets,Field,"* Offset to beginning of this pack stream's data, relative to the beginning of the first pack stream.",final long[] packStreamOffsets;,long[] packStreamOffsets,final 
org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex,Field,* Index of first file for each folder.,final int[] folderFirstFileIndex;,int[] folderFirstFileIndex,final 
org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex,Field,* Index of folder for each file.,final int[] fileFolderIndex;,int[] fileFolderIndex,final 
org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset,Field,No Comment,final long nextHeaderOffset;,long nextHeaderOffset,final 
org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize,Field,No Comment,final long nextHeaderSize;,long nextHeaderSize,final 
org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc,Field,No Comment,final long nextHeaderCrc;,long nextHeaderCrc,final 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.EMPTY_SEVEN_Z_ARCHIVE_ENTRY_ARRAY,Field,No Comment,static final SevenZArchiveEntry[] EMPTY_SEVEN_Z_ARCHIVE_ENTRY_ARRAY = {};,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[] EMPTY_SEVEN_Z_ARCHIVE_ENTRY_ARRAY,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name,Field,No Comment,private String name;,java.lang.String name,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream,Field,No Comment,private boolean hasStream;,boolean hasStream,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory,Field,No Comment,private boolean isDirectory;,boolean isDirectory,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem,Field,No Comment,private boolean isAntiItem;,boolean isAntiItem,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate,Field,No Comment,private boolean hasCreationDate;,boolean hasCreationDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate,Field,No Comment,private boolean hasLastModifiedDate;,boolean hasLastModifiedDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate,Field,No Comment,private boolean hasAccessDate;,boolean hasAccessDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate,Field,No Comment,private FileTime creationDate;,java.nio.file.attribute.FileTime creationDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate,Field,No Comment,private FileTime lastModifiedDate;,java.nio.file.attribute.FileTime lastModifiedDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate,Field,No Comment,private FileTime accessDate;,java.nio.file.attribute.FileTime accessDate,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes,Field,No Comment,private boolean hasWindowsAttributes;,boolean hasWindowsAttributes,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes,Field,No Comment,private int windowsAttributes;,int windowsAttributes,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc,Field,No Comment,private boolean hasCrc;,boolean hasCrc,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc,Field,No Comment,private long crc;,long crc,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc,Field,No Comment,private long compressedCrc;,long compressedCrc,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size,Field,No Comment,private long size;,long size,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize,Field,No Comment,private long compressedSize;,long compressedSize,private 
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods,Field,No Comment,private Iterable<? extends SevenZMethodConfiguration> contentMethods;,java.lang.Iterable contentMethods,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files,Field,No Comment,private final List<SevenZArchiveEntry> files = new ArrayList<>();,java.util.List files,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams,Field,No Comment,private int numNonEmptyStreams;,int numNonEmptyStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32,Field,No Comment,private final CRC32 crc32 = new CRC32();,java.util.zip.CRC32 crc32,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32,Field,No Comment,private final CRC32 compressedCrc32 = new CRC32();,java.util.zip.CRC32 compressedCrc32,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten,Field,No Comment,private long fileBytesWritten;,long fileBytesWritten,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished,Field,No Comment,private boolean finished;,boolean finished,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream,Field,No Comment,private CountingOutputStream currentOutputStream;,org.apache.commons.io.output.CountingOutputStream currentOutputStream,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams,Field,No Comment,private CountingOutputStream[] additionalCountingStreams;,org.apache.commons.io.output.CountingOutputStream[] additionalCountingStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods,Field,No Comment,private Iterable<? extends SevenZMethodConfiguration> contentMethods = Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2));,java.lang.Iterable contentMethods,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes,Field,No Comment,"private final Map<SevenZArchiveEntry, long[]> additionalSizes = new HashMap<>();",java.util.Map additionalSizes,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.aes256Options,Field,No Comment,private AES256Options aes256Options;,org.apache.commons.compress.archivers.sevenz.AES256Options aes256Options,private 
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.BUF_SIZE,Field,No Comment,private static final int BUF_SIZE = 8192;,int BUF_SIZE,"private , static , final "
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.buffer,Field,No Comment,private final ByteBuffer buffer = ByteBuffer.allocate(BUF_SIZE);,java.nio.ByteBuffer buffer,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.DEFAULT,Field,* The default options.\n     * <ul>\n     * <li>no memory limit</li>\n     * <li>don't modify the name of unnamed entries</li>\n     * </ul>,"public static final SevenZFileOptions DEFAULT = new SevenZFileOptions(SevenZFile.Builder.MEMORY_LIMIT_IN_KB, SevenZFile.Builder.USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES, SevenZFile.Builder.TRY_TO_RECOVER_BROKEN_ARCHIVES);",org.apache.commons.compress.archivers.sevenz.SevenZFileOptions DEFAULT,"public , static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.maxMemoryLimitKiB,Field,No Comment,private final int maxMemoryLimitKiB;,int maxMemoryLimitKiB,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.useDefaultNameForUnnamedEntries,Field,No Comment,private final boolean useDefaultNameForUnnamedEntries;,boolean useDefaultNameForUnnamedEntries,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.tryToRecoverBrokenArchives,Field,No Comment,private final boolean tryToRecoverBrokenArchives;,boolean tryToRecoverBrokenArchives,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.maxMemoryLimitKb,Field,No Comment,private int maxMemoryLimitKb = SevenZFile.Builder.MEMORY_LIMIT_IN_KB;,int maxMemoryLimitKb,private 
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.useDefaultNameForUnnamedEntries,Field,No Comment,private boolean useDefaultNameForUnnamedEntries = SevenZFile.Builder.USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES;,boolean useDefaultNameForUnnamedEntries,private 
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.tryToRecoverBrokenArchives,Field,No Comment,private boolean tryToRecoverBrokenArchives = SevenZFile.Builder.TRY_TO_RECOVER_BROKEN_ARCHIVES;,boolean tryToRecoverBrokenArchives,private 
org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId,Field,No Comment,final byte[] decompressionMethodId;,byte[] decompressionMethodId,final 
org.apache.commons.compress.archivers.sevenz.Coder.numInStreams,Field,No Comment,final long numInStreams;,long numInStreams,final 
org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams,Field,No Comment,final long numOutStreams;,long numOutStreams,final 
org.apache.commons.compress.archivers.sevenz.Coder.properties,Field,No Comment,final byte[] properties;,byte[] properties,final 
org.apache.commons.compress.archivers.sevenz.NID.kEnd,Field,No Comment,static final int kEnd = 0x00;,int kEnd,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kHeader,Field,No Comment,static final int kHeader = 0x01;,int kHeader,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kArchiveProperties,Field,No Comment,static final int kArchiveProperties = 0x02;,int kArchiveProperties,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kAdditionalStreamsInfo,Field,No Comment,static final int kAdditionalStreamsInfo = 0x03;,int kAdditionalStreamsInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kMainStreamsInfo,Field,No Comment,static final int kMainStreamsInfo = 0x04;,int kMainStreamsInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kFilesInfo,Field,No Comment,static final int kFilesInfo = 0x05;,int kFilesInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kPackInfo,Field,No Comment,static final int kPackInfo = 0x06;,int kPackInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kUnpackInfo,Field,No Comment,static final int kUnpackInfo = 0x07;,int kUnpackInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kSubStreamsInfo,Field,No Comment,static final int kSubStreamsInfo = 0x08;,int kSubStreamsInfo,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kSize,Field,No Comment,static final int kSize = 0x09;,int kSize,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kCRC,Field,No Comment,static final int kCRC = 0x0A;,int kCRC,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kFolder,Field,No Comment,static final int kFolder = 0x0B;,int kFolder,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kCodersUnpackSize,Field,No Comment,static final int kCodersUnpackSize = 0x0C;,int kCodersUnpackSize,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kNumUnpackStream,Field,No Comment,static final int kNumUnpackStream = 0x0D;,int kNumUnpackStream,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kEmptyStream,Field,No Comment,static final int kEmptyStream = 0x0E;,int kEmptyStream,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kEmptyFile,Field,No Comment,static final int kEmptyFile = 0x0F;,int kEmptyFile,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kAnti,Field,No Comment,static final int kAnti = 0x10;,int kAnti,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kName,Field,No Comment,static final int kName = 0x11;,int kName,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kCTime,Field,No Comment,static final int kCTime = 0x12;,int kCTime,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kATime,Field,No Comment,static final int kATime = 0x13;,int kATime,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kMTime,Field,No Comment,static final int kMTime = 0x14;,int kMTime,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kWinAttributes,Field,No Comment,static final int kWinAttributes = 0x15;,int kWinAttributes,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kComment,Field,No Comment,static final int kComment = 0x16;,int kComment,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kEncodedHeader,Field,No Comment,static final int kEncodedHeader = 0x17;,int kEncodedHeader,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kStartPos,Field,No Comment,static final int kStartPos = 0x18;,int kStartPos,"static , final "
org.apache.commons.compress.archivers.sevenz.NID.kDummy,Field,No Comment,static final int kDummy = 0x19;,int kDummy,"static , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.in,Field,No Comment,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.coder,Field,No Comment,private final Coder coder;,org.apache.commons.compress.archivers.sevenz.Coder coder,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.archiveName,Field,No Comment,private final String archiveName;,java.lang.String archiveName,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.passwordBytes,Field,No Comment,private final byte[] passwordBytes;,byte[] passwordBytes,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.isInitialized,Field,No Comment,private boolean isInitialized;,boolean isInitialized,private 
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.cipherInputStream,Field,No Comment,private CipherInputStream cipherInputStream;,javax.crypto.CipherInputStream cipherInputStream,private 
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.cipherOutputStream,Field,No Comment,private final CipherOutputStream cipherOutputStream;,javax.crypto.CipherOutputStream cipherOutputStream,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.cipherBlockSize,Field,manual implementation for padding possible thanks to the size of the file stored separately,private final int cipherBlockSize;,int cipherBlockSize,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.cipherBlockBuffer,Field,No Comment,private final byte[] cipherBlockBuffer;,byte[] cipherBlockBuffer,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.count,Field,No Comment,private int count;,int count,private 
org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP,Field,No Comment,"private static final Map<SevenZMethod, AbstractCoder> CODER_MAP = new HashMap<SevenZMethod, AbstractCoder>() {\n\n    private static final long serialVersionUID = 1664829131806520867L;\n\n    {\n        put(SevenZMethod.COPY, new CopyDecoder());\n        put(SevenZMethod.LZMA, new LZMADecoder());\n        put(SevenZMethod.LZMA2, new LZMA2Decoder());\n        put(SevenZMethod.DEFLATE, new DeflateDecoder());\n        put(SevenZMethod.DEFLATE64, new Deflate64Decoder());\n        put(SevenZMethod.BZIP2, new BZIP2Decoder());\n        put(SevenZMethod.AES256SHA256, new AES256SHA256Decoder());\n        put(SevenZMethod.BCJ_X86_FILTER, new BCJDecoder(new X86Options()));\n        put(SevenZMethod.BCJ_PPC_FILTER, new BCJDecoder(new PowerPCOptions()));\n        put(SevenZMethod.BCJ_IA64_FILTER, new BCJDecoder(new IA64Options()));\n        put(SevenZMethod.BCJ_ARM_FILTER, new BCJDecoder(new ARMOptions()));\n        put(SevenZMethod.BCJ_ARM_THUMB_FILTER, new BCJDecoder(new ARMThumbOptions()));\n        put(SevenZMethod.BCJ_SPARC_FILTER, new BCJDecoder(new SPARCOptions()));\n        put(SevenZMethod.DELTA_FILTER, new DeltaDecoder());\n    }\n};",java.util.Map CODER_MAP,"private , static , final "
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.opts,Field,No Comment,private final FilterOptions opts;,org.tukaani.xz.FilterOptions opts,"private , final "
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.ONE_ZERO_BYTE,Field,No Comment,private static final byte[] ONE_ZERO_BYTE = new byte[1];,byte[] ONE_ZERO_BYTE,"private , static , final "
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.inflater,Field,No Comment,Inflater inflater;,java.util.zip.Inflater inflater,default
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.deflaterOutputStream,Field,No Comment,final DeflaterOutputStream deflaterOutputStream;,java.util.zip.DeflaterOutputStream deflaterOutputStream,final 
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.deflater,Field,No Comment,Deflater deflater;,java.util.zip.Deflater deflater,default
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method,Field,No Comment,private final SevenZMethod method;,org.apache.commons.compress.archivers.sevenz.SevenZMethod method,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options,Field,No Comment,private final Object options;,java.lang.Object options,"private , final "
org.apache.commons.compress.archivers.sevenz.BindPair.inIndex,Field,No Comment,final long inIndex;,long inIndex,final 
org.apache.commons.compress.archivers.sevenz.BindPair.outIndex,Field,No Comment,final long outIndex;,long outIndex,final 
org.apache.commons.compress.archivers.sevenz.AbstractCoder.optionClasses,Field,No Comment,private final Class<?>[] optionClasses;,java.lang.Class[] optionClasses,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.SIGNATURE_HEADER_SIZE,Field,No Comment,static final int SIGNATURE_HEADER_SIZE = 32;,int SIGNATURE_HEADER_SIZE,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.DEFAULT_FILE_NAME,Field,No Comment,"private static final String DEFAULT_FILE_NAME = ""unknown archive"";",java.lang.String DEFAULT_FILE_NAME,"private , static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature,Field,"Shared with SevenZOutputFile and tests, neither mutates it.","static final byte[] sevenZSignature = { // NOSONAR\n(byte) '7', (byte) 'z', (byte) 0xBC, (byte) 0xAF, (byte) 0x27, (byte) 0x1C };",byte[] sevenZSignature,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName,Field,No Comment,private final String fileName;,java.lang.String fileName,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.channel,Field,No Comment,private SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.archive,Field,No Comment,private final Archive archive;,org.apache.commons.compress.archivers.sevenz.Archive archive,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex,Field,No Comment,private int currentEntryIndex = -1;,int currentEntryIndex,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex,Field,No Comment,private int currentFolderIndex = -1;,int currentFolderIndex,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream,Field,No Comment,private InputStream currentFolderInputStream;,java.io.InputStream currentFolderInputStream,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.password,Field,No Comment,private byte[] password;,byte[] password,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.compressedBytesReadFromCurrentEntry,Field,No Comment,private long compressedBytesReadFromCurrentEntry;,long compressedBytesReadFromCurrentEntry,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.uncompressedBytesReadFromCurrentEntry,Field,No Comment,private long uncompressedBytesReadFromCurrentEntry;,long uncompressedBytesReadFromCurrentEntry,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams,Field,No Comment,private final ArrayList<InputStream> deferredBlockStreams = new ArrayList<>();,java.util.ArrayList deferredBlockStreams,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.maxMemoryLimitKiB,Field,No Comment,private final int maxMemoryLimitKiB;,int maxMemoryLimitKiB,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.useDefaultNameForUnnamedEntries,Field,No Comment,private final boolean useDefaultNameForUnnamedEntries;,boolean useDefaultNameForUnnamedEntries,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToRecoverBrokenArchives,Field,No Comment,private final boolean tryToRecoverBrokenArchives;,boolean tryToRecoverBrokenArchives,"private , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfPackedStreams,Field,No Comment,private int numberOfPackedStreams;,int numberOfPackedStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfCoders,Field,No Comment,private long numberOfCoders;,long numberOfCoders,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfOutStreams,Field,No Comment,private long numberOfOutStreams;,long numberOfOutStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfInStreams,Field,No Comment,private long numberOfInStreams;,long numberOfInStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfUnpackSubStreams,Field,No Comment,private long numberOfUnpackSubStreams;,long numberOfUnpackSubStreams,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfFolders,Field,No Comment,private int numberOfFolders;,int numberOfFolders,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.folderHasCrc,Field,No Comment,private BitSet folderHasCrc;,java.util.BitSet folderHasCrc,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfEntries,Field,No Comment,private int numberOfEntries;,int numberOfEntries,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.numberOfEntriesWithStream,Field,No Comment,private int numberOfEntriesWithStream;,int numberOfEntriesWithStream,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.MEMORY_LIMIT_IN_KB,Field,No Comment,static final int MEMORY_LIMIT_IN_KB = Integer.MAX_VALUE;,int MEMORY_LIMIT_IN_KB,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES,Field,No Comment,static final boolean USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES = false;,boolean USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.TRY_TO_RECOVER_BROKEN_ARCHIVES,Field,No Comment,static final boolean TRY_TO_RECOVER_BROKEN_ARCHIVES = false;,boolean TRY_TO_RECOVER_BROKEN_ARCHIVES,"static , final "
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.seekableByteChannel,Field,No Comment,private SeekableByteChannel seekableByteChannel;,java.nio.channels.SeekableByteChannel seekableByteChannel,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.defaultName,Field,No Comment,private String defaultName = DEFAULT_FILE_NAME;,java.lang.String defaultName,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.password,Field,No Comment,private byte[] password;,byte[] password,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.maxMemoryLimitKiB,Field,No Comment,private int maxMemoryLimitKiB = MEMORY_LIMIT_IN_KB;,int maxMemoryLimitKiB,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.useDefaultNameForUnnamedEntries,Field,No Comment,private boolean useDefaultNameForUnnamedEntries = USE_DEFAULTNAME_FOR_UNNAMED_ENTRIES;,boolean useDefaultNameForUnnamedEntries,private 
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.tryToRecoverBrokenArchives,Field,No Comment,private boolean tryToRecoverBrokenArchives = TRY_TO_RECOVER_BROKEN_ARCHIVES;,boolean tryToRecoverBrokenArchives,private 
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.MAX_BUF_LEN,Field,No Comment,private static final int MAX_BUF_LEN = 8192;,int MAX_BUF_LEN,"private , static , final "
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer,Field,No Comment,private final ByteBuffer buffer;,java.nio.ByteBuffer buffer,"private , final "
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining,Field,No Comment,private long bytesRemaining;,long bytesRemaining,private 
org.apache.commons.compress.archivers.sevenz.Folder.EMPTY_FOLDER_ARRAY,Field,No Comment,static final Folder[] EMPTY_FOLDER_ARRAY = {};,org.apache.commons.compress.archivers.sevenz.Folder[] EMPTY_FOLDER_ARRAY,"static , final "
org.apache.commons.compress.archivers.sevenz.Folder.coders,Field,"List of coders used in this folder, for example one for compression, one for encryption.",Coder[] coders;,org.apache.commons.compress.archivers.sevenz.Coder[] coders,default
org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams,Field,* Total number of input streams across all coders. This field is currently unused but technically part of the 7z API.,long totalInputStreams;,long totalInputStreams,default
org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams,Field,Total number of output streams across all coders.,long totalOutputStreams;,long totalOutputStreams,default
org.apache.commons.compress.archivers.sevenz.Folder.bindPairs,Field,Mapping between input and output streams.,BindPair[] bindPairs;,org.apache.commons.compress.archivers.sevenz.BindPair[] bindPairs,default
org.apache.commons.compress.archivers.sevenz.Folder.packedStreams,Field,"Indices of input streams, one per input stream not listed in bindPairs.",long[] packedStreams;,long[] packedStreams,default
org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes,Field,"Unpack sizes, per each output stream.",long[] unpackSizes;,long[] unpackSizes,default
org.apache.commons.compress.archivers.sevenz.Folder.hasCrc,Field,Whether the folder has a CRC.,boolean hasCrc;,boolean hasCrc,default
org.apache.commons.compress.archivers.sevenz.Folder.crc,Field,"The CRC, if present.",long crc;,long crc,default
org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams,Field,"* The number of unpack substreams, product of the number of output streams and the number of non-empty files in this folder.",int numUnpackSubStreams;,int numUnpackSubStreams,default
org.apache.commons.compress.archivers.sevenz.Archive.packPos,Field,Offset from beginning of file + SIGNATURE_HEADER_SIZE to packed streams.,long packPos;,long packPos,default
org.apache.commons.compress.archivers.sevenz.Archive.packSizes,Field,Size of each packed stream.,long[] packSizes = {};,long[] packSizes,default
org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined,Field,Whether each particular packed streams has a CRC.,BitSet packCrcsDefined;,java.util.BitSet packCrcsDefined,default
org.apache.commons.compress.archivers.sevenz.Archive.packCrcs,Field,"CRCs for each packed stream, valid only if that packed stream has one.",long[] packCrcs;,long[] packCrcs,default
org.apache.commons.compress.archivers.sevenz.Archive.folders,Field,Properties of solid compression blocks.,Folder[] folders = Folder.EMPTY_FOLDER_ARRAY;,org.apache.commons.compress.archivers.sevenz.Folder[] folders,default
org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo,Field,Temporary properties for non-empty files (subsumed into the files array later).,SubStreamsInfo subStreamsInfo;,org.apache.commons.compress.archivers.sevenz.SubStreamsInfo subStreamsInfo,default
org.apache.commons.compress.archivers.sevenz.Archive.files,Field,The files and directories in the archive.,SevenZArchiveEntry[] files = SevenZArchiveEntry.EMPTY_SEVEN_Z_ARCHIVE_ENTRY_ARRAY;,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[] files,default
org.apache.commons.compress.archivers.sevenz.Archive.streamMap,Field,"Mapping between folders, files and streams.",StreamMap streamMap;,org.apache.commons.compress.archivers.sevenz.StreamMap streamMap,default
org.apache.commons.compress.archivers.sevenz.AES256Options.EMPTY_BYTE_ARRAY,Field,No Comment,private static final byte[] EMPTY_BYTE_ARRAY = {};,byte[] EMPTY_BYTE_ARRAY,"private , static , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.ALGORITHM,Field,No Comment,"static final String ALGORITHM = ""AES"";",java.lang.String ALGORITHM,"static , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.TRANSFORMATION,Field,No Comment,"static final String TRANSFORMATION = ""AES/CBC/NoPadding"";",java.lang.String TRANSFORMATION,"static , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.salt,Field,No Comment,private final byte[] salt;,byte[] salt,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.iv,Field,No Comment,private final byte[] iv;,byte[] iv,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.numCyclesPower,Field,No Comment,private final int numCyclesPower;,int numCyclesPower,"private , final "
org.apache.commons.compress.archivers.sevenz.AES256Options.cipher,Field,No Comment,private final Cipher cipher;,javax.crypto.Cipher cipher,"private , final "
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes,Field,* Unpacked size of each unpacked stream.,final long[] unpackSizes;,long[] unpackSizes,final 
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc,Field,* Whether CRC is present for each unpacked stream.,final BitSet hasCrc;,java.util.BitSet hasCrc,final 
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs,Field,"* CRCs of unpacked streams, if present.",final long[] crcs;,long[] crcs,final 
org.apache.commons.compress.archivers.zip.ZipUtil.DOSTIME_BEFORE_1980,Field,0x210000,private static final long DOSTIME_BEFORE_1980 = 1 << 21 | 1 << 16;,long DOSTIME_BEFORE_1980,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipUtil.DOSTIME_BEFORE_1980_AS_JAVA_TIME,Field,Java time representation of the smallest date/time ZIP can handle,private static final long DOSTIME_BEFORE_1980_AS_JAVA_TIME = dosToJavaTime(DOSTIME_BEFORE_1980);,long DOSTIME_BEFORE_1980_AS_JAVA_TIME,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipUtil.UPPER_DOSTIME_BOUND,Field,"* Approximately 128 years, in milliseconds (ignoring leap years, etc.).\n     *\n     * <p>\n     * This establish an approximate high-bound value for DOS times in milliseconds since epoch, used to enable an efficient but sufficient bounds check to\n     * avoid generating extended last modified time entries.\n     * </p>\n     * <p>\n     * Calculating the exact number is locale dependent, would require loading TimeZone data eagerly, and would make little practical sense. Since DOS times\n     * theoretically go to 2107 - with compatibility not guaranteed after 2099 - setting this to a time that is before but near 2099 should be sufficient.\n     * </p>\n     *\n     * <p>\n     * This was copied from {@link ZipEntry}.\n     * </p>\n     *\n     * @since 1.23",private static final long UPPER_DOSTIME_BOUND = 128L * 365 * 24 * 60 * 60 * 1000;,long UPPER_DOSTIME_BOUND,"private , static , final "
org.apache.commons.compress.archivers.zip.UnixStat.PERM_MASK,Field,* Masks permissions (and sticky bit),int PERM_MASK = 07777;,int PERM_MASK,default
org.apache.commons.compress.archivers.zip.UnixStat.FILE_TYPE_FLAG,Field,* Masks the file system object type.\n     *\n     * @since 1.14,int FILE_TYPE_FLAG = 0170000;,int FILE_TYPE_FLAG,default
org.apache.commons.compress.archivers.zip.UnixStat.LINK_FLAG,Field,* Masks symbolic links.,int LINK_FLAG = 0120000;,int LINK_FLAG,default
org.apache.commons.compress.archivers.zip.UnixStat.FILE_FLAG,Field,* Masks plain files.,int FILE_FLAG = 0100000;,int FILE_FLAG,default
org.apache.commons.compress.archivers.zip.UnixStat.DIR_FLAG,Field,* Masks directories.,int DIR_FLAG = 040000;,int DIR_FLAG,default
org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_LINK_PERM,Field,* Default permissions for all permissions.,int DEFAULT_LINK_PERM = 0777;,int DEFAULT_LINK_PERM,default
org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_DIR_PERM,Field,* Default permissions for directories.,int DEFAULT_DIR_PERM = 0755;,int DEFAULT_DIR_PERM,default
org.apache.commons.compress.archivers.zip.UnixStat.DEFAULT_FILE_PERM,Field,* Default permissions for plain files.,int DEFAULT_FILE_PERM = 0644;,int DEFAULT_FILE_PERM,default
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.ZIP_ENCODING_UTF_8,Field,* UTF-8.,static final ZipEncoding ZIP_ENCODING_UTF_8 = getZipEncoding(UTF_8);,org.apache.commons.compress.archivers.zip.ZipEncoding ZIP_ENCODING_UTF_8,"static , final "
org.apache.commons.compress.archivers.zip.X0014_X509Certificates.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0014);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32,Field,No Comment,private long nameCRC32;,long nameCRC32,private 
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName,Field,No Comment,private byte[] unicodeName;,byte[] unicodeName,private 
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data,Field,No Comment,private byte[] data;,byte[] data,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry,Field,"* The ZIPArchiveEntry is not thread safe, and cannot be safely accessed by the getters of this class. It is safely accessible during the construction part\n     * of this class and also after the thread pools have been shut down.",private final ZipArchiveEntry zipArchiveEntry;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier,Field,No Comment,private final InputStreamSupplier payloadSupplier;,org.apache.commons.compress.parallel.InputStreamSupplier payloadSupplier,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method,Field,No Comment,private final int method;,int method,"private , final "
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.compressedCount,Field,No Comment,private long compressedCount;,long compressedCount,private 
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.uncompressedCount,Field,No Comment,private long uncompressedCount;,long uncompressedCount,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x756E);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.AsiExtraField.MIN_SIZE,Field,No Comment,private static final int MIN_SIZE = WORD + SHORT + WORD + SHORT + SHORT;,int MIN_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.AsiExtraField.mode,Field,* Standard Unix stat(2) file mode.,private int mode;,int mode,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.uid,Field,* User ID.,private int uid;,int uid,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.gid,Field,* Group ID.,private int gid;,int gid,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.link,Field,"* File this entry points to, if it is a symbolic link.\n     *\n     * <p>\n     * empty string - if entry is not a symbolic link.\n     * </p>","private String link = """";",java.lang.String link,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag,Field,* Is this an entry for a directory?,private boolean dirFlag;,boolean dirFlag,private 
org.apache.commons.compress.archivers.zip.AsiExtraField.crc,Field,* Instance used to calculate checksums.,private CRC32 crc = new CRC32();,java.util.zip.CRC32 crc,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.BUFFER_SIZE,Field,No Comment,static final int BUFFER_SIZE = 512;,int BUFFER_SIZE,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG_OFFSET,Field,No Comment,private static final int LFH_SIG_OFFSET = 0;,int LFH_SIG_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_VERSION_NEEDED_OFFSET,Field,No Comment,private static final int LFH_VERSION_NEEDED_OFFSET = 4;,int LFH_VERSION_NEEDED_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_GPB_OFFSET,Field,No Comment,private static final int LFH_GPB_OFFSET = 6;,int LFH_GPB_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_METHOD_OFFSET,Field,No Comment,private static final int LFH_METHOD_OFFSET = 8;,int LFH_METHOD_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_TIME_OFFSET,Field,No Comment,private static final int LFH_TIME_OFFSET = 10;,int LFH_TIME_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_CRC_OFFSET,Field,No Comment,private static final int LFH_CRC_OFFSET = 14;,int LFH_CRC_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_COMPRESSED_SIZE_OFFSET,Field,No Comment,private static final int LFH_COMPRESSED_SIZE_OFFSET = 18;,int LFH_COMPRESSED_SIZE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_ORIGINAL_SIZE_OFFSET,Field,No Comment,private static final int LFH_ORIGINAL_SIZE_OFFSET = 22;,int LFH_ORIGINAL_SIZE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_LENGTH_OFFSET,Field,No Comment,private static final int LFH_FILENAME_LENGTH_OFFSET = 26;,int LFH_FILENAME_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_EXTRA_LENGTH_OFFSET,Field,No Comment,private static final int LFH_EXTRA_LENGTH_OFFSET = 28;,int LFH_EXTRA_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_FILENAME_OFFSET,Field,No Comment,private static final int LFH_FILENAME_OFFSET = 30;,int LFH_FILENAME_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG_OFFSET,Field,No Comment,private static final int CFH_SIG_OFFSET = 0;,int CFH_SIG_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_MADE_BY_OFFSET,Field,No Comment,private static final int CFH_VERSION_MADE_BY_OFFSET = 4;,int CFH_VERSION_MADE_BY_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_VERSION_NEEDED_OFFSET,Field,No Comment,private static final int CFH_VERSION_NEEDED_OFFSET = 6;,int CFH_VERSION_NEEDED_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_GPB_OFFSET,Field,No Comment,private static final int CFH_GPB_OFFSET = 8;,int CFH_GPB_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_METHOD_OFFSET,Field,No Comment,private static final int CFH_METHOD_OFFSET = 10;,int CFH_METHOD_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_TIME_OFFSET,Field,No Comment,private static final int CFH_TIME_OFFSET = 12;,int CFH_TIME_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_CRC_OFFSET,Field,No Comment,private static final int CFH_CRC_OFFSET = 16;,int CFH_CRC_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMPRESSED_SIZE_OFFSET,Field,No Comment,private static final int CFH_COMPRESSED_SIZE_OFFSET = 20;,int CFH_COMPRESSED_SIZE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_ORIGINAL_SIZE_OFFSET,Field,No Comment,private static final int CFH_ORIGINAL_SIZE_OFFSET = 24;,int CFH_ORIGINAL_SIZE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_LENGTH_OFFSET,Field,No Comment,private static final int CFH_FILENAME_LENGTH_OFFSET = 28;,int CFH_FILENAME_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTRA_LENGTH_OFFSET,Field,No Comment,private static final int CFH_EXTRA_LENGTH_OFFSET = 30;,int CFH_EXTRA_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_COMMENT_LENGTH_OFFSET,Field,No Comment,private static final int CFH_COMMENT_LENGTH_OFFSET = 32;,int CFH_COMMENT_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_DISK_NUMBER_OFFSET,Field,No Comment,private static final int CFH_DISK_NUMBER_OFFSET = 34;,int CFH_DISK_NUMBER_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_INTERNAL_ATTRIBUTES_OFFSET,Field,No Comment,private static final int CFH_INTERNAL_ATTRIBUTES_OFFSET = 36;,int CFH_INTERNAL_ATTRIBUTES_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_EXTERNAL_ATTRIBUTES_OFFSET,Field,No Comment,private static final int CFH_EXTERNAL_ATTRIBUTES_OFFSET = 38;,int CFH_EXTERNAL_ATTRIBUTES_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_LFH_OFFSET,Field,No Comment,private static final int CFH_LFH_OFFSET = 42;,int CFH_LFH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_FILENAME_OFFSET,Field,No Comment,private static final int CFH_FILENAME_OFFSET = 46;,int CFH_FILENAME_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFLATED,Field,* Compression method for deflated entries.,public static final int DEFLATED = java.util.zip.ZipEntry.DEFLATED;,int DEFLATED,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_COMPRESSION,Field,* Default compression level for deflated entries.,public static final int DEFAULT_COMPRESSION = Deflater.DEFAULT_COMPRESSION;,int DEFAULT_COMPRESSION,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.STORED,Field,* Compression method for stored entries.,public static final int STORED = java.util.zip.ZipEntry.STORED;,int STORED,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DEFAULT_CHARSET,Field,* Default Charset for file names and comment.,static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;,java.nio.charset.Charset DEFAULT_CHARSET,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EFS_FLAG,Field,"* General purpose flag, which indicates that file names are written in UTF-8.\n     *\n     * @deprecated use {@link GeneralPurposeBit#UFT8_NAMES_FLAG} instead",@Deprecated\npublic static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;,int EFS_FLAG,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO,Field,"* Helper, a 0 as ZipShort.","private static final byte[] ZERO = { 0, 0 };",byte[] ZERO,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO,Field,"* Helper, a 0 as ZipLong.","private static final byte[] LZERO = { 0, 0, 0, 0 };",byte[] LZERO,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE,Field,No Comment,private static final byte[] ONE = ZipLong.getBytes(1L);,byte[] ONE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG,Field,NOSONAR,static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();,byte[] LFH_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG,Field,NOSONAR,static final byte[] DD_SIG = ZipLong.DD_SIG.getBytes();,byte[] DD_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG,Field,NOSONAR,static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();,byte[] CFH_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG,Field,NOSONAR,static final byte[] EOCD_SIG = ZipLong.getBytes(0X06054B50L);,byte[] EOCD_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG,Field,NOSONAR,static final byte[] ZIP64_EOCD_SIG = ZipLong.getBytes(0X06064B50L);,byte[] ZIP64_EOCD_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG,Field,NOSONAR,static final byte[] ZIP64_EOCD_LOC_SIG = ZipLong.getBytes(0X07064B50L);,byte[] ZIP64_EOCD_LOC_SIG,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished,Field,* Indicates if this archive is finished. protected for use in Jar implementation.\n     *\n     * @deprecated See {@link #isFinished()} and {@link #finish()}.,@Deprecated\nprotected boolean finished;,boolean finished,protected 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry,Field,* Current entry.,private CurrentEntry entry;,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry entry,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment,Field,* The file comment.,"private String comment = """";",java.lang.String comment,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level,Field,* Compression level for next entry.,private int level = DEFAULT_COMPRESSION;,int level,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged,Field,* Has the compression level changed when compared to the last entry?,private boolean hasCompressionLevelChanged;,boolean hasCompressionLevelChanged,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method,Field,* Default compression method for next entry.,private int method = java.util.zip.ZipEntry.DEFLATED;,int method,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries,Field,* List of ZipArchiveEntries written so far.,private final List<ZipArchiveEntry> entries = new LinkedList<>();,java.util.List entries,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor,Field,No Comment,private final StreamCompressor streamCompressor;,org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset,Field,* Start of central directory.,private long cdOffset;,long cdOffset,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength,Field,* Length of central directory.,private long cdLength;,long cdLength,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdDiskNumberStart,Field,* Disk number start of central directory.,private long cdDiskNumberStart;,long cdDiskNumberStart,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.eocdLength,Field,* Length of end of central directory,private long eocdLength;,long eocdLength,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.metaData,Field,* Holds some book-keeping data for each entry.,"private final Map<ZipArchiveEntry, EntryMetaData> metaData = new HashMap<>();",java.util.Map metaData,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.charset,Field,"* The encoding to use for file names and the file comment.\n     *\n     * <p>\n     * For a list of possible values see <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html"">Supported Encodings</a>.\n     * Defaults to UTF-8.\n     * </p>",private Charset charset = DEFAULT_CHARSET;,java.nio.charset.Charset charset,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding,Field,* The ZIP encoding to use for file names and the file comment.\n     *\n     * This field is of internal use and will be set in {@link #setEncoding(String)}.,private ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(DEFAULT_CHARSET);,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def,Field,* This Deflater object is used for output.,protected final Deflater def;,java.util.zip.Deflater def,"protected , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUtf8Flag,Field,* whether to use the general purpose bit flag when writing UTF-8 file names or not.,private boolean useUtf8Flag = true;,boolean useUtf8Flag,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUtf8,Field,* Whether to encode non-encodable file names as UTF-8.,private boolean fallbackToUtf8;,boolean fallbackToUtf8,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields,Field,* whether to create UnicodePathExtraField-s for each entry.,private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER;,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy createUnicodeExtraFields,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64,Field,* Whether anything inside this archive has used a ZIP64 feature.\n     *\n     * @since 1.3,private boolean hasUsedZip64;,boolean hasUsedZip64,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode,Field,No Comment,private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;,org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer,Field,No Comment,private final byte[] copyBuffer = new byte[32768];,byte[] copyBuffer,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSplitZip,Field,* Whether we are creating a split zip,private final boolean isSplitZip;,boolean isSplitZip,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.numberOfCDInDiskData,Field,* Holds the number of Central Directories on each disk. This is used when writing Zip64 End Of Central Directory and End Of Central Directory.,"private final Map<Integer, Integer> numberOfCDInDiskData = new HashMap<>();",java.util.Map numberOfCDInDiskData,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.entry,Field,* Current ZIP entry.,private final ZipArchiveEntry entry;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.localDataStart,Field,* Offset for CRC entry in the local file header data for the current entry starts here.,private long localDataStart;,long localDataStart,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.dataStart,Field,* Data for local header data,private long dataStart;,long dataStart,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.bytesRead,Field,* Number of bytes read for the current entry (can't rely on Deflater#getBytesRead) when using DEFLATED.,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.causedUseOfZip64,Field,* Whether current entry was the first one using ZIP64 features.,private boolean causedUseOfZip64;,boolean causedUseOfZip64,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.hasWritten,Field,* Whether write() has been called at all.\n         *\n         * <p>\n         * In order to create a valid archive {@link #closeArchiveEntry closeArchiveEntry} will write an empty array to get the CRC right if nothing has been\n         * written to the stream at all.\n         * </p>,private boolean hasWritten;,boolean hasWritten,private 
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.offset,Field,No Comment,private final long offset;,long offset,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.usesDataDescriptor,Field,No Comment,private final boolean usesDataDescriptor;,boolean usesDataDescriptor,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS,Field,* Always create Unicode extra fields.,"public static final UnicodeExtraFieldPolicy ALWAYS = new UnicodeExtraFieldPolicy(""always"");",org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy ALWAYS,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER,Field,* Never create Unicode extra fields.,"public static final UnicodeExtraFieldPolicy NEVER = new UnicodeExtraFieldPolicy(""never"");",org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy NEVER,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NOT_ENCODEABLE,Field,* Creates Unicode extra fields for file names that cannot be encoded using the specified encoding.,"public static final UnicodeExtraFieldPolicy NOT_ENCODEABLE = new UnicodeExtraFieldPolicy(""not encodeable"");",org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy NOT_ENCODEABLE,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x7875);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO,Field,No Comment,private static final ZipShort ZERO = new ZipShort(0);,org.apache.commons.compress.archivers.zip.ZipShort ZERO,"private , static , final "
org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND,Field,No Comment,private static final BigInteger ONE_THOUSAND = BigInteger.valueOf(1000);,java.math.BigInteger ONE_THOUSAND,"private , static , final "
org.apache.commons.compress.archivers.zip.X7875_NewUnix.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.X7875_NewUnix.version,Field,always '1' according to current info-zip spec.,private int version = 1;,int version,private 
org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid,Field,NOTE: equals() and hashCode() currently assume these can never be null.,private BigInteger uid;,java.math.BigInteger uid,private 
org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid,Field,No Comment,private BigInteger gid;,java.math.BigInteger gid,private 
org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0019);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0001);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.LFH_MUST_HAVE_BOTH_SIZES_MSG,Field,No Comment,"private static final String LFH_MUST_HAVE_BOTH_SIZES_MSG = ""Zip64 extended information must contain"" + "" both size values in the local file header."";",java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG,"private , static , final "
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size,Field,No Comment,private ZipEightByteInteger size;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger size,private 
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize,Field,No Comment,private ZipEightByteInteger compressedSize;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger compressedSize,private 
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset,Field,No Comment,private ZipEightByteInteger relativeHeaderOffset;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger relativeHeaderOffset,private 
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart,Field,No Comment,private ZipLong diskStart;,org.apache.commons.compress.archivers.zip.ZipLong diskStart,private 
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData,Field,* Stored in {@link #parseFromCentralDirectoryData parseFromCentralDirectoryData} so it can be reused when ZipFile calls {@link #reparseCentralDirectoryData\n     * reparseCentralDirectoryData}.\n     *\n     * <p>\n     * Not used for anything else\n     * </p>\n     *\n     * @since 1.3,private byte[] rawCentralDirectoryData;,byte[] rawCentralDirectoryData,private 
org.apache.commons.compress.archivers.zip.ZipLong.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG,Field,Central File Header Signature,public static final ZipLong CFH_SIG = new ZipLong(0X02014B50L);,org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG,Field,Local File Header Signature,public static final ZipLong LFH_SIG = new ZipLong(0X04034B50L);,org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG,Field,"* Data Descriptor signature.\n     *\n     * <p>\n     * Actually, PKWARE uses this as marker for split/spanned archives and other archivers have started to use it as Data Descriptor signature (as well).\n     * </p>\n     *\n     * @since 1.1",public static final ZipLong DD_SIG = new ZipLong(0X08074B50L);,org.apache.commons.compress.archivers.zip.ZipLong DD_SIG,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC,Field,* Value stored in size and similar fields if ZIP64 extensions are used.\n     *\n     * @since 1.3,static final ZipLong ZIP64_MAGIC = new ZipLong(ZipConstants.ZIP64_MAGIC);,org.apache.commons.compress.archivers.zip.ZipLong ZIP64_MAGIC,"static , final "
org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER,Field,"* Marks ZIP archives that were supposed to be split or spanned but only needed a single segment in then end (so are actually neither split nor spanned).\n     *\n     * <p>\n     * This is the ""PK00"" prefix found in some archives.\n     * </p>\n     *\n     * @since 1.5",public static final ZipLong SINGLE_SEGMENT_SPLIT_MARKER = new ZipLong(0X30304B50L);,org.apache.commons.compress.archivers.zip.ZipLong SINGLE_SEGMENT_SPLIT_MARKER,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG,Field,* Archive extra data record signature.\n     *\n     * @since 1.5,public static final ZipLong AED_SIG = new ZipLong(0X08064B50L);,org.apache.commons.compress.archivers.zip.ZipLong AED_SIG,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipLong.value,Field,No Comment,private final long value;,long value,"private , final "
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID,Field,* Extra field id used for storing alignment and padding.,public static final ZipShort ID = new ZipShort(0xa11e);,org.apache.commons.compress.archivers.zip.ZipShort ID,"public , static , final "
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.BASE_SIZE,Field,No Comment,public static final int BASE_SIZE = 2;,int BASE_SIZE,"public , static , final "
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ALLOW_METHOD_MESSAGE_CHANGE_FLAG,Field,No Comment,private static final int ALLOW_METHOD_MESSAGE_CHANGE_FLAG = 0x8000;,int ALLOW_METHOD_MESSAGE_CHANGE_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.alignment,Field,No Comment,private short alignment;,short alignment,private 
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.allowMethodChange,Field,No Comment,private boolean allowMethodChange;,boolean allowMethodChange,private 
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.padding,Field,No Comment,private int padding;,int padding,private 
org.apache.commons.compress.archivers.zip.BinaryTree.UNDEFINED,Field,Value in the array indicating an undefined node,private static final int UNDEFINED = -1;,int UNDEFINED,"private , static , final "
org.apache.commons.compress.archivers.zip.BinaryTree.NODE,Field,Value in the array indicating a non leaf node,private static final int NODE = -2;,int NODE,"private , static , final "
org.apache.commons.compress.archivers.zip.BinaryTree.tree,Field,"* The array representing the binary tree. The root is at index 0, the left children are at 2*i+1 and the right children at 2*i+2.",private final int[] tree;,int[] tree,"private , final "
org.apache.commons.compress.archivers.zip.JarMarker.ID,Field,No Comment,static final ZipShort ID = new ZipShort(0xCAFE);,org.apache.commons.compress.archivers.zip.ZipShort ID,"static , final "
org.apache.commons.compress.archivers.zip.JarMarker.NULL,Field,No Comment,private static final ZipShort NULL = new ZipShort(0);,org.apache.commons.compress.archivers.zip.ZipShort NULL,"private , static , final "
org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT,Field,No Comment,private static final JarMarker DEFAULT = new JarMarker();,org.apache.commons.compress.archivers.zip.JarMarker DEFAULT,"private , static , final "
org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed,Field,No Comment,private final long compressionElapsed;,long compressionElapsed,"private , final "
org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed,Field,No Comment,private final long mergingElapsed;,long mergingElapsed,"private , final "
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0017);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.format,Field,TODO written but not read,private int format;,int format,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.algId,Field,No Comment,private EncryptionAlgorithm algId;,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm algId,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.bitlen,Field,TODO written but not read,private int bitlen;,int bitlen,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.flags,Field,TODO written but not read,private int flags;,int flags,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.rcount,Field,No Comment,private long rcount;,long rcount,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashAlg,Field,No Comment,private HashAlgorithm hashAlg;,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm hashAlg,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.hashSize,Field,No Comment,private int hashSize;,int hashSize,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.ivData,Field,Encryption data/,private byte[] ivData;,byte[] ivData,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.erdData,Field,No Comment,private byte[] erdData;,byte[] erdData,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.recipientKeyHash,Field,Encryption key.,private byte[] recipientKeyHash;,byte[] recipientKeyHash,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.keyBlob,Field,No Comment,private byte[] keyBlob;,byte[] keyBlob,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vData,Field,Password verification data.,private byte[] vData;,byte[] vData,private 
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.vCRC32,Field,No Comment,private byte[] vCRC32;,byte[] vCRC32,private 
org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID,Field,* The header ID for this extra field.\n     *\n     * @since 1.23,public static final ZipShort HEADER_ID = new ZipShort(0x000a);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"public , static , final "
org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG,Field,No Comment,private static final ZipShort TIME_ATTR_TAG = new ZipShort(0x0001);,org.apache.commons.compress.archivers.zip.ZipShort TIME_ATTR_TAG,"private , static , final "
org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE,Field,No Comment,private static final ZipShort TIME_ATTR_SIZE = new ZipShort(3 * 8);,org.apache.commons.compress.archivers.zip.ZipShort TIME_ATTR_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime,Field,No Comment,private ZipEightByteInteger modifyTime = ZipEightByteInteger.ZERO;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger modifyTime,private 
org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime,Field,No Comment,private ZipEightByteInteger accessTime = ZipEightByteInteger.ZERO;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger accessTime,private 
org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime,Field,No Comment,private ZipEightByteInteger createTime = ZipEightByteInteger.ZERO;,org.apache.commons.compress.archivers.zip.ZipEightByteInteger createTime,private 
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0015);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.rcount,Field,No Comment,private int rcount;,int rcount,private 
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.hashAlg,Field,No Comment,private HashAlgorithm hashAlg;,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm hashAlg,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.ZIP_SEGMENT_MIN_SIZE,Field,"* 8.5.1 Capacities for split archives are as follows:\n     * <p>\n     * Maximum number of segments = 4,294,967,295 - 1 Maximum .ZIP segment size = 4,294,967,295 bytes (refer to section 8.5.6) Minimum segment size = 64K\n     * </p>\n     * <p>\n     * Maximum PKSFX segment size = 2,147,483,647 bytes\n     * </p>",private static final long ZIP_SEGMENT_MIN_SIZE = 64 * 1024L;,long ZIP_SEGMENT_MIN_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.ZIP_SEGMENT_MAX_SIZE,Field,No Comment,private static final long ZIP_SEGMENT_MAX_SIZE = 4294967295L;,long ZIP_SEGMENT_MAX_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.currentChannel,Field,No Comment,private FileChannel currentChannel;,java.nio.channels.FileChannel currentChannel,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.outputStream,Field,No Comment,private FileRandomAccessOutputStream outputStream;,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream outputStream,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.zipFile,Field,No Comment,private Path zipFile;,java.nio.file.Path zipFile,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.splitSize,Field,No Comment,private final long splitSize;,long splitSize,"private , final "
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.totalPosition,Field,No Comment,private long totalPosition;,long totalPosition,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.currentSplitSegmentIndex,Field,No Comment,private int currentSplitSegmentIndex;,int currentSplitSegmentIndex,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.currentSplitSegmentBytesWritten,Field,No Comment,private long currentSplitSegmentBytesWritten;,long currentSplitSegmentBytesWritten,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.finished,Field,No Comment,private boolean finished;,boolean finished,private 
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.singleByte,Field,No Comment,private final byte[] singleByte = new byte[1];,byte[] singleByte,"private , final "
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.diskToPosition,Field,No Comment,private final List<Long> diskToPosition = new ArrayList<>();,java.util.List diskToPosition,"private , final "
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.positionToFiles,Field,No Comment,"private final TreeMap<Long, Path> positionToFiles = new TreeMap<>();",java.util.TreeMap positionToFiles,"private , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.WORD,Field,No Comment,private static final int WORD = 4;,int WORD,"private , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.IMPLEMENTATIONS,Field,* Static registry of known extra fields.,"private static final ConcurrentMap<ZipShort, Supplier<ZipExtraField>> IMPLEMENTATIONS;",java.util.concurrent.ConcurrentMap IMPLEMENTATIONS,"private , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY,Field,No Comment,static final ZipExtraField[] EMPTY_ZIP_EXTRA_FIELD_ARRAY = {};,org.apache.commons.compress.archivers.zip.ZipExtraField[] EMPTY_ZIP_EXTRA_FIELD_ARRAY,"static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.THROW_KEY,Field,"* Key for ""throw an exception"" action.",public static final int THROW_KEY = 0;,int THROW_KEY,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.SKIP_KEY,Field,"* Key for ""skip"" action.",public static final int SKIP_KEY = 1;,int SKIP_KEY,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.READ_KEY,Field,"* Key for ""read"" action.",public static final int READ_KEY = 2;,int READ_KEY,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.THROW,Field,* Throw an exception if field cannot be parsed.,public static final UnparseableExtraField THROW = new UnparseableExtraField(THROW_KEY);,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField THROW,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.SKIP,Field,* Skip the extra field entirely and don't make its data available - effectively removing the extra field data.,public static final UnparseableExtraField SKIP = new UnparseableExtraField(SKIP_KEY);,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField SKIP,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.READ,Field,* Read the extra field data into an instance of {@link UnparseableExtraFieldData UnparseableExtraFieldData}.,public static final UnparseableExtraField READ = new UnparseableExtraField(READ_KEY);,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField READ,"public , static , final "
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.key,Field,No Comment,private final int key;,int key,"private , final "
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId,Field,* The Header-ID.,private ZipShort headerId;,org.apache.commons.compress.archivers.zip.ZipShort headerId,private 
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData,Field,* Extra field data in local file data - without Header-ID or length specifier.,private byte[] localData;,byte[] localData,private 
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData,Field,* Extra field data in central directory - without Header-ID or length specifier.,private byte[] centralData;,byte[] centralData,private 
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.channel,Field,No Comment,private final FileChannel channel;,java.nio.channels.FileChannel channel,"private , final "
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.position,Field,No Comment,private long position;,long position,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.in,Field,The underlying stream containing the compressed data,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits,Field,The stream of bits read from the input stream,private BitStream bits;,org.apache.commons.compress.archivers.zip.BitStream bits,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize,Field,The size of the sliding dictionary (4K or 8K),private final int dictionarySize;,int dictionarySize,"private , final "
org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees,Field,The number of Shannon-Fano trees (2 or 3),private final int numberOfTrees;,int numberOfTrees,"private , final "
org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength,Field,No Comment,private final int minimumMatchLength;,int minimumMatchLength,"private , final "
org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree,Field,The binary tree containing the 256 encoded literals (null when only two trees are used),private BinaryTree literalTree;,org.apache.commons.compress.archivers.zip.BinaryTree literalTree,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree,Field,The binary tree containing the 64 encoded lengths,private BinaryTree lengthTree;,org.apache.commons.compress.archivers.zip.BinaryTree lengthTree,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree,Field,The binary tree containing the 64 encoded distances,private BinaryTree distanceTree;,org.apache.commons.compress.archivers.zip.BinaryTree distanceTree,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer,Field,Output buffer holding the decompressed data,private final CircularBuffer buffer = new CircularBuffer(32 * 1024);,org.apache.commons.compress.archivers.zip.CircularBuffer buffer,"private , final "
org.apache.commons.compress.archivers.zip.ExplodingInputStream.uncompressedCount,Field,No Comment,private long uncompressedCount;,long uncompressedCount,private 
org.apache.commons.compress.archivers.zip.ExplodingInputStream.treeSizes,Field,No Comment,private long treeSizes;,long treeSizes,private 
org.apache.commons.compress.archivers.zip.CircularBuffer.size,Field,Size of the buffer,private final int size;,int size,"private , final "
org.apache.commons.compress.archivers.zip.CircularBuffer.buffer,Field,The buffer,private final byte[] buffer;,byte[] buffer,"private , final "
org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex,Field,Index of the next data to be read from the buffer,private int readIndex;,int readIndex,private 
org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex,Field,Index of the next data written in the buffer,private int writeIndex;,int writeIndex,private 
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_CODE_SIZE,Field,No Comment,private static final int MAX_CODE_SIZE = 13;,int MAX_CODE_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.MAX_TABLE_SIZE,Field,No Comment,private static final int MAX_TABLE_SIZE = 1 << MAX_CODE_SIZE;,int MAX_TABLE_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed,Field,No Comment,private final boolean[] isUsed;,boolean[] isUsed,"private , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID,Field,* The header ID for this extra field.\n     *\n     * @since 1.23,public static final ZipShort HEADER_ID = new ZipShort(0x5455);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"public , static , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT,Field,* The bit set inside the flags by when the last modification time is present in this extra field.,public static final byte MODIFY_TIME_BIT = 1;,byte MODIFY_TIME_BIT,"public , static , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT,Field,* The bit set inside the flags by when the lasr access time is present in this extra field.,public static final byte ACCESS_TIME_BIT = 2;,byte ACCESS_TIME_BIT,"public , static , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT,Field,* The bit set inside the flags by when the original creation time is present in this extra field.,public static final byte CREATE_TIME_BIT = 4;,byte CREATE_TIME_BIT,"public , static , final "
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags,Field,No Comment,private byte flags;,byte flags,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent,Field,!= null and length checks.,private boolean bit0_modifyTimePresent;,boolean bit0_modifyTimePresent,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent,Field,No Comment,private boolean bit1_accessTimePresent;,boolean bit1_accessTimePresent,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent,Field,No Comment,private boolean bit2_createTimePresent;,boolean bit2_createTimePresent,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime,Field,No Comment,private ZipLong modifyTime;,org.apache.commons.compress.archivers.zip.ZipLong modifyTime,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime,Field,No Comment,private ZipLong accessTime;,org.apache.commons.compress.archivers.zip.ZipLong accessTime,private 
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime,Field,No Comment,private ZipLong createTime;,org.apache.commons.compress.archivers.zip.ZipLong createTime,private 
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId,Field,No Comment,private final ZipShort headerId;,org.apache.commons.compress.archivers.zip.ZipShort headerId,"private , final "
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.localData,Field,* Extra field data in local file data - without Header-ID or length specifier.,private byte[] localData;,byte[] localData,private 
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.centralData,Field,* Extra field data in central directory - without Header-ID or length specifier.,private byte[] centralData;,byte[] centralData,private 
org.apache.commons.compress.archivers.zip.ZipFile.DEFAULT_CHARSET_NAME,Field,No Comment,private static final String DEFAULT_CHARSET_NAME = StandardCharsets.UTF_8.name();,java.lang.String DEFAULT_CHARSET_NAME,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.READ,Field,No Comment,private static final EnumSet<StandardOpenOption> READ = EnumSet.of(StandardOpenOption.READ);,java.util.EnumSet READ,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.HASH_SIZE,Field,No Comment,private static final int HASH_SIZE = 509;,int HASH_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.NIBLET_MASK,Field,No Comment,static final int NIBLET_MASK = 0x0f;,int NIBLET_MASK,"static , final "
org.apache.commons.compress.archivers.zip.ZipFile.BYTE_SHIFT,Field,No Comment,static final int BYTE_SHIFT = 8;,int BYTE_SHIFT,"static , final "
org.apache.commons.compress.archivers.zip.ZipFile.POS_0,Field,No Comment,private static final int POS_0 = 0;,int POS_0,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.POS_1,Field,No Comment,private static final int POS_1 = 1;,int POS_1,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.POS_2,Field,No Comment,private static final int POS_2 = 2;,int POS_2,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.POS_3,Field,No Comment,private static final int POS_3 = 3;,int POS_3,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ONE_ZERO_BYTE,Field,No Comment,private static final byte[] ONE_ZERO_BYTE = new byte[1];,byte[] ONE_ZERO_BYTE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.CFH_LEN,Field,"* Length of a ""central directory"" entry structure without file name, extra fields or comment.",private static final int CFH_LEN = // @formatter:off\n/* version made by                 */\nZipConstants.SHORT + /* version needed to extract       */\nZipConstants.SHORT + /* general purpose bit flag        */\nZipConstants.SHORT + /* compression method              */\nZipConstants.SHORT + /* last mod file time              */\nZipConstants.SHORT + /* last mod file date              */\nZipConstants.SHORT + /* CRC-32                          */\nZipConstants.WORD + /* compressed size                 */\nZipConstants.WORD + /* uncompressed size               */\nZipConstants.WORD + /* file name length                */\nZipConstants.SHORT + /* extra field length              */\nZipConstants.SHORT + /* file comment length             */\nZipConstants.SHORT + /* disk number start               */\nZipConstants.SHORT + /* internal file attributes        */\nZipConstants.SHORT + /* external file attributes        */\nZipConstants.WORD + /* relative offset of local header */\nZipConstants.WORD;,int CFH_LEN,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG,Field,No Comment,private static final long CFH_SIG = ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG);,long CFH_SIG,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.MIN_EOCD_SIZE,Field,"* Length of the ""End of central directory record"" - which is supposed to be the last structure of the archive - without file comment.",static final int MIN_EOCD_SIZE = // @formatter:off\n/* end of central dir signature    */\nZipConstants.WORD + /* number of this disk             */\nZipConstants.SHORT + /* number of the disk with the     */\n/* start of the central directory  */\nZipConstants.SHORT + /* total number of entries in      */\n/* the central dir on this disk    */\nZipConstants.SHORT + /* total number of entries in      */\n/* the central dir                 */\nZipConstants.SHORT + /* size of the central directory   */\nZipConstants.WORD + /* offset of start of central      */\n/* directory with respect to       */\n/* the starting disk number        */\nZipConstants.WORD + /* ZIP file comment length         */\nZipConstants.SHORT;,int MIN_EOCD_SIZE,"static , final "
org.apache.commons.compress.archivers.zip.ZipFile.MAX_EOCD_SIZE,Field,"* Maximum length of the ""End of central directory record"" with a file comment.",private static final int MAX_EOCD_SIZE = MIN_EOCD_SIZE + // @formatter:off\n/* maximum length of ZIP file comment */\nZipConstants.ZIP64_MAGIC_SHORT;,int MAX_EOCD_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.CFD_LENGTH_OFFSET,Field,"* Offset of the field that holds the location of the length of the central directory inside the ""End of central directory record"" relative to the start of\n     * the ""End of central directory record"".",private static final int CFD_LENGTH_OFFSET = // @formatter:off\n/* end of central dir signature    */\nZipConstants.WORD + /* number of this disk             */\nZipConstants.SHORT + /* number of the disk with the     */\n/* start of the central directory  */\nZipConstants.SHORT + /* total number of entries in      */\n/* the central dir on this disk    */\nZipConstants.SHORT + /* total number of entries in      */\n/* the central dir                 */\nZipConstants.SHORT;,int CFD_LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.CFD_DISK_OFFSET,Field,"* Offset of the field that holds the disk number of the first central directory entry inside the ""End of central directory record"" relative to the start of\n     * the ""End of central directory record"".",private static final int CFD_DISK_OFFSET = // @formatter:off\n/* end of central dir signature    */\nZipConstants.WORD + /* number of this disk             */\nZipConstants.SHORT;,int CFD_DISK_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.CFD_LOCATOR_RELATIVE_OFFSET,Field,"* Offset of the field that holds the location of the first central directory entry inside the ""End of central directory record"" relative to the ""number of\n     * the disk with the start of the central directory"".",private static final int CFD_LOCATOR_RELATIVE_OFFSET = // @formatter:off\n/* total number of entries in      */\n/* the central dir on this disk    */\n+ZipConstants.SHORT + /* total number of entries in      */\n/* the central dir                 */\nZipConstants.SHORT + /* size of the central directory   */\nZipConstants.WORD;,int CFD_LOCATOR_RELATIVE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LENGTH,Field,"* Length of the ""Zip64 end of central directory locator"" - which should be right in front of the ""end of central directory record"" if one is present at\n     * all.",private static final int ZIP64_EOCDL_LENGTH = // @formatter:off\n/* zip64 end of central dir locator sig */\nZipConstants.WORD + /* number of the disk with the start    */\n/* start of the zip64 end of            */\n/* central directory                    */\nZipConstants.WORD + /* relative offset of the zip64         */\n/* end of central directory record      */\nZipConstants.DWORD + /* total number of disks                */\nZipConstants.WORD;,int ZIP64_EOCDL_LENGTH,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCDL_LOCATOR_OFFSET,Field,"* Offset of the field that holds the location of the ""Zip64 end of central directory record"" inside the ""Zip64 end of central directory locator"" relative\n     * to the start of the ""Zip64 end of central directory locator"".",private static final int ZIP64_EOCDL_LOCATOR_OFFSET = // @formatter:off\n/* zip64 end of central dir locator sig */\nZipConstants.WORD + /* number of the disk with the start    */\n/* start of the zip64 end of            */\n/* central directory                    */\nZipConstants.WORD;,int ZIP64_EOCDL_LOCATOR_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCD_CFD_LOCATOR_OFFSET,Field,"* Offset of the field that holds the location of the first central directory entry inside the ""Zip64 end of central directory record"" relative to the start\n     * of the ""Zip64 end of central directory record"".",private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET = // @formatter:off\n/* zip64 end of central dir        */\n/* signature                       */\nZipConstants.WORD + /* size of zip64 end of central    */\n/* directory record                */\nZipConstants.DWORD + /* version made by                 */\nZipConstants.SHORT + /* version needed to extract       */\nZipConstants.SHORT + /* number of this disk             */\nZipConstants.WORD + /* number of the disk with the     */\n/* start of the central directory  */\nZipConstants.WORD + /* total number of entries in the  */\n/* central directory on this disk  */\nZipConstants.DWORD + /* total number of entries in the  */\n/* central directory               */\nZipConstants.DWORD + /* size of the central directory   */\nZipConstants.DWORD;,int ZIP64_EOCD_CFD_LOCATOR_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCD_CFD_DISK_OFFSET,Field,"* Offset of the field that holds the disk number of the first central directory entry inside the ""Zip64 end of central directory record"" relative to the\n     * start of the ""Zip64 end of central directory record"".",private static final int ZIP64_EOCD_CFD_DISK_OFFSET = // @formatter:off\n/* zip64 end of central dir        */\n/* signature                       */\nZipConstants.WORD + /* size of zip64 end of central    */\n/* directory record                */\nZipConstants.DWORD + /* version made by                 */\nZipConstants.SHORT + /* version needed to extract       */\nZipConstants.SHORT + /* number of this disk             */\nZipConstants.WORD;,int ZIP64_EOCD_CFD_DISK_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET,Field,"* Offset of the field that holds the location of the first central directory entry inside the ""Zip64 end of central directory record"" relative to the\n     * ""number of the disk with the start of the central directory"".",private static final int ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET = // @formatter:off\n/* total number of entries in the  */\n/* central directory on this disk  */\nZipConstants.DWORD + /* total number of entries in the  */\n/* central directory               */\nZipConstants.DWORD + /* size of the central directory   */\nZipConstants.DWORD;,int ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH,Field,* Number of bytes in local file header up to the &quot;length of file name&quot; entry.,private static final long LFH_OFFSET_FOR_FILENAME_LENGTH = // @formatter:off\n/* local file header signature     */\nZipConstants.WORD + /* version needed to extract       */\nZipConstants.SHORT + /* general purpose bit flag        */\nZipConstants.SHORT + /* compression method              */\nZipConstants.SHORT + /* last mod file time              */\nZipConstants.SHORT + /* last mod file date              */\nZipConstants.SHORT + /* CRC-32                          */\nZipConstants.WORD + /* compressed size                 */\nZipConstants.WORD + /* uncompressed size               */\n(long) ZipConstants.WORD;,long LFH_OFFSET_FOR_FILENAME_LENGTH,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator,Field,* Compares two ZipArchiveEntries based on their offset within the archive.\n     * <p>\n     * Won't return any meaningful results if one of the entries isn't part of the archive at all.\n     * </p>\n     *\n     * @since 1.1,private static final Comparator<ZipArchiveEntry> offsetComparator = Comparator.comparingLong(ZipArchiveEntry::getDiskNumberStart).thenComparingLong(ZipArchiveEntry::getLocalHeaderOffset);,java.util.Comparator offsetComparator,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipFile.entries,Field,* List of entries in the order they appear inside the central directory.,private final List<ZipArchiveEntry> entries = new LinkedList<>();,java.util.List entries,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.nameMap,Field,"* Maps String to list of ZipArchiveEntrys, name -> actual entries.","private final Map<String, LinkedList<ZipArchiveEntry>> nameMap = new HashMap<>(HASH_SIZE);",java.util.Map nameMap,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.encoding,Field,"* The encoding to use for file names and the file comment.\n     * <p>\n     * For a list of possible values see <a href=""Supported Encodings"">https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html</a>.\n     * Defaults to UTF-8.\n     * </p>",private final Charset encoding;,java.nio.charset.Charset encoding,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding,Field,* The ZIP encoding to use for file names and the file comment.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.archive,Field,* The actual data source.,private final SeekableByteChannel archive;,java.nio.channels.SeekableByteChannel archive,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields,Field,* Whether to look for and use Unicode extra fields.,private final boolean useUnicodeExtraFields;,boolean useUnicodeExtraFields,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.closed,Field,* Whether the file is closed.,private volatile boolean closed = true;,boolean closed,"private , volatile "
org.apache.commons.compress.archivers.zip.ZipFile.isSplitZipArchive,Field,* Whether the ZIP archive is a split ZIP archive,private final boolean isSplitZipArchive;,boolean isSplitZipArchive,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf,Field,cached buffers - must only be used locally in the class (COMPRESS-172 - reduce garbage collection),private final byte[] dwordBuf = new byte[ZipConstants.DWORD];,byte[] dwordBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.wordBuf,Field,No Comment,private final byte[] wordBuf = new byte[ZipConstants.WORD];,byte[] wordBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf,Field,No Comment,private final byte[] cfhBuf = new byte[CFH_LEN];,byte[] cfhBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.shortBuf,Field,No Comment,private final byte[] shortBuf = new byte[ZipConstants.SHORT];,byte[] shortBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf,Field,No Comment,private final ByteBuffer dwordBbuf = ByteBuffer.wrap(dwordBuf);,java.nio.ByteBuffer dwordBbuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf,Field,No Comment,private final ByteBuffer wordBbuf = ByteBuffer.wrap(wordBuf);,java.nio.ByteBuffer wordBbuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf,Field,No Comment,private final ByteBuffer cfhBbuf = ByteBuffer.wrap(cfhBuf);,java.nio.ByteBuffer cfhBbuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.shortBbuf,Field,No Comment,private final ByteBuffer shortBbuf = ByteBuffer.wrap(shortBuf);,java.nio.ByteBuffer shortBbuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile.centralDirectoryStartDiskNumber,Field,No Comment,private long centralDirectoryStartDiskNumber;,long centralDirectoryStartDiskNumber,private 
org.apache.commons.compress.archivers.zip.ZipFile.centralDirectoryStartRelativeOffset,Field,No Comment,private long centralDirectoryStartRelativeOffset;,long centralDirectoryStartRelativeOffset,private 
org.apache.commons.compress.archivers.zip.ZipFile.centralDirectoryStartOffset,Field,No Comment,private long centralDirectoryStartOffset;,long centralDirectoryStartOffset,private 
org.apache.commons.compress.archivers.zip.ZipFile.firstLocalFileHeaderOffset,Field,No Comment,private long firstLocalFileHeaderOffset;,long firstLocalFileHeaderOffset,private 
org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.archive,Field,No Comment,private final FileChannel archive;,java.nio.channels.FileChannel archive,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile$Builder.DEFAULT_CHARSET,Field,No Comment,static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;,java.nio.charset.Charset DEFAULT_CHARSET,"static , final "
org.apache.commons.compress.archivers.zip.ZipFile$Builder.seekableByteChannel,Field,No Comment,private SeekableByteChannel seekableByteChannel;,java.nio.channels.SeekableByteChannel seekableByteChannel,private 
org.apache.commons.compress.archivers.zip.ZipFile$Builder.useUnicodeExtraFields,Field,No Comment,private boolean useUnicodeExtraFields = true;,boolean useUnicodeExtraFields,private 
org.apache.commons.compress.archivers.zip.ZipFile$Builder.ignoreLocalFileHeader,Field,No Comment,private boolean ignoreLocalFileHeader;,boolean ignoreLocalFileHeader,private 
org.apache.commons.compress.archivers.zip.ZipFile$Builder.maxNumberOfDisks,Field,No Comment,private long maxNumberOfDisks = 1;,long maxNumberOfDisks,private 
org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.name,Field,No Comment,private final byte[] name;,byte[] name,"private , final "
org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.comment,Field,No Comment,private final byte[] comment;,byte[] comment,"private , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.ENCRYPTION_FLAG,Field,* Indicates that the file is encrypted.,private static final int ENCRYPTION_FLAG = 1 << 0;,int ENCRYPTION_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.SLIDING_DICTIONARY_SIZE_FLAG,Field,* Indicates the size of the sliding dictionary used by the compression method 6 (imploding).\n     * <ul>\n     * <li>0: 4096 bytes</li>\n     * <li>1: 8192 bytes</li>\n     * </ul>,private static final int SLIDING_DICTIONARY_SIZE_FLAG = 1 << 1;,int SLIDING_DICTIONARY_SIZE_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.NUMBER_OF_SHANNON_FANO_TREES_FLAG,Field,"* Indicates the number of Shannon-Fano trees used by the compression method 6 (imploding).\n     * <ul>\n     * <li>0: 2 trees (lengths, distances)</li>\n     * <li>1: 3 trees (literals, lengths, distances)</li>\n     * </ul>",private static final int NUMBER_OF_SHANNON_FANO_TREES_FLAG = 1 << 2;,int NUMBER_OF_SHANNON_FANO_TREES_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.DATA_DESCRIPTOR_FLAG,Field,* Indicates that a data descriptor stored after the file contents will hold CRC and size information.,private static final int DATA_DESCRIPTOR_FLAG = 1 << 3;,int DATA_DESCRIPTOR_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.STRONG_ENCRYPTION_FLAG,Field,* Indicates strong encryption.,private static final int STRONG_ENCRYPTION_FLAG = 1 << 6;,int STRONG_ENCRYPTION_FLAG,"private , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.UFT8_NAMES_FLAG,Field,* Indicates that file names are written in UTF-8.\n     *\n     * <p>\n     * The only reason this is public is that {@link ZipArchiveOutputStream#EFS_FLAG} was public in Apache Commons Compress 1.0 and we needed a substitute for\n     * it.\n     * </p>,public static final int UFT8_NAMES_FLAG = 1 << 11;,int UFT8_NAMES_FLAG,"public , static , final "
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag,Field,No Comment,private boolean languageEncodingFlag;,boolean languageEncodingFlag,private 
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag,Field,No Comment,private boolean dataDescriptorFlag;,boolean dataDescriptorFlag,private 
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag,Field,No Comment,private boolean encryptionFlag;,boolean encryptionFlag,private 
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag,Field,No Comment,private boolean strongEncryptionFlag;,boolean strongEncryptionFlag,private 
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize,Field,No Comment,private int slidingDictionarySize;,int slidingDictionarySize,private 
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees,Field,No Comment,private int numberOfShannonFanoTrees;,int numberOfShannonFanoTrees,private 
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.HEADER_ID,Field,No Comment,static final ZipShort HEADER_ID = new ZipShort(0x0016);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"static , final "
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.rcount,Field,No Comment,private int rcount;,int rcount,private 
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.hashAlg,Field,No Comment,private HashAlgorithm hashAlg;,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm hashAlg,private 
org.apache.commons.compress.archivers.zip.ZipShort.SIZE,Field,No Comment,private static final int SIZE = 2;,int SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipShort.ZERO,Field,* ZipShort with a value of 0.\n     *\n     * @since 1.14,public static final ZipShort ZERO = new ZipShort(0);,org.apache.commons.compress.archivers.zip.ZipShort ZERO,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipShort.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipShort.value,Field,No Comment,private final int value;,int value,"private , final "
org.apache.commons.compress.archivers.zip.ZipExtraField.EXTRAFIELD_HEADER_SIZE,Field,* Size of an extra field header (id + length).\n     *\n     * @since 1.14,int EXTRAFIELD_HEADER_SIZE = 4;,int EXTRAFIELD_HEADER_SIZE,default
org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK,Field,Masks last eight bits,static final int BYTE_MASK = 0xFF;,int BYTE_MASK,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.SHORT,Field,Length of a ZipShort in bytes,static final int SHORT = 2;,int SHORT,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.WORD,Field,Length of a ZipLong in bytes,static final int WORD = 4;,int WORD,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.DWORD,Field,Length of a ZipEightByteInteger in bytes,static final int DWORD = 8;,int DWORD,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.INITIAL_VERSION,Field,Initial ZIP specification version,static final int INITIAL_VERSION = 10;,int INITIAL_VERSION,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.DEFLATE_MIN_VERSION,Field,* ZIP specification version that introduced DEFLATE compression method.\n     *\n     * @since 1.15,static final int DEFLATE_MIN_VERSION = 20;,int DEFLATE_MIN_VERSION,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.DATA_DESCRIPTOR_MIN_VERSION,Field,ZIP specification version that introduced data descriptor method,static final int DATA_DESCRIPTOR_MIN_VERSION = 20;,int DATA_DESCRIPTOR_MIN_VERSION,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MIN_VERSION,Field,ZIP specification version that introduced ZIP64,static final int ZIP64_MIN_VERSION = 45;,int ZIP64_MIN_VERSION,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC_SHORT,Field,* Value stored in two-byte size and similar fields if ZIP64 extensions are used.,static final int ZIP64_MAGIC_SHORT = 0xFFFF;,int ZIP64_MAGIC_SHORT,"static , final "
org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC,Field,* Value stored in four-byte size and similar fields if ZIP64 extensions are used.,static final long ZIP64_MAGIC = 0xFFFFFFFFL;,long ZIP64_MAGIC,"static , final "
org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID,Field,No Comment,public static final ZipShort UPATH_ID = new ZipShort(0x7075);,org.apache.commons.compress.archivers.zip.ZipShort UPATH_ID,"public , static , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.REPLACEMENT,Field,No Comment,private static final char REPLACEMENT = '?';,char REPLACEMENT,"private , static , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.REPLACEMENT_BYTES,Field,No Comment,private static final byte[] REPLACEMENT_BYTES = { (byte) REPLACEMENT };,byte[] REPLACEMENT_BYTES,"private , static , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.REPLACEMENT_STRING,Field,No Comment,private static final String REPLACEMENT_STRING = String.valueOf(REPLACEMENT);,java.lang.String REPLACEMENT_STRING,"private , static , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.HEX_CHARS,Field,No Comment,"private static final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };",char[] HEX_CHARS,"private , static , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.charset,Field,No Comment,private final Charset charset;,java.nio.charset.Charset charset,"private , final "
org.apache.commons.compress.archivers.zip.NioZipEncoding.useReplacement,Field,No Comment,private final boolean useReplacement;,boolean useReplacement,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams,Field,No Comment,private final Deque<ScatterZipOutputStream> streams = new ConcurrentLinkedDeque<>();,java.util.Deque streams,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.executorService,Field,No Comment,private final ExecutorService executorService;,java.util.concurrent.ExecutorService executorService,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier,Field,No Comment,private final ScatterGatherBackingStoreSupplier backingStoreSupplier;,org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier backingStoreSupplier,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures,Field,No Comment,private final Deque<Future<? extends ScatterZipOutputStream>> futures = new ConcurrentLinkedDeque<>();,java.util.Deque futures,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt,Field,No Comment,private final long startedAt = System.currentTimeMillis();,long startedAt,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt,Field,No Comment,private long compressionDoneAt;,long compressionDoneAt,private 
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt,Field,No Comment,private long scatterDoneAt;,long scatterDoneAt,private 
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionLevel,Field,No Comment,private final int compressionLevel;,int compressionLevel,"private , final "
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams,Field,No Comment,private final ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n\n    @Override\n    protected ScatterZipOutputStream initialValue() {\n        try {\n            final ScatterZipOutputStream scatterStream = createDeferred(backingStoreSupplier);\n            streams.add(scatterStream);\n            return scatterStream;\n        } catch (final IOException e) {\n            // NOSONAR\n            throw new UncheckedIOException(e);\n        }\n    }\n};,java.lang.ThreadLocal tlScatterStreams,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZIP_DIR_SEP,Field,No Comment,"private static final String ZIP_DIR_SEP = ""/"";",java.lang.String ZIP_DIR_SEP,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY_ARRAY,Field,No Comment,static final ZipArchiveEntry[] EMPTY_ARRAY = {};,org.apache.commons.compress.archivers.zip.ZipArchiveEntry[] EMPTY_ARRAY,"static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY_LINKED_LIST,Field,No Comment,static LinkedList<ZipArchiveEntry> EMPTY_LINKED_LIST = new LinkedList<>();,java.util.LinkedList EMPTY_LINKED_LIST,static 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_UNIX,Field,No Comment,public static final int PLATFORM_UNIX = 3;,int PLATFORM_UNIX,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.PLATFORM_FAT,Field,No Comment,public static final int PLATFORM_FAT = 0;,int PLATFORM_FAT,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CRC_UNKNOWN,Field,No Comment,public static final int CRC_UNKNOWN = -1;,int CRC_UNKNOWN,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_MASK,Field,No Comment,private static final int SHORT_MASK = 0xFFFF;,int SHORT_MASK,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.SHORT_SHIFT,Field,No Comment,private static final int SHORT_SHIFT = 16;,int SHORT_SHIFT,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method,Field,"* The {@link ZipEntry} base class only supports the compression methods STORED and DEFLATED. We override the field so that any compression\n     * methods can be used.\n     * <p>\n     * The default value -1 means that the method has not been specified.\n     * </p>\n     * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93"">COMPRESS-93</a>",private int method = ZipMethod.UNKNOWN_CODE;,int method,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size,Field,* The {@link ZipEntry#setSize} method in the base class throws an IllegalArgumentException if the size is bigger than 2GB for Java versions\n     * &lt; 7 and even in Java 7+ if the implementation in java.util.zip doesn't support Zip64 itself (it is an optional feature).\n     * <p>\n     * We need to keep our own size information for Zip64 support.\n     * </p>,private long size = SIZE_UNKNOWN;,long size,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes,Field,No Comment,private int internalAttributes;,int internalAttributes,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired,Field,No Comment,private int versionRequired;,int versionRequired,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy,Field,No Comment,private int versionMadeBy;,int versionMadeBy,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform,Field,No Comment,private int platform = PLATFORM_FAT;,int platform,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag,Field,No Comment,private int rawFlag;,int rawFlag,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes,Field,No Comment,private long externalAttributes;,long externalAttributes,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment,Field,No Comment,private int alignment;,int alignment,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields,Field,No Comment,private ZipExtraField[] extraFields;,org.apache.commons.compress.archivers.zip.ZipExtraField[] extraFields,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra,Field,No Comment,private UnparseableExtraFieldData unparseableExtra;,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtra,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name,Field,No Comment,private String name;,java.lang.String name,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName,Field,No Comment,private byte[] rawName;,byte[] rawName,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.generalPurposeBit,Field,No Comment,private GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();,org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.localHeaderOffset,Field,No Comment,private long localHeaderOffset = OFFSET_UNKNOWN;,long localHeaderOffset,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.dataOffset,Field,No Comment,private long dataOffset = OFFSET_UNKNOWN;,long dataOffset,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isStreamContiguous,Field,No Comment,private boolean isStreamContiguous;,boolean isStreamContiguous,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.nameSource,Field,No Comment,private NameSource nameSource = NameSource.NAME;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource nameSource,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFieldFactory,Field,No Comment,"private final Function<ZipShort, ZipExtraField> extraFieldFactory;",java.util.function.Function extraFieldFactory,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.commentSource,Field,No Comment,private CommentSource commentSource = CommentSource.COMMENT;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource commentSource,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.diskNumberStart,Field,No Comment,private long diskNumberStart;,long diskNumberStart,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.lastModifiedDateSet,Field,No Comment,private boolean lastModifiedDateSet;,boolean lastModifiedDateSet,private 
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.time,Field,No Comment,private long time = -1;,long time,private 
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 20161219L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason,Field,No Comment,private final Feature reason;,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature reason,"private , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry,Field,No Comment,private final transient ZipArchiveEntry entry;,org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry,"private , final , transient "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 4112582948775420359L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.ENCRYPTION,Field,* The entry is encrypted.,"public static final Feature ENCRYPTION = new Feature(""encryption"");",org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature ENCRYPTION,"public , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.METHOD,Field,* The entry used an unsupported compression method.,"public static final Feature METHOD = new Feature(""compression method"");",org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature METHOD,"public , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR,Field,* The entry uses a data descriptor.,"public static final Feature DATA_DESCRIPTOR = new Feature(""data descriptor"");",org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature DATA_DESCRIPTOR,"public , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.SPLITTING,Field,* The archive uses splitting or spanning.\n         *\n         * @since 1.5,"public static final Feature SPLITTING = new Feature(""splitting"");",org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature SPLITTING,"public , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE,Field,* The archive contains entries with unknown compressed size for a compression method that doesn't support detection of the end of the compressed\n         * stream.\n         *\n         * @since 1.16,"public static final Feature UNKNOWN_COMPRESSED_SIZE = new Feature(""unknown compressed size"");",org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature UNKNOWN_COMPRESSED_SIZE,"public , static , final "
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.name,Field,No Comment,private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID,Field,No Comment,public static final ZipShort UCOM_ID = new ZipShort(0x6375);,org.apache.commons.compress.archivers.zip.ZipShort UCOM_ID,"public , static , final "
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.PREFIX,Field,No Comment,"private static final String PREFIX = ""parallelscatter"";",java.lang.String PREFIX,"private , static , final "
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.storeNum,Field,No Comment,private final AtomicInteger storeNum = new AtomicInteger();,java.util.concurrent.atomic.AtomicInteger storeNum,"private , final "
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.dir,Field,No Comment,private final Path dir;,java.nio.file.Path dir,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.PREAMBLE_GARBAGE_MAX_SIZE,Field,No Comment,public static final int PREAMBLE_GARBAGE_MAX_SIZE = 4096;,int PREAMBLE_GARBAGE_MAX_SIZE,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_LEN,Field,No Comment,private static final int LFH_LEN = 30;,int LFH_LEN,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH_LEN,Field,* local file header signature WORD version needed to extract SHORT general purpose bit flag SHORT compression method SHORT last mod file time SHORT last\n     * mod file date SHORT CRC-32 WORD compressed size WORD uncompressed size WORD file name length SHORT extra field length SHORT,private static final int CFH_LEN = 46;,int CFH_LEN,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_EXP_32,Field,* central file header signature WORD version made by SHORT version needed to extract SHORT general purpose bit flag SHORT compression method SHORT last mod\n     * file time SHORT last mod file date SHORT CRC-32 WORD compressed size WORD uncompressed size WORD file name length SHORT extra field length SHORT file\n     * comment length SHORT disk number start SHORT internal file attributes SHORT external file attributes WORD relative offset of local header WORD,private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;,long TWO_EXP_32,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER,Field,No Comment,"private static final String USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER = "" while reading a stored entry using data descriptor. Either the archive is broken"" + "" or it cannot be read using ZipArchiveInputStream and you must use ZipFile."" + "" A common cause for this is a ZIP archive containing a ZIP archive."" + "" See https://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile"";",java.lang.String USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH,Field,No Comment,private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();,byte[] LFH,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH,Field,No Comment,private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();,byte[] CFH,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD,Field,No Comment,private static final byte[] DD = ZipLong.DD_SIG.getBytes();,byte[] DD,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.APK_SIGNING_BLOCK_MAGIC,Field,No Comment,"private static final byte[] APK_SIGNING_BLOCK_MAGIC = { 'A', 'P', 'K', ' ', 'S', 'i', 'g', ' ', 'B', 'l', 'o', 'c', 'k', ' ', '4', '2' };",byte[] APK_SIGNING_BLOCK_MAGIC,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LONG_MAX,Field,No Comment,private static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);,java.math.BigInteger LONG_MAX,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding,Field,The ZIP encoding to use for file names and the file comment.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields,Field,Whether to look for and use Unicode extra fields.,private final boolean useUnicodeExtraFields;,boolean useUnicodeExtraFields,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf,Field,Inflater used for all deflated entries.,private final Inflater inf = new Inflater(true);,java.util.zip.Inflater inf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf,Field,Buffer used to read from the wrapped stream.,private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);,java.nio.ByteBuffer buf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current,Field,The entry that is currently being read.,private CurrentEntry current;,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed,Field,Whether the stream has been closed.,private boolean closed;,boolean closed,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory,Field,Whether the stream has reached the central directory - and thus found all entries.,private boolean hitCentralDirectory;,boolean hitCentralDirectory,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry,Field,* When reading a stored entry that uses the data descriptor this stream has to read the full entry and caches it. This is the cache.,private ByteArrayInputStream lastStoredEntry;,java.io.ByteArrayInputStream lastStoredEntry,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor,Field,"* Whether the stream will try to read STORED entries that use a data descriptor. Setting it to true means we will not stop reading an entry with the\n     * compressed size, instead we will stop reading an entry when a data descriptor is met (by finding the Data Descriptor Signature). This will completely\n     * break down in some cases - like JARs in WARs.\n     * <p>\n     * See also : https://issues.apache.org/jira/projects/COMPRESS/issues/COMPRESS-555\n     * https://github.com/apache/commons-compress/pull/137#issuecomment-690835644\n     * </p>",private final boolean allowStoredEntriesWithDataDescriptor;,boolean allowStoredEntriesWithDataDescriptor,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.uncompressedCount,Field,Count decompressed bytes for current entry,private long uncompressedCount;,long uncompressedCount,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipSplitSig,Field,Whether the stream will try to skip the ZIP split signature(08074B50) at the beginning *,private final boolean skipSplitSig;,boolean skipSplitSig,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf,Field,Cached buffers - must only be used locally in the class (COMPRESS-172 - reduce garbage collection).,private final byte[] lfhBuf = new byte[LFH_LEN];,byte[] lfhBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf,Field,No Comment,private final byte[] skipBuf = new byte[1024];,byte[] skipBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf,Field,No Comment,private final byte[] shortBuf = new byte[SHORT];,byte[] shortBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf,Field,No Comment,private final byte[] wordBuf = new byte[WORD];,byte[] wordBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf,Field,No Comment,private final byte[] twoDwordBuf = new byte[2 * DWORD];,byte[] twoDwordBuf,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead,Field,No Comment,private int entriesRead;,int entriesRead,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.entry,Field,* Current ZIP entry.,private final ZipArchiveEntry entry = new ZipArchiveEntry();,org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.hasDataDescriptor,Field,* Does the entry use a data descriptor?,private boolean hasDataDescriptor;,boolean hasDataDescriptor,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.usesZip64,Field,* Does the entry have a ZIP64 extended information extra field.,private boolean usesZip64;,boolean usesZip64,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.bytesRead,Field,* Number of bytes of entry content read by the client if the entry is STORED.,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.bytesReadFromStream,Field,* Number of bytes of entry content read from the stream.\n         * <p>\n         * This may be more than the actual entry's length as some stuff gets buffered up and needs to be pushed back when the end of the entry has been\n         * reached.\n         * </p>,private long bytesReadFromStream;,long bytesReadFromStream,private 
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.crc,Field,* The checksum calculated as the current entry is read.,private final CRC32 crc = new CRC32();,java.util.zip.CRC32 crc,"private , final "
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.inputStream,Field,* The input stream decompressing the data for shrunk and imploded entries.,private InputStream inputStream;,java.io.InputStream inputStream,private 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items,Field,No Comment,private final Queue<CompressedEntry> items = new ConcurrentLinkedQueue<>();,java.util.Queue items,"private , final "
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore,Field,No Comment,private final ScatterGatherBackingStore backingStore;,org.apache.commons.compress.parallel.ScatterGatherBackingStore backingStore,"private , final "
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor,Field,No Comment,private final StreamCompressor streamCompressor;,org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor,"private , final "
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.isClosed,Field,No Comment,private final AtomicBoolean isClosed = new AtomicBoolean();,java.util.concurrent.atomic.AtomicBoolean isClosed,"private , final "
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.zipEntryWriter,Field,No Comment,private ZipEntryWriter zipEntryWriter;,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter zipEntryWriter,private 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.zipArchiveEntryRequest,Field,No Comment,final ZipArchiveEntryRequest zipArchiveEntryRequest;,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest,final 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.crc,Field,No Comment,final long crc;,long crc,final 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.compressedSize,Field,No Comment,final long compressedSize;,long compressedSize,final 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.size,Field,No Comment,final long size;,long size,final 
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.itemsIterator,Field,No Comment,private final Iterator<CompressedEntry> itemsIterator;,java.util.Iterator itemsIterator,"private , final "
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.itemsIteratorData,Field,No Comment,private final InputStream itemsIteratorData;,java.io.InputStream itemsIteratorData,"private , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 20110809L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE,Field,No Comment,"static final String ARCHIVE_TOO_BIG_MESSAGE = ""Archive's size exceeds the limit of 4GByte."";",java.lang.String ARCHIVE_TOO_BIG_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.CENTRAL_DIRECTORY_DISK_NUMBER_TOO_BIG_MESSAGE,Field,No Comment,"static final String CENTRAL_DIRECTORY_DISK_NUMBER_TOO_BIG_MESSAGE = ""Number of the disk with the start of Central Directory exceeds the limit of 65535."";",java.lang.String CENTRAL_DIRECTORY_DISK_NUMBER_TOO_BIG_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.CENTRAL_DIRECTORY_SIZE_TOO_BIG_MESSAGE,Field,No Comment,"static final String CENTRAL_DIRECTORY_SIZE_TOO_BIG_MESSAGE = ""The size of the entire central directory exceeds the limit of 4GByte."";",java.lang.String CENTRAL_DIRECTORY_SIZE_TOO_BIG_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.DISK_NUMBER_TOO_BIG_MESSAGE,Field,No Comment,"static final String DISK_NUMBER_TOO_BIG_MESSAGE = ""Number of the disk of End Of Central Directory exceeds the limit of 65535."";",java.lang.String DISK_NUMBER_TOO_BIG_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.TOO_MANY_ENTRIES_MESSAGE,Field,No Comment,"static final String TOO_MANY_ENTRIES_MESSAGE = ""Archive contains more than 65535 entries."";",java.lang.String TOO_MANY_ENTRIES_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.Zip64RequiredException.TOO_MANY_ENTRIES_ON_DISK_MESSAGE,Field,No Comment,"static final String TOO_MANY_ENTRIES_ON_DISK_MESSAGE = ""Number of entries on this disk exceeds the limit of 65535."";",java.lang.String TOO_MANY_ENTRIES_ON_DISK_MESSAGE,"static , final "
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.BYTES,Field,*  The number of bytes used to represent an instance in binary form.,static final int BYTES = 8;,int BYTES,"static , final "
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO,Field,* Constant for a value of zero.,public static final ZipEightByteInteger ZERO = new ZipEightByteInteger(0);,org.apache.commons.compress.archivers.zip.ZipEightByteInteger ZERO,"public , static , final "
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.HIGHEST_BIT,Field,No Comment,private static final BigInteger HIGHEST_BIT = BigInteger.ONE.shiftLeft(63);,java.math.BigInteger HIGHEST_BIT,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value,Field,* The value is treated as unsigned.,private final long value;,long value,"private , final "
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID,Field,No Comment,private static final ZipShort HEADER_ID = new ZipShort(0xACC1);,org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID,"private , static , final "
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData,Field,No Comment,private byte[] localFileData;,byte[] localFileData,private 
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData,Field,No Comment,private byte[] centralDirectoryData;,byte[] centralDirectoryData,private 
org.apache.commons.compress.archivers.zip.StreamCompressor.DEFLATER_BLOCK_SIZE,Field,* Apparently Deflater.setInput gets slowed down a lot on Sun JVMs when it gets handed a huge buffer. See\n     * https://issues.apache.org/bugzilla/show_bug.cgi?id=45396\n     *\n     * Using a buffer size of {@value} bytes proved to be a good compromise,private static final int DEFLATER_BLOCK_SIZE = 8192;,int DEFLATER_BLOCK_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE,Field,No Comment,private static final int BUFFER_SIZE = 4096;,int BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.archivers.zip.StreamCompressor.deflater,Field,No Comment,private final Deflater deflater;,java.util.zip.Deflater deflater,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor.crc,Field,No Comment,private final CRC32 crc = new CRC32();,java.util.zip.CRC32 crc,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry,Field,No Comment,private long writtenToOutputStreamForLastEntry;,long writtenToOutputStreamForLastEntry,private 
org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength,Field,No Comment,private long sourcePayloadLength;,long sourcePayloadLength,private 
org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream,Field,No Comment,private long totalWrittenToOutputStream;,long totalWrittenToOutputStream,private 
org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer,Field,No Comment,private final byte[] outputBuffer = new byte[BUFFER_SIZE];,byte[] outputBuffer,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf,Field,No Comment,private final byte[] readerBuf = new byte[BUFFER_SIZE];,byte[] readerBuf,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.raf,Field,No Comment,private final DataOutput raf;,java.io.DataOutput raf,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.os,Field,No Comment,private final OutputStream os;,java.io.OutputStream os,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.bs,Field,No Comment,private final ScatterGatherBackingStore bs;,org.apache.commons.compress.parallel.ScatterGatherBackingStore bs,"private , final "
org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.EMPTY_PATH_ARRAY,Field,No Comment,private static final Path[] EMPTY_PATH_ARRAY = {};,java.nio.file.Path[] EMPTY_PATH_ARRAY,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.ZIP_SPLIT_SIGNATURE_LENGTH,Field,No Comment,private static final int ZIP_SPLIT_SIGNATURE_LENGTH = 4;,int ZIP_SPLIT_SIGNATURE_LENGTH,"private , static , final "
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.zipSplitSignatureByteBuffer,Field,No Comment,private final ByteBuffer zipSplitSignatureByteBuffer = ByteBuffer.allocate(ZIP_SPLIT_SIGNATURE_LENGTH);,java.nio.ByteBuffer zipSplitSignatureByteBuffer,"private , final "
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 20200123L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.consumer,Field,No Comment,private final CloseableConsumer consumer;,org.apache.commons.compress.archivers.examples.CloseableConsumer consumer,"private , final "
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.closeable,Field,No Comment,private Closeable closeable;,java.io.Closeable closeable,private 
org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER,Field,* Closes the passed in Closeable immediately.,CloseableConsumer CLOSING_CONSUMER = Closeable::close;,org.apache.commons.compress.archivers.examples.CloseableConsumer CLOSING_CONSUMER,default
org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER,Field,* Ignores the passed in Closeable.,CloseableConsumer NULL_CONSUMER = c -> {\n};,org.apache.commons.compress.archivers.examples.CloseableConsumer NULL_CONSUMER,default
org.apache.commons.compress.archivers.examples.Archiver.EMPTY_FileVisitOption,Field,* No {@link FileVisitOption}.,public static final EnumSet<FileVisitOption> EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);,java.util.EnumSet EMPTY_FileVisitOption,"public , static , final "
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.outputStream,Field,No Comment,private final O outputStream;,org.apache.commons.compress.archivers.ArchiveOutputStream outputStream,"private , final "
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.directory,Field,No Comment,private final Path directory;,java.nio.file.Path directory,"private , final "
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.linkOptions,Field,No Comment,private final LinkOption[] linkOptions;,java.nio.file.LinkOption[] linkOptions,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.HEADER,Field,The header for each entry,"public static final String HEADER = ""!<arch>\n"";",java.lang.String HEADER,"public , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.TRAILER,Field,The trailer for each entry {@code 0x60 0x0A},"public static final String TRAILER = ""`\012"";",java.lang.String TRAILER,"public , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.DEFAULT_MODE,Field,= (octal) 0100644,private static final int DEFAULT_MODE = 33188;,int DEFAULT_MODE,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.name,Field,* SVR4/GNU adds a trailing / to names; BSD does not. They also vary in how names longer than 16 characters are represented. (Not yet fully supported by\n     * this implementation),private final String name;,java.lang.String name,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId,Field,No Comment,private final int userId;,int userId,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId,Field,No Comment,private final int groupId;,int groupId,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode,Field,No Comment,private final int mode;,int mode,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified,Field,No Comment,private final long lastModified;,long lastModified,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveEntry.length,Field,No Comment,private final long length;,long length,"private , final "
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.PAD,Field,No Comment,private static final char PAD = '\n';,char PAD,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.SPACE,Field,No Comment,private static final char SPACE = ' ';,char SPACE,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_ERROR,Field,Fail if a long file name is required in the archive.,public static final int LONGFILE_ERROR = 0;,int LONGFILE_ERROR,"public , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.LONGFILE_BSD,Field,BSD ar extensions are used to store long file names in the archive.,public static final int LONGFILE_BSD = 1;,int LONGFILE_BSD,"public , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset,Field,No Comment,private long entryOffset;,long entryOffset,private 
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.headerPlus,Field,No Comment,private int headerPlus;,int headerPlus,private 
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry,Field,No Comment,private ArArchiveEntry prevEntry;,org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry,private 
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntryOpen,Field,No Comment,private boolean prevEntryOpen;,boolean prevEntryOpen,private 
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode,Field,No Comment,private int longFileMode = LONGFILE_ERROR;,int longFileMode,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_OFFSET,Field,offsets and length of meta data parts,private static final int NAME_OFFSET = 0;,int NAME_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_LEN,Field,No Comment,private static final int NAME_LEN = 16;,int NAME_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_OFFSET,Field,No Comment,private static final int LAST_MODIFIED_OFFSET = NAME_LEN;,int LAST_MODIFIED_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_LEN,Field,No Comment,private static final int LAST_MODIFIED_LEN = 12;,int LAST_MODIFIED_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.USER_ID_OFFSET,Field,No Comment,private static final int USER_ID_OFFSET = LAST_MODIFIED_OFFSET + LAST_MODIFIED_LEN;,int USER_ID_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.USER_ID_LEN,Field,No Comment,private static final int USER_ID_LEN = 6;,int USER_ID_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GROUP_ID_OFFSET,Field,No Comment,private static final int GROUP_ID_OFFSET = USER_ID_OFFSET + USER_ID_LEN;,int GROUP_ID_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GROUP_ID_LEN,Field,No Comment,private static final int GROUP_ID_LEN = 6;,int GROUP_ID_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_OFFSET,Field,No Comment,private static final int FILE_MODE_OFFSET = GROUP_ID_OFFSET + GROUP_ID_LEN;,int FILE_MODE_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_LEN,Field,No Comment,private static final int FILE_MODE_LEN = 8;,int FILE_MODE_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_OFFSET,Field,No Comment,private static final int LENGTH_OFFSET = FILE_MODE_OFFSET + FILE_MODE_LEN;,int LENGTH_OFFSET,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_LEN,Field,No Comment,private static final int LENGTH_LEN = 10;,int LENGTH_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX,Field,No Comment,"static final String BSD_LONGNAME_PREFIX = ""#1/"";",java.lang.String BSD_LONGNAME_PREFIX,"static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN,Field,No Comment,private static final int BSD_LONGNAME_PREFIX_LEN = BSD_LONGNAME_PREFIX.length();,int BSD_LONGNAME_PREFIX_LEN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PATTERN,Field,No Comment,"private static final Pattern BSD_LONGNAME_PATTERN = Pattern.compile(""^"" + BSD_LONGNAME_PREFIX + ""\\d+"");",java.util.regex.Pattern BSD_LONGNAME_PATTERN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_STRING_TABLE_NAME,Field,No Comment,"private static final String GNU_STRING_TABLE_NAME = ""//"";",java.lang.String GNU_STRING_TABLE_NAME,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.GNU_LONGNAME_PATTERN,Field,No Comment,"private static final Pattern GNU_LONGNAME_PATTERN = Pattern.compile(""^/\\d+"");",java.util.regex.Pattern GNU_LONGNAME_PATTERN,"private , static , final "
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset,Field,No Comment,private long offset;,long offset,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed,Field,No Comment,private boolean closed;,boolean closed,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry,Field,"* If getNextEntry has been called, the entry metadata is stored in currentEntry.",private ArArchiveEntry currentEntry;,org.apache.commons.compress.archivers.ar.ArArchiveEntry currentEntry,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer,Field,Storage area for extra long names (GNU ar).,private byte[] namebuffer;,byte[] namebuffer,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset,Field,* The offset where the current entry started. -1 if no entry has been called,private long entryOffset = -1;,long entryOffset,private 
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.metaData,Field,Cached buffer for meta data - must only be used locally in the class (COMPRESS-172 - reduce garbage collection).,private final byte[] metaData = new byte[NAME_LEN + LAST_MODIFIED_LEN + USER_ID_LEN + GROUP_ID_LEN + FILE_MODE_LEN + LENGTH_LEN];,byte[] metaData,"private , final "
org.apache.commons.compress.archivers.EntryStreamOffsets.OFFSET_UNKNOWN,Field,* Indicates that the offset is unknown.,long OFFSET_UNKNOWN = -1;,long OFFSET_UNKNOWN,default
org.apache.commons.compress.archivers.Lister.FACTORY,Field,No Comment,private static final ArchiveStreamFactory FACTORY = ArchiveStreamFactory.DEFAULT;,org.apache.commons.compress.archivers.ArchiveStreamFactory FACTORY,"private , static , final "
org.apache.commons.compress.archivers.Lister.quiet,Field,No Comment,private final boolean quiet;,boolean quiet,"private , final "
org.apache.commons.compress.archivers.Lister.args,Field,No Comment,private final String[] args;,java.lang.String[] args,"private , final "
org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber,Field,No Comment,int archiverVersionNumber;,int archiverVersionNumber,default
org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract,Field,No Comment,int minVersionToExtract;,int minVersionToExtract,default
org.apache.commons.compress.archivers.arj.MainHeader.hostOS,Field,No Comment,int hostOS;,int hostOS,default
org.apache.commons.compress.archivers.arj.MainHeader.arjFlags,Field,No Comment,int arjFlags;,int arjFlags,default
org.apache.commons.compress.archivers.arj.MainHeader.securityVersion,Field,No Comment,int securityVersion;,int securityVersion,default
org.apache.commons.compress.archivers.arj.MainHeader.fileType,Field,No Comment,int fileType;,int fileType,default
org.apache.commons.compress.archivers.arj.MainHeader.reserved,Field,No Comment,int reserved;,int reserved,default
org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated,Field,No Comment,int dateTimeCreated;,int dateTimeCreated,default
org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified,Field,No Comment,int dateTimeModified;,int dateTimeModified,default
org.apache.commons.compress.archivers.arj.MainHeader.archiveSize,Field,No Comment,long archiveSize;,long archiveSize,default
org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition,Field,No Comment,int securityEnvelopeFilePosition;,int securityEnvelopeFilePosition,default
org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition,Field,No Comment,int fileSpecPosition;,int fileSpecPosition,default
org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength,Field,No Comment,int securityEnvelopeLength;,int securityEnvelopeLength,default
org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion,Field,No Comment,int encryptionVersion;,int encryptionVersion,default
org.apache.commons.compress.archivers.arj.MainHeader.lastChapter,Field,No Comment,int lastChapter;,int lastChapter,default
org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor,Field,No Comment,int arjProtectionFactor;,int arjProtectionFactor,default
org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2,Field,No Comment,int arjFlags2;,int arjFlags2,default
org.apache.commons.compress.archivers.arj.MainHeader.name,Field,No Comment,String name;,java.lang.String name,default
org.apache.commons.compress.archivers.arj.MainHeader.comment,Field,No Comment,String comment;,java.lang.String comment,default
org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes,Field,No Comment,byte[] extendedHeaderBytes;,byte[] extendedHeaderBytes,default
org.apache.commons.compress.archivers.arj.MainHeader$Flags.GARBLED,Field,No Comment,static final int GARBLED = 0x01;,int GARBLED,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.OLD_SECURED_NEW_ANSI_PAGE,Field,No Comment,static final int OLD_SECURED_NEW_ANSI_PAGE = 0x02;,int OLD_SECURED_NEW_ANSI_PAGE,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.VOLUME,Field,No Comment,static final int VOLUME = 0x04;,int VOLUME,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.ARJPROT,Field,No Comment,static final int ARJPROT = 0x08;,int ARJPROT,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.PATHSYM,Field,No Comment,static final int PATHSYM = 0x10;,int PATHSYM,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.BACKUP,Field,No Comment,static final int BACKUP = 0x20;,int BACKUP,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.SECURED,Field,No Comment,static final int SECURED = 0x40;,int SECURED,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$Flags.ALTNAME,Field,No Comment,static final int ALTNAME = 0x80;,int ALTNAME,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.MS_DOS,Field,No Comment,static final int MS_DOS = 0;,int MS_DOS,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.PRIMOS,Field,No Comment,static final int PRIMOS = 1;,int PRIMOS,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.UNIX,Field,No Comment,static final int UNIX = 2;,int UNIX,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.AMIGA,Field,No Comment,static final int AMIGA = 3;,int AMIGA,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.MAC_OS,Field,No Comment,static final int MAC_OS = 4;,int MAC_OS,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.OS2,Field,No Comment,static final int OS2 = 5;,int OS2,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.APPLE_GS,Field,No Comment,static final int APPLE_GS = 6;,int APPLE_GS,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.ATARI_ST,Field,No Comment,static final int ATARI_ST = 7;,int ATARI_ST,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.NeXT,Field,No Comment,static final int NeXT = 8;,int NeXT,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.VAX_VMS,Field,No Comment,static final int VAX_VMS = 9;,int VAX_VMS,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.WIN95,Field,No Comment,static final int WIN95 = 10;,int WIN95,"static , final "
org.apache.commons.compress.archivers.arj.MainHeader$HostOS.WIN32,Field,No Comment,static final int WIN32 = 11;,int WIN32,"static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader,Field,No Comment,private final LocalFileHeader localFileHeader;,org.apache.commons.compress.archivers.arj.LocalFileHeader localFileHeader,"private , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.DOS,Field,* Constant value {@value}.,public static final int DOS = 0;,int DOS,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.PRIMOS,Field,* Constant value {@value}.,public static final int PRIMOS = 1;,int PRIMOS,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.UNIX,Field,* Constant value {@value}.,public static final int UNIX = 2;,int UNIX,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.AMIGA,Field,* Constant value {@value}.,public static final int AMIGA = 3;,int AMIGA,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.MAC_OS,Field,* Constant value {@value}.,public static final int MAC_OS = 4;,int MAC_OS,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.OS_2,Field,* Constant value {@value}.,public static final int OS_2 = 5;,int OS_2,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.APPLE_GS,Field,* Constant value {@value}.,public static final int APPLE_GS = 6;,int APPLE_GS,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.ATARI_ST,Field,* Constant value {@value}.,public static final int ATARI_ST = 7;,int ATARI_ST,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.NEXT,Field,* Constant value {@value}.,public static final int NEXT = 8;,int NEXT,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.VAX_VMS,Field,* Constant value {@value}.,public static final int VAX_VMS = 9;,int VAX_VMS,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.WIN95,Field,* Constant value {@value}.,public static final int WIN95 = 10;,int WIN95,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.WIN32,Field,* Constant value {@value}.,public static final int WIN32 = 11;,int WIN32,"public , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ENCODING_NAME,Field,No Comment,"private static final String ENCODING_NAME = ""CP437"";",java.lang.String ENCODING_NAME,"private , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_1,Field,No Comment,private static final int ARJ_MAGIC_1 = 0x60;,int ARJ_MAGIC_1,"private , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ARJ_MAGIC_2,Field,No Comment,private static final int ARJ_MAGIC_2 = 0xEA;,int ARJ_MAGIC_2,"private , static , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.dis,Field,No Comment,private final DataInputStream dis;,java.io.DataInputStream dis,"private , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader,Field,No Comment,private final MainHeader mainHeader;,org.apache.commons.compress.archivers.arj.MainHeader mainHeader,"private , final "
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader,Field,No Comment,private LocalFileHeader currentLocalFileHeader;,org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader,private 
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream,Field,No Comment,private InputStream currentInputStream;,java.io.InputStream currentInputStream,private 
org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber,Field,No Comment,int archiverVersionNumber;,int archiverVersionNumber,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract,Field,No Comment,int minVersionToExtract;,int minVersionToExtract,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS,Field,No Comment,int hostOS;,int hostOS,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags,Field,No Comment,int arjFlags;,int arjFlags,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.method,Field,No Comment,int method;,int method,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType,Field,No Comment,int fileType;,int fileType,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved,Field,No Comment,int reserved;,int reserved,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified,Field,No Comment,int dateTimeModified;,int dateTimeModified,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize,Field,No Comment,long compressedSize;,long compressedSize,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize,Field,No Comment,long originalSize;,long originalSize,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32,Field,No Comment,long originalCrc32;,long originalCrc32,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition,Field,No Comment,int fileSpecPosition;,int fileSpecPosition,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode,Field,No Comment,int fileAccessMode;,int fileAccessMode,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter,Field,No Comment,int firstChapter;,int firstChapter,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter,Field,No Comment,int lastChapter;,int lastChapter,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition,Field,No Comment,int extendedFilePosition;,int extendedFilePosition,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed,Field,No Comment,int dateTimeAccessed;,int dateTimeAccessed,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated,Field,No Comment,int dateTimeCreated;,int dateTimeCreated,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes,Field,No Comment,int originalSizeEvenForVolumes;,int originalSizeEvenForVolumes,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.name,Field,No Comment,String name;,java.lang.String name,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.comment,Field,No Comment,String comment;,java.lang.String comment,default
org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders,Field,No Comment,byte[][] extendedHeaders;,byte[][] extendedHeaders,default
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.BINARY,Field,No Comment,static final int BINARY = 0;,int BINARY,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.SEVEN_BIT_TEXT,Field,No Comment,static final int SEVEN_BIT_TEXT = 1;,int SEVEN_BIT_TEXT,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.COMMENT_HEADER,Field,No Comment,static final int COMMENT_HEADER = 2;,int COMMENT_HEADER,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.DIRECTORY,Field,No Comment,static final int DIRECTORY = 3;,int DIRECTORY,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.VOLUME_LABEL,Field,No Comment,static final int VOLUME_LABEL = 4;,int VOLUME_LABEL,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.CHAPTER_LABEL,Field,No Comment,static final int CHAPTER_LABEL = 5;,int CHAPTER_LABEL,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.GARBLED,Field,No Comment,static final int GARBLED = 0x01;,int GARBLED,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.VOLUME,Field,No Comment,static final int VOLUME = 0x04;,int VOLUME,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.EXTFILE,Field,No Comment,static final int EXTFILE = 0x08;,int EXTFILE,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.PATHSYM,Field,No Comment,static final int PATHSYM = 0x10;,int PATHSYM,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.BACKUP,Field,No Comment,static final int BACKUP = 0x20;,int BACKUP,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.STORED,Field,No Comment,static final int STORED = 0;,int STORED,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.COMPRESSED_MOST,Field,No Comment,static final int COMPRESSED_MOST = 1;,int COMPRESSED_MOST,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.COMPRESSED,Field,No Comment,static final int COMPRESSED = 2;,int COMPRESSED,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.COMPRESSED_FASTER,Field,No Comment,static final int COMPRESSED_FASTER = 3;,int COMPRESSED_FASTER,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.COMPRESSED_FASTEST,Field,No Comment,static final int COMPRESSED_FASTEST = 4;,int COMPRESSED_FASTEST,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.NO_DATA_NO_CRC,Field,No Comment,static final int NO_DATA_NO_CRC = 8;,int NO_DATA_NO_CRC,"static , final "
org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.NO_DATA,Field,No Comment,static final int NO_DATA = 9;,int NO_DATA,"static , final "
org.apache.commons.compress.archivers.ArchiveEntry.SIZE_UNKNOWN,Field,* Special value ({@value}) indicating that the size is unknown.,long SIZE_UNKNOWN = -1;,long SIZE_UNKNOWN,default
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUFFER_SIZE,Field,No Comment,private static final int SMALL_BUFFER_SIZE = 256;,int SMALL_BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf,Field,No Comment,private final byte[] smallBuf = new byte[SMALL_BUFFER_SIZE];,byte[] smallBuf,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordBuffer,Field,The buffer to store the TAR header. *,private final byte[] recordBuffer;,byte[] recordBuffer,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize,Field,The size of a block.,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.atEof,Field,True if stream is at EOF.,private boolean atEof;,boolean atEof,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize,Field,Size of the current .,private long entrySize;,long entrySize,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset,Field,How far into the entry the stream is at.,private long entryOffset;,long entryOffset,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.sparseInputStreams,Field,Input streams for reading sparse entries. *,private List<InputStream> sparseInputStreams;,java.util.List sparseInputStreams,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currentSparseInputStreamIndex,Field,The index of current input stream being read when reading sparse entries.,private int currentSparseInputStreamIndex;,int currentSparseInputStreamIndex,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry,Field,The meta-data about the current entry.,private TarArchiveEntry currEntry;,org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding,Field,The encoding of the file.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders,Field,The global PAX header.,"private Map<String, String> globalPaxHeaders = new HashMap<>();",java.util.Map globalPaxHeaders,private 
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalSparseHeaders,Field,"The global sparse headers, this is only used in PAX Format 0.X.",private final List<TarArchiveStructSparse> globalSparseHeaders = new ArrayList<>();,java.util.List globalSparseHeaders,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.lenient,Field,No Comment,private final boolean lenient;,boolean lenient,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_ERROR,Field,* Fail if a long file name is required in the archive.,public static final int LONGFILE_ERROR = 0;,int LONGFILE_ERROR,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_TRUNCATE,Field,* Long paths will be truncated in the archive.,public static final int LONGFILE_TRUNCATE = 1;,int LONGFILE_TRUNCATE,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_GNU,Field,* GNU tar extensions are used to store long file names in the archive.,public static final int LONGFILE_GNU = 2;,int LONGFILE_GNU,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_POSIX,Field,* POSIX/PAX extensions are used to store long file names in the archive.,public static final int LONGFILE_POSIX = 3;,int LONGFILE_POSIX,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_ERROR,Field,* Fail if a big number (for example size &gt; 8GiB) is required in the archive.,public static final int BIGNUMBER_ERROR = 0;,int BIGNUMBER_ERROR,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_STAR,Field,* star/GNU tar/BSD tar extensions are used to store big number in the archive.,public static final int BIGNUMBER_STAR = 1;,int BIGNUMBER_STAR,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BIGNUMBER_POSIX,Field,* POSIX/PAX extensions are used to store big numbers in the archive.,public static final int BIGNUMBER_POSIX = 2;,int BIGNUMBER_POSIX,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.RECORD_SIZE,Field,No Comment,private static final int RECORD_SIZE = 512;,int RECORD_SIZE,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII,Field,No Comment,private static final ZipEncoding ASCII = ZipEncodingHelper.getZipEncoding(StandardCharsets.US_ASCII);,org.apache.commons.compress.archivers.zip.ZipEncoding ASCII,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.BLOCK_SIZE_UNSPECIFIED,Field,No Comment,private static final int BLOCK_SIZE_UNSPECIFIED = -511;,int BLOCK_SIZE_UNSPECIFIED,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize,Field,No Comment,private long currSize;,long currSize,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName,Field,No Comment,private String currName;,java.lang.String currName,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes,Field,No Comment,private long currBytes;,long currBytes,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf,Field,No Comment,private final byte[] recordBuf;,byte[] recordBuf,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode,Field,No Comment,private int longFileMode = LONGFILE_ERROR;,int longFileMode,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode,Field,No Comment,private int bigNumberMode = BIGNUMBER_ERROR;,int bigNumberMode,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten,Field,No Comment,private long recordsWritten;,long recordsWritten,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock,Field,No Comment,private final int recordsPerBlock;,int recordsPerBlock,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry,Field,* Indicates if putArchiveEntry has been called without closeArchiveEntry,private boolean haveUnclosedEntry;,boolean haveUnclosedEntry,private 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.countingOut,Field,No Comment,private final CountingOutputStream countingOut;,org.apache.commons.io.output.CountingOutputStream countingOut,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding,Field,No Comment,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.charsetName,Field,* The provided encoding (for unit tests).,final String charsetName;,java.lang.String charsetName,final 
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames,Field,No Comment,private boolean addPaxHeadersForNonAsciiNames;,boolean addPaxHeadersForNonAsciiNames,private 
org.apache.commons.compress.archivers.tar.TarFile.SMALL_BUFFER_SIZE,Field,No Comment,private static final int SMALL_BUFFER_SIZE = 256;,int SMALL_BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.archivers.tar.TarFile.smallBuf,Field,No Comment,private final byte[] smallBuf = new byte[SMALL_BUFFER_SIZE];,byte[] smallBuf,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.archive,Field,No Comment,private final SeekableByteChannel archive;,java.nio.channels.SeekableByteChannel archive,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.zipEncoding,Field,* The encoding of the tar file,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.entries,Field,No Comment,private final LinkedList<TarArchiveEntry> entries = new LinkedList<>();,java.util.LinkedList entries,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.blockSize,Field,No Comment,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.lenient,Field,No Comment,private final boolean lenient;,boolean lenient,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.recordSize,Field,No Comment,private final int recordSize;,int recordSize,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.recordBuffer,Field,No Comment,private final ByteBuffer recordBuffer;,java.nio.ByteBuffer recordBuffer,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.globalSparseHeaders,Field,"the global sparse headers, this is only used in PAX Format 0.X",private final List<TarArchiveStructSparse> globalSparseHeaders = new ArrayList<>();,java.util.List globalSparseHeaders,"private , final "
org.apache.commons.compress.archivers.tar.TarFile.hasHitEOF,Field,No Comment,private boolean hasHitEOF;,boolean hasHitEOF,private 
org.apache.commons.compress.archivers.tar.TarFile.currEntry,Field,* The meta-data about the current entry,private TarArchiveEntry currEntry;,org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry,private 
org.apache.commons.compress.archivers.tar.TarFile.globalPaxHeaders,Field,the global PAX header,"private Map<String, String> globalPaxHeaders = new HashMap<>();",java.util.Map globalPaxHeaders,private 
org.apache.commons.compress.archivers.tar.TarFile.sparseInputStreams,Field,No Comment,"private final Map<String, List<InputStream>> sparseInputStreams = new HashMap<>();",java.util.Map sparseInputStreams,"private , final "
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.entry,Field,No Comment,private final TarArchiveEntry entry;,org.apache.commons.compress.archivers.tar.TarArchiveEntry entry,"private , final "
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.entryOffset,Field,No Comment,private long entryOffset;,long entryOffset,private 
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex,Field,No Comment,private int currentSparseInputStreamIndex;,int currentSparseInputStreamIndex,private 
org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_RCDSIZE,Field,Default record size,int DEFAULT_RCDSIZE = 512;,int DEFAULT_RCDSIZE,default
org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_BLKSIZE,Field,Default block size,int DEFAULT_BLKSIZE = DEFAULT_RCDSIZE * 20;,int DEFAULT_BLKSIZE,default
org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_OLDGNU,Field,* GNU format as per before tar 1.12.,int FORMAT_OLDGNU = 2;,int FORMAT_OLDGNU,default
org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_POSIX,Field,* Pure POSIX format.,int FORMAT_POSIX = 3;,int FORMAT_POSIX,default
org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_XSTAR,Field,* xstar format used by Jörg Schilling's star.,int FORMAT_XSTAR = 4;,int FORMAT_XSTAR,default
org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN,Field,* The length of the name field in a header buffer.,int NAMELEN = 100;,int NAMELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.MODELEN,Field,* The length of the mode field in a header buffer.,int MODELEN = 8;,int MODELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.UIDLEN,Field,* The length of the user id field in a header buffer.,int UIDLEN = 8;,int UIDLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.GIDLEN,Field,* The length of the group id field in a header buffer.,int GIDLEN = 8;,int GIDLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.MAXID,Field,"* The maximum value of gid/uid in a tar archive which can be expressed in octal char notation (that's 7 sevens, octal).",long MAXID = 07777777L;,long MAXID,default
org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN,Field,* The length of the checksum field in a header buffer.,int CHKSUMLEN = 8;,int CHKSUMLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET,Field,* Offset of the checksum field within header record.\n     *\n     * @since 1.5,int CHKSUM_OFFSET = 148;,int CHKSUM_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.SIZELEN,Field,* The length of the size field in a header buffer. Includes the trailing space or NUL.,int SIZELEN = 12;,int SIZELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.MAXSIZE,Field,"* The maximum size of a file in a tar archive which can be expressed in octal char notation (that's 11 sevens, octal).",long MAXSIZE = 077777777777L;,long MAXSIZE,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_OFFSET,Field,Offset of start of magic field within header record,int MAGIC_OFFSET = 257;,int MAGIC_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGICLEN,Field,* The length of the magic field in a header buffer.,int MAGICLEN = 6;,int MAGICLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSION_OFFSET,Field,Offset of start of magic field within header record,int VERSION_OFFSET = 263;,int VERSION_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSIONLEN,Field,"* Previously this was regarded as part of ""magic"" field, but it is separate.",int VERSIONLEN = 2;,int VERSIONLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.MODTIMELEN,Field,* The length of the modification time field in a header buffer.,int MODTIMELEN = 12;,int MODTIMELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.UNAMELEN,Field,* The length of the user name field in a header buffer.,int UNAMELEN = 32;,int UNAMELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.GNAMELEN,Field,* The length of the group name field in a header buffer.,int GNAMELEN = 32;,int GNAMELEN,default
org.apache.commons.compress.archivers.tar.TarConstants.DEVLEN,Field,* The length of each of the device fields (major and minor) in a header buffer.,int DEVLEN = 8;,int DEVLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN,Field,* Length of the prefix field.,int PREFIXLEN = 155;,int PREFIXLEN,default
org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_GNU,Field,* The length of the access time field in an old GNU header buffer.,int ATIMELEN_GNU = 12;,int ATIMELEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_GNU,Field,* The length of the created time field in an old GNU header buffer.,int CTIMELEN_GNU = 12;,int CTIMELEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.OFFSETLEN_GNU,Field,* The length of the multivolume start offset field in an old GNU header buffer.,int OFFSETLEN_GNU = 12;,int OFFSETLEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.LONGNAMESLEN_GNU,Field,* The length of the long names field in an old GNU header buffer.,int LONGNAMESLEN_GNU = 4;,int LONGNAMESLEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.PAD2LEN_GNU,Field,* The length of the padding field in an old GNU header buffer.,int PAD2LEN_GNU = 1;,int PAD2LEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU,Field,* The sum of the length of all sparse headers in an old GNU header buffer.,int SPARSELEN_GNU = 96;,int SPARSELEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU,Field,* The length of the is extension field in an old GNU header buffer.,int ISEXTENDEDLEN_GNU = 1;,int ISEXTENDEDLEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.REALSIZELEN_GNU,Field,* The length of the real size field in an old GNU header buffer.,int REALSIZELEN_GNU = 12;,int REALSIZELEN_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_OFFSET_LEN,Field,* The length of offset in struct sparse\n     *\n     * @since 1.20,int SPARSE_OFFSET_LEN = 12;,int SPARSE_OFFSET_LEN,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_NUMBYTES_LEN,Field,* The length of numbytes in struct sparse\n     *\n     * @since 1.20,int SPARSE_NUMBYTES_LEN = 12;,int SPARSE_NUMBYTES_LEN,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_HEADERS_IN_OLDGNU_HEADER,Field,* The number of sparse headers in an old GNU header\n     *\n     * @since 1.20,int SPARSE_HEADERS_IN_OLDGNU_HEADER = 4;,int SPARSE_HEADERS_IN_OLDGNU_HEADER,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_HEADERS_IN_EXTENSION_HEADER,Field,* The number of sparse headers in an extension header\n     *\n     * @since 1.20,int SPARSE_HEADERS_IN_EXTENSION_HEADER = 21;,int SPARSE_HEADERS_IN_EXTENSION_HEADER,default
org.apache.commons.compress.archivers.tar.TarConstants.SPARSELEN_GNU_SPARSE,Field,* The sum of the length of all sparse headers in a sparse header buffer.,int SPARSELEN_GNU_SPARSE = 504;,int SPARSELEN_GNU_SPARSE,default
org.apache.commons.compress.archivers.tar.TarConstants.ISEXTENDEDLEN_GNU_SPARSE,Field,* The length of the is extension field in a sparse header buffer.,int ISEXTENDEDLEN_GNU_SPARSE = 1;,int ISEXTENDEDLEN_GNU_SPARSE,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_OLDNORM,Field,"* LF_ constants represent the ""link flag"" of an entry, or more commonly, the ""entry type"". This is the ""old way"" of indicating a normal file.",byte LF_OLDNORM = 0;,byte LF_OLDNORM,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_OFFSET,Field,"* Offset inside the header for the ""link flag"" field.\n     *\n     * @since 1.22\n     * @see TarArchiveEntry",int LF_OFFSET = 156;,int LF_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_NORMAL,Field,* Normal file type.,byte LF_NORMAL = (byte) '0';,byte LF_NORMAL,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_LINK,Field,* Link file type.,byte LF_LINK = (byte) '1';,byte LF_LINK,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_SYMLINK,Field,* Symbolic link file type.,byte LF_SYMLINK = (byte) '2';,byte LF_SYMLINK,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_CHR,Field,* Character device file type.,byte LF_CHR = (byte) '3';,byte LF_CHR,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_BLK,Field,* Block device file type.,byte LF_BLK = (byte) '4';,byte LF_BLK,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_DIR,Field,* Directory file type.,byte LF_DIR = (byte) '5';,byte LF_DIR,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_FIFO,Field,* FIFO (pipe) file type.,byte LF_FIFO = (byte) '6';,byte LF_FIFO,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_CONTIG,Field,* Contiguous file type.,byte LF_CONTIG = (byte) '7';,byte LF_CONTIG,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGLINK,Field,* Identifies the *next* file on the tape as having a long link name.,byte LF_GNUTYPE_LONGLINK = (byte) 'K';,byte LF_GNUTYPE_LONGLINK,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGNAME,Field,* Identifies the *next* file on the tape as having a long name.,byte LF_GNUTYPE_LONGNAME = (byte) 'L';,byte LF_GNUTYPE_LONGNAME,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_SPARSE,Field,* Sparse file type.\n     *\n     * @since 1.1.1,byte LF_GNUTYPE_SPARSE = (byte) 'S';,byte LF_GNUTYPE_SPARSE,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_LC,Field,* Identifies the entry as a Pax extended header.\n     *\n     * @since 1.1,byte LF_PAX_EXTENDED_HEADER_LC = (byte) 'x';,byte LF_PAX_EXTENDED_HEADER_LC,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_UC,Field,* Identifies the entry as a Pax extended header (SunOS tar -E).\n     *\n     * @since 1.1,byte LF_PAX_EXTENDED_HEADER_UC = (byte) 'X';,byte LF_PAX_EXTENDED_HEADER_UC,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_GLOBAL_EXTENDED_HEADER,Field,* Identifies the entry as a Pax global extended header.\n     *\n     * @since 1.1,byte LF_PAX_GLOBAL_EXTENDED_HEADER = (byte) 'g';,byte LF_PAX_GLOBAL_EXTENDED_HEADER,default
org.apache.commons.compress.archivers.tar.TarConstants.LF_MULTIVOLUME,Field,* Identifies the entry as a multi-volume past volume #0\n     *\n     * @since 1.22,byte LF_MULTIVOLUME = (byte) 'M';,byte LF_MULTIVOLUME,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_POSIX,Field,"* The magic tag representing a POSIX tar archive.\n     * <p>\n     * ""ustar"" and a null.\n     * </p>","String MAGIC_POSIX = ""ustar\0"";",java.lang.String MAGIC_POSIX,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSION_POSIX,Field,No Comment,"String VERSION_POSIX = ""00"";",java.lang.String VERSION_POSIX,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_GNU,Field,* The magic tag representing a GNU tar archive.,"String MAGIC_GNU = ""ustar "";",java.lang.String MAGIC_GNU,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_SPACE,Field,* One of two possible GNU versions,"String VERSION_GNU_SPACE = "" \0"";",java.lang.String VERSION_GNU_SPACE,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSION_GNU_ZERO,Field,* One of two possible GNU versions,"String VERSION_GNU_ZERO = ""0\0"";",java.lang.String VERSION_GNU_ZERO,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_ANT,Field,* The magic tag representing an Ant tar archive.\n     *\n     * @since 1.1,"String MAGIC_ANT = ""ustar\0"";",java.lang.String MAGIC_ANT,default
org.apache.commons.compress.archivers.tar.TarConstants.VERSION_ANT,Field,so assume the version is 2 nulls,"String VERSION_ANT = ""\0\0"";",java.lang.String VERSION_ANT,default
org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK,Field,TODO rename as LONGLINK_GNU ?,"String GNU_LONGLINK = ""././@LongLink"";",java.lang.String GNU_LONGLINK,default
org.apache.commons.compress.archivers.tar.TarConstants.MAGIC_XSTAR,Field,* The magix string used in the last four bytes of the header to identify the xstar format.\n     *\n     * @since 1.11,"String MAGIC_XSTAR = ""tar\0"";",java.lang.String MAGIC_XSTAR,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MULTIVOLUME_OFFSET,Field,* Offset inside the header for the xtar multivolume data\n     *\n     * @since 1.22\n     * @see TarArchiveEntry,int XSTAR_MULTIVOLUME_OFFSET = 464;,int XSTAR_MULTIVOLUME_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_OFFSET,Field,* Offset inside the header for the xstar magic bytes.\n     *\n     * @since 1.11,int XSTAR_MAGIC_OFFSET = 508;,int XSTAR_MAGIC_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_MAGIC_LEN,Field,* Length of the XSTAR magic.\n     *\n     * @since 1.11,int XSTAR_MAGIC_LEN = 4;,int XSTAR_MAGIC_LEN,default
org.apache.commons.compress.archivers.tar.TarConstants.PREFIXLEN_XSTAR,Field,* Length of the prefix field in xstar archives.\n     *\n     * @since 1.11,int PREFIXLEN_XSTAR = 131;,int PREFIXLEN_XSTAR,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_PREFIX_OFFSET,Field,* Offset inside the header for the prefix field in xstar archives.\n     *\n     * @since 1.22\n     * @see TarArchiveEntry,int XSTAR_PREFIX_OFFSET = 345;,int XSTAR_PREFIX_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_ATIME_OFFSET,Field,* Offset inside the header for the atime field in xstar archives.\n     *\n     * @since 1.22\n     * @see TarArchiveEntry,int XSTAR_ATIME_OFFSET = 476;,int XSTAR_ATIME_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_XSTAR,Field,* The length of the access time field in a xstar header buffer.\n     *\n     * @since 1.11,int ATIMELEN_XSTAR = 12;,int ATIMELEN_XSTAR,default
org.apache.commons.compress.archivers.tar.TarConstants.XSTAR_CTIME_OFFSET,Field,* Offset inside the header for the ctime field in xstar archives.\n     *\n     * @since 1.22\n     * @see TarArchiveEntry,int XSTAR_CTIME_OFFSET = 488;,int XSTAR_CTIME_OFFSET,default
org.apache.commons.compress.archivers.tar.TarConstants.CTIMELEN_XSTAR,Field,* The length of the created time field in a xstar header buffer.\n     *\n     * @since 1.11,int CTIMELEN_XSTAR = 12;,int CTIMELEN_XSTAR,default
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended,Field,If an extension sparse header follows.,private final boolean isExtended;,boolean isExtended,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.sparseHeaders,Field,No Comment,private final List<TarArchiveStructSparse> sparseHeaders;,java.util.List sparseHeaders,"private , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.MAP,Field,No Comment,"static final String MAP = ""GNU.sparse.map"";",java.lang.String MAP,"static , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.NAME,Field,No Comment,"static final String NAME = ""GNU.sparse.name"";",java.lang.String NAME,"static , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.NUMBYTES,Field,No Comment,"static final String NUMBYTES = ""GNU.sparse.numbytes"";",java.lang.String NUMBYTES,"static , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.OFFSET,Field,No Comment,"static final String OFFSET = ""GNU.sparse.offset"";",java.lang.String OFFSET,"static , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.REALSIZE,Field,No Comment,"static final String REALSIZE = ""GNU.sparse.realsize"";",java.lang.String REALSIZE,"static , final "
org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.SIZE,Field,No Comment,"static final String SIZE = ""GNU.sparse.size"";",java.lang.String SIZE,"static , final "
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.offset,Field,No Comment,private final long offset;,long offset,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.numbytes,Field,No Comment,private final long numbytes;,long numbytes,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRY_ARRAY,Field,No Comment,private static final TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRY_ARRAY = {};,org.apache.commons.compress.archivers.tar.TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRY_ARRAY,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.UNKNOWN,Field,"* Value used to indicate unknown mode, user/groupids, device numbers and modTime when parsing a file in lenient mode and the archive contains illegal\n     * fields.\n     *\n     * @since 1.19",public static final long UNKNOWN = -1L;,long UNKNOWN,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.MAX_NAMELEN,Field,Maximum length of a user's name in the tar file,public static final int MAX_NAMELEN = 31;,int MAX_NAMELEN,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_DIR_MODE,Field,Default permissions bits for directories,public static final int DEFAULT_DIR_MODE = 040755;,int DEFAULT_DIR_MODE,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.DEFAULT_FILE_MODE,Field,Default permissions bits for files,public static final int DEFAULT_FILE_MODE = 0100644;,int DEFAULT_FILE_MODE,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.MILLIS_PER_SECOND,Field,* Convert millis to seconds\n     *\n     * @deprecated Unused.,@Deprecated\npublic static final int MILLIS_PER_SECOND = 1000;,int MILLIS_PER_SECOND,"public , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.PAX_EXTENDED_HEADER_FILE_TIMES_PATTERN,Field,"* Regular expression pattern for validating values in pax extended header file time fields. These fields contain two numeric values (seconds and sub-second\n     * values) as per this definition: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_05\n     * <p>\n     * Since they are parsed into long values, maximum length of each is the same as Long.MAX_VALUE which is 19 digits.\n     * </p>","private static final Pattern PAX_EXTENDED_HEADER_FILE_TIMES_PATTERN = Pattern.compile(""-?\\d{1,19}(?:\\.\\d{1,19})?"");",java.util.regex.Pattern PAX_EXTENDED_HEADER_FILE_TIMES_PATTERN,"private , static , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.name,Field,The entry's name.,"private String name = """";",java.lang.String name,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveAbsolutePath,Field,Whether to allow leading slashes or drive names inside the name,private final boolean preserveAbsolutePath;,boolean preserveAbsolutePath,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode,Field,The entry's permission mode.,private int mode;,int mode,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId,Field,The entry's user id.,private long userId;,long userId,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId,Field,The entry's group id.,private long groupId;,long groupId,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.size,Field,The entry's size.,private long size;,long size,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.mTime,Field,* The entry's modification time. Corresponds to the POSIX {@code mtime} attribute.,private FileTime mTime;,java.nio.file.attribute.FileTime mTime,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.cTime,Field,* The entry's status change time. Corresponds to the POSIX {@code ctime} attribute.\n     *\n     * @since 1.22,private FileTime cTime;,java.nio.file.attribute.FileTime cTime,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.aTime,Field,* The entry's last access time. Corresponds to the POSIX {@code atime} attribute.\n     *\n     * @since 1.22,private FileTime aTime;,java.nio.file.attribute.FileTime aTime,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.birthTime,Field,* The entry's creation time. Corresponds to the POSIX {@code birthtime} attribute.\n     *\n     * @since 1.22,private FileTime birthTime;,java.nio.file.attribute.FileTime birthTime,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK,Field,If the header checksum is reasonably correct.,private boolean checkSumOK;,boolean checkSumOK,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag,Field,The entry's link flag.,private byte linkFlag;,byte linkFlag,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName,Field,The entry's link name.,"private String linkName = """";",java.lang.String linkName,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic,Field,The entry's magic tag.,private String magic = MAGIC_POSIX;,java.lang.String magic,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.version,Field,The version of the format,private String version = VERSION_POSIX;,java.lang.String version,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName,Field,The entry's user name.,private String userName;,java.lang.String userName,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName,Field,The entry's group name.,"private String groupName = """";",java.lang.String groupName,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor,Field,The entry's major device number.,private int devMajor;,int devMajor,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor,Field,The entry's minor device number.,private int devMinor;,int devMinor,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.sparseHeaders,Field,The sparse headers in tar,private List<TarArchiveStructSparse> sparseHeaders;,java.util.List sparseHeaders,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended,Field,If an extension sparse header follows.,private boolean isExtended;,boolean isExtended,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize,Field,The entry's real size in case of a sparse file.,private long realSize;,long realSize,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse,Field,Is this entry a GNU sparse entry using one of the PAX formats?,private boolean paxGNUSparse;,boolean paxGNUSparse,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNU1XSparse,Field,* is this entry a GNU sparse entry using 1.X PAX formats? the sparse headers of 1.x PAX Format is stored in file data block,private boolean paxGNU1XSparse;,boolean paxGNU1XSparse,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse,Field,Is this entry a star sparse entry using the PAX header?,private boolean starSparse;,boolean starSparse,private 
org.apache.commons.compress.archivers.tar.TarArchiveEntry.file,Field,The entry's file reference,private final Path file;,java.nio.file.Path file,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkOptions,Field,The entry's file linkOptions,private final LinkOption[] linkOptions;,java.nio.file.LinkOption[] linkOptions,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.extraPaxHeaders,Field,"Extra, user supplied pax headers","private final Map<String, String> extraPaxHeaders = new HashMap<>();",java.util.Map extraPaxHeaders,"private , final "
org.apache.commons.compress.archivers.tar.TarArchiveEntry.dataOffset,Field,No Comment,private long dataOffset = OFFSET_UNKNOWN;,long dataOffset,private 
org.apache.commons.compress.archivers.tar.TarUtils.BYTE_MASK,Field,No Comment,private static final int BYTE_MASK = 255;,int BYTE_MASK,"private , static , final "
org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING,Field,No Comment,static final ZipEncoding DEFAULT_ENCODING = ZipEncodingHelper.getZipEncoding(Charset.defaultCharset());,org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING,"static , final "
org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING,Field,* Encapsulates the algorithms used up to Commons Compress 1.3 as ZipEncoding.,static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n\n    @Override\n    public boolean canEncode(final String name) {\n        return true;\n    }\n\n    @Override\n    public String decode(final byte[] buffer) {\n        final int length = buffer.length;\n        final StringBuilder result = new StringBuilder(length);\n        for (final byte b : buffer) {\n            if (b == 0) {\n                // Trailing null\n                break;\n            }\n            // Allow for sign-extension\n            result.append((char) (b & 0xFF));\n        }\n        return result.toString();\n    }\n\n    @Override\n    public ByteBuffer encode(final String name) {\n        final int length = name.length();\n        final byte[] buf = new byte[length];\n        // copy until end of input or output is reached.\n        for (int i = 0; i < length; ++i) {\n            buf[i] = (byte) name.charAt(i);\n        }\n        return ByteBuffer.wrap(buf);\n    }\n};,org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING,"static , final "
org.apache.commons.compress.archivers.ArchiveOutputStream.BYTE_MASK,Field,No Comment,static final int BYTE_MASK = 0xFF;,int BYTE_MASK,"static , final "
org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte,Field,Temporary buffer used for the {@link #write(int)} method.,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten,Field,Holds the number of bytes written to this stream.,private long bytesWritten;,long bytesWritten,private 
org.apache.commons.compress.archivers.ArchiveInputStream.BYTE_MASK,Field,No Comment,private static final int BYTE_MASK = 0xFF;,int BYTE_MASK,"private , static , final "
org.apache.commons.compress.archivers.ArchiveInputStream.single,Field,No Comment,private final byte[] single = new byte[1];,byte[] single,"private , final "
org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead,Field,The number of bytes read in this stream.,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.archivers.ArchiveInputStream.charset,Field,No Comment,private Charset charset;,java.nio.charset.Charset charset,private 
org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.next,Field,No Comment,private E next;,org.apache.commons.compress.archivers.ArchiveEntry next,private 
org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW,Field,Magic number of a cpio entry in the new format,"String MAGIC_NEW = ""070701"";",java.lang.String MAGIC_NEW,default
org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW_CRC,Field,Magic number of a cpio entry in the new format with CRC,"String MAGIC_NEW_CRC = ""070702"";",java.lang.String MAGIC_NEW_CRC,default
org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_ASCII,Field,Magic number of a cpio entry in the old ASCII format,"String MAGIC_OLD_ASCII = ""070707"";",java.lang.String MAGIC_OLD_ASCII,default
org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_OLD_BINARY,Field,Magic number of a cpio entry in the old binary format,int MAGIC_OLD_BINARY = 070707;,int MAGIC_OLD_BINARY,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW,Field,Write/read a CpioArchiveEntry in the new format. FORMAT_ constants are internal.,short FORMAT_NEW = 1;,short FORMAT_NEW,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_CRC,Field,Write/read a CpioArchiveEntry in the new format with CRC. FORMAT_ constants are internal.,short FORMAT_NEW_CRC = 2;,short FORMAT_NEW_CRC,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_ASCII,Field,Write/read a CpioArchiveEntry in the old ASCII format. FORMAT_ constants are internal.,short FORMAT_OLD_ASCII = 4;,short FORMAT_OLD_ASCII,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_BINARY,Field,Write/read a CpioArchiveEntry in the old binary format. FORMAT_ constants are internal.,short FORMAT_OLD_BINARY = 8;,short FORMAT_OLD_BINARY,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_NEW_MASK,Field,Mask for both new formats. FORMAT_ constants are internal.,short FORMAT_NEW_MASK = 3;,short FORMAT_NEW_MASK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.FORMAT_OLD_MASK,Field,Mask for both old formats. FORMAT_ constants are internal.,short FORMAT_OLD_MASK = 12;,short FORMAT_OLD_MASK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.S_IFMT,Field,Mask for all file type bits.,int S_IFMT = 0170000;,int S_IFMT,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISSOCK,Field,Defines a socket,int C_ISSOCK = 0140000;,int C_ISSOCK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISLNK,Field,Defines a symbolic link,int C_ISLNK = 0120000;,int C_ISLNK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISNWK,Field,HP/UX network special (C_ISCTG),int C_ISNWK = 0110000;,int C_ISNWK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISREG,Field,Defines a regular file,int C_ISREG = 0100000;,int C_ISREG,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISBLK,Field,Defines a block device,int C_ISBLK = 0060000;,int C_ISBLK,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISDIR,Field,Defines a directory,int C_ISDIR = 0040000;,int C_ISDIR,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISCHR,Field,Defines a character device,int C_ISCHR = 0020000;,int C_ISCHR,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISFIFO,Field,Defines a pipe,int C_ISFIFO = 0010000;,int C_ISFIFO,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISUID,Field,Sets user ID,int C_ISUID = 0004000;,int C_ISUID,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISGID,Field,Sets group ID,int C_ISGID = 0002000;,int C_ISGID,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_ISVTX,Field,"On directories, restricted deletion flag.",int C_ISVTX = 0001000;,int C_ISVTX,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRUSR,Field,Permits the owner of a file to read the file,int C_IRUSR = 0000400;,int C_IRUSR,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWUSR,Field,Permits the owner of a file to write to the file,int C_IWUSR = 0000200;,int C_IWUSR,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXUSR,Field,Permits the owner of a file to execute the file or to search the directory,int C_IXUSR = 0000100;,int C_IXUSR,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IRGRP,Field,Permits a file's group to read the file,int C_IRGRP = 0000040;,int C_IRGRP,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWGRP,Field,Permits a file's group to write to the file,int C_IWGRP = 0000020;,int C_IWGRP,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXGRP,Field,Permits a file's group to execute the file or to search the directory,int C_IXGRP = 0000010;,int C_IXGRP,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IROTH,Field,Permits others to read the file,int C_IROTH = 0000004;,int C_IROTH,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IWOTH,Field,Permits others to write to the file,int C_IWOTH = 0000002;,int C_IWOTH,default
org.apache.commons.compress.archivers.cpio.CpioConstants.C_IXOTH,Field,Permits others to execute the file or to search the directory,int C_IXOTH = 0000001;,int C_IXOTH,default
org.apache.commons.compress.archivers.cpio.CpioConstants.CPIO_TRAILER,Field,The special trailer marker,"String CPIO_TRAILER = ""TRAILER!!!"";",java.lang.String CPIO_TRAILER,default
org.apache.commons.compress.archivers.cpio.CpioConstants.BLOCK_SIZE,Field,* The default block size.\n     *\n     * @since 1.1,int BLOCK_SIZE = 512;,int BLOCK_SIZE,default
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.NUL,Field,* The NUL character.,private static final char NUL = '\0';,char NUL,"private , static , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry,Field,No Comment,private CpioArchiveEntry entry;,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat,Field,* See {@link CpioArchiveEntry#CpioArchiveEntry(short)} for possible values.,private final short entryFormat;,short entryFormat,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names,Field,No Comment,"private final HashMap<String, CpioArchiveEntry> names = new HashMap<>();",java.util.HashMap names,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc,Field,No Comment,private long crc;,long crc,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written,Field,No Comment,private long written;,long written,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize,Field,No Comment,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode,Field,No Comment,private long nextArtificalDeviceAndInode = 1;,long nextArtificalDeviceAndInode,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding,Field,* The encoding to use for file names and labels.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.charsetName,Field,the provided encoding (for unit tests),final String charsetName;,java.lang.String charsetName,final 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed,Field,No Comment,private boolean closed;,boolean closed,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry,Field,No Comment,private CpioArchiveEntry entry;,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead,Field,No Comment,private long entryBytesRead;,long entryBytesRead,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF,Field,No Comment,private boolean entryEOF;,boolean entryEOF,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpBuf,Field,No Comment,private final byte[] tmpBuf = new byte[4096];,byte[] tmpBuf,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc,Field,No Comment,private long crc;,long crc,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.buffer2,Field,Cached buffer - must only be used locally in the class (COMPRESS-172 - reduce garbage collection).,private final byte[] buffer2 = new byte[2];,byte[] buffer2,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.buffer4,Field,Cached buffer - must only be used locally in the class (COMPRESS-172 - reduce garbage collection).,private final byte[] buffer4 = new byte[4];,byte[] buffer4,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.buffer6,Field,No Comment,private final byte[] buffer6 = new byte[6];,byte[] buffer6,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize,Field,No Comment,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding,Field,* The encoding to use for file names and labels.,private final ZipEncoding zipEncoding;,org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding,"private , final "
org.apache.commons.compress.archivers.cpio.CpioUtil.DEFAULT_CHARSET_NAME,Field,No Comment,static final String DEFAULT_CHARSET_NAME = StandardCharsets.US_ASCII.name();,java.lang.String DEFAULT_CHARSET_NAME,"static , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat,Field,* See {@link #CpioArchiveEntry(short)} for possible values.,private final short fileFormat;,short fileFormat,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize,Field,The number of bytes in each header record; depends on the file format,private final int headerSize;,int headerSize,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary,Field,"The boundary to which the header and data elements are aligned: 0, 2 or 4 bytes",private final int alignmentBoundary;,int alignmentBoundary,"private , final "
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum,Field,No Comment,private long chksum;,long chksum,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileSize,Field,Number of bytes in the file,private long fileSize;,long fileSize,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid,Field,No Comment,private long gid;,long gid,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode,Field,No Comment,private long inode;,long inode,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj,Field,No Comment,private long maj;,long maj,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min,Field,No Comment,private long min;,long min,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode,Field,No Comment,private long mode;,long mode,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime,Field,No Comment,private long mtime;,long mtime,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name,Field,No Comment,private String name;,java.lang.String name,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink,Field,No Comment,private long nlink;,long nlink,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj,Field,No Comment,private long rmaj;,long rmaj,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin,Field,No Comment,private long rmin;,long rmin,private 
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid,Field,No Comment,private long uid;,long uid,private 
org.apache.commons.compress.java.util.jar.Pack200.SYSTEM_PROPERTY_PACKER,Field,$NON-NLS-1$,"private static final String SYSTEM_PROPERTY_PACKER = ""java.util.jar.Pack200.Packer"";",java.lang.String SYSTEM_PROPERTY_PACKER,"private , static , final "
org.apache.commons.compress.java.util.jar.Pack200.SYSTEM_PROPERTY_UNPACKER,Field,$NON-NLS-1$,"private static final String SYSTEM_PROPERTY_UNPACKER = ""java.util.jar.Pack200.Unpacker"";",java.lang.String SYSTEM_PROPERTY_UNPACKER,"private , static , final "
org.apache.commons.compress.java.util.jar.Pack200$Packer.CLASS_ATTRIBUTE_PFX,Field,$NON-NLS-1$,"String CLASS_ATTRIBUTE_PFX = ""pack.class.attribute."";",java.lang.String CLASS_ATTRIBUTE_PFX,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.CODE_ATTRIBUTE_PFX,Field,$NON-NLS-1$,"String CODE_ATTRIBUTE_PFX = ""pack.code.attribute."";",java.lang.String CODE_ATTRIBUTE_PFX,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.DEFLATE_HINT,Field,$NON-NLS-1$,"String DEFLATE_HINT = ""pack.deflate.hint"";",java.lang.String DEFLATE_HINT,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.EFFORT,Field,$NON-NLS-1$,"String EFFORT = ""pack.effort"";",java.lang.String EFFORT,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.ERROR,Field,$NON-NLS-1$,"String ERROR = ""error"";",java.lang.String ERROR,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.FALSE,Field,$NON-NLS-1$,"String FALSE = ""false"";",java.lang.String FALSE,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.FIELD_ATTRIBUTE_PFX,Field,$NON-NLS-1$,"String FIELD_ATTRIBUTE_PFX = ""pack.field.attribute."";",java.lang.String FIELD_ATTRIBUTE_PFX,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.KEEP,Field,$NON-NLS-1$,"String KEEP = ""keep"";",java.lang.String KEEP,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.KEEP_FILE_ORDER,Field,$NON-NLS-1$,"String KEEP_FILE_ORDER = ""pack.keep.file.order"";",java.lang.String KEEP_FILE_ORDER,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.LATEST,Field,$NON-NLS-1$,"String LATEST = ""latest"";",java.lang.String LATEST,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.METHOD_ATTRIBUTE_PFX,Field,$NON-NLS-1$,"String METHOD_ATTRIBUTE_PFX = ""pack.method.attribute."";",java.lang.String METHOD_ATTRIBUTE_PFX,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.MODIFICATION_TIME,Field,$NON-NLS-1$,"String MODIFICATION_TIME = ""pack.modification.time"";",java.lang.String MODIFICATION_TIME,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.PASS,Field,$NON-NLS-1$,"String PASS = ""pass"";",java.lang.String PASS,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.PASS_FILE_PFX,Field,$NON-NLS-1$,"String PASS_FILE_PFX = ""pack.pass.file."";",java.lang.String PASS_FILE_PFX,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.PROGRESS,Field,$NON-NLS-1$,"String PROGRESS = ""pack.progress"";",java.lang.String PROGRESS,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.SEGMENT_LIMIT,Field,$NON-NLS-1$,"String SEGMENT_LIMIT = ""pack.segment.limit"";",java.lang.String SEGMENT_LIMIT,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.STRIP,Field,$NON-NLS-1$,"String STRIP = ""strip"";",java.lang.String STRIP,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.TRUE,Field,$NON-NLS-1$,"String TRUE = ""true"";",java.lang.String TRUE,default
org.apache.commons.compress.java.util.jar.Pack200$Packer.UNKNOWN_ATTRIBUTE,Field,$NON-NLS-1$,"String UNKNOWN_ATTRIBUTE = ""pack.unknown.attribute"";",java.lang.String UNKNOWN_ATTRIBUTE,default
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.DEFLATE_HINT,Field,$NON-NLS-1$,"String DEFLATE_HINT = ""unpack.deflate.hint"";",java.lang.String DEFLATE_HINT,default
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.FALSE,Field,$NON-NLS-1$,"String FALSE = ""false"";",java.lang.String FALSE,default
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.KEEP,Field,$NON-NLS-1$,"String KEEP = ""keep"";",java.lang.String KEEP,default
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.PROGRESS,Field,$NON-NLS-1$,"String PROGRESS = ""unpack.progress"";",java.lang.String PROGRESS,default
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.TRUE,Field,$NON-NLS-1$,"String TRUE = ""true"";",java.lang.String TRUE,default
org.apache.commons.compress.utils.IOUtils.EMPTY_LINK_OPTIONS,Field,* Empty array of type {@link LinkOption}.\n     *\n     * @since 1.21,public static final LinkOption[] EMPTY_LINK_OPTIONS = {};,java.nio.file.LinkOption[] EMPTY_LINK_OPTIONS,"public , static , final "
org.apache.commons.compress.utils.ByteUtils.EMPTY_BYTE_ARRAY,Field,* Empty array.\n     *\n     * @since 1.21,public static final byte[] EMPTY_BYTE_ARRAY = {};,byte[] EMPTY_BYTE_ARRAY,"public , static , final "
org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.is,Field,No Comment,private final InputStream is;,java.io.InputStream is,"private , final "
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.os,Field,No Comment,private final OutputStream os;,java.io.OutputStream os,"private , final "
org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH,Field,No Comment,private static final int MAX_SANITIZED_NAME_LENGTH = 255;,int MAX_SANITIZED_NAME_LENGTH,"private , static , final "
org.apache.commons.compress.utils.OsgiUtils.inOsgiEnvironment,Field,No Comment,private static final boolean inOsgiEnvironment;,boolean inOsgiEnvironment,"private , static , final "
org.apache.commons.compress.utils.Charsets.ISO_8859_1,Field,"* ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset ISO_8859_1 = StandardCharsets.ISO_8859_1;,java.nio.charset.Charset ISO_8859_1,"public , static , final "
org.apache.commons.compress.utils.Charsets.US_ASCII,Field,"* <p>\n     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset US_ASCII = StandardCharsets.US_ASCII;,java.nio.charset.Charset US_ASCII,"public , static , final "
org.apache.commons.compress.utils.Charsets.UTF_16,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark (either order accepted on input, big-endian\n     * used on output)\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset UTF_16 = StandardCharsets.UTF_16;,java.nio.charset.Charset UTF_16,"public , static , final "
org.apache.commons.compress.utils.Charsets.UTF_16BE,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset UTF_16BE = StandardCharsets.UTF_16BE;,java.nio.charset.Charset UTF_16BE,"public , static , final "
org.apache.commons.compress.utils.Charsets.UTF_16LE,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset UTF_16LE = StandardCharsets.UTF_16LE;,java.nio.charset.Charset UTF_16LE,"public , static , final "
org.apache.commons.compress.utils.Charsets.UTF_8,Field,"* <p>\n     * Eight-bit Unicode Transformation Format.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n     * @deprecated replaced by {@link StandardCharsets} in Java 7",@Deprecated\npublic static final Charset UTF_8 = StandardCharsets.UTF_8;,java.nio.charset.Charset UTF_8,"public , static , final "
org.apache.commons.compress.utils.BoundedArchiveInputStream.end,Field,No Comment,private final long end;,long end,"private , final "
org.apache.commons.compress.utils.BoundedArchiveInputStream.singleByteBuffer,Field,No Comment,private ByteBuffer singleByteBuffer;,java.nio.ByteBuffer singleByteBuffer,private 
org.apache.commons.compress.utils.BoundedArchiveInputStream.loc,Field,No Comment,private long loc;,long loc,private 
org.apache.commons.compress.utils.ChecksumVerifyingInputStream.remaining,Field,No Comment,private long remaining;,long remaining,private 
org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expected,Field,No Comment,private final long expected;,long expected,"private , final "
org.apache.commons.compress.utils.SkipShieldingInputStream.SKIP_BUFFER_SIZE,Field,No Comment,private static final int SKIP_BUFFER_SIZE = 8192;,int SKIP_BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.utils.SkipShieldingInputStream.SKIP_BUFFER,Field,we can use a shared buffer as the content is discarded anyway,private static final byte[] SKIP_BUFFER = new byte[SKIP_BUFFER_SIZE];,byte[] SKIP_BUFFER,"private , static , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.out,Field,No Comment,private final WritableByteChannel out;,java.nio.channels.WritableByteChannel out,"private , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.blockSize,Field,No Comment,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.buffer,Field,No Comment,private final ByteBuffer buffer;,java.nio.ByteBuffer buffer,"private , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.closed,Field,No Comment,private final AtomicBoolean closed = new AtomicBoolean();,java.util.concurrent.atomic.AtomicBoolean closed,"private , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.out,Field,No Comment,private final OutputStream out;,java.io.OutputStream out,"private , final "
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.closed,Field,No Comment,private final AtomicBoolean closed = new AtomicBoolean();,java.util.concurrent.atomic.AtomicBoolean closed,"private , final "
org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE,Field,bits in long minus sign bit,private static final int MAXIMUM_CACHE_SIZE = 63;,int MAXIMUM_CACHE_SIZE,"private , static , final "
org.apache.commons.compress.utils.BitInputStream.MASKS,Field,No Comment,private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1];,long[] MASKS,"private , static , final "
org.apache.commons.compress.utils.BitInputStream.in,Field,No Comment,private final org.apache.commons.io.input.BoundedInputStream in;,org.apache.commons.io.input.BoundedInputStream in,"private , final "
org.apache.commons.compress.utils.BitInputStream.byteOrder,Field,No Comment,private final ByteOrder byteOrder;,java.nio.ByteOrder byteOrder,"private , final "
org.apache.commons.compress.utils.BitInputStream.bitsCached,Field,No Comment,private long bitsCached;,long bitsCached,private 
org.apache.commons.compress.utils.BitInputStream.bitsCachedSize,Field,No Comment,private int bitsCachedSize;,int bitsCachedSize,private 
org.apache.commons.compress.utils.TimeUtils.HUNDRED_NANOS_PER_MILLISECOND,Field,The amount of 100-nanosecond intervals in one millisecond.,static final long HUNDRED_NANOS_PER_MILLISECOND = TimeUnit.MILLISECONDS.toNanos(1) / 100;,long HUNDRED_NANOS_PER_MILLISECOND,"static , final "
org.apache.commons.compress.utils.TimeUtils.WINDOWS_EPOCH_OFFSET,Field,"* <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms724290%28v=vs.85%29.aspx"">Windows File Times</a>\n     * <p>\n     * A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated\n     * Universal Time (UTC). This is the offset of Windows time 0 to Unix epoch in 100-nanosecond intervals.\n     * </p>",static final long WINDOWS_EPOCH_OFFSET = -116444736000000000L;,long WINDOWS_EPOCH_OFFSET,"static , final "
org.apache.commons.compress.utils.CountingOutputStream.bytesWritten,Field,No Comment,private long bytesWritten;,long bytesWritten,private 
org.apache.commons.compress.utils.CountingInputStream.bytesRead,Field,No Comment,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT,Field,No Comment,private static final int NAIVE_RESIZE_LIMIT = Integer.MAX_VALUE >> 1;,int NAIVE_RESIZE_LIMIT,"private , static , final "
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data,Field,No Comment,private byte[] data;,byte[] data,private 
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed,Field,No Comment,private final AtomicBoolean closed = new AtomicBoolean();,java.util.concurrent.atomic.AtomicBoolean closed,"private , final "
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position,Field,No Comment,private int position;,int position,private 
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size,Field,No Comment,private int size;,int size,private 
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.EMPTY_PATH_ARRAY,Field,No Comment,private static final Path[] EMPTY_PATH_ARRAY = {};,java.nio.file.Path[] EMPTY_PATH_ARRAY,"private , static , final "
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.channelList,Field,No Comment,private final List<SeekableByteChannel> channelList;,java.util.List channelList,"private , final "
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.globalPosition,Field,No Comment,private long globalPosition;,long globalPosition,private 
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.currentChannelIdx,Field,No Comment,private int currentChannelIdx;,int currentChannelIdx,private 
org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.channel,Field,No Comment,private final SeekableByteChannel channel;,java.nio.channels.SeekableByteChannel channel,"private , final "
org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader,Field,No Comment,private E nextServiceLoader;,java.lang.Object nextServiceLoader,private 
org.apache.commons.compress.utils.ServiceLoaderIterator.service,Field,No Comment,private final Class<E> service;,java.lang.Class service,"private , final "
org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator,Field,No Comment,private final Iterator<E> serviceLoaderIterator;,java.util.Iterator serviceLoaderIterator,"private , final "
org.apache.commons.compress.utils.CharsetNames.ISO_8859_1,Field,"* ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String ISO_8859_1 = StandardCharsets.ISO_8859_1.name();,java.lang.String ISO_8859_1,"public , static , final "
org.apache.commons.compress.utils.CharsetNames.US_ASCII,Field,"* <p>\n     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String US_ASCII = StandardCharsets.US_ASCII.name();,java.lang.String US_ASCII,"public , static , final "
org.apache.commons.compress.utils.CharsetNames.UTF_16,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark (either order accepted on input, big-endian\n     * used on output)\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String UTF_16 = StandardCharsets.UTF_16.name();,java.lang.String UTF_16,"public , static , final "
org.apache.commons.compress.utils.CharsetNames.UTF_16BE,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String UTF_16BE = StandardCharsets.UTF_16BE.name();,java.lang.String UTF_16BE,"public , static , final "
org.apache.commons.compress.utils.CharsetNames.UTF_16LE,Field,"* <p>\n     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String UTF_16LE = StandardCharsets.UTF_16LE.name();,java.lang.String UTF_16LE,"public , static , final "
org.apache.commons.compress.utils.CharsetNames.UTF_8,Field,"* <p>\n     * Eight-bit Unicode Transformation Format.\n     * </p>\n     * <p>\n     * Every implementation of the Java platform is required to support this character encoding.\n     * </p>\n     *\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>",public static final String UTF_8 = StandardCharsets.UTF_8.name();,java.lang.String UTF_8,"public , static , final "
org.apache.commons.compress.CompressFilterOutputStream.closed,Field,* Whether this instance was successfully closed.,private final AtomicBoolean closed = new AtomicBoolean();,java.util.concurrent.atomic.AtomicBoolean closed,"private , final "
org.apache.commons.compress.CompressFilterOutputStream.finished,Field,"* Whether this instance was successfully finished.\n     * <p>\n     * The state transition usually is open, to finished, to closed.\n     * </p>",private boolean finished;,boolean finished,private 
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.originalStream,Field,No Comment,private InputStream originalStream;,java.io.InputStream originalStream,private 
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.decoder,Field,No Comment,private HuffmanDecoder decoder;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder decoder,private 
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.compressedBytesRead,Field,No Comment,private long compressedBytesRead;,long compressedBytesRead,private 
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.oneByte,Field,No Comment,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.RUN_LENGTH_TABLE,Field,"* <pre>\n     * --------------------------------------------------------------------\n     * idx  xtra  base     idx  xtra  base     idx  xtra  base\n     * --------------------------------------------------------------------\n     * 257   0     3       267   1   15,16     277   4   67-82\n     * 258   0     4       268   1   17,18     278   4   83-98\n     * 259   0     5       269   2   19-22     279   4   99-114\n     * 260   0     6       270   2   23-26     280   4   115-130\n     * 261   0     7       271   2   27-30     281   5   131-162\n     * 262   0     8       272   2   31-34     282   5   163-194\n     * 263   0     9       273   3   35-42     283   5   195-226\n     * 264   0     10      274   3   43-50     284   5   227-257\n     * 265   1     11,12   275   3   51-58     285   16  3\n     * 266   1     13,14   276   3   59-66\n     * --------------------------------------------------------------------\n     * </pre>\n     *\n     * value = (base of run length) << 5 | (number of extra bits to read)","private static final short[] RUN_LENGTH_TABLE = { 96, 128, 160, 192, 224, 256, 288, 320, 353, 417, 481, 545, 610, 738, 866, 994, 1123, 1379, 1635, 1891, 2148, 2660, 3172, 3684, 4197, 5221, 6245, 7269, 112 };",short[] RUN_LENGTH_TABLE,"private , static , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DISTANCE_TABLE,Field,"* <pre>\n     * --------------------------------------------------------------------\n     * idx  xtra  dist     idx  xtra  dist       idx  xtra  dist\n     * --------------------------------------------------------------------\n     * 0    0     1        10   4     33-48      20    9   1025-1536\n     * 1    0     2        11   4     49-64      21    9   1537-2048\n     * 2    0     3        12   5     65-96      22   10   2049-3072\n     * 3    0     4        13   5     97-128     23   10   3073-4096\n     * 4    1     5,6      14   6     129-192    24   11   4097-6144\n     * 5    1     7,8      15   6     193-256    25   11   6145-8192\n     * 6    2     9-12     16   7     257-384    26   12   8193-12288\n     * 7    2     13-16    17   7     385-512    27   12   12289-16384\n     * 8    3     17-24    18   8     513-768    28   13   16385-24576\n     * 9    3     25-32    19   8     769-1024   29   13   24577-32768\n     * 30   14   32769-49152\n     * 31   14   49153-65536\n     * --------------------------------------------------------------------\n     * </pre>\n     *\n     * value = (base of distance) << 4 | (number of extra bits to read)","private static final int[] DISTANCE_TABLE = { // 0-9\n16, // 0-9\n32, // 0-9\n48, // 0-9\n64, // 0-9\n81, // 0-9\n113, // 0-9\n146, // 0-9\n210, // 0-9\n275, // 0-9\n403, // 10-19\n532, // 10-19\n788, // 10-19\n1045, // 10-19\n1557, // 10-19\n2070, // 10-19\n3094, // 10-19\n4119, // 10-19\n6167, // 10-19\n8216, // 10-19\n12312, // 20-29\n16409, // 20-29\n24601, // 20-29\n32794, // 20-29\n49178, // 20-29\n65563, // 20-29\n98331, // 20-29\n131100, // 20-29\n196636, // 20-29\n262173, // 20-29\n393245, // 30-31\n524318, // 30-31\n786462 };",int[] DISTANCE_TABLE,"private , static , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.CODE_LENGTHS_ORDER,Field,* When using dynamic huffman codes the order in which the values are stored follows the positioning below,"private static final int[] CODE_LENGTHS_ORDER = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };",int[] CODE_LENGTHS_ORDER,"private , static , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.FIXED_LITERALS,Field,* Huffman Fixed Literal / Distance tables for mode 1,private static final int[] FIXED_LITERALS;,int[] FIXED_LITERALS,"private , static , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.FIXED_DISTANCE,Field,No Comment,private static final int[] FIXED_DISTANCE;,int[] FIXED_DISTANCE,"private , static , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.finalBlock,Field,No Comment,private boolean finalBlock;,boolean finalBlock,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.state,Field,No Comment,private DecoderState state;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState state,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.reader,Field,No Comment,private BitInputStream reader;,org.apache.commons.compress.utils.BitInputStream reader,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.in,Field,No Comment,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.memory,Field,No Comment,private final DecodingMemory memory = new DecodingMemory();,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory memory,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.bits,Field,No Comment,private final int bits;,int bits,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.literal,Field,No Comment,int literal = -1;,int literal,default
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leftNode,Field,No Comment,BinaryTreeNode leftNode;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode leftNode,default
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.rightNode,Field,No Comment,BinaryTreeNode rightNode;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode rightNode,default
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.memory,Field,No Comment,private final byte[] memory;,byte[] memory,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.mask,Field,No Comment,private final int mask;,int mask,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.wHead,Field,No Comment,private int wHead;,int wHead,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.wrappedAround,Field,No Comment,private boolean wrappedAround;,boolean wrappedAround,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.endOfBlock,Field,No Comment,private boolean endOfBlock;,boolean endOfBlock,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.state,Field,No Comment,private final HuffmanState state;,org.apache.commons.compress.compressors.deflate64.HuffmanState state,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.lengthTree,Field,No Comment,private final BinaryTreeNode lengthTree;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode lengthTree,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.distanceTree,Field,No Comment,private final BinaryTreeNode distanceTree;,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode distanceTree,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.runBufferPos,Field,No Comment,private int runBufferPos;,int runBufferPos,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.runBuffer,Field,No Comment,private byte[] runBuffer = ByteUtils.EMPTY_BYTE_ARRAY;,byte[] runBuffer,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.runBufferLength,Field,No Comment,private int runBufferLength;,int runBufferLength,private 
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.blockLength,Field,No Comment,private final long blockLength;,long blockLength,"private , final "
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read,Field,No Comment,private long read;,long read,private 
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.countingInputStream,Field,No Comment,private final BoundedInputStream countingInputStream;,org.apache.commons.io.input.BoundedInputStream countingInputStream,"private , final "
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.brotliInputStream,Field,No Comment,private final BrotliInputStream brotliInputStream;,org.brotli.dec.BrotliInputStream brotliInputStream,"private , final "
org.apache.commons.compress.compressors.brotli.BrotliUtils.cachedBrotliAvailability,Field,No Comment,private static volatile CachedAvailability cachedBrotliAvailability;,org.apache.commons.compress.compressors.brotli.BrotliUtils$CachedAvailability cachedBrotliAvailability,"private , static , volatile "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.WINDOW_SIZE,Field,No Comment,static final int WINDOW_SIZE = 1 << 16;,int WINDOW_SIZE,"static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.SIZE_BITS,Field,No Comment,static final int SIZE_BITS = 4;,int SIZE_BITS,"static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.BACK_REFERENCE_SIZE_MASK,Field,No Comment,static final int BACK_REFERENCE_SIZE_MASK = (1 << SIZE_BITS) - 1;,int BACK_REFERENCE_SIZE_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.LITERAL_SIZE_MASK,Field,No Comment,static final int LITERAL_SIZE_MASK = BACK_REFERENCE_SIZE_MASK << SIZE_BITS;,int LITERAL_SIZE_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.nextBackReferenceSize,Field,Back-Reference-size part of the block starting byte.,private int nextBackReferenceSize;,int nextBackReferenceSize,private 
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.state,Field,Current state of the stream,private State state = State.NO_BLOCK;,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream$State state,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.END_MARK,Field,No Comment,private static final byte[] END_MARK = new byte[4];,byte[] END_MARK,"private , static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.oneByte,Field,used in one-arg write method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.blockData,Field,No Comment,private final byte[] blockData;,byte[] blockData,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.params,Field,No Comment,private final Parameters params;,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters params,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.contentHash,Field,"used for frame header checksum and content checksum, if requested",private final org.apache.commons.codec.digest.XXHash32 contentHash = new org.apache.commons.codec.digest.XXHash32();,org.apache.commons.codec.digest.XXHash32 contentHash,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.blockHash,Field,"used for block checksum, if requested",private final org.apache.commons.codec.digest.XXHash32 blockHash;,org.apache.commons.codec.digest.XXHash32 blockHash,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.blockDependencyBuffer,Field,only created if the config requires block dependency,private final byte[] blockDependencyBuffer;,byte[] blockDependencyBuffer,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.collectedBlockDependencyBytes,Field,No Comment,private int collectedBlockDependencyBytes;,int collectedBlockDependencyBytes,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.currentIndex,Field,No Comment,private int currentIndex;,int currentIndex,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.DEFAULT,Field,"* The default parameters of 4M block size, enabled content checksum, disabled block checksums and independent blocks.\n         *\n         * <p>\n         * This matches the defaults of the lz4 command line utility.\n         * </p>","public static final Parameters DEFAULT = new Parameters(BlockSize.M4, true, false, false);",org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters DEFAULT,"public , static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.blockSize,Field,No Comment,private final BlockSize blockSize;,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize blockSize,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.withContentChecksum,Field,No Comment,private final boolean withContentChecksum;,boolean withContentChecksum,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.withBlockChecksum,Field,No Comment,private final boolean withBlockChecksum;,boolean withBlockChecksum,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.withBlockDependency,Field,No Comment,private final boolean withBlockDependency;,boolean withBlockDependency,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.lz77params,Field,No Comment,private final org.apache.commons.compress.compressors.lz77support.Parameters lz77params;,org.apache.commons.compress.compressors.lz77support.Parameters lz77params,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.LZ4_SIGNATURE,Field,Used by FramedLZ4CompressorOutputStream as well.,"static final byte[] LZ4_SIGNATURE = { 4, 0x22, 0x4d, 0x18 };",byte[] LZ4_SIGNATURE,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.SKIPPABLE_FRAME_TRAILER,Field,No Comment,"private static final byte[] SKIPPABLE_FRAME_TRAILER = { 0x2a, 0x4d, 0x18 };",byte[] SKIPPABLE_FRAME_TRAILER,"private , static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.SKIPPABLE_FRAME_PREFIX_BYTE_MASK,Field,No Comment,private static final byte SKIPPABLE_FRAME_PREFIX_BYTE_MASK = 0x50;,byte SKIPPABLE_FRAME_PREFIX_BYTE_MASK,"private , static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.VERSION_MASK,Field,No Comment,static final int VERSION_MASK = 0xC0;,int VERSION_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.SUPPORTED_VERSION,Field,No Comment,static final int SUPPORTED_VERSION = 0x40;,int SUPPORTED_VERSION,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK,Field,No Comment,static final int BLOCK_INDEPENDENCE_MASK = 0x20;,int BLOCK_INDEPENDENCE_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.BLOCK_CHECKSUM_MASK,Field,No Comment,static final int BLOCK_CHECKSUM_MASK = 0x10;,int BLOCK_CHECKSUM_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.CONTENT_SIZE_MASK,Field,No Comment,static final int CONTENT_SIZE_MASK = 0x08;,int CONTENT_SIZE_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.CONTENT_CHECKSUM_MASK,Field,No Comment,static final int CONTENT_CHECKSUM_MASK = 0x04;,int CONTENT_CHECKSUM_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.BLOCK_MAX_SIZE_MASK,Field,No Comment,static final int BLOCK_MAX_SIZE_MASK = 0x70;,int BLOCK_MAX_SIZE_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.UNCOMPRESSED_FLAG_MASK,Field,No Comment,static final int UNCOMPRESSED_FLAG_MASK = 0x80000000;,int UNCOMPRESSED_FLAG_MASK,"static , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.oneByte,Field,Used in no-arg read method.,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.supplier,Field,No Comment,private final ByteUtils.ByteSupplier supplier = this::readOneByte;,org.apache.commons.compress.utils.ByteUtils$ByteSupplier supplier,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.inputStream,Field,No Comment,private final BoundedInputStream inputStream;,org.apache.commons.io.input.BoundedInputStream inputStream,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.decompressConcatenated,Field,No Comment,private final boolean decompressConcatenated;,boolean decompressConcatenated,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.expectBlockChecksum,Field,No Comment,private boolean expectBlockChecksum;,boolean expectBlockChecksum,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.expectBlockDependency,Field,No Comment,private boolean expectBlockDependency;,boolean expectBlockDependency,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.expectContentChecksum,Field,No Comment,private boolean expectContentChecksum;,boolean expectContentChecksum,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.currentBlock,Field,No Comment,private InputStream currentBlock;,java.io.InputStream currentBlock,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.endReached,Field,No Comment,private boolean endReached;,boolean endReached,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.inUncompressed,Field,No Comment,private boolean inUncompressed;,boolean inUncompressed,private 
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.contentHash,Field,"Used for frame header checksum and content checksum, if present.",private final org.apache.commons.codec.digest.XXHash32 contentHash = new org.apache.commons.codec.digest.XXHash32();,org.apache.commons.codec.digest.XXHash32 contentHash,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.blockHash,Field,"Used for block checksum, if present.",private final org.apache.commons.codec.digest.XXHash32 blockHash = new org.apache.commons.codec.digest.XXHash32();,org.apache.commons.codec.digest.XXHash32 blockHash,"private , final "
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.blockDependencyBuffer,Field,Only created if the frame doesn't set the block independence flag.,private byte[] blockDependencyBuffer;,byte[] blockDependencyBuffer,private 
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.MIN_BACK_REFERENCE_LENGTH,Field,No Comment,private static final int MIN_BACK_REFERENCE_LENGTH = 4;,int MIN_BACK_REFERENCE_LENGTH,"private , static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.MIN_OFFSET_OF_LAST_BACK_REFERENCE,Field,No Comment,private static final int MIN_OFFSET_OF_LAST_BACK_REFERENCE = 12;,int MIN_OFFSET_OF_LAST_BACK_REFERENCE,"private , static , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.compressor,Field,No Comment,private final LZ77Compressor compressor;,org.apache.commons.compress.compressors.lz77support.LZ77Compressor compressor,"private , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.oneByte,Field,used in one-arg write method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.pairs,Field,No Comment,private final Deque<Pair> pairs = new LinkedList<>();,java.util.Deque pairs,"private , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandedBlocks,Field,able to expand back-references when needed,private final Deque<byte[]> expandedBlocks = new LinkedList<>();,java.util.Deque expandedBlocks,"private , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.literals,Field,No Comment,private final Deque<byte[]> literals = new LinkedList<>();,java.util.Deque literals,"private , final "
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.literalLength,Field,No Comment,private int literalLength;,int literalLength,private 
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.brOffset,Field,No Comment,private int brOffset;,int brOffset,private 
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.brLength,Field,No Comment,private int brLength;,int brLength,private 
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.written,Field,No Comment,private boolean written;,boolean written,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.BUFFER_SIZE,Field,No Comment,private static final int BUFFER_SIZE = 512;,int BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.compressors.gzip.GzipParameters.bufferSize,Field,No Comment,private int bufferSize = BUFFER_SIZE;,int bufferSize,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.comment,Field,No Comment,private String comment;,java.lang.String comment,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel,Field,No Comment,private int compressionLevel = Deflater.DEFAULT_COMPRESSION;,int compressionLevel,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.deflateStrategy,Field,No Comment,private int deflateStrategy = Deflater.DEFAULT_STRATEGY;,int deflateStrategy,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.extraField,Field,No Comment,private ExtraField extraField;,org.apache.commons.compress.compressors.gzip.ExtraField extraField,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.fileName,Field,No Comment,private String fileName;,java.lang.String fileName,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.fileNameCharset,Field,No Comment,private Charset fileNameCharset = GzipUtils.GZIP_ENCODING;,java.nio.charset.Charset fileNameCharset,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.headerCrc,Field,No Comment,private boolean headerCrc;,boolean headerCrc,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.modificationInstant,Field,"* The most recent modification time (MTIME) of the original file being compressed.\n     * <p>\n     * The time is in Unix format, for example, seconds since 00:00:00 GMT, Jan. 1, 1970. (Note that this may cause problems for MS-DOS and other systems that\n     * use local rather than Universal time.) If the compressed data did not come from a file, MTIME is set to the time at which compression started. MTIME = 0\n     * means no time stamp is available.\n     * </p>",private Instant modificationInstant = Instant.EPOCH;,java.time.Instant modificationInstant,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem,Field,Unknown OS by default,private OS operatingSystem = OS.UNKNOWN;,org.apache.commons.compress.compressors.gzip.GzipParameters$OS operatingSystem,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.trailerCrc,Field,No Comment,private long trailerCrc;,long trailerCrc,private 
org.apache.commons.compress.compressors.gzip.GzipParameters.trailerISize,Field,No Comment,private long trailerISize;,long trailerISize,private 
org.apache.commons.compress.compressors.gzip.GzipUtils.FCOMMENT,Field,Header flag indicating a comment follows the header.,static final int FCOMMENT = 0x10;,int FCOMMENT,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.FEXTRA,Field,Header flag indicating an EXTRA subfields collection follows the header.,static final int FEXTRA = 0x04;,int FEXTRA,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.FHCRC,Field,Header flag indicating a header CRC follows the header.,static final int FHCRC = 0x02;,int FHCRC,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil,Field,No Comment,private static final FileNameUtil fileNameUtil;,org.apache.commons.compress.compressors.FileNameUtil fileNameUtil,"private , static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.FNAME,Field,Header flag indicating a file name follows the header.,static final int FNAME = 0x08;,int FNAME,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.FRESERVED,Field,No Comment,static final int FRESERVED = 0xE0;,int FRESERVED,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.GZIP_ENCODING,Field,"* Charset for file name and comments per the <a href=""https://tools.ietf.org/html/rfc1952"">GZIP File Format Specification</a>.",static final Charset GZIP_ENCODING = StandardCharsets.ISO_8859_1;,java.nio.charset.Charset GZIP_ENCODING,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.ID1,Field,"* Member header ID1 (IDentification 1).\n     *\n     * See <a href=""https://datatracker.ietf.org/doc/html/rfc1952#page-5"">RFC1952</a> 2.3.1. Member header and trailer.",static final int ID1 = 31;,int ID1,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.ID2,Field,"* Member header ID2 (IDentification 2).\n     *\n     * See <a href=""https://datatracker.ietf.org/doc/html/rfc1952#page-5"">RFC1952</a> 2.3.1. Member header and trailer.",static final int ID2 = 139;,int ID2,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.XFL_MAX_COMPRESSION,Field,"* Member header XFL (eXtra FLags) when the ""deflate"" method (CM = 8) is set, then XFL = 2 means the compressor used maximum compression (slowest\n     * algorithm).\n     *\n     * See <a href=""https://datatracker.ietf.org/doc/html/rfc1952#page-5"">RFC1952</a> 2.3.1. Member header and trailer.",static final byte XFL_MAX_COMPRESSION = 2;,byte XFL_MAX_COMPRESSION,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.XFL_MAX_SPEED,Field,"* Member header XFL (eXtra FLags) when the ""deflate"" method (CM = 8) is set, then XFL = 4 means the compressor used the fastest algorithm.\n     *\n     * See <a href=""https://datatracker.ietf.org/doc/html/rfc1952#page-5"">RFC1952</a> 2.3.1. Member header and trailer.",static final byte XFL_MAX_SPEED = 4;,byte XFL_MAX_SPEED,"static , final "
org.apache.commons.compress.compressors.gzip.GzipUtils.XFL_UNKNOWN,Field,No Comment,static final byte XFL_UNKNOWN = 0;,byte XFL_UNKNOWN,"static , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater,Field,Deflater used to compress the data,private final Deflater deflater;,java.util.zip.Deflater deflater,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer,Field,The buffer receiving the compressed data from the deflater,private final byte[] deflateBuffer;,byte[] deflateBuffer,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc,Field,The checksum of the uncompressed data,private final CRC32 crc = new CRC32();,java.util.zip.CRC32 crc,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.NOOP,Field,No Comment,private static final IOConsumer<GzipCompressorInputStream> NOOP = IOConsumer.noop();,org.apache.commons.io.function.IOConsumer NOOP,"private , static , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf,Field,Buffer to hold the input data.,private final byte[] buf = new byte[8192];,byte[] buf,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed,Field,Amount of data in buf.,private int bufUsed;,int bufUsed,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc,Field,CRC32 from uncompressed data.,private final CRC32 crc = new CRC32();,java.util.zip.CRC32 crc,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated,Field,True if decompressing multi-member streams.,private final boolean decompressConcatenated;,boolean decompressConcatenated,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached,Field,True once everything has been decompressed.,private boolean endReached;,boolean endReached,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.fileNameCharset,Field,No Comment,private final Charset fileNameCharset;,java.nio.charset.Charset fileNameCharset,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in,Field,"* Compressed input stream, possibly wrapped in a BufferedInputStream, always wrapped in countingStream above",private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inflater,Field,Decompressor.,private Inflater inflater = new Inflater(true);,java.util.zip.Inflater inflater,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte,Field,Buffer for no-argument read method.,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters,Field,No Comment,private GzipParameters parameters;,org.apache.commons.compress.compressors.gzip.GzipParameters parameters,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.onMemberStart,Field,No Comment,private final IOConsumer<GzipCompressorInputStream> onMemberStart;,org.apache.commons.io.function.IOConsumer onMemberStart,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.onMemberEnd,Field,No Comment,private final IOConsumer<GzipCompressorInputStream> onMemberEnd;,org.apache.commons.io.function.IOConsumer onMemberEnd,"private , final "
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.decompressConcatenated,Field,True if decompressing multi-member streams.,private boolean decompressConcatenated;,boolean decompressConcatenated,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.fileNameCharset,Field,No Comment,private Charset fileNameCharset = GzipUtils.GZIP_ENCODING;,java.nio.charset.Charset fileNameCharset,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.onMemberStart,Field,No Comment,private IOConsumer<GzipCompressorInputStream> onMemberStart;,org.apache.commons.io.function.IOConsumer onMemberStart,private 
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.onMemberEnd,Field,No Comment,private IOConsumer<GzipCompressorInputStream> onMemberEnd;,org.apache.commons.io.function.IOConsumer onMemberEnd,private 
org.apache.commons.compress.compressors.gzip.ExtraField.MAX_SIZE,Field,No Comment,private static final int MAX_SIZE = 0xFFFF;,int MAX_SIZE,"private , static , final "
org.apache.commons.compress.compressors.gzip.ExtraField.ZERO_BYTES,Field,No Comment,private static final byte[] ZERO_BYTES = {};,byte[] ZERO_BYTES,"private , static , final "
org.apache.commons.compress.compressors.gzip.ExtraField.subFields,Field,No Comment,private final List<SubField> subFields = new ArrayList<>();,java.util.List subFields,"private , final "
org.apache.commons.compress.compressors.gzip.ExtraField.totalSize,Field,No Comment,private int totalSize;,int totalSize,private 
org.apache.commons.compress.compressors.gzip.ExtraField$SubField.si1,Field,No Comment,private final byte si1;,byte si1,"private , final "
org.apache.commons.compress.compressors.gzip.ExtraField$SubField.si2,Field,No Comment,private final byte si2;,byte si2,"private , final "
org.apache.commons.compress.compressors.gzip.ExtraField$SubField.payload,Field,No Comment,private final byte[] payload;,byte[] payload,"private , final "
org.apache.commons.compress.compressors.lzw.LZWInputStream.DEFAULT_CODE_SIZE,Field,No Comment,protected static final int DEFAULT_CODE_SIZE = 9;,int DEFAULT_CODE_SIZE,"protected , static , final "
org.apache.commons.compress.compressors.lzw.LZWInputStream.UNUSED_PREFIX,Field,No Comment,protected static final int UNUSED_PREFIX = -1;,int UNUSED_PREFIX,"protected , static , final "
org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte,Field,No Comment,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.lzw.LZWInputStream.in,Field,No Comment,protected final BitInputStream in;,org.apache.commons.compress.utils.BitInputStream in,"protected , final "
org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode,Field,No Comment,private int clearCode = -1;,int clearCode,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize,Field,No Comment,private int codeSize = DEFAULT_CODE_SIZE;,int codeSize,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar,Field,No Comment,private byte previousCodeFirstChar;,byte previousCodeFirstChar,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode,Field,No Comment,private int previousCode = UNUSED_PREFIX;,int previousCode,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize,Field,No Comment,private int tableSize;,int tableSize,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes,Field,No Comment,private int[] prefixes;,int[] prefixes,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.characters,Field,No Comment,private byte[] characters;,byte[] characters,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack,Field,No Comment,private byte[] outputStack;,byte[] outputStack,private 
org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation,Field,No Comment,private int outputStackLocation;,int outputStackLocation,private 
org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_1,Field,No Comment,private static final int MAGIC_1 = 0x1f;,int MAGIC_1,"private , static , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAGIC_2,Field,No Comment,private static final int MAGIC_2 = 0x9d;,int MAGIC_2,"private , static , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.BLOCK_MODE_MASK,Field,No Comment,private static final int BLOCK_MODE_MASK = 0x80;,int BLOCK_MODE_MASK,"private , static , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.MAX_CODE_SIZE_MASK,Field,No Comment,private static final int MAX_CODE_SIZE_MASK = 0x1f;,int MAX_CODE_SIZE_MASK,"private , static , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode,Field,No Comment,private final boolean blockMode;,boolean blockMode,"private , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize,Field,No Comment,private final int maxCodeSize;,int maxCodeSize,"private , final "
org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead,Field,No Comment,private long totalCodesRead;,long totalCodesRead,private 
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in,Field,No Comment,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil,Field,No Comment,private static final FileNameUtil fileNameUtil;,org.apache.commons.compress.compressors.FileNameUtil fileNameUtil,"private , static , final "
org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC,Field,* XZ Header Magic Bytes begin a XZ file.\n     *\n     * <p>\n     * This is a copy of {@code org.tukaani.xz.XZ.HEADER_MAGIC} in XZ for Java version 1.5.\n     * </p>,"private static final byte[] HEADER_MAGIC = { (byte) 0xFD, '7', 'z', 'X', 'Z', '\0' };",byte[] HEADER_MAGIC,"private , static , final "
org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability,Field,No Comment,private static volatile CachedAvailability cachedXZAvailability;,org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability cachedXZAvailability,"private , static , volatile "
org.apache.commons.compress.compressors.CompressorInputStream.bytesRead,Field,No Comment,private long bytesRead;,long bytesRead,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.MAX_COMPRESSED_BUFFER_SIZE,Field,> easily use small fixed-size buffers.,private static final int MAX_COMPRESSED_BUFFER_SIZE = 1 << 16;,int MAX_COMPRESSED_BUFFER_SIZE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.params,Field,No Comment,private final Parameters params;,org.apache.commons.compress.compressors.lz77support.Parameters params,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.checksum,Field,No Comment,private final PureJavaCrc32C checksum = new PureJavaCrc32C();,org.apache.commons.codec.digest.PureJavaCrc32C checksum,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.oneByte,Field,used in one-arg write method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.buffer,Field,No Comment,private final byte[] buffer = new byte[MAX_COMPRESSED_BUFFER_SIZE];,byte[] buffer,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.currentIndex,Field,No Comment,private int currentIndex;,int currentIndex,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.consumer,Field,No Comment,private final ByteUtils.ByteConsumer consumer;,org.apache.commons.compress.utils.ByteUtils$ByteConsumer consumer,"private , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.TAG_MASK,Field,"Mask used to determine the type of ""tag"" is being processed",private static final int TAG_MASK = 0x03;,int TAG_MASK,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE,Field,Default block size,public static final int DEFAULT_BLOCK_SIZE = 32768;,int DEFAULT_BLOCK_SIZE,"public , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size,Field,The size of the uncompressed data,private final int size;,int size,"private , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining,Field,Number of uncompressed bytes still to be read.,private int uncompressedBytesRemaining;,int uncompressedBytesRemaining,private 
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.state,Field,Current state of the stream,private State state = State.NO_BLOCK;,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$State state,private 
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached,Field,No Comment,private boolean endReached;,boolean endReached,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MASK_OFFSET,Field,* package private for tests only.,static final long MASK_OFFSET = 0xa282ead8L;,long MASK_OFFSET,"static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.STREAM_IDENTIFIER_TYPE,Field,No Comment,private static final int STREAM_IDENTIFIER_TYPE = 0xff;,int STREAM_IDENTIFIER_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.COMPRESSED_CHUNK_TYPE,Field,No Comment,static final int COMPRESSED_CHUNK_TYPE = 0;,int COMPRESSED_CHUNK_TYPE,"static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.UNCOMPRESSED_CHUNK_TYPE,Field,No Comment,private static final int UNCOMPRESSED_CHUNK_TYPE = 1;,int UNCOMPRESSED_CHUNK_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.PADDING_CHUNK_TYPE,Field,No Comment,private static final int PADDING_CHUNK_TYPE = 0xfe;,int PADDING_CHUNK_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MIN_UNSKIPPABLE_TYPE,Field,No Comment,private static final int MIN_UNSKIPPABLE_TYPE = 2;,int MIN_UNSKIPPABLE_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_UNSKIPPABLE_TYPE,Field,No Comment,private static final int MAX_UNSKIPPABLE_TYPE = 0x7f;,int MAX_UNSKIPPABLE_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.MAX_SKIPPABLE_TYPE,Field,No Comment,private static final int MAX_SKIPPABLE_TYPE = 0xfd;,int MAX_SKIPPABLE_TYPE,"private , static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE,Field,used by FramedSnappyCompressorOutputStream as well,"static final byte[] SZ_SIGNATURE = { // NOSONAR\n// tag\n(byte) STREAM_IDENTIFIER_TYPE, // length\n6, // length\n0, // length\n0, 's', 'N', 'a', 'P', 'p', 'Y' };",byte[] SZ_SIGNATURE,"static , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unreadBytes,Field,No Comment,private long unreadBytes;,long unreadBytes,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inputStream,Field,The underlying stream to read compressed data from,private final PushbackInputStream inputStream;,java.io.PushbackInputStream inputStream,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect,Field,The dialect to expect,private final FramedSnappyDialect dialect;,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect dialect,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk,Field,No Comment,private SnappyCompressorInputStream currentCompressedChunk;,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream currentCompressedChunk,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte,Field,used in no-arg read method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached,Field,No Comment,private boolean endReached;,boolean endReached,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk,Field,No Comment,private boolean inUncompressedChunk;,boolean inUncompressedChunk,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining,Field,No Comment,private int uncompressedBytesRemaining;,int uncompressedBytesRemaining,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum,Field,No Comment,private long expectedChecksum = -1;,long expectedChecksum,private 
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.blockSize,Field,No Comment,private final int blockSize;,int blockSize,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum,Field,No Comment,private final PureJavaCrc32C checksum = new PureJavaCrc32C();,org.apache.commons.codec.digest.PureJavaCrc32C checksum,"private , final "
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.supplier,Field,No Comment,private final ByteUtils.ByteSupplier supplier = this::readOneByte;,org.apache.commons.compress.utils.ByteUtils$ByteSupplier supplier,"private , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_LITERAL_SIZE_WITHOUT_SIZE_BYTES,Field,(six bits minus four flags) or in 1 to 4 bytes after the tag,private static final int MAX_LITERAL_SIZE_WITHOUT_SIZE_BYTES = 60;,int MAX_LITERAL_SIZE_WITHOUT_SIZE_BYTES,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_LITERAL_SIZE_WITH_ONE_SIZE_BYTE,Field,No Comment,private static final int MAX_LITERAL_SIZE_WITH_ONE_SIZE_BYTE = 1 << 8;,int MAX_LITERAL_SIZE_WITH_ONE_SIZE_BYTE,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_LITERAL_SIZE_WITH_TWO_SIZE_BYTES,Field,No Comment,private static final int MAX_LITERAL_SIZE_WITH_TWO_SIZE_BYTES = 1 << 16;,int MAX_LITERAL_SIZE_WITH_TWO_SIZE_BYTES,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_LITERAL_SIZE_WITH_THREE_SIZE_BYTES,Field,No Comment,private static final int MAX_LITERAL_SIZE_WITH_THREE_SIZE_BYTES = 1 << 24;,int MAX_LITERAL_SIZE_WITH_THREE_SIZE_BYTES,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.ONE_SIZE_BYTE_MARKER,Field,No Comment,private static final int ONE_SIZE_BYTE_MARKER = 60 << 2;,int ONE_SIZE_BYTE_MARKER,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.TWO_SIZE_BYTE_MARKER,Field,No Comment,private static final int TWO_SIZE_BYTE_MARKER = 61 << 2;,int TWO_SIZE_BYTE_MARKER,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.THREE_SIZE_BYTE_MARKER,Field,No Comment,private static final int THREE_SIZE_BYTE_MARKER = 62 << 2;,int THREE_SIZE_BYTE_MARKER,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.FOUR_SIZE_BYTE_MARKER,Field,No Comment,private static final int FOUR_SIZE_BYTE_MARKER = 63 << 2;,int FOUR_SIZE_BYTE_MARKER,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MIN_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE,Field,"in two, three or five bytes.",private static final int MIN_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE = 4;,int MIN_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE,Field,No Comment,private static final int MAX_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE = 11;,int MAX_MATCH_LENGTH_WITH_ONE_OFFSET_BYTE,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_OFFSET_WITH_ONE_OFFSET_BYTE,Field,No Comment,private static final int MAX_OFFSET_WITH_ONE_OFFSET_BYTE = 1 << 11 - 1;,int MAX_OFFSET_WITH_ONE_OFFSET_BYTE,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_OFFSET_WITH_TWO_OFFSET_BYTES,Field,No Comment,private static final int MAX_OFFSET_WITH_TWO_OFFSET_BYTES = 1 << 16 - 1;,int MAX_OFFSET_WITH_TWO_OFFSET_BYTES,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.ONE_BYTE_COPY_TAG,Field,No Comment,private static final int ONE_BYTE_COPY_TAG = 1;,int ONE_BYTE_COPY_TAG,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.TWO_BYTE_COPY_TAG,Field,No Comment,private static final int TWO_BYTE_COPY_TAG = 2;,int TWO_BYTE_COPY_TAG,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.FOUR_BYTE_COPY_TAG,Field,No Comment,private static final int FOUR_BYTE_COPY_TAG = 3;,int FOUR_BYTE_COPY_TAG,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MIN_MATCH_LENGTH,Field,"bytes in addition to the tag, so yield no compression at all",private static final int MIN_MATCH_LENGTH = 4;,int MIN_MATCH_LENGTH,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.MAX_MATCH_LENGTH,Field,Snappy stores the match length in six bits of the tag,private static final int MAX_MATCH_LENGTH = 64;,int MAX_MATCH_LENGTH,"private , static , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.compressor,Field,No Comment,private final LZ77Compressor compressor;,org.apache.commons.compress.compressors.lz77support.LZ77Compressor compressor,"private , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.consumer,Field,No Comment,private final ByteUtils.ByteConsumer consumer;,org.apache.commons.compress.utils.ByteUtils$ByteConsumer consumer,"private , final "
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.oneByte,Field,used in one-arg write method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.inputStream,Field,No Comment,private InputStream inputStream;,java.io.InputStream inputStream,private 
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.inputStreamLock,Field,No Comment,private final Object inputStreamLock = new Object();,java.lang.Object inputStreamLock,"private , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.abstractStreamBridge,Field,No Comment,private final AbstractStreamBridge abstractStreamBridge;,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge abstractStreamBridge,"private , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties,Field,No Comment,"private final Map<String, String> properties;",java.util.Map properties,"private , final "
org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.path,Field,No Comment,private final Path path;,java.nio.file.Path path,"private , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD,Field,No Comment,"private static final byte[] CAFE_DOOD = { (byte) 0xCA, (byte) 0xFE, (byte) 0xD0, (byte) 0x0D };",byte[] CAFE_DOOD,"private , static , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH,Field,No Comment,private static final int SIG_LENGTH = CAFE_DOOD.length;,int SIG_LENGTH,"private , static , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInputStream,Field,No Comment,private final InputStream originalInputStream;,java.io.InputStream originalInputStream,"private , final "
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.abstractStreamBridge,Field,No Comment,private final AbstractStreamBridge abstractStreamBridge;,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge abstractStreamBridge,"private , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1,Field,No Comment,private static final int MAGIC_1 = 0x78;,int MAGIC_1,"private , static , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a,Field,No Comment,private static final int MAGIC_2a = 0x01;,int MAGIC_2a,"private , static , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b,Field,No Comment,private static final int MAGIC_2b = 0x5e;,int MAGIC_2b,"private , static , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c,Field,No Comment,private static final int MAGIC_2c = 0x9c;,int MAGIC_2c,"private , static , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d,Field,No Comment,private static final int MAGIC_2d = 0xda;,int MAGIC_2d,"private , static , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in,Field,No Comment,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater,Field,No Comment,private final Inflater inflater;,java.util.zip.Inflater inflater,"private , final "
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater,Field,No Comment,private final Deflater deflater;,java.util.zip.Deflater deflater,"private , final "
org.apache.commons.compress.compressors.deflate.DeflateParameters.MAX_LEVEL,Field,No Comment,static final int MAX_LEVEL = 9;,int MAX_LEVEL,"static , final "
org.apache.commons.compress.compressors.deflate.DeflateParameters.MIN_LEVEL,Field,No Comment,static final int MIN_LEVEL = 0;,int MIN_LEVEL,"static , final "
org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader,Field,No Comment,private boolean zlibHeader = true;,boolean zlibHeader,private 
org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel,Field,No Comment,private int compressionLevel = Deflater.DEFAULT_COMPRESSION;,int compressionLevel,private 
org.apache.commons.compress.compressors.CompressorException.serialVersionUID,Field,Serial.,private static final long serialVersionUID = -2932901310255908814L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON,Field,No Comment,private static final CompressorStreamFactory SINGLETON = new CompressorStreamFactory();,org.apache.commons.compress.compressors.CompressorStreamFactory SINGLETON,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.BROTLI,Field,* Constant (value {@value}) used to identify the BROTLI compression algorithm.\n     *\n     * @since 1.14,"public static final String BROTLI = ""br"";",java.lang.String BROTLI,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.BZIP2,Field,* Constant (value {@value}) used to identify the BZIP2 compression algorithm.\n     *\n     * @since 1.1,"public static final String BZIP2 = ""bzip2"";",java.lang.String BZIP2,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.GZIP,Field,* Constant (value {@value}) used to identify the GZIP compression algorithm.\n     *\n     * @since 1.1,"public static final String GZIP = ""gz"";",java.lang.String GZIP,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.PACK200,Field,* Constant (value {@value}) used to identify the PACK200 compression algorithm.\n     *\n     * @since 1.3,"public static final String PACK200 = ""pack200"";",java.lang.String PACK200,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.XZ,Field,* Constant (value {@value}) used to identify the XZ compression method.\n     *\n     * @since 1.4,"public static final String XZ = ""xz"";",java.lang.String XZ,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.LZMA,Field,* Constant (value {@value}) used to identify the LZMA compression method.\n     *\n     * @since 1.6,"public static final String LZMA = ""lzma"";",java.lang.String LZMA,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_FRAMED,Field,"* Constant (value {@value}) used to identify the ""framed"" Snappy compression method.\n     *\n     * @since 1.7","public static final String SNAPPY_FRAMED = ""snappy-framed"";",java.lang.String SNAPPY_FRAMED,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.SNAPPY_RAW,Field,"* Constant (value {@value}) used to identify the ""raw"" Snappy compression method. Not supported as an output stream type.\n     *\n     * @since 1.7","public static final String SNAPPY_RAW = ""snappy-raw"";",java.lang.String SNAPPY_RAW,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.Z,Field,* Constant (value {@value}) used to identify the traditional Unix compress method. Not supported as an output stream type.\n     *\n     * @since 1.7,"public static final String Z = ""z"";",java.lang.String Z,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.DEFLATE,Field,* Constant (value {@value}) used to identify the Deflate compress method.\n     *\n     * @since 1.9,"public static final String DEFLATE = ""deflate"";",java.lang.String DEFLATE,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.DEFLATE64,Field,* Constant (value {@value}) used to identify the Deflate64 compress method.\n     *\n     * @since 1.16,"public static final String DEFLATE64 = ""deflate64"";",java.lang.String DEFLATE64,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.LZ4_BLOCK,Field,* Constant (value {@value}) used to identify the block LZ4 compression method.\n     *\n     * @since 1.14,"public static final String LZ4_BLOCK = ""lz4-block"";",java.lang.String LZ4_BLOCK,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.LZ4_FRAMED,Field,* Constant (value {@value}) used to identify the frame LZ4 compression method.\n     *\n     * @since 1.14,"public static final String LZ4_FRAMED = ""lz4-framed"";",java.lang.String LZ4_FRAMED,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.ZSTANDARD,Field,* Constant (value {@value}) used to identify the Zstandard compression algorithm. Not supported as an output stream type.\n     *\n     * @since 1.16,"public static final String ZSTANDARD = ""zstd"";",java.lang.String ZSTANDARD,"public , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.YOU_NEED_BROTLI_DEC,Field,No Comment,"private static final String YOU_NEED_BROTLI_DEC = youNeed(""Google Brotli Dec"", ""https://github.com/google/brotli/"");",java.lang.String YOU_NEED_BROTLI_DEC,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.YOU_NEED_XZ_JAVA,Field,No Comment,"private static final String YOU_NEED_XZ_JAVA = youNeed(""XZ for Java"", ""https://tukaani.org/xz/java.html"");",java.lang.String YOU_NEED_XZ_JAVA,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.YOU_NEED_ZSTD_JNI,Field,No Comment,"private static final String YOU_NEED_ZSTD_JNI = youNeed(""Zstd JNI"", ""https://github.com/luben/zstd-jni"");",java.lang.String YOU_NEED_ZSTD_JNI,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.ALL_NAMES,Field,No Comment,"private static final Set<String> ALL_NAMES = Sets.newHashSet(BZIP2, GZIP, PACK200, SNAPPY_FRAMED, Z, DEFLATE, XZ, LZMA, LZ4_FRAMED, ZSTANDARD);",java.util.Set ALL_NAMES,"private , static , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEof,Field,"* If true, decompress until the end of the input. If false, stop after the first stream and leave the input position to point to the next byte after the\n     * stream",private final Boolean decompressUntilEof;,java.lang.Boolean decompressUntilEof,"private , final "
org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders,Field,No Comment,"private SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders;",java.util.SortedMap compressorInputStreamProviders,private 
org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders,Field,No Comment,"private SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders;",java.util.SortedMap compressorOutputStreamProviders,private 
org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated,Field,"* If true, decompress until the end of the input. If false, stop after the first stream and leave the input position to point to the next byte after the\n     * stream",private volatile boolean decompressConcatenated;,boolean decompressConcatenated,"private , volatile "
org.apache.commons.compress.compressors.CompressorStreamFactory.memoryLimitInKb,Field,No Comment,private final int memoryLimitInKb;,int memoryLimitInKb,"private , final "
org.apache.commons.compress.compressors.zstandard.ZstdUtils.ZSTANDARD_FRAME_MAGIC,Field,* Zstandard Frame Magic Bytes.,"private static final byte[] ZSTANDARD_FRAME_MAGIC = { (byte) 0x28, (byte) 0xB5, (byte) 0x2F, (byte) 0xFD };",byte[] ZSTANDARD_FRAME_MAGIC,"private , static , final "
org.apache.commons.compress.compressors.zstandard.ZstdUtils.SKIPPABLE_FRAME_MAGIC,Field,* Skippable Frame Magic Bytes - the three common bytes.,"private static final byte[] SKIPPABLE_FRAME_MAGIC = { (byte) 0x2A, (byte) 0x4D, (byte) 0x18 };",byte[] SKIPPABLE_FRAME_MAGIC,"private , static , final "
org.apache.commons.compress.compressors.zstandard.ZstdUtils.cachedZstdAvailability,Field,No Comment,private static volatile CachedAvailability cachedZstdAvailability;,org.apache.commons.compress.compressors.zstandard.ZstdUtils$CachedAvailability cachedZstdAvailability,"private , static , volatile "
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.decIS,Field,No Comment,private final ZstdInputStream decIS;,com.github.luben.zstd.ZstdInputStream decIS,"private , final "
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.windowSize,Field,Size of the window - must be bigger than the biggest offset expected.,private final int windowSize;,int windowSize,"private , final "
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.buf,Field,"* Buffer to write decompressed bytes to for back-references, will be three times windowSize big.\n     *\n     * <p>\n     * Three times so we can slide the whole buffer a windowSize to the left once we've read twice windowSize and still have enough data inside of it to satisfy\n     * back-references.\n     * </p>",private final byte[] buf;,byte[] buf,"private , final "
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.writeIndex,Field,"One behind the index of the last byte in the buffer that was written, i.e. the next position to write to",private int writeIndex;,int writeIndex,private 
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readIndex,Field,Index of the next byte to be read.,private int readIndex;,int readIndex,private 
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.in,Field,The underlying stream to read compressed data from,private final BoundedInputStream in;,org.apache.commons.io.input.BoundedInputStream in,"private , final "
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.bytesRemaining,Field,Number of bytes still to be read from the current literal or back-reference.,private long bytesRemaining;,long bytesRemaining,private 
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.backReferenceOffset,Field,Offset of the current back-reference.,private int backReferenceOffset;,int backReferenceOffset,private 
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.size,Field,Uncompressed size,private int size;,int size,private 
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.oneByte,Field,used in no-arg read method,private final byte[] oneByte = new byte[1];,byte[] oneByte,"private , final "
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.supplier,Field,* Supplier that delegates to {@link #readOneByte}.,protected final ByteUtils.ByteSupplier supplier = this::readOneByte;,org.apache.commons.compress.utils.ByteUtils$ByteSupplier supplier,"protected , final "
org.apache.commons.compress.compressors.lz77support.Parameters.TRUE_MIN_BACK_REFERENCE_LENGTH,Field,* The hard-coded absolute minimal length of a back-reference.,public static final int TRUE_MIN_BACK_REFERENCE_LENGTH = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;,int TRUE_MIN_BACK_REFERENCE_LENGTH,"public , static , final "
org.apache.commons.compress.compressors.lz77support.Parameters.windowSize,Field,No Comment,private final int windowSize;,int windowSize,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.minBackReferenceLength,Field,No Comment,private final int minBackReferenceLength;,int minBackReferenceLength,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.maxBackReferenceLength,Field,No Comment,private final int maxBackReferenceLength;,int maxBackReferenceLength,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.maxOffset,Field,No Comment,private final int maxOffset;,int maxOffset,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.maxLiteralLength,Field,No Comment,private final int maxLiteralLength;,int maxLiteralLength,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.niceBackReferenceLength,Field,No Comment,private final int niceBackReferenceLength;,int niceBackReferenceLength,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.maxCandidates,Field,No Comment,private final int maxCandidates;,int maxCandidates,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.lazyThreshold,Field,No Comment,private final int lazyThreshold;,int lazyThreshold,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters.lazyMatching,Field,No Comment,private final boolean lazyMatching;,boolean lazyMatching,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.windowSize,Field,No Comment,private final int windowSize;,int windowSize,"private , final "
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.minBackReferenceLength,Field,No Comment,private int minBackReferenceLength;,int minBackReferenceLength,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.maxBackReferenceLength,Field,No Comment,private int maxBackReferenceLength;,int maxBackReferenceLength,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.maxOffset,Field,No Comment,private int maxOffset;,int maxOffset,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.maxLiteralLength,Field,No Comment,private int maxLiteralLength;,int maxLiteralLength,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.niceBackReferenceLength,Field,No Comment,private Integer niceBackReferenceLength;,java.lang.Integer niceBackReferenceLength,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.maxCandidates,Field,No Comment,private Integer maxCandidates;,java.lang.Integer maxCandidates,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.lazyThreshold,Field,No Comment,private Integer lazyThreshold;,java.lang.Integer lazyThreshold,private 
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.lazyMatches,Field,No Comment,private Boolean lazyMatches;,java.lang.Boolean lazyMatches,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.NUMBER_OF_BYTES_IN_HASH,Field,No Comment,static final int NUMBER_OF_BYTES_IN_HASH = 3;,int NUMBER_OF_BYTES_IN_HASH,"static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.NO_MATCH,Field,No Comment,private static final int NO_MATCH = -1;,int NO_MATCH,"private , static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.HASH_SIZE,Field,we use a 15 bit hash code as calculated in updateHash,private static final int HASH_SIZE = 1 << 15;,int HASH_SIZE,"private , static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.HASH_MASK,Field,No Comment,private static final int HASH_MASK = HASH_SIZE - 1;,int HASH_MASK,"private , static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.H_SHIFT,Field,No Comment,private static final int H_SHIFT = 5;,int H_SHIFT,"private , static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.params,Field,No Comment,private final Parameters params;,org.apache.commons.compress.compressors.lz77support.Parameters params,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.callback,Field,No Comment,private final Callback callback;,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback callback,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.window,Field,"the sliding window, twice as big as ""windowSize"" parameter",private final byte[] window;,byte[] window,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.head,Field,the given hash.,private final int[] head;,int[] head,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prev,Field,"windowSize"".",private final int[] prev;,int[] prev,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.wMask,Field,bit mask used when indexing into prev,private final int wMask;,int wMask,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.initialized,Field,No Comment,private boolean initialized;,boolean initialized,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.currentPosition,Field,the position inside of window that shall be encoded right now,private int currentPosition;,int currentPosition,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.lookahead,Field,currentPosition,private int lookahead;,int lookahead,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertHash,Field,the hash of the three bytes stating at the current position,private int insertHash;,int insertHash,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.blockStart,Field,block starts (in case we are inside a literal block).,private int blockStart;,int blockStart,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.matchStart,Field,position of the current match,private int matchStart = NO_MATCH;,int matchStart,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.missedInserts,Field,data has been read,private int missedInserts;,int missedInserts,private 
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.offset,Field,No Comment,private final int offset;,int offset,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.length,Field,No Comment,private final int length;,int length,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.type,Field,No Comment,private final BlockType type;,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType type,"private , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD.INSTANCE,Field,* Singleton instance.,private static final EOD INSTANCE = new EOD();,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD INSTANCE,"private , static , final "
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.data,Field,No Comment,private final byte[] data;,byte[] data,"private , final "
org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil,Field,No Comment,private static final FileNameUtil fileNameUtil;,org.apache.commons.compress.compressors.FileNameUtil fileNameUtil,"private , static , final "
org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC,Field,* LZMA Header Magic Bytes begin a LZMA file.,"private static final byte[] HEADER_MAGIC = { (byte) 0x5D, 0, 0 };",byte[] HEADER_MAGIC,"private , static , final "
org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability,Field,No Comment,private static volatile CachedAvailability cachedLZMAAvailability;,org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability cachedLZMAAvailability,"private , static , volatile "
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.countingStream,Field,No Comment,private final BoundedInputStream countingStream;,org.apache.commons.io.input.BoundedInputStream countingStream,"private , final "
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in,Field,No Comment,private final InputStream in;,java.io.InputStream in,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.compressSuffix,Field,"* Map from common file name suffixes to the suffixes that identify compressed versions of those file types. For example: from "".tar"" to "".tgz"".","private final Map<String, String> compressSuffix = new HashMap<>();",java.util.Map compressSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix,Field,"* Map from common file name suffixes of compressed files to the corresponding suffixes of uncompressed files. For example: from "".tgz"" to "".tar"".\n     * <p>\n     * This map also contains format-specific suffixes like "".gz"" and ""-z"". These suffixes are mapped to the empty string, as they should simply be removed from\n     * the file name when the file is uncompressed.","private final Map<String, String> uncompressSuffix;",java.util.Map uncompressSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix,Field,* Length of the longest compressed suffix.,private final int longestCompressedSuffix;,int longestCompressedSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix,Field,* Length of the shortest compressed suffix.,private final int shortestCompressedSuffix;,int shortestCompressedSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix,Field,* Length of the longest uncompressed suffix.,private final int longestUncompressedSuffix;,int longestUncompressedSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix,Field,* Length of the shortest uncompressed suffix longer than the empty string.,private final int shortestUncompressedSuffix;,int shortestUncompressedSuffix,"private , final "
org.apache.commons.compress.compressors.FileNameUtil.defaultExtension,Field,* The format's default extension.,private final String defaultExtension;,java.lang.String defaultExtension,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MIN_BLOCKSIZE,Field,* The minimum supported blocksize {@code  == 1}.,public static final int MIN_BLOCKSIZE = 1;,int MIN_BLOCKSIZE,"public , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.MAX_BLOCKSIZE,Field,* The maximum supported blocksize {@code  == 9}.,public static final int MAX_BLOCKSIZE = 9;,int MAX_BLOCKSIZE,"public , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.GREATER_ICOST,Field,No Comment,private static final int GREATER_ICOST = 15;,int GREATER_ICOST,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.LESSER_ICOST,Field,No Comment,private static final int LESSER_ICOST = 0;,int LESSER_ICOST,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last,Field,"* Index of the last char in the block, so the block size == last + 1.",private int last;,int last,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k,Field,* Always: in the range 0 .. 9. The current block size is 100000 * this number.,private final int blockSize100k;,int blockSize100k,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff,Field,No Comment,private int bsBuff;,int bsBuff,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive,Field,No Comment,private int bsLive;,int bsLive,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc,Field,No Comment,private final CRC crc = new CRC();,org.apache.commons.compress.compressors.bzip2.CRC crc,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse,Field,No Comment,private int nInUse;,int nInUse,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF,Field,No Comment,private int nMTF;,int nMTF,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar,Field,No Comment,private int currentChar = -1;,int currentChar,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength,Field,No Comment,private int runLength;,int runLength,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC,Field,No Comment,private int combinedCRC;,int combinedCRC,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize,Field,No Comment,private final int allowableBlockSize;,int allowableBlockSize,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data,Field,* All memory intensive stuff.,private Data data;,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter,Field,No Comment,private BlockSort blockSorter;,org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.inUse,Field,256 byte,final boolean[] inUse = new boolean[256];,boolean[] inUse,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.unseqToSeq,Field,256 byte,final byte[] unseqToSeq = new byte[256];,byte[] unseqToSeq,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.mtfFreq,Field,1032 byte,final int[] mtfFreq = new int[MAX_ALPHA_SIZE];,int[] mtfFreq,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.selector,Field,18002 byte,final byte[] selector = new byte[MAX_SELECTORS];,byte[] selector,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.selectorMtf,Field,18002 byte,final byte[] selectorMtf = new byte[MAX_SELECTORS];,byte[] selectorMtf,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.generateMTFValues_yy,Field,256 byte,final byte[] generateMTFValues_yy = new byte[256];,byte[] generateMTFValues_yy,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues_len,Field,1548,final byte[][] sendMTFValues_len = new byte[N_GROUPS][MAX_ALPHA_SIZE];,byte[][] sendMTFValues_len,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues_rfreq,Field,6192,final int[][] sendMTFValues_rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE];,int[][] sendMTFValues_rfreq,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues_fave,Field,24 byte,final int[] sendMTFValues_fave = new int[N_GROUPS];,int[] sendMTFValues_fave,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues_cost,Field,12 byte,final short[] sendMTFValues_cost = new short[N_GROUPS];,short[] sendMTFValues_cost,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues_code,Field,6192,final int[][] sendMTFValues_code = new int[N_GROUPS][MAX_ALPHA_SIZE];,int[][] sendMTFValues_code,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sendMTFValues2_pos,Field,6 byte,final byte[] sendMTFValues2_pos = new byte[N_GROUPS];,byte[] sendMTFValues2_pos,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sentMTFValues4_inUse16,Field,16 byte,final boolean[] sentMTFValues4_inUse16 = new boolean[16];,boolean[] sentMTFValues4_inUse16,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.heap,Field,1040 byte,final int[] heap = new int[MAX_ALPHA_SIZE + 2];,int[] heap,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.weight,Field,2064 byte,final int[] weight = new int[MAX_ALPHA_SIZE * 2];,int[] weight,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.parent,Field,2064 byte,final int[] parent = new int[MAX_ALPHA_SIZE * 2];,int[] parent,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.block,Field,900021 byte,final byte[] block;,byte[] block,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.fmap,Field,3600000 byte,final int[] fmap;,int[] fmap,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.sfmap,Field,3600000 byte,final char[] sfmap;,char[] sfmap,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.origPtr,Field,* Index of original line in Burrows-Wheeler table.\n         *\n         * <p>\n         * This is the index in fmap that points to the last byte of the original data.\n         * </p>,int origPtr;,int origPtr,default
org.apache.commons.compress.compressors.bzip2.BlockSort.FTAB_LENGTH,Field,262148 byte,private static final int FTAB_LENGTH = 65537;,int FTAB_LENGTH,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.QSORT_STACK_SIZE,Field,"* LBZ2: If you are ever unlucky/improbable enough to get a stack overflow whilst sorting, increase the following constant and try again. In practice I have\n     * never seen the stack go above 27 elems, so the following limit seems very generous.",private static final int QSORT_STACK_SIZE = 1000;,int QSORT_STACK_SIZE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_STACK_SIZE,Field,No Comment,private static final int FALLBACK_QSORT_STACK_SIZE = 100;,int FALLBACK_QSORT_STACK_SIZE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.STACK_SIZE,Field,No Comment,"private static final int STACK_SIZE = Math.max(QSORT_STACK_SIZE, FALLBACK_QSORT_STACK_SIZE);",int STACK_SIZE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.FALLBACK_QSORT_SMALL_THRESH,Field,No Comment,private static final int FALLBACK_QSORT_SMALL_THRESH = 10;,int FALLBACK_QSORT_SMALL_THRESH,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.INCS,Field,"* LBZ2: Knuth's increments seem to work better than Incerpi-Sedgewick here. Possibly because the number of elems to sort is usually small, typically &lt;=\n     * 20.","private static final int[] INCS = { 1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484 };",int[] INCS,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.SMALL_THRESH,Field,No Comment,private static final int SMALL_THRESH = 20;,int SMALL_THRESH,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.DEPTH_THRESH,Field,No Comment,private static final int DEPTH_THRESH = 10;,int DEPTH_THRESH,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.WORK_FACTOR,Field,No Comment,private static final int WORK_FACTOR = 30;,int WORK_FACTOR,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.SETMASK,Field,No Comment,private static final int SETMASK = 1 << 21;,int SETMASK,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.CLEARMASK,Field,No Comment,private static final int CLEARMASK = ~SETMASK;,int CLEARMASK,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.workDone,Field,"* Used when sorting. If too many long comparisons happen, we stop sorting, and use fallbackSort instead.",private int workDone;,int workDone,private 
org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit,Field,No Comment,private int workLimit;,int workLimit,private 
org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt,Field,No Comment,private boolean firstAttempt;,boolean firstAttempt,private 
org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll,Field,4000 byte,private final int[] stack_ll = new int[STACK_SIZE];,int[] stack_ll,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh,Field,4000 byte,private final int[] stack_hh = new int[STACK_SIZE];,int[] stack_hh,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd,Field,4000 byte,private final int[] stack_dd = new int[QSORT_STACK_SIZE];,int[] stack_dd,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder,Field,1024 byte,private final int[] mainSort_runningOrder = new int[256];,int[] mainSort_runningOrder,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy,Field,1024 byte,private final int[] mainSort_copy = new int[256];,int[] mainSort_copy,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone,Field,256 byte,private final boolean[] mainSort_bigDone = new boolean[256];,boolean[] mainSort_bigDone,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.ftab,Field,262148 byte,private final int[] ftab = new int[FTAB_LENGTH];,int[] ftab,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant,Field,"* Array instance identical to Data's sfmap, both are used only temporarily and indepently, so we do not need to allocate additional memory.",private final char[] quadrant;,char[] quadrant,"private , final "
org.apache.commons.compress.compressors.bzip2.BlockSort.eclass,Field,No Comment,private int[] eclass;,int[] eclass,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF,Field,No Comment,private static final int EOF = 0;,int EOF,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE,Field,No Comment,private static final int START_BLOCK_STATE = 1;,int START_BLOCK_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE,Field,No Comment,private static final int RAND_PART_A_STATE = 2;,int RAND_PART_A_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE,Field,No Comment,private static final int RAND_PART_B_STATE = 3;,int RAND_PART_B_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE,Field,No Comment,private static final int RAND_PART_C_STATE = 4;,int RAND_PART_C_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE,Field,No Comment,private static final int NO_RAND_PART_A_STATE = 5;,int NO_RAND_PART_A_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE,Field,No Comment,private static final int NO_RAND_PART_B_STATE = 6;,int NO_RAND_PART_B_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE,Field,No Comment,private static final int NO_RAND_PART_C_STATE = 7;,int NO_RAND_PART_C_STATE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last,Field,"* Index of the last char in the block, so the block size == last + 1.",private int last;,int last,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr,Field,* Index in zptr[] of original string after sorting.,private int origPtr;,int origPtr,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k,Field,* always: in the range 0 .. 9. The current block size is 100000 * this number.,private int blockSize100k;,int blockSize100k,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised,Field,No Comment,private boolean blockRandomised;,boolean blockRandomised,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc,Field,No Comment,private final CRC crc = new CRC();,org.apache.commons.compress.compressors.bzip2.CRC crc,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse,Field,No Comment,private int nInUse;,int nInUse,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bin,Field,No Comment,private BitInputStream bin;,org.apache.commons.compress.utils.BitInputStream bin,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated,Field,No Comment,private final boolean decompressConcatenated;,boolean decompressConcatenated,"private , final "
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState,Field,No Comment,private int currentState = START_BLOCK_STATE;,int currentState,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC,Field,No Comment,private int storedBlockCRC;,int storedBlockCRC,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC,Field,No Comment,private int storedCombinedCRC;,int storedCombinedCRC,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC,Field,No Comment,private int computedCombinedCRC;,int computedCombinedCRC,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count,Field,No Comment,private int su_count;,int su_count,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2,Field,No Comment,private int su_ch2;,int su_ch2,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev,Field,No Comment,private int su_chPrev;,int su_chPrev,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2,Field,No Comment,private int su_i2;,int su_i2,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2,Field,No Comment,private int su_j2;,int su_j2,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo,Field,No Comment,private int su_rNToGo;,int su_rNToGo,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos,Field,No Comment,private int su_rTPos;,int su_rTPos,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos,Field,No Comment,private int su_tPos;,int su_tPos,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z,Field,No Comment,private char su_z;,char su_z,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data,Field,* All memory intensive stuff. This field is initialized by initBlock().,private BZip2CompressorInputStream.Data data;,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data data,private 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.inUse,Field,256 byte,final boolean[] inUse = new boolean[256];,boolean[] inUse,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.seqToUnseq,Field,256 byte,final byte[] seqToUnseq = new byte[256];,byte[] seqToUnseq,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.selector,Field,18002 byte,final byte[] selector = new byte[MAX_SELECTORS];,byte[] selector,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.selectorMtf,Field,18002 byte,final byte[] selectorMtf = new byte[MAX_SELECTORS];,byte[] selectorMtf,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.unzftab,Field,1024 byte,final int[] unzftab = new int[256];,int[] unzftab,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.limit,Field,6192 byte,final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];,int[][] limit,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.base,Field,6192 byte,final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];,int[][] base,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.perm,Field,6192 byte,final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];,int[][] perm,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.minLens,Field,24 byte,final int[] minLens = new int[N_GROUPS];,int[] minLens,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.cftab,Field,1028 byte,final int[] cftab = new int[257];,int[] cftab,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.getAndMoveToFrontDecode_yy,Field,512 byte,final char[] getAndMoveToFrontDecode_yy = new char[256];,char[] getAndMoveToFrontDecode_yy,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.temp_charArray2d,Field,3096,final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];,char[][] temp_charArray2d,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.recvDecodingTables_pos,Field,6 byte,final byte[] recvDecodingTables_pos = new byte[N_GROUPS];,byte[] recvDecodingTables_pos,final 
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.tt,Field,3600000 byte,int[] tt;,int[] tt,default
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.ll8,Field,900000 byte,final byte[] ll8;,byte[] ll8,final 
org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil,Field,No Comment,private static final FileNameUtil fileNameUtil;,org.apache.commons.compress.compressors.FileNameUtil fileNameUtil,"private , static , final "
org.apache.commons.compress.compressors.bzip2.CRC.DEFAULT,Field,No Comment,private static final int DEFAULT = 0xffffffff;,int DEFAULT,"private , static , final "
org.apache.commons.compress.compressors.bzip2.CRC.CRC32_TABLE,Field,No Comment,"private static final int[] CRC32_TABLE = { 0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75, 0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d, 0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072, 0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba, 0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2, 0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53, 0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b, 0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3, 0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec, 0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4 };",int[] CRC32_TABLE,"private , static , final "
org.apache.commons.compress.compressors.bzip2.CRC.crc,Field,No Comment,private int crc;,int crc,private 
org.apache.commons.compress.compressors.bzip2.BZip2Constants.BASEBLOCKSIZE,Field,* Constant {@value}.,int BASEBLOCKSIZE = 100_000;,int BASEBLOCKSIZE,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE,Field,* Constant {@value}.,int MAX_ALPHA_SIZE = 258;,int MAX_ALPHA_SIZE,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_CODE_LEN,Field,* Constant {@value}.,int MAX_CODE_LEN = 23;,int MAX_CODE_LEN,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNA,Field,* Constant {@value}.,int RUNA = 0;,int RUNA,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNB,Field,* Constant {@value}.,int RUNB = 1;,int RUNB,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS,Field,* Constant {@value}.,int N_GROUPS = 6;,int N_GROUPS,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE,Field,* Constant {@value}.,int G_SIZE = 50;,int G_SIZE,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_ITERS,Field,* Constant {@value}.,int N_ITERS = 4;,int N_ITERS,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_SELECTORS,Field,* Constant {@value}.,int MAX_SELECTORS = 2 + 900_000 / G_SIZE;,int MAX_SELECTORS,default
org.apache.commons.compress.compressors.bzip2.BZip2Constants.NUM_OVERSHOOT_BYTES,Field,* Constant {@value}.,int NUM_OVERSHOOT_BYTES = 20;,int NUM_OVERSHOOT_BYTES,default
org.apache.commons.compress.compressors.bzip2.Rand.RNUMS,Field,No Comment,"private static final int[] RNUMS = { 619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 936, 638 };",int[] RNUMS,"private , static , final "
org.apache.commons.compress.MemoryLimitException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
org.apache.commons.compress.MemoryLimitException.memoryNeededKiB,Field,A long instead of int to account for overflow for corrupt files.,private final long memoryNeededKiB;,long memoryNeededKiB,"private , final "
org.apache.commons.compress.MemoryLimitException.memoryLimitKiB,Field,No Comment,private final int memoryLimitKiB;,int memoryLimitKiB,"private , final "
org.apache.commons.compress.PasswordRequiredException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1391070005491684483L;,long serialVersionUID,"private , static , final "
