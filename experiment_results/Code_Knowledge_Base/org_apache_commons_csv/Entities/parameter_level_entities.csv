FEN:ID,:LABEL,Parameter Name,Data Type
"org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat).file",Parameter_1,file,java.io.File
"org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat).format",Parameter_3,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat).format",Parameter_3,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat).path",Parameter_1,path,java.nio.file.Path
"org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat).format",Parameter_3,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.parse(String,CSVFormat).string",Parameter_1,string,java.lang.String
"org.apache.commons.csv.CSVParser.parse(String,CSVFormat).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat).url",Parameter_1,url,java.net.URL
"org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat).format",Parameter_3,format,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.CSVParser.addRecordValue(boolean).lastRecord,Parameter_1,lastRecord,boolean
org.apache.commons.csv.CSVParser.handleNull(String).input,Parameter_1,input,java.lang.String
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long).characterOffset",Parameter_3,characterOffset,long
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long).recordNumber",Parameter_4,recordNumber,long
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).characterOffset",Parameter_3,characterOffset,long
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).recordNumber",Parameter_4,recordNumber,long
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).charset",Parameter_5,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVParser.<init>(Reader,CSVFormat,long,long,Charset,boolean).trackBytes",Parameter_6,trackBytes,boolean
org.apache.commons.csv.CSVParser$Builder.setCharacterOffset(long).characterOffset,Parameter_1,characterOffset,long
org.apache.commons.csv.CSVParser$Builder.setFormat(CSVFormat).format,Parameter_1,format,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.CSVParser$Builder.setRecordNumber(long).recordNumber,Parameter_1,recordNumber,long
org.apache.commons.csv.CSVParser$Builder.setTrackBytes(boolean).trackBytes,Parameter_1,trackBytes,boolean
"org.apache.commons.csv.CSVParser$Headers.<init>(Map,List).headerMap",Parameter_1,headerMap,java.util.Map
"org.apache.commons.csv.CSVParser$Headers.<init>(Map,List).headerNames",Parameter_2,headerNames,java.util.List
org.apache.commons.csv.CSVPrinter.close(boolean).flush,Parameter_1,flush,boolean
org.apache.commons.csv.CSVPrinter.print(Object).value,Parameter_1,value,java.lang.Object
org.apache.commons.csv.CSVPrinter.printComment(String).comment,Parameter_1,comment,java.lang.String
org.apache.commons.csv.CSVPrinter.printHeaders(ResultSet).resultSet,Parameter_1,resultSet,java.sql.ResultSet
org.apache.commons.csv.CSVPrinter.printRecord(Iterable).values,Parameter_1,values,java.lang.Iterable
org.apache.commons.csv.CSVPrinter.printRecord(Object[]).values,Parameter_1,values,java.lang.Object[]
org.apache.commons.csv.CSVPrinter.printRecord(Stream).values,Parameter_1,values,java.util.stream.Stream
org.apache.commons.csv.CSVPrinter.printRecordObject(Object).value,Parameter_1,value,java.lang.Object
org.apache.commons.csv.CSVPrinter.printRecords(IOStream).stream,Parameter_1,stream,org.apache.commons.io.function.IOStream
org.apache.commons.csv.CSVPrinter.printRecords(Iterable).values,Parameter_1,values,java.lang.Iterable
org.apache.commons.csv.CSVPrinter.printRecords(Object[]).values,Parameter_1,values,java.lang.Object[]
org.apache.commons.csv.CSVPrinter.printRecords(ResultSet).resultSet,Parameter_1,resultSet,java.sql.ResultSet
"org.apache.commons.csv.CSVPrinter.printRecords(ResultSet,boolean).resultSet",Parameter_1,resultSet,java.sql.ResultSet
"org.apache.commons.csv.CSVPrinter.printRecords(ResultSet,boolean).printHeader",Parameter_2,printHeader,boolean
org.apache.commons.csv.CSVPrinter.printRecords(Stream).values,Parameter_1,values,java.util.stream.Stream
"org.apache.commons.csv.CSVPrinter.<init>(Appendable,CSVFormat).appendable",Parameter_1,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVPrinter.<init>(Appendable,CSVFormat).format",Parameter_2,format,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.CSVFormat.clone(Object[]).values,Parameter_1,values,java.lang.Object[]
"org.apache.commons.csv.CSVFormat.contains(String,char).source",Parameter_1,source,java.lang.String
"org.apache.commons.csv.CSVFormat.contains(String,char).searchCh",Parameter_2,searchCh,char
org.apache.commons.csv.CSVFormat.containsLineBreak(String).source,Parameter_1,source,java.lang.String
org.apache.commons.csv.CSVFormat.copy(CSVFormat).format,Parameter_1,format,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.CSVFormat.isBlank(String).value,Parameter_1,value,java.lang.String
org.apache.commons.csv.CSVFormat.isLineBreak(char).c,Parameter_1,c,char
org.apache.commons.csv.CSVFormat.isLineBreak(Character).c,Parameter_1,c,java.lang.Character
org.apache.commons.csv.CSVFormat.isTrimChar(char).ch,Parameter_1,ch,char
"org.apache.commons.csv.CSVFormat.isTrimChar(CharSequence,int).charSequence",Parameter_1,charSequence,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.isTrimChar(CharSequence,int).pos",Parameter_2,pos,int
org.apache.commons.csv.CSVFormat.newFormat(char).delimiter,Parameter_1,delimiter,char
org.apache.commons.csv.CSVFormat.toStringArray(Object[]).values,Parameter_1,values,java.lang.Object[]
org.apache.commons.csv.CSVFormat.trim(CharSequence).charSequence,Parameter_1,charSequence,java.lang.CharSequence
org.apache.commons.csv.CSVFormat.valueOf(String).format,Parameter_1,format,java.lang.String
"org.apache.commons.csv.CSVFormat.append(char,Appendable).c",Parameter_1,c,char
"org.apache.commons.csv.CSVFormat.append(char,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.append(CharSequence,Appendable).csq",Parameter_1,csq,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.append(CharSequence,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
org.apache.commons.csv.CSVFormat.equals(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.csv.CSVFormat.escape(char,Appendable).c",Parameter_1,c,char
"org.apache.commons.csv.CSVFormat.escape(char,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
org.apache.commons.csv.CSVFormat.format(Object[]).values,Parameter_1,values,java.lang.Object[]
org.apache.commons.csv.CSVFormat.format_(Object[]).values,Parameter_1,values,java.lang.Object[]
"org.apache.commons.csv.CSVFormat.isDelimiter(char,CharSequence,int,char[],int).ch0",Parameter_1,ch0,char
"org.apache.commons.csv.CSVFormat.isDelimiter(char,CharSequence,int,char[],int).charSeq",Parameter_2,charSeq,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.isDelimiter(char,CharSequence,int,char[],int).startIndex",Parameter_3,startIndex,int
"org.apache.commons.csv.CSVFormat.isDelimiter(char,CharSequence,int,char[],int).delimiter",Parameter_4,delimiter,char[]
"org.apache.commons.csv.CSVFormat.isDelimiter(char,CharSequence,int,char[],int).delimiterLength",Parameter_5,delimiterLength,int
org.apache.commons.csv.CSVFormat.limit(IOStream).stream,Parameter_1,stream,org.apache.commons.io.function.IOStream
org.apache.commons.csv.CSVFormat.limit(Stream).stream,Parameter_1,stream,java.util.stream.Stream
org.apache.commons.csv.CSVFormat.parse(Reader).reader,Parameter_1,reader,java.io.Reader
org.apache.commons.csv.CSVFormat.print(Appendable).out,Parameter_1,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.print(File,Charset).out",Parameter_1,out,java.io.File
"org.apache.commons.csv.CSVFormat.print(File,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVFormat.print(InputStream,Appendable,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.csv.CSVFormat.print(InputStream,Appendable,boolean).out",Parameter_2,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.print(InputStream,Appendable,boolean).newRecord",Parameter_3,newRecord,boolean
"org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean).value",Parameter_1,value,java.lang.Object
"org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean).out",Parameter_2,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean).newRecord",Parameter_3,newRecord,boolean
"org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean).object",Parameter_1,object,java.lang.Object
"org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean).value",Parameter_2,value,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean).out",Parameter_3,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean).newRecord",Parameter_4,newRecord,boolean
"org.apache.commons.csv.CSVFormat.print(Path,Charset).out",Parameter_1,out,java.nio.file.Path
"org.apache.commons.csv.CSVFormat.print(Path,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean).out",Parameter_2,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean).newRecord",Parameter_3,newRecord,boolean
org.apache.commons.csv.CSVFormat.println(Appendable).appendable,Parameter_1,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[]).appendable",Parameter_1,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[]).values",Parameter_2,values,java.lang.Object[]
"org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable).charSeq",Parameter_1,charSeq,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean).object",Parameter_1,object,java.lang.Object
"org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean).charSeq",Parameter_2,charSeq,java.lang.CharSequence
"org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean).out",Parameter_3,out,java.lang.Appendable
"org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean).newRecord",Parameter_4,newRecord,boolean
"org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable).appendable",Parameter_2,appendable,java.lang.Appendable
org.apache.commons.csv.CSVFormat.trim(String).value,Parameter_1,value,java.lang.String
org.apache.commons.csv.CSVFormat.useRow(long).rowNum,Parameter_1,rowNum,long
org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean).allowDuplicateHeaderNames,Parameter_1,allowDuplicateHeaderNames,boolean
org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean).allowMissingColumnNames,Parameter_1,allowMissingColumnNames,boolean
org.apache.commons.csv.CSVFormat.withAutoFlush(boolean).autoFlush,Parameter_1,autoFlush,boolean
org.apache.commons.csv.CSVFormat.withCommentMarker(char).commentMarker,Parameter_1,commentMarker,char
org.apache.commons.csv.CSVFormat.withCommentMarker(Character).commentMarker,Parameter_1,commentMarker,java.lang.Character
org.apache.commons.csv.CSVFormat.withDelimiter(char).delimiter,Parameter_1,delimiter,char
org.apache.commons.csv.CSVFormat.withEscape(char).escape,Parameter_1,escape,char
org.apache.commons.csv.CSVFormat.withEscape(Character).escape,Parameter_1,escape,java.lang.Character
org.apache.commons.csv.CSVFormat.withHeader(Class).headerEnum,Parameter_1,headerEnum,java.lang.Class
org.apache.commons.csv.CSVFormat.withHeader(ResultSet).resultSet,Parameter_1,resultSet,java.sql.ResultSet
org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData).resultSetMetaData,Parameter_1,resultSetMetaData,java.sql.ResultSetMetaData
org.apache.commons.csv.CSVFormat.withHeader(String[]).header,Parameter_1,header,java.lang.String[]
org.apache.commons.csv.CSVFormat.withHeaderComments(Object[]).headerComments,Parameter_1,headerComments,java.lang.Object[]
org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean).ignoreEmptyLines,Parameter_1,ignoreEmptyLines,boolean
org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean).ignoreHeaderCase,Parameter_1,ignoreHeaderCase,boolean
org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean).ignoreSurroundingSpaces,Parameter_1,ignoreSurroundingSpaces,boolean
org.apache.commons.csv.CSVFormat.withNullString(String).nullString,Parameter_1,nullString,java.lang.String
org.apache.commons.csv.CSVFormat.withQuote(char).quoteChar,Parameter_1,quoteChar,char
org.apache.commons.csv.CSVFormat.withQuote(Character).quoteChar,Parameter_1,quoteChar,java.lang.Character
org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode).quoteMode,Parameter_1,quoteMode,org.apache.commons.csv.QuoteMode
org.apache.commons.csv.CSVFormat.withRecordSeparator(char).recordSeparator,Parameter_1,recordSeparator,char
org.apache.commons.csv.CSVFormat.withRecordSeparator(String).recordSeparator,Parameter_1,recordSeparator,java.lang.String
org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean).skipHeaderRecord,Parameter_1,skipHeaderRecord,boolean
org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean).trailingDelimiter,Parameter_1,trailingDelimiter,boolean
org.apache.commons.csv.CSVFormat.withTrim(boolean).trim,Parameter_1,trim,boolean
org.apache.commons.csv.CSVFormat.<init>(Builder).builder,Parameter_1,builder,org.apache.commons.csv.CSVFormat$Builder
org.apache.commons.csv.CSVFormat$Builder.create(CSVFormat).csvFormat,Parameter_1,csvFormat,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.CSVFormat$Builder.setAllowDuplicateHeaderNames(boolean).allowDuplicateHeaderNames,Parameter_1,allowDuplicateHeaderNames,boolean
org.apache.commons.csv.CSVFormat$Builder.setAllowMissingColumnNames(boolean).allowMissingColumnNames,Parameter_1,allowMissingColumnNames,boolean
org.apache.commons.csv.CSVFormat$Builder.setAutoFlush(boolean).autoFlush,Parameter_1,autoFlush,boolean
org.apache.commons.csv.CSVFormat$Builder.setCommentMarker(char).commentMarker,Parameter_1,commentMarker,char
org.apache.commons.csv.CSVFormat$Builder.setCommentMarker(Character).commentMarker,Parameter_1,commentMarker,java.lang.Character
org.apache.commons.csv.CSVFormat$Builder.setDelimiter(char).delimiter,Parameter_1,delimiter,char
org.apache.commons.csv.CSVFormat$Builder.setDelimiter(String).delimiter,Parameter_1,delimiter,java.lang.String
org.apache.commons.csv.CSVFormat$Builder.setDuplicateHeaderMode(DuplicateHeaderMode).duplicateHeaderMode,Parameter_1,duplicateHeaderMode,org.apache.commons.csv.DuplicateHeaderMode
org.apache.commons.csv.CSVFormat$Builder.setEscape(char).escapeCharacter,Parameter_1,escapeCharacter,char
org.apache.commons.csv.CSVFormat$Builder.setEscape(Character).escapeCharacter,Parameter_1,escapeCharacter,java.lang.Character
org.apache.commons.csv.CSVFormat$Builder.setHeader(Class).headerEnum,Parameter_1,headerEnum,java.lang.Class
org.apache.commons.csv.CSVFormat$Builder.setHeader(ResultSet).resultSet,Parameter_1,resultSet,java.sql.ResultSet
org.apache.commons.csv.CSVFormat$Builder.setHeader(ResultSetMetaData).resultSetMetaData,Parameter_1,resultSetMetaData,java.sql.ResultSetMetaData
org.apache.commons.csv.CSVFormat$Builder.setHeader(String[]).header,Parameter_1,header,java.lang.String[]
org.apache.commons.csv.CSVFormat$Builder.setHeaderComments(Object[]).headerComments,Parameter_1,headerComments,java.lang.Object[]
org.apache.commons.csv.CSVFormat$Builder.setHeaderComments(String[]).headerComments,Parameter_1,headerComments,java.lang.String[]
org.apache.commons.csv.CSVFormat$Builder.setIgnoreEmptyLines(boolean).ignoreEmptyLines,Parameter_1,ignoreEmptyLines,boolean
org.apache.commons.csv.CSVFormat$Builder.setIgnoreHeaderCase(boolean).ignoreHeaderCase,Parameter_1,ignoreHeaderCase,boolean
org.apache.commons.csv.CSVFormat$Builder.setIgnoreSurroundingSpaces(boolean).ignoreSurroundingSpaces,Parameter_1,ignoreSurroundingSpaces,boolean
org.apache.commons.csv.CSVFormat$Builder.setLenientEof(boolean).lenientEof,Parameter_1,lenientEof,boolean
org.apache.commons.csv.CSVFormat$Builder.setMaxRows(long).maxRows,Parameter_1,maxRows,long
org.apache.commons.csv.CSVFormat$Builder.setNullString(String).nullString,Parameter_1,nullString,java.lang.String
org.apache.commons.csv.CSVFormat$Builder.setQuote(char).quoteCharacter,Parameter_1,quoteCharacter,char
org.apache.commons.csv.CSVFormat$Builder.setQuote(Character).quoteCharacter,Parameter_1,quoteCharacter,java.lang.Character
org.apache.commons.csv.CSVFormat$Builder.setQuoteMode(QuoteMode).quoteMode,Parameter_1,quoteMode,org.apache.commons.csv.QuoteMode
org.apache.commons.csv.CSVFormat$Builder.setRecordSeparator(char).recordSeparator,Parameter_1,recordSeparator,char
org.apache.commons.csv.CSVFormat$Builder.setRecordSeparator(String).recordSeparator,Parameter_1,recordSeparator,java.lang.String
org.apache.commons.csv.CSVFormat$Builder.setSkipHeaderRecord(boolean).skipHeaderRecord,Parameter_1,skipHeaderRecord,boolean
org.apache.commons.csv.CSVFormat$Builder.setTrailingData(boolean).trailingData,Parameter_1,trailingData,boolean
org.apache.commons.csv.CSVFormat$Builder.setTrailingDelimiter(boolean).trailingDelimiter,Parameter_1,trailingDelimiter,boolean
org.apache.commons.csv.CSVFormat$Builder.setTrim(boolean).trim,Parameter_1,trim,boolean
org.apache.commons.csv.CSVFormat$Builder.<init>(CSVFormat).csvFormat,Parameter_1,csvFormat,org.apache.commons.csv.CSVFormat
org.apache.commons.csv.ExtendedBufferedReader.getEncodedCharLength(int).current,Parameter_1,current,int
org.apache.commons.csv.ExtendedBufferedReader.mark(int).readAheadLimit,Parameter_1,readAheadLimit,int
"org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int).buf",Parameter_1,buf,char[]
"org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int).length",Parameter_3,length,int
org.apache.commons.csv.ExtendedBufferedReader.<init>(Reader).reader,Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.ExtendedBufferedReader.<init>(Reader,Charset,boolean).reader",Parameter_1,reader,java.io.Reader
"org.apache.commons.csv.ExtendedBufferedReader.<init>(Reader,Charset,boolean).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.csv.ExtendedBufferedReader.<init>(Reader,Charset,boolean).trackBytes",Parameter_3,trackBytes,boolean
org.apache.commons.csv.Lexer.appendNextEscapedCharacterToToken(Token).token,Parameter_1,token,org.apache.commons.csv.Token
org.apache.commons.csv.Lexer.isCommentStart(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isDelimiter(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isEndOfFile(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isEscape(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isMetaChar(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isQuoteChar(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.isStartOfLine(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.nextToken(Token).token,Parameter_1,token,org.apache.commons.csv.Token
org.apache.commons.csv.Lexer.nullToDisabled(Character).c,Parameter_1,c,java.lang.Character
org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token).token,Parameter_1,token,org.apache.commons.csv.Token
"org.apache.commons.csv.Lexer.parseSimpleToken(Token,int).token",Parameter_1,token,org.apache.commons.csv.Token
"org.apache.commons.csv.Lexer.parseSimpleToken(Token,int).ch",Parameter_2,ch,int
org.apache.commons.csv.Lexer.readEndOfLine(int).ch,Parameter_1,ch,int
org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder).buffer,Parameter_1,buffer,java.lang.StringBuilder
"org.apache.commons.csv.Lexer.<init>(CSVFormat,ExtendedBufferedReader).format",Parameter_1,format,org.apache.commons.csv.CSVFormat
"org.apache.commons.csv.Lexer.<init>(CSVFormat,ExtendedBufferedReader).reader",Parameter_2,reader,org.apache.commons.csv.ExtendedBufferedReader
"org.apache.commons.csv.CSVException.<init>(String,Object[]).format",Parameter_1,format,java.lang.String
"org.apache.commons.csv.CSVException.<init>(String,Object[]).args",Parameter_2,args,java.lang.Object[]
org.apache.commons.csv.CSVRecord.get(Enum).e,Parameter_1,e,java.lang.Enum
org.apache.commons.csv.CSVRecord.get(int).i,Parameter_1,i,int
org.apache.commons.csv.CSVRecord.get(String).name,Parameter_1,name,java.lang.String
org.apache.commons.csv.CSVRecord.isMapped(String).name,Parameter_1,name,java.lang.String
org.apache.commons.csv.CSVRecord.isSet(int).index,Parameter_1,index,int
org.apache.commons.csv.CSVRecord.isSet(String).name,Parameter_1,name,java.lang.String
org.apache.commons.csv.CSVRecord.putIn(Map).map,Parameter_1,map,java.util.Map
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).parser",Parameter_1,parser,org.apache.commons.csv.CSVParser
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).values",Parameter_2,values,java.lang.String[]
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).comment",Parameter_3,comment,java.lang.String
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).recordNumber",Parameter_4,recordNumber,long
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).characterPosition",Parameter_5,characterPosition,long
"org.apache.commons.csv.CSVRecord.<init>(CSVParser,String[],String,long,long,long).bytePosition",Parameter_6,bytePosition,long
