FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
org.apache.commons.collections4.BidiMap,Interface,"* Defines a map that allows bidirectional lookup between key and values.\n * <p>\n * This extended {@code Map} represents a mapping where a key may\n * lookup a value and a value may lookup a key with equal ease.\n * This interface extends {@code Map} and so may be used anywhere a map\n * is required. The interface provides an inverse map view, enabling\n * full access to both directions of the {@code BidiMap}.\n * </p>\n * <p>\n * Implementations should allow a value to be looked up from a key and\n * a key to be looked up from a value with equal performance.\n * </p>\n * <p>\n * This map enforces the restriction that there is a 1:1 relation between\n * keys and values, meaning that multiple keys cannot map to the same value.\n * This is required so that ""inverting"" the map results in a map without\n * duplicate keys. See the {@link #put} method description for more information.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0",public ,org.apache.commons.collections4.IterableMap,
org.apache.commons.collections4.Equator,Interface,"* An equation function, which determines equality between objects of type T.\n * <p>\n * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to\n * {@link Object} as {@link java.util.Comparator} is to {@link Comparable}.\n * </p>\n *\n * @param <T> the types of object this {@link Equator} can evaluate.\n * @since 4.0",public ,,
org.apache.commons.collections4.MultiSet,Interface,"* Defines a collection that counts the number of times an object appears in\n * the collection.\n * <p>\n * Suppose you have a MultiSet that contains {@code {a, a, b, c}}.\n * Calling {@link #getCount(Object)} on {@code a} would return 2, while\n * calling {@link #uniqueSet()} would return {@code {a, b, c}}.\n * </p>\n *\n * @param <E> the type held in the multiset\n * @since 4.1",public ,java.util.Collection,
org.apache.commons.collections4.MultiSet$Entry,Interface,* An unmodifiable entry for an element and its occurrence as contained in a MultiSet.\n     * <p>\n     * The {@link MultiSet#entrySet()} method returns a view of the multiset whose elements\n     * implement this interface.\n     * </p>\n     *\n     * @param <E>  the element type,,,
org.apache.commons.collections4.IteratorUtils,Class,* Provides static utility methods and decorators for {@link Iterator}\n * instances. The implementations are provided in the iterators subpackage.\n *\n * @since 2.1,public ,,
org.apache.commons.collections4.ComparatorUtils,Class,* Provides convenient static utility methods for <Code>Comparator</Code>\n * objects.\n * <p>\n * Most of the functionality in this class can also be found in the\n * {@code comparators} package. This class merely provides a\n * convenient central place if you have use for more than one class\n * in the {@code comparators} subpackage.\n * </p>\n *\n * @since 2.1,public ,,
org.apache.commons.collections4.FunctorException,Class,"* Runtime exception thrown from functors.\n * If required, a root cause error can be wrapped within this one.\n *\n * @since 3.0",public ,java.lang.RuntimeException,
org.apache.commons.collections4.bidimap.AbstractDualBidiMap,Abstract Class,"* Abstract {@link BidiMap} implemented using two maps.\n * <p>\n * An implementation can be written simply by implementing the\n * {@link #createBidiMap(Map, Map, BidiMap)} method.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @see DualHashBidiMap\n * @see DualTreeBidiMap\n * @since 3.0","public , abstract ",,org.apache.commons.collections4.BidiMap
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator,Class,* Inner class MapIterator.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySet,Class,* Inner class EntrySet.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",org.apache.commons.collections4.bidimap.AbstractDualBidiMap.View,java.util.Set
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator,Class,* Inner class EntrySetIterator.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySet,Class,* Inner class KeySet.\n     *\n     * @param <K> the type of elements maintained by this set,"protected , static ",org.apache.commons.collections4.bidimap.AbstractDualBidiMap.View,java.util.Set
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator,Class,* Inner class KeySetIterator.\n     *\n     * @param <K> the key type.,"protected , static ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry,Class,* Inner class MapEntry.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator,
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$Values,Class,* Inner class Values.\n     *\n     * @param <V> the type of the values.,"protected , static ",org.apache.commons.collections4.bidimap.AbstractDualBidiMap.View,java.util.Set
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$ValuesIterator,Class,* Inner class ValuesIterator.\n     *\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.bidimap.AbstractDualBidiMap$View,Abstract Class,* Inner class View.\n     *\n     * @param <K> the type of the keys in the map.\n     * @param <V> the type of the values in the map.\n     * @param <E> the type of the elements in the collection.,"protected , abstract , static ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,
org.apache.commons.collections4.bidimap.UnmodifiableBidiMap,Class,* Decorates another {@link BidiMap} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to an OrderedBidiMap via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with the map views.\n * Instead it simply returns the inverse from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating implementation\n * it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator,org.apache.commons.collections4.OrderedBidiMap
org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap,Class,* Decorates another {@link OrderedBidiMap} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to a BidiMap via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with the map views.\n * Instead it simply returns the set/collection from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating implementation\n * it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.BidiMap
org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap,Class,* Implements {@link BidiMap} with two {@link LinkedHashMap} instances.\n * <p>\n * Two {@link LinkedHashMap} instances are used in this class.\n * This provides fast lookups at the expense of storing two sets of map entries and two linked lists.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0,public ,org.apache.commons.collections4.bidimap.AbstractDualBidiMap,java.io.Serializable
org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap,Class,* Decorates another {@link SortedBidiMap} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an {@link UnsupportedOperationException}.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to a SortedBidiMap via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with the map views.\n * Instead it simply returns the inverse from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating implementation\n * it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator,org.apache.commons.collections4.SortedBidiMap
org.apache.commons.collections4.bidimap.DualHashBidiMap,Class,"* Implements {@link BidiMap} with two {@link HashMap} instances.\n * <p>\n * Two {@link HashMap} instances are used in this class.\n * This provides fast lookups at the expense of storing two sets of map entries.\n * Commons Collections would welcome the addition of a direct hash-based\n * implementation of the {@link BidiMap} interface.\n * </p>\n * <p>\n * NOTE: From Commons Collections 3.1, all subclasses will use {@link HashMap}\n * and the flawed {@code createMap} method is ignored.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0",public ,org.apache.commons.collections4.bidimap.AbstractDualBidiMap,java.io.Serializable
org.apache.commons.collections4.bidimap.DualTreeBidiMap,Class,"* Implements {@link BidiMap} with two {@link TreeMap} instances.\n * <p>\n * The setValue() method on iterators will succeed only if the new value being set is\n * not already in the bidi map.\n * </p>\n * <p>\n * When considering whether to use this class, the {@link TreeBidiMap} class should\n * also be considered. It implements the interface using a dedicated design, and does\n * not store each object twice, which can save on memory use.\n * </p>\n * <p>\n * NOTE: From Commons Collections 3.1, all subclasses will use {@link TreeMap}\n * and the flawed {@code createMap} method is ignored.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.bidimap.AbstractDualBidiMap,org.apache.commons.collections4.SortedBidiMap;java.io.Serializable
org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator,Class,* Inner class MapIterator.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",,org.apache.commons.collections4.OrderedMapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.bidimap.DualTreeBidiMap$ViewMap,Class,* Internal sorted map view.\n     *\n     * @param <K> the type of the keys.\n     * @param <V> the type of the values.,"protected , static ",org.apache.commons.collections4.map.AbstractSortedMapDecorator,
org.apache.commons.collections4.bidimap.TreeBidiMap,Class,"* Red-Black tree-based implementation of BidiMap where all objects added\n * implement the {@code Comparable} interface.\n * <p>\n * This class guarantees that the map will be in both ascending key order\n * and ascending value order, sorted according to the natural order for\n * the key's and value's classes.\n * </p>\n * <p>\n * This Map is intended for applications that need to be able to look\n * up a key-value pairing by either key or value, and need to do so\n * with equal efficiency.\n * </p>\n * <p>\n * While that goal could be accomplished by taking a pair of TreeMaps\n * and redirecting requests to the appropriate TreeMap (for example,\n * containsKey would be directed to the TreeMap that maps values to\n * keys, containsValue would be directed to the TreeMap that maps keys\n * to values), there are problems with that implementation.\n * If the data contained in the TreeMaps is large, the cost of redundant\n * storage becomes significant. The {@link DualTreeBidiMap} and\n * {@link DualHashBidiMap} implementations use this approach.\n * </p>\n * <p>\n * This solution keeps minimizes the data storage by holding data only once.\n * The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified\n * to simultaneously map a tree node by key and by value. This doubles the\n * cost of put operations (but so does using two TreeMaps), and nearly doubles\n * the cost of remove operations (there is a savings in that the lookup of the\n * node to be removed only has to be performed once). And since only one node\n * contains the key and value, storage is significantly less than that\n * required by two TreeMaps.\n * </p>\n * <p>\n * The Map.Entry instances returned by the appropriate methods will\n * not allow setValue() and will throw an\n * UnsupportedOperationException on attempts to call that method.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0 (previously DoubleOrderedMap v2.0)",public ,,org.apache.commons.collections4.OrderedBidiMap;java.io.Serializable
org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement,Enum,No Comment,,enum has no extends,
org.apache.commons.collections4.bidimap.TreeBidiMap$EntryView,Class,* A view of this map.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractView,
org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse,Class,* The inverse map implementation.,final ,,org.apache.commons.collections4.OrderedBidiMap
org.apache.commons.collections4.bidimap.TreeBidiMap$InverseEntryView,Class,* A view of this map.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractView,
org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator,Class,* An iterator over the inverse map entries.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractViewIterator,org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator,Class,* An iterator over the map.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractViewIterator,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.bidimap.TreeBidiMap$KeyView,Class,No Comment,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractView,
org.apache.commons.collections4.bidimap.TreeBidiMap$Node,Class,* A node used to store the data.,static ,,java.util.Map.Entry;org.apache.commons.collections4.KeyValue
org.apache.commons.collections4.bidimap.TreeBidiMap$ValueView,Class,No Comment,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractView,
org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator,Class,* An iterator over the map entries.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractViewIterator,org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator,Class,* An iterator over the map.,final ,org.apache.commons.collections4.bidimap.TreeBidiMap.AbstractViewIterator,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.bidimap.TreeBidiMap$AbstractView,Abstract Class,* A view of this map.,abstract ,java.util.AbstractSet,
org.apache.commons.collections4.bidimap.TreeBidiMap$AbstractViewIterator,Abstract Class,* An iterator over the map.,abstract ,,
org.apache.commons.collections4.MultiMapUtils,Class,"* Provides utility methods and decorators for {@link MultiValuedMap} instances.\n * <p>\n * It contains various type safe and null safe methods. Additionally, it provides\n * the following decorators:\n * </p>\n * <ul>\n *   <li>{@link #unmodifiableMultiValuedMap(MultiValuedMap)}</li>\n *   <li>{@link #transformedMultiValuedMap(MultiValuedMap, Transformer, Transformer)}</li>\n * </ul>\n *\n * @since 4.1",public ,,
org.apache.commons.collections4.BoundedCollection,Interface,"* Defines a collection that is bounded in size.\n * <p>\n * The size of the collection can vary, but it can never exceed a preset\n * maximum number of elements. This interface allows the querying of details\n * associated with the maximum number of elements.\n * </p>\n *\n * @see CollectionUtils#isFull\n * @see CollectionUtils#maxSize\n * @param <E> the type of elements in this collection\n * @since 3.0",public ,java.util.Collection,
org.apache.commons.collections4.collection.UnmodifiableBoundedCollection,Class,"* {@link UnmodifiableBoundedCollection} decorates another\n * {@link BoundedCollection} to ensure it can't be altered.\n * <p>\n * If a BoundedCollection is first wrapped in some other collection decorator,\n * such as synchronized or predicated, the BoundedCollection methods are no\n * longer accessible.\n * The factory on this class will attempt to retrieve the bounded nature by\n * examining the package scope variables.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements in this collection\n * @since 3.0","public , final ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,org.apache.commons.collections4.BoundedCollection;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.collection.CompositeCollection,Class,* Decorates a collection of other collections to provide a single unified view.\n * <p>\n * Changes made to this collection will actually be made on the decorated collection.\n * Add and remove operations require the use of a pluggable strategy. If no\n * strategy is provided then add and remove are unsupported.\n * </p>\n * @param <E> the type of the elements in the collection\n * @since 3.0,public ,,java.util.Collection;java.io.Serializable
org.apache.commons.collections4.collection.CompositeCollection$CollectionMutator,Interface,* Pluggable strategy to handle changes to the composite.\n     *\n     * @param <E> the element being held in the collection,public ,java.io.Serializable,
org.apache.commons.collections4.collection.TransformedCollection,Class,"* Decorates another {@link Collection} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 3.0",public ,org.apache.commons.collections4.collection.AbstractCollectionDecorator,
org.apache.commons.collections4.collection.PredicatedCollection,Class,"* Decorates another {@link Collection} to validate that additions\n * match a specified predicate.\n * <p>\n * This collection exists to provide validation for the decorated collection.\n * It is normally created to decorate an empty collection.\n * If an object cannot be added to the collection, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the collection:\n * </p>\n * <pre>\n * Collection coll = PredicatedCollection.predicatedCollection(new ArrayList(), NotNullPredicate.INSTANCE);\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 3.0",public ,org.apache.commons.collections4.collection.AbstractCollectionDecorator,
org.apache.commons.collections4.collection.PredicatedCollection$Builder,Class,"* Builder for creating predicated collections.\n     * <p>\n     * Create a Builder with a predicate to validate elements against, then add any elements\n     * to the builder. Elements that fail the predicate will be added to a rejected list.\n     * Finally, create or decorate a collection using the createPredicated[List,Set,Bag,Queue] methods.\n     * <p>\n     * An example:\n     * <pre>\n     *   Predicate&lt;String&gt; predicate = NotNullPredicate.notNullPredicate();\n     *   PredicatedCollectionBuilder&lt;String&gt; builder = PredicatedCollection.builder(predicate);\n     *   builder.add(""item1"");\n     *   builder.add(null);\n     *   builder.add(""item2"");\n     *   List&lt;String&gt; predicatedList = builder.createPredicatedList();\n     * </pre>\n     * <p>\n     * At the end of the code fragment above predicatedList is protected by the predicate supplied\n     * to the builder, and it contains item1 and item2.\n     * <p>\n     * More elements can be added to the builder once a predicated collection has been created,\n     * but these elements will not be reflected in already created collections.\n     *\n     * @param <E>  the element type\n     * @since 4.1","public , static ",,
org.apache.commons.collections4.collection.IndexedCollection,Class,"* An IndexedCollection is a Map-like view onto a Collection. It accepts a\n * keyTransformer to define how the keys are converted from the values.\n * <p>\n * Modifications made to this decorator modify the index as well as the\n * decorated {@link Collection}. However, modifications to the underlying\n * {@link Collection} will not update the index and it will get out of sync.\n * </p>\n * <p>\n * If modification of the decorated {@link Collection} is unavoidable, then a\n * call to {@link #reindex()} will update the index to the current contents of\n * the {@link Collection}.\n * </p>\n *\n * @param <K> the type of object in the index.\n * @param <C> the type of object in the collection.\n * @since 4.0",public ,org.apache.commons.collections4.collection.AbstractCollectionDecorator,
org.apache.commons.collections4.collection.SynchronizedCollection,Class,* Decorates another {@link Collection} to synchronize its behavior\n * for a multithreaded environment.\n * <p>\n * Iterators must be manually synchronized:\n * </p>\n * <pre>\n * synchronized (coll) {\n *   Iterator it = coll.iterator();\n *   // do stuff with iterator\n * }\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 3.0,public ,,java.util.Collection;java.io.Serializable
org.apache.commons.collections4.collection.UnmodifiableCollection,Class,* Decorates another {@link Collection} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 3.0,"public , final ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.collection.AbstractCollectionDecorator,Abstract Class,"* Decorates another {@code Collection} to provide additional behavior.\n * <p>\n * Each method call made on this {@code Collection} is forwarded to the\n * decorated {@code Collection}. This class is used as a framework on which\n * to build to extensions such as synchronized and unmodifiable behavior. The\n * main advantage of decoration is that one decorator can wrap any implementation\n * of {@code Collection}, whereas sub-classing requires a new class to be\n * written for each implementation.\n * </p>\n * <p>\n * This implementation does not perform any special processing with\n * {@link #iterator()}. Instead it simply returns the value from the\n * wrapped collection. This may be undesirable, for example if you are trying\n * to write an unmodifiable implementation it might provide a loophole.\n * </p>\n * <p>\n * This implementation does not forward the hashCode and equals methods through\n * to the backing object, but relies on Object's implementation. This is necessary\n * to preserve the symmetry of equals. Custom definitions of equality are usually\n * based on an interface, such as Set or List, so that the implementation of equals\n * can cast the object being tested for equality to the custom interface.\n * AbstractCollectionDecorator does not implement such custom interfaces directly;\n * they are implemented only in subclasses. Therefore, forwarding equals would break\n * symmetry, as the forwarding object might consider itself equal to the object being\n * tested, but the reverse could not be true. This behavior is consistent with the\n * JDK's collection wrappers, such as {@link java.util.Collections#unmodifiableCollection(Collection)}.\n * Use an interface-specific subclass of AbstractCollectionDecorator, such as\n * AbstractListDecorator, to preserve equality behavior, or override equals directly.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 3.0","public , abstract ",,java.util.Collection;java.io.Serializable
org.apache.commons.collections4.OrderedBidiMap,Interface,* Defines a map that allows bidirectional lookup between key and values\n * and retains and provides access to an ordering.\n * <p>\n * Implementations should allow a value to be looked up from a key and\n * a key to be looked up from a value with equal performance.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0,public ,org.apache.commons.collections4.BidiMap;org.apache.commons.collections4.OrderedMap,
org.apache.commons.collections4.FactoryUtils,Class,* {@code FactoryUtils} provides reference implementations and utilities\n * for the Factory functor interface. The supplied factories are:\n * <ul>\n * <li>Prototype - clones a specified object\n * <li>Instantiate - creates objects using reflection\n * <li>Constant - always returns the same object\n * <li>Null - always returns null\n * <li>Exception - always throws an exception\n * </ul>\n * <p>\n * Since v4.1 only factories which are considered to be safe are\n * Serializable. Factories considered to be unsafe for serialization are:\n * </p>\n * <ul>\n * <li>Prototype\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0,public ,,
org.apache.commons.collections4.IterableGet,Interface,"* The ""read"" subset of the {@link java.util.Map} interface.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0\n * @see Put",public ,org.apache.commons.collections4.Get,
org.apache.commons.collections4.ListUtils,Class,* Provides utility methods and decorators for {@link List} instances.\n *\n * @since 1.0,public ,,
org.apache.commons.collections4.ListUtils$CharSequenceAsList,Class,* A simple wrapper to use a CharSequence as List.,"private , static , final ",java.util.AbstractList,
org.apache.commons.collections4.ListUtils$LcsVisitor,Class,* A helper class used to construct the longest common subsequence.,"private , static , final ",,org.apache.commons.collections4.sequence.CommandVisitor
org.apache.commons.collections4.ListUtils$Partition,Class,* Provides a partition view on a {@link List}.\n     * @since 4.0,"private , static , final ",java.util.AbstractList,
org.apache.commons.collections4.Closure,Interface,"* Defines a functor interface implemented by classes that do something.\n * <p>\n * A {@code Closure} represents a block of code which is executed from\n * inside some block, function or iteration. It operates an input object.\n * </p>\n * <p>\n * Standard implementations of common closures are provided by\n * {@link ClosureUtils}. These include method invocation and for/while loops.\n * </p>\n *\n * @param <T> the type of the input to the operation.\n * @since 1.0\n * @deprecated Use {@link Consumer}.",public ,java.util.function.Consumer,
org.apache.commons.collections4.IterableSortedMap,Interface,* {@link SortedMap} + {@link OrderedMap}.\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0,public ,java.util.SortedMap;org.apache.commons.collections4.OrderedMap,
org.apache.commons.collections4.MapUtils,Class,"* Provides utility methods and decorators for {@link Map} and {@link SortedMap} instances.\n * <p>\n * It contains various type safe methods as well as other useful features like deep copying.\n * </p>\n * <p>\n * It also provides the following decorators:\n * </p>\n *\n * <ul>\n * <li>{@link #fixedSizeMap(Map)}\n * <li>{@link #fixedSizeSortedMap(SortedMap)}\n * <li>{@link #lazyMap(Map,Factory)}\n * <li>{@link #lazyMap(Map,Transformer)}\n * <li>{@link #lazySortedMap(SortedMap,Factory)}\n * <li>{@link #lazySortedMap(SortedMap,Transformer)}\n * <li>{@link #predicatedMap(Map,Predicate,Predicate)}\n * <li>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}\n * <li>{@link #transformedMap(Map, Transformer, Transformer)}\n * <li>{@link #transformedSortedMap(SortedMap, Transformer, Transformer)}\n * <li>{@link #multiValueMap(Map)}\n * <li>{@link #multiValueMap(Map, Class)}\n * <li>{@link #multiValueMap(Map, Factory)}\n * </ul>\n *\n * @since 1.0",public ,,
org.apache.commons.collections4.Transformer,Interface,"* Defines a functor interface implemented by classes that transform one\n * object into another.\n * <p>\n * A {@code Transformer} converts the input object to the output object.\n * The input object SHOULD be left unchanged.\n * Transformers are typically used for type conversions, or extracting data\n * from an object.\n * </p>\n * <p>\n * Standard implementations of common transformers are provided by\n * {@link TransformerUtils}. These include method invocation, returning a constant,\n * cloning and returning the string value.\n * </p>\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 1.0\n * @deprecated Use {@link Function}.",public ,java.util.function.Function,
org.apache.commons.collections4.functors.DefaultEquator,Class,* Default {@link Equator} implementation.\n *\n * @param <T>  the types of object this {@link Equator} can evaluate.\n * @since 4.0,public ,,org.apache.commons.collections4.Equator;java.io.Serializable
org.apache.commons.collections4.functors.AbstractPredicate,Abstract Class,* Abstract base class for predicates.\n *\n * @param <T> the type of the input to the predicate.\n * @since 4.5.0-M3,"public , abstract ",,org.apache.commons.collections4.Predicate
org.apache.commons.collections4.functors.StringValueTransformer,Class,* Transformer implementation that returns the result of calling\n * {@code String.valueOf} on the input object.\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.PredicateDecorator,Interface,* Defines a predicate that decorates one or more other predicates.\n * <p>\n * This interface enables tools to access the decorated predicates.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.1,public ,org.apache.commons.collections4.Predicate,
org.apache.commons.collections4.functors.IfTransformer,Class,* Transformer implementation that will call one of two closures based on whether a predicate evaluates\n * as true or false.\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 4.1,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.IdentityPredicate,Class,* Predicate implementation that returns true if the input is the same object\n * as the one stored in this predicate.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.ExceptionClosure,Class,* Closure implementation that always throws an exception.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.functors.NOPClosure,Class,* Closure implementation that does nothing.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.functors.ClosureTransformer,Class,* Transformer implementation that calls a Closure using the input object\n * and then returns the input.\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.FunctorUtils,Class,* Internal utilities for functors.\n *\n * @since 3.0,final ,,
org.apache.commons.collections4.functors.TransformerPredicate,Class,* Predicate implementation that returns the result of a transformer.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.NullPredicate,Class,* Predicate implementation that returns true if the input is null.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.ConstantTransformer,Class,"* Transformer implementation that returns the same constant each time.\n * <p>\n * No check is made that the object is immutable. In general, only immutable\n * objects should use the constant factory. Mutable objects should\n * use the prototype factory.\n * </p>\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0",public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.PredicateTransformer,Class,* Transformer implementation that calls a Predicate using the input object\n * and then returns the result.\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.WhileClosure,Class,"* Closure implementation that executes a closure repeatedly until a condition is met,\n * like a do-while or while loop.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0",public ,,org.apache.commons.collections4.Closure
org.apache.commons.collections4.functors.ForClosure,Class,"* Closure implementation that calls another closure n times, like a for loop.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0",public ,,org.apache.commons.collections4.Closure
org.apache.commons.collections4.functors.NullIsTruePredicate,Class,* Predicate implementation that returns true if the input is null.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.TransformedPredicate,Class,* Predicate implementation that transforms the given object before invoking\n * another {@code Predicate}.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.1,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.NonePredicate,Class,"* Predicate implementation that returns true if none of the\n * predicates return true.\n * If the array of predicates is empty, then this predicate returns true.\n * <p>\n * NOTE: In versions prior to 3.2 an array size of zero or one\n * threw an exception.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0","public , final ",org.apache.commons.collections4.functors.AbstractQuantifierPredicate,
org.apache.commons.collections4.functors.ExceptionTransformer,Class,* Transformer implementation that always throws an exception.\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.SwitchTransformer,Class,"* Transformer implementation calls the transformer whose predicate returns true,\n * like a switch statement.\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0",public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.TransformerClosure,Class,* Closure implementation that calls a Transformer using the input object\n * and ignore the result.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0,public ,,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.functors.OrPredicate,Class,* Predicate implementation that returns true if either of the predicates return true.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.NOPTransformer,Class,* Transformer implementation that does nothing.\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.MapTransformer,Class,* Transformer implementation that returns the value held in a specified map\n * using the input parameter as a key.\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.ExceptionFactory,Class,* Factory implementation that always throws an exception.\n *\n * @param <T> the type of results supplied by this supplier.\n * @since 3.0,"public , final ",,org.apache.commons.collections4.Factory;java.io.Serializable
org.apache.commons.collections4.functors.ChainedClosure,Class,* Closure implementation that chains the specified closures together.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0,public ,,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.functors.AndPredicate,Class,* Predicate implementation that returns true if both the predicates return true.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.PrototypeFactory,Class,"* Factory implementation that creates a new instance each time based on a prototype.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards {@link Factory} instances returned by\n * {@link #prototypeFactory(Object)} will <strong>not</strong> be serializable anymore in order\n * to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @since 3.0",public ,,
org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory,Class,* PrototypeCloneFactory creates objects by copying a prototype using the clone method.\n     *\n     * @param <T> the type of results supplied by this supplier.,static ,,org.apache.commons.collections4.Factory
org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory,Class,* PrototypeSerializationFactory creates objects by cloning a prototype using serialization.\n     *\n     * @param <T> the type of results supplied by this supplier.,static ,,org.apache.commons.collections4.Factory
org.apache.commons.collections4.functors.ExceptionPredicate,Class,* Predicate implementation that always throws an exception.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.AbstractQuantifierPredicate,Abstract Class,"* Abstract base class for quantification predicates, for example All, Any, None.\n *\n * @param <T> the type of the input to the predicate.\n * @since 4.0","public , abstract ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.InstanceofPredicate,Class,* Predicate implementation that returns true if the input is an instanceof\n * the type stored in this predicate.\n *\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.InvokerTransformer,Class,"* Transformer implementation that creates a new object instance by reflection.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0",public ,,org.apache.commons.collections4.Transformer
org.apache.commons.collections4.functors.FalsePredicate,Class,* Predicate implementation that always returns false.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.CloneTransformer,Class,"* Transformer implementation that returns a clone of the input object.\n * <p>\n * Clone is performed using {@code PrototypeFactory.prototypeFactory(input).create()}.\n * </p>\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0",public ,,org.apache.commons.collections4.Transformer
org.apache.commons.collections4.functors.NotPredicate,Class,* Predicate implementation that returns the opposite of the decorated predicate.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.ConstantFactory,Class,"* Factory implementation that returns the same constant each time.\n * <p>\n * No check is made that the object is immutable. In general, only immutable\n * objects should use the constant factory. Mutable objects should\n * use the prototype factory.\n * </p>\n *\n * @param <T> the type of results supplied by this supplier.\n * @since 3.0",public ,,org.apache.commons.collections4.Factory;java.io.Serializable
org.apache.commons.collections4.functors.ChainedTransformer,Class,* Transformer implementation that chains the specified transformers together.\n * <p>\n * The input object is passed to the first transformer. The transformed result\n * is passed to the second transformer and so on.\n * </p>\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.ComparatorPredicate,Class,"* Predicate that compares the input object with the one stored in the predicate using a comparator.\n * In addition, the comparator result can be evaluated in accordance to a supplied criterion value.\n *\n * <p>In order to demonstrate the use of the predicate, the following variables are declared:</p>\n *\n * <pre>\n * Integer ONE = Integer.valueOf(1);\n * Integer TWO = Integer.valueOf(2);\n *\n * Comparator comparator = new Comparator() {\n *\n *     public int compare(Object first, Object second) {\n *         return ((Integer) second) - ((Integer) first);\n *     }\n *\n * };\n * </pre>\n *\n * <p>Using the declared variables, the {@code ComparatorPredicate} can be used in the\n * following way:</p>\n *\n * <pre>\n * ComparatorPredicate.comparatorPredicate(ONE, comparator).test(TWO);\n * </pre>\n *\n * <p>The input variable {@code TWO} in compared to the stored variable {@code ONE} using\n * the supplied {@code comparator}. This is the default usage of the predicate and will return\n * {@code true} if the underlying comparator returns {@code 0}. In addition to the default\n * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The\n * following {@link Criterion} enumeration values are provided by the predicate:\n * </p>\n *\n * <ul>\n *     <li>EQUAL</li>\n *     <li>GREATER</li>\n *     <li>GREATER_OR_EQUAL</li>\n *     <li>LESS</li>\n *     <li>LESS_OR_EQUAL</li>\n * </ul>\n *\n * <p>The following examples demonstrates how these constants can be used in order to manipulate the\n * evaluation of a comparator result.</p>\n *\n * <pre>\n * ComparatorPredicate.comparatorPredicate(ONE, comparator,<strong>ComparatorPredicate.Criterion.GREATER</strong>).test(TWO);\n * </pre>\n *\n * <p>The input variable TWO is compared to the stored variable ONE using the supplied {@code comparator}\n * using the {@code GREATER} evaluation criterion constant. This instructs the predicate to\n * return {@code true} if the comparator returns a value greater than {@code 0}.</p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 4.0",public ,org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.ComparatorPredicate$Criterion,Enum,* Enumerates the comparator criteria.,public ,enum has no extends,
org.apache.commons.collections4.functors.CatchAndRethrowClosure,Abstract Class,"* {@link Closure} that catches any checked exception and re-throws it as a\n * {@link FunctorException} runtime exception. Example usage:\n *\n * <pre>\n * // Create a catch and re-throw closure via anonymous subclass\n * CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {\n *     private java.io.Writer out = // some writer\n *\n *     protected void executeAndThrow(String input) throws IOException {\n *         out.write(input); // throwing of IOException allowed\n *     }\n * };\n *\n * // use catch and re-throw closure\n * java.util.List&lt;String&gt; strList = // some list\n * try {\n *     CollectionUtils.forAllDo(strList, writer);\n * } catch (FunctorException ex) {\n *     Throwable originalError = ex.getCause();\n *     // handle error\n * }\n * </pre>\n *\n * @param <T> the type of the input to the operation.\n * @since 4.0","public , abstract ",,org.apache.commons.collections4.Closure
org.apache.commons.collections4.functors.AllPredicate,Class,"* Predicate implementation that returns true if all the\n * predicates return true.\n * If the array of predicates is empty, then this predicate returns true.\n * <p>\n * NOTE: In versions prior to 3.2 an array size of zero or one\n * threw an exception.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0","public , final ",org.apache.commons.collections4.functors.AbstractQuantifierPredicate,
org.apache.commons.collections4.functors.NullIsFalsePredicate,Class,* Predicate implementation that returns false if the input is null.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.NullIsExceptionPredicate,Class,* Predicate implementation that throws an exception if the input is null.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,org.apache.commons.collections4.functors.PredicateDecorator;java.io.Serializable
org.apache.commons.collections4.functors.AnyPredicate,Class,"* Predicate implementation that returns true if any of the\n * predicates return true.\n * If the array of predicates is empty, then this predicate returns false.\n * <p>\n * NOTE: In versions prior to 3.2 an array size of zero or one\n * threw an exception.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0","public , final ",org.apache.commons.collections4.functors.AbstractQuantifierPredicate,
org.apache.commons.collections4.functors.TruePredicate,Class,* Predicate implementation that always returns true.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.FactoryTransformer,Class,* Transformer implementation that calls a Factory and returns the result.\n *\n * @param <T> the type of the input to the function.\n * @param <R> the type of the result of the function.\n * @since 3.0,public ,,org.apache.commons.collections4.Transformer;java.io.Serializable
org.apache.commons.collections4.functors.NotNullPredicate,Class,* Predicate implementation that returns true if the input is not null.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.SwitchClosure,Class,"* Closure implementation calls the closure whose predicate returns true,\n * like a switch statement.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0",public ,,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.functors.UniquePredicate,Class,* Predicate implementation that returns true the first time an object is\n * passed into the predicate.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.InstantiateTransformer,Class,"* Transformer implementation that creates a new object instance by reflection.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of the input and result to the function.\n * @since 3.0",public ,,org.apache.commons.collections4.Transformer
org.apache.commons.collections4.functors.OnePredicate,Class,"* Predicate implementation that returns true if only one of the\n * predicates return true.\n * If the array of predicates is empty, then this predicate returns false.\n * <p>\n * NOTE: In versions prior to 3.2 an array size of zero or one\n * threw an exception.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0","public , final ",org.apache.commons.collections4.functors.AbstractQuantifierPredicate,
org.apache.commons.collections4.functors.EqualPredicate,Class,* Predicate implementation that returns true if the input is the same object\n * as the one stored in this predicate by equals.\n *\n * @param <T> the type of the input to the predicate.\n * @since 3.0,"public , final ",org.apache.commons.collections4.functors.AbstractPredicate,java.io.Serializable
org.apache.commons.collections4.functors.InstantiateFactory,Class,"* Factory implementation that creates a new object instance by reflection.\n * <p>\n * <strong>WARNING:</strong> from v4.1 onwards this class will <strong>not</strong> be serializable anymore\n * in order to prevent potential remote code execution exploits. Please refer to\n * <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-580"">COLLECTIONS-580</a>\n * for more details.\n * </p>\n *\n * @param <T> the type of results supplied by this supplier.\n * @since 3.0",public ,,org.apache.commons.collections4.Factory
org.apache.commons.collections4.functors.IfClosure,Class,* Closure implementation acts as an if statement calling one or other closure\n * based on a predicate.\n *\n * @param <T> the type of the input to the operation.\n * @since 3.0,public ,,org.apache.commons.collections4.Closure;java.io.Serializable
org.apache.commons.collections4.ResettableListIterator,Interface,* Defines a list iterator that can be reset back to an initial state.\n * <p>\n * This interface allows an iterator to be repeatedly reused.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0,public ,java.util.ListIterator;org.apache.commons.collections4.ResettableIterator;org.apache.commons.collections4.OrderedIterator,
org.apache.commons.collections4.OrderedIterator,Interface,* Defines an iterator that operates over an ordered container. Subset of {@link java.util.ListIterator}.\n * <p>\n * This iterator allows both forward and reverse iteration through the container.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0,public ,java.util.Iterator,
org.apache.commons.collections4.comparators.ComparatorChain,Class,"* A ComparatorChain is a Comparator that wraps one or more Comparators in\n * sequence. The ComparatorChain calls each Comparator in sequence until either\n * 1) any single Comparator returns a non-zero result (and that result is then\n * returned), or 2) the ComparatorChain is exhausted (and zero is returned).\n * This type of sorting is very similar to multi-column sorting in SQL, and this\n * class allows Java classes to emulate that kind of behavior when sorting a\n * List.\n * <p>\n * To further facilitate SQL-like sorting, the order of any single Comparator in\n * the list can be reversed.\n * </p>\n * <p>\n * Calling a method that adds new Comparators or changes the ascend/descend sort\n * <em>after compare(Object, Object) has been called</em> will result in an\n * UnsupportedOperationException. However, <em>take care</em> to not alter the\n * underlying List of Comparators or the BitSet that defines the sort order.\n * </p>\n * <p>\n * Instances of ComparatorChain are not synchronized. The class is not\n * thread-safe at construction time, but it <em>is</em> thread-safe to perform\n * multiple comparisons after all the setup operations are complete.\n * </p>\n *\n * @param <E> the type of objects compared by this comparator\n * @since 2.0",public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.BooleanComparator,Class,* A {@link Comparator} for {@link Boolean} objects that can sort either\n * true or false first.\n *\n * @see #getTrueFirstComparator()\n * @see #getFalseFirstComparator()\n * @see #booleanComparator(boolean)\n * @since 3.0,"public , final ",,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.ReverseComparator,Class,"* Reverses the order of another comparator by reversing the arguments\n * to its {@link #compare(Object, Object) compare} method.\n *\n * @param <E> the type of objects compared by this comparator\n * @since 2.0\n * @see java.util.Collections#reverseOrder()",public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.ComparableComparator,Class,"* A {@link Comparator Comparator} that compares {@link Comparable Comparable}\n * objects.\n * <p>\n * This Comparator is useful, for example, for enforcing the natural order in\n * custom implementations of {@link java.util.SortedSet SortedSet} and\n * {@link java.util.SortedMap SortedMap}.\n * </p>\n * <p>\n * Note: In the 2.0 and 2.1 releases of Commons Collections, this class would\n * throw a {@link ClassCastException} if either of the arguments to\n * {@link #compare(Comparable, Comparable)} compare} were {@code null}, not\n * {@link Comparable Comparable}, or for which\n * {@link Comparable#compareTo(Object) compareTo} gave inconsistent results.\n * This is no longer the case. See {@link #compare(Comparable, Comparable)} compare} for\n * details.\n * </p>\n *\n * @param <E> the type of objects compared by this comparator\n * @since 2.0\n * @see java.util.Collections#reverseOrder()",public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.TransformingComparator,Class,"* Decorates another Comparator with transformation behavior. That is, the\n * return value from the transform operation will be passed to the decorated\n * {@link Comparator#compare(Object,Object) compare} method.\n * <p>\n * This class is Serializable from Commons Collections 4.0.\n * </p>\n *\n * @param <I> the type of the input to the function\n * @param <O> the type of the result of the function\n * @since 2.1\n * @see org.apache.commons.collections4.Transformer\n * @see org.apache.commons.collections4.comparators.ComparableComparator",public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.FixedOrderComparator,Class,"* A Comparator which imposes a specific order on a specific set of Objects.\n * Objects are presented to the FixedOrderComparator in a specified order and\n * subsequent calls to {@link #compare(Object, Object) compare} yield that order.\n * For example:\n * <pre>\n * String[] planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars""};\n * FixedOrderComparator distanceFromSun = new FixedOrderComparator(planets);\n * Arrays.sort(planets);                     // Sort to alphabetical order\n * Arrays.sort(planets, distanceFromSun);    // Back to original order\n * </pre>\n * <p>\n * Once {@code compare} has been called, the FixedOrderComparator is locked\n * and attempts to modify it yield an UnsupportedOperationException.\n * </p>\n * <p>\n * Instances of FixedOrderComparator are not synchronized.  The class is not\n * thread-safe at construction time, but it is thread-safe to perform\n * multiple comparisons  after all the setup operations are complete.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 4.0.\n * </p>\n *\n * @param <T> the type of objects compared by this comparator\n * @since 3.0",public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.comparators.FixedOrderComparator$UnknownObjectBehavior,Enum,* Enumerates the unknown object behaviors.\n     *\n     * @since 4.0,public ,enum has no extends,
org.apache.commons.collections4.comparators.NullComparator,Class,* A Comparator that will compare nulls to be either lower or higher than\n * other objects.\n *\n * @param <E> the type of objects compared by this comparator\n * @since 2.0,public ,,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.ArrayUtils,Class,"* <p>\n * Operations on arrays, primitive arrays (like {@code int[]}) and primitive wrapper arrays (like {@code Integer[]}).\n * </p>\n * <p>\n * This class tries to handle {@code null} input gracefully. An exception will not be thrown for a {@code null} array input. However, an Object array that\n * contains a {@code null} element may throw an exception. Each method documents its behavior.\n * </p>\n * <p>\n * Package private, might move to an internal package if this needs to be public.\n * </p>\n * <p>\n * #ThreadSafe#\n * </p>\n *\n * @since 4.2 (Copied from Apache Commons Lang.)",final ,,
org.apache.commons.collections4.CollectionUtils,Class,"* Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * </p>\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n * </p>\n *\n * @since 1.0",public ,,
org.apache.commons.collections4.CollectionUtils$CardinalityHelper,Class,* Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type,"private , static ",,
org.apache.commons.collections4.CollectionUtils$EquatorWrapper,Class,* Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     * </p>\n     *\n     * @param <O>  the element type\n     * @since 4.0,"private , static , final ",,
org.apache.commons.collections4.CollectionUtils$SetOperationCardinalityHelper,Class,"* Helper class for set-related operations, for example union, subtract, intersection.\n     * @param <O>  the element type","private , static , final ",org.apache.commons.collections4.CollectionUtils.CardinalityHelper,java.lang.Iterable
org.apache.commons.collections4.ListValuedMap,Interface,"* Defines a map that holds a list of values against each key.\n * <p>\n * A {@code ListValuedMap} is a Map with slightly different semantics:\n * </p>\n * <ul>\n *   <li>Putting a value into the map will add the value to a {@link List} at that key.</li>\n *   <li>Getting a value will return a {@link List}, holding all the values put to that key.</li>\n * </ul>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,org.apache.commons.collections4.MultiValuedMap,
org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator,Class,"* {@link IterableGet} that uses a {@link Map}&lt;K, V&gt; for the\n * {@link org.apache.commons.collections4.Get Get}&lt;K, V&gt; implementation.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0",public ,,org.apache.commons.collections4.IterableGet
org.apache.commons.collections4.splitmap.TransformedSplitMap,Class,"* Decorates another {@link Map} to transform objects that are added.\n * <p>\n * The Map put methods and Map.Entry setValue method are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must use\n * the Integer form to remove objects.\n * </p>\n * <p>\n * <strong>Note that TransformedMap is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n * <p>\n * The ""put"" and ""get"" type constraints of this class are mutually independent;\n * contrast with {@link org.apache.commons.collections4.map.TransformedMap} which,\n * by virtue of its implementing {@link Map}&lt;K, V&gt;, must be constructed in such\n * a way that its read and write parameters are generalized to a common (super-)type.\n * In practice this would often mean {@code &gt;Object, Object&gt;}, defeating\n * much of the usefulness of having parameterized types.\n * </p>\n * <p>\n * On the downside, this class is not drop-in compatible with {@link java.util.Map}\n * but is intended to be worked with either directly or by {@link Put} and\n * {@link org.apache.commons.collections4.Get Get} generalizations.\n * </p>\n *\n * @param <J> the type of the keys to put in this map\n * @param <K> the type of the keys to get in this map\n * @param <U> the type of the values to put in this map\n * @param <V> the type of the values to get in this map\n * @since 4.0\n * @see org.apache.commons.collections4.SplitMapUtils#readableMap(org.apache.commons.collections4.Get)\n * @see org.apache.commons.collections4.SplitMapUtils#writableMap(Put)",public ,org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator,org.apache.commons.collections4.Put;java.io.Serializable
org.apache.commons.collections4.Factory,Interface,"* Defines a functor interface implemented by classes that create objects.\n * <p>\n * A {@code Factory} creates an object without using an input parameter.\n * If an input parameter is required, then {@link Transformer} is more appropriate.\n * </p>\n * <p>\n * Standard implementations of common factories are provided by\n * {@link FactoryUtils}. These include factories that return a constant,\n * a copy of a prototype or a new instance.\n * </p>\n *\n * @param <T> the type of results supplied by this supplier.\n * @since 2.1\n * @deprecated Use {@link Supplier}.",public ,java.util.function.Supplier,
org.apache.commons.collections4.IterableUtils,Class,"* Provides utility methods and decorators for {@link Iterable} instances.\n * <p>\n * <strong>Note</strong>: This utility class has been designed with fail-fast argument checking.\n * </p>\n * <ul>\n * <li>All decorator methods are <em>not</em> null-safe for the provided Iterable argument; for example, they will throw a {@link NullPointerException} if a\n * null Iterable is passed as argument.\n * <li>All other utility methods are null-safe for the provided Iterable argument; for example, they will treat a null Iterable the same way as an empty one.\n * For other arguments which are null, a {@link Predicate} will result in a {@link NullPointerException}. Exception: passing a null {@link Comparator} is\n * equivalent to a Comparator with natural ordering.\n * </ul>\n *\n * @since 4.1",public ,,
org.apache.commons.collections4.IterableUtils$UnmodifiableIterable,Class,* Inner class to distinguish unmodifiable instances.,"private , static , final ",org.apache.commons.collections4.FluentIterable,
org.apache.commons.collections4.Bag,Interface,"* Defines a collection that counts the number of times an object appears in\n * the collection.\n * <p>\n * Suppose you have a Bag that contains {@code {a, a, b, c}}.\n * Calling {@link #getCount(Object)} on {@code a} would return 2, while\n * calling {@link #uniqueSet()} would return {@code {a, b, c}}.\n * </p>\n * <p>\n * <em>NOTE: This interface violates the {@link Collection} contract.</em>\n * The behavior specified in many of these methods is <em>not</em> the same\n * as the behavior specified by {@code Collection}.\n * The non-compliant methods are clearly marked with ""(Violation)"".\n * Exercise caution when using a bag as a {@code Collection}.\n * </p>\n * <p>\n * This violation resulted from the original specification of this interface.\n * In an ideal world, the interface would be changed to fix the problems, however\n * it has been decided to maintain backwards compatibility instead.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 2.0",public ,java.util.Collection,
org.apache.commons.collections4.Predicate,Interface,"* Defines a functor interface implemented by classes that perform a predicate\n * test on an object.\n * <p>\n * A {@code Predicate} is the object equivalent of an {@code if} statement.\n * It uses the input object to return a true or false value, and is often used in\n * validation or filtering.\n * </p>\n * <p>\n * Standard implementations of common predicates are provided by\n * {@link PredicateUtils}. These include true, false, instanceof, equals, and,\n * or, not, method invocation and null testing.\n * </p>\n *\n * @param <T> the type of the input to the predicate.\n * @since 1.0\n * @deprecated Use {@link java.util.function.Predicate}.",public ,java.util.function.Predicate,
org.apache.commons.collections4.SortedBag,Interface,* Defines a type of {@code Bag} that maintains a sorted order among\n * its unique representative members.\n *\n * @param <E> the type of elements in this bag\n * @since 2.0,public ,org.apache.commons.collections4.Bag,
org.apache.commons.collections4.TrieUtils,Class,* A collection of {@link Trie} utilities.\n *\n * @since 4.0,public ,,
org.apache.commons.collections4.ClosureUtils,Class,* {@code ClosureUtils} provides reference implementations and utilities\n * for the Closure functor interface. The supplied closures are:\n * <ul>\n * <li>Invoker - invokes a method on the input object\n * <li>For - repeatedly calls a closure for a fixed number of times\n * <li>While - repeatedly calls a closure while a predicate is true\n * <li>Chained - chains two or more closures together\n * <li>If - calls one closure or another based on a predicate\n * <li>Switch - calls one closure based on one or more predicates\n * <li>SwitchMap - calls one closure looked up from a Map\n * <li>Transformer - wraps a Transformer as a Closure\n * <li>NOP - does nothing\n * <li>Exception - always throws an exception\n * </ul>\n * <p>\n * Since v4.1 only closures which are considered to be safe are\n * Serializable. Closures considered to be unsafe for serialization are:\n * </p>\n * <ul>\n * <li>Invoker\n * <li>For\n * <li>While\n * </ul>\n *\n * @since 3.0,public ,,
org.apache.commons.collections4.trie.PatriciaTrie,Class,"* Implements a PATRICIA Trie (Practical Algorithm to Retrieve Information\n * Coded in Alphanumeric).\n * <p>\n * A PATRICIA {@link org.apache.commons.collections4.Trie} is a compressed\n * {@link org.apache.commons.collections4.Trie}. Instead of storing\n * all data at the edges of the {@link org.apache.commons.collections4.Trie}\n * (and having empty internal nodes), PATRICIA stores data in every node.\n * This allows for very efficient traversal, insert, delete, predecessor,\n * successor, prefix, range, and {@link #select(Object)}\n * operations. All operations are performed at worst in O(K) time, where K\n * is the number of bits in the largest item in the tree. In practice,\n * operations actually take O(A(K)) time, where A(K) is the average number of\n * bits of all items in the tree.\n * </p>\n * <p>\n * Most importantly, PATRICIA requires very few comparisons to keys while\n * doing any operation. While performing a lookup, each comparison (at most\n * K of them, described above) will perform a single bit comparison against\n * the given key, instead of comparing the entire key to another key.\n * </p>\n * <p>\n * The {@link org.apache.commons.collections4.Trie} can return operations in\n * lexicographical order using the 'prefixMap', 'submap', or 'iterator' methods.\n * The {@link org.apache.commons.collections4.Trie} can also\n * scan for items that are 'bitwise' (using an XOR metric) by the 'select' method.\n * Bitwise closeness is determined by the {@link KeyAnalyzer} returning true or\n * false for a bit being set or not in a given key.\n * </p>\n * <p>\n * This PATRICIA {@link org.apache.commons.collections4.Trie} supports both variable\n * length &amp; fixed length keys. Some methods, such as {@link org.apache.commons.collections4.Trie#prefixMap(Object)}\n * are suited only to variable length keys.\n * </p>\n *\n * @param <V> the type of the values in this map\n * @see <a href=""https://en.wikipedia.org/wiki/Radix_tree"">Radix Tree</a>\n * @see <a href=""https://users.monash.edu/~lloyd/tildeAlgDS/Tree/PATRICIA/"">PATRICIA</a>\n * @see <a href=""https://www.imperialviolet.org/binary/critbit.pdf"">Crit-Bit Tree</a>\n * @since 4.0",public ,org.apache.commons.collections4.trie.AbstractPatriciaTrie,
org.apache.commons.collections4.trie.UnmodifiableTrie,Class,* An unmodifiable {@link Trie}.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0,public ,,org.apache.commons.collections4.Trie;java.io.Serializable;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.trie.KeyAnalyzer,Abstract Class,"* Defines the interface to analyze {@link org.apache.commons.collections4.Trie Trie} keys on a bit level.\n * {@link KeyAnalyzer}'s methods return the length of the key in bits, whether or not a bit is set,\n * and bits per element in the key.\n * <p>\n * Additionally, a method determines if a key is a prefix of another\n * key and returns the bit index where one key is different from another\n * key (if the key and found key are equal than the return value is\n * {@link #EQUAL_BIT_KEY}).\n * </p>\n *\n * @param <K> the type of objects that may be compared by this analyzer\n * @since 4.0","public , abstract ",,java.util.Comparator;java.io.Serializable
org.apache.commons.collections4.trie.AbstractPatriciaTrie,Abstract Class,* This class implements the base PATRICIA algorithm and everything that\n * is related to the {@link Map} interface.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0,"public , abstract ",org.apache.commons.collections4.trie.AbstractBitwiseTrie,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet,Class,* This is an entry set view of the {@link org.apache.commons.collections4.Trie} as returned by {@link Map#entrySet()}.,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator,Class,* An {@link Iterator} that returns {@link Entry} Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet,Class,* This is a key set view of the {@link org.apache.commons.collections4.Trie} as returned by {@link Map#keySet()}.,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator,Class,* An {@link Iterator} that returns Key Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet,Class,* A prefix {@link RangeEntrySet} view of the {@link org.apache.commons.collections4.Trie}.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntrySet,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator,Class,* An {@link Iterator} for iterating over a prefix search.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator,Class,* An {@link Iterator} that holds a single {@link TrieEntry}.,"private , final ",,java.util.Iterator
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap,Class,* A submap used for prefix views over the {@link org.apache.commons.collections4.Trie}.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractRangeMap,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap,Class,* A {@link AbstractRangeMap} that deals with {@link Entry}s.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractRangeMap,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet,Class,* A {@link Set} view of a {@link AbstractRangeMap}.,private ,java.util.AbstractSet,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator,Class,* An {@link Iterator} for {@link RangeEntrySet}s.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference,Class,* A {@link Reference} allows us to return something through a Method's\n     * argument list. An alternative would be to an Array with a length of\n     * one (1) but that leads to compiler warnings. Computationally and memory\n     * wise there's no difference (except for the need to load the\n     * {@link Reference} Class but that happens only once).,"private , static , final ",,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry,Class,* A {@link org.apache.commons.collections4.Trie} is a set of {@link TrieEntry} nodes.\n     *\n     * @param <K> the key type.\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator,Class,* An {@link OrderedMapIterator} for a {@link org.apache.commons.collections4.Trie}.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values,Class,* This is a value view of the {@link org.apache.commons.collections4.Trie} as returned by {@link Map#values()}.,"private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator,Class,* An {@link Iterator} that returns Value Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$AbstractRangeMap,Abstract Class,* A range view of the {@link org.apache.commons.collections4.Trie}.,"private , abstract ",java.util.AbstractMap,java.util.SortedMap
org.apache.commons.collections4.trie.AbstractPatriciaTrie$AbstractTrieIterator,Abstract Class,* An iterator for the entries.,abstract ,,java.util.Iterator
org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.EntryIterator,Class,* An {@link Iterator} that returns {@link Entry} Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.KeyIterator,Class,* An {@link Iterator} that returns Key Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.EntryIterator,Class,* An {@link Iterator} for iterating over a prefix search.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.SingletonIterator,Class,* An {@link Iterator} that holds a single {@link TrieEntry}.,"private , final ",,java.util.Iterator
org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.EntryIterator,Class,* An {@link Iterator} for {@link RangeEntrySet}s.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.ValueIterator,Class,* An {@link Iterator} that returns Value Objects.,"private , final ",org.apache.commons.collections4.trie.AbstractPatriciaTrie.AbstractTrieIterator,
org.apache.commons.collections4.trie.AbstractBitwiseTrie,Abstract Class,* This class provides some basic {@link Trie} functionality and\n * utility methods for actual bitwise {@link Trie} implementations.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0,"public , abstract ",java.util.AbstractMap,org.apache.commons.collections4.Trie;java.io.Serializable
org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry,Abstract Class,* A basic implementation of {@link Entry}.\n     *\n     * @param <K> the type of the keys in this entry.\n     * @param <V> the type of the values in this entry.,"abstract , static ",,java.util.Map.Entry;java.io.Serializable
org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer,Class,* An {@link KeyAnalyzer} for {@link String}s.\n * <p>\n * This class is stateless.\n * </p>\n * @since 4.0,public ,org.apache.commons.collections4.trie.KeyAnalyzer,
org.apache.commons.collections4.map.TransformedSortedMap,Class,"* Decorates another {@code SortedMap } to transform objects that are added.\n * <p>\n * The Map put methods and Map.Entry setValue method are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * <strong>Note that TransformedSortedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.TransformedMap,java.util.SortedMap
org.apache.commons.collections4.map.AbstractLinkedMap,Abstract Class,"* An abstract implementation of a hash-based map that links entries to create an\n * ordered map and which provides numerous points for subclasses to override.\n * <p>\n * This class implements all the features necessary for a subclass linked\n * hash-based map. Key-value entries are stored in instances of the\n * {@code LinkEntry} class which can be overridden and replaced.\n * The iterators can similarly be replaced, without the need to replace the KeySet,\n * EntrySet and Values view classes.\n * </p>\n * <p>\n * Overridable methods are provided to change the default hashing behavior, and\n * to change how entries are added to and removed from the map. Hopefully, all you\n * need for unusual subclasses is here.\n * </p>\n * <p>\n * This implementation maintains order by original insertion, but subclasses\n * may work differently. The {@code OrderedMap} interface is implemented\n * to provide access to bidirectional iteration and extra convenience methods.\n * </p>\n * <p>\n * The {@code orderedMapIterator()} method provides direct access to a\n * bidirectional iterator. The iterators from the other views can also be cast\n * to {@code OrderedIterator} if required.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * The implementation is also designed to be subclassed, with lots of useful\n * methods exposed.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.map.AbstractHashedMap,org.apache.commons.collections4.OrderedMap
org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator,Class,* EntrySet iterator.\n     *\n     * @param <K> the key type.\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.map.AbstractLinkedMap.LinkIterator,org.apache.commons.collections4.OrderedIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator,Class,* KeySet iterator.\n     *\n     * @param <K> the key type.,"protected , static ",org.apache.commons.collections4.map.AbstractLinkedMap.LinkIterator,org.apache.commons.collections4.OrderedIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,Class,* LinkEntry that stores the data.\n     * <p>\n     * If you subclass {@code AbstractLinkedMap} but not {@code LinkEntry}\n     * then you will not be able to access the protected fields.\n     * The {@code entryXxx()} methods on {@code AbstractLinkedMap} exist\n     * to provide the necessary access.\n     * </p>\n     *\n     * @param <K> the key type.\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashEntry,
org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator,Class,* MapIterator implementation.\n     *\n     * @param <K> the key type.\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.map.AbstractLinkedMap.LinkIterator,org.apache.commons.collections4.OrderedMapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator,Class,* Values iterator.\n     *\n     * @param <V> the value type.,"protected , static ",org.apache.commons.collections4.map.AbstractLinkedMap.LinkIterator,org.apache.commons.collections4.OrderedIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator,Abstract Class,* Base Iterator that iterates in link order.\n     *\n     * @param <K> the key type.\n     * @param <V> the value type.,"protected , abstract , static ",,
org.apache.commons.collections4.map.Flat3Map,Class,"* A {@code Map} implementation that stores data in simple fields until\n * the size is greater than 3.\n * <p>\n * This map is designed for performance and can outstrip HashMap.\n * It also has good garbage collection characteristics.\n * </p>\n * <ul>\n * <li>Optimized for operation at size 3 or less.\n * <li>Still works well once size 3 exceeded.\n * <li>Gets at size 3 or less are about 0-10% faster than HashMap,\n * <li>Puts at size 3 or less are over 4 times faster than HashMap.\n * <li>Performance 5% slower than HashMap once size 3 exceeded once.\n * </ul>\n * <p>\n * The design uses two distinct modes of operation - flat and delegate.\n * While the map is size 3 or less, operations map straight onto fields using\n * switch statements. Once size 4 is reached, the map switches to delegate mode\n * and only switches back when cleared. In delegate mode, all operations are\n * forwarded straight to a HashMap resulting in the 5% performance loss.\n * </p>\n * <p>\n * The performance gains on puts are due to not needing to create a Map Entry\n * object. This is a large saving not only in performance but in garbage collection.\n * </p>\n * <p>\n * Whilst in flat mode this map is also easy for the garbage collector to dispatch.\n * This is because it contains no complex objects or arrays which slow the progress.\n * </p>\n * <p>\n * Do not use {@code Flat3Map} if the size is likely to grow beyond 3.\n * </p>\n * <p>\n * <strong>Note that Flat3Map is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,,org.apache.commons.collections4.IterableMap;java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.Flat3Map$EntrySet,Class,* EntrySet,static ,java.util.AbstractSet,
org.apache.commons.collections4.map.Flat3Map$EntrySetIterator,Class,* EntrySetIterator and MapEntry,static ,org.apache.commons.collections4.map.Flat3Map.EntryIterator,java.util.Iterator
org.apache.commons.collections4.map.Flat3Map$FlatMapEntry,Class,No Comment,static ,,java.util.Map.Entry
org.apache.commons.collections4.map.Flat3Map$FlatMapIterator,Class,* FlatMapIterator,static ,,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.Flat3Map$KeySet,Class,* KeySet,static ,java.util.AbstractSet,
org.apache.commons.collections4.map.Flat3Map$KeySetIterator,Class,* KeySetIterator,static ,org.apache.commons.collections4.map.Flat3Map.EntryIterator,java.util.Iterator
org.apache.commons.collections4.map.Flat3Map$Values,Class,* Values,static ,java.util.AbstractCollection,
org.apache.commons.collections4.map.Flat3Map$ValuesIterator,Class,* ValuesIterator,static ,org.apache.commons.collections4.map.Flat3Map.EntryIterator,java.util.Iterator
org.apache.commons.collections4.map.Flat3Map$EntryIterator,Abstract Class,No Comment,"abstract , static ",,
org.apache.commons.collections4.map.PredicatedMap,Class,"* Decorates another {@code Map} to validate that additions\n * match a specified predicate.\n * <p>\n * This map exists to provide validation for the decorated map.\n * It is normally created to decorate an empty map.\n * If an object cannot be added to the map, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null keys are added to the map.\n * </p>\n * <pre>Map map = PredicatedSet.decorate(new HashMap(), NotNullPredicate.INSTANCE, null);</pre>\n * <p>\n * <strong>Note that PredicatedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator,java.io.Serializable
org.apache.commons.collections4.map.FixedSizeSortedMap,Class,"* Decorates another {@code SortedMap} to fix the size blocking add/remove.\n * <p>\n * Any action that would change the size of the map is disallowed.\n * The put method is allowed to change the value associated with an existing\n * key however.\n * </p>\n * <p>\n * If trying to remove or clear the map, an UnsupportedOperationException is\n * thrown. If trying to put a new mapping into the map, an\n * IllegalArgumentException is thrown. This is because the put method can\n * succeed if the mapping's key already exists in the map, so the put method\n * is not always unsupported.\n * </p>\n * <p>\n * <strong>Note that FixedSizeSortedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractSortedMapDecorator,org.apache.commons.collections4.BoundedMap;java.io.Serializable
org.apache.commons.collections4.map.UnmodifiableSortedMap,Class,* Decorates another {@code SortedMap} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.map.AbstractSortedMapDecorator,org.apache.commons.collections4.Unmodifiable;java.io.Serializable
org.apache.commons.collections4.map.PredicatedSortedMap,Class,"* Decorates another {@code SortedMap} to validate that additions\n * match a specified predicate.\n * <p>\n * This map exists to provide validation for the decorated map.\n * It is normally created to decorate an empty map.\n * If an object cannot be added to the map, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null keys are added to the map.\n * </p>\n * <pre>\n *   SortedMap map =\n *     PredicatedSortedMap.predicatedSortedMap(new TreeMap(),\n *                                             NotNullPredicate.notNullPredicate(),\n *                                             null);\n * </pre>\n * <p>\n * <strong>Note that PredicatedSortedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.PredicatedMap,java.util.SortedMap
org.apache.commons.collections4.map.DefaultedMap,Class,"* Decorates another {@code Map} returning a default value if the map\n * does not contain the requested key.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, this map will return the default value specified in\n * the constructor/factory. Only the get method is altered, so the\n * {@link Map#containsKey(Object)} can be used to determine if a key really\n * is in the map or not.\n * </p>\n * <p>\n * The defaulted value is not added to the map.\n * Compare this behavior with {@link LazyMap}, which does add the value\n * to the map (via a Transformer).\n * </p>\n * <p>\n * For instance:\n * </p>\n * <pre>\n * Map map = new DefaultedMap(""NULL"");\n * Object obj = map.get(""Surname"");\n * // obj == ""NULL""\n * </pre>\n * <p>\n * After the above code is executed the map is still empty.\n * </p>\n * <p>\n * <strong>Note that DefaultedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.2\n * @see LazyMap",public ,org.apache.commons.collections4.map.AbstractMapDecorator,java.io.Serializable
org.apache.commons.collections4.map.ReferenceIdentityMap,Class,"* A {@code Map} implementation that allows mappings to be\n * removed by the garbage collector and matches keys and values based\n * on {@code ==} not {@code equals()}.\n * <p>\n * When you construct a {@code ReferenceIdentityMap}, you can specify what kind\n * of references are used to store the map's keys and values.\n * If non-hard references are used, then the garbage collector can remove\n * mappings if a key or value becomes unreachable, or if the JVM's memory is\n * running low. For information on how the different reference types behave,\n * see {@link Reference}.\n * </p>\n * <p>\n * Different types of references can be specified for keys and values.\n * The default constructor uses hard keys and soft values, providing a\n * memory-sensitive cache.\n * </p>\n * <p>\n * This map is similar to\n * {@link org.apache.commons.collections4.map.ReferenceMap ReferenceMap}.\n * It differs in that keys and values in this class are compared using {@code ==}.\n * </p>\n * <p>\n * This map will violate the detail of various Map and map view contracts.\n * As a general rule, don't compare this map to other maps.\n * </p>\n * <p>\n * This {@link java.util.Map Map} implementation does <em>not</em> allow null elements.\n * Attempting to add a null key or value to the map will raise a {@code NullPointerException}.\n * </p>\n * <p>\n * This implementation is not synchronized.\n * You can use {@link java.util.Collections#synchronizedMap} to\n * provide synchronized access to a {@code ReferenceIdentityMap}.\n * Remember that synchronization will not stop the garbage collector removing entries.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * <strong>Note that ReferenceIdentityMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @see java.lang.ref.Reference\n * @since 3.0 (previously in main package v2.1)",public ,org.apache.commons.collections4.map.AbstractReferenceMap,java.io.Serializable
org.apache.commons.collections4.map.AbstractSortedMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to a Map via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with the map views.\n * Instead it simply returns the set/collection from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating implementation\n * it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.IterableSortedMap
org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator,Class,* OrderedMapIterator implementation.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type,"protected , static ",org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator,Abstract Class,"* An abstract base class that simplifies the task of creating map decorators.\n * <p>\n * The Map API is very difficult to decorate correctly, and involves implementing\n * lots of different classes. This class exists to provide a simpler API.\n * </p>\n * <p>\n * Special hook methods are provided that are called when objects are added to\n * the map. By overriding these methods, the input can be validated or manipulated.\n * In addition to the main map methods, the entrySet is also affected, which is\n * the hardest part of writing map implementations.\n * </p>\n * <p>\n * This class is package-scoped, and may be withdrawn or replaced in future\n * versions of Commons Collections.\n * </p>\n *\n * @since 3.1",abstract ,org.apache.commons.collections4.map.AbstractMapDecorator,
org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator$EntrySet,Class,* Implements an entry set that checks additions via setValue.,"private , final ",org.apache.commons.collections4.set.AbstractSetDecorator,
org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator$EntrySetIterator,Class,* Implements an entry set iterator that checks additions via setValue.,"private , final ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator$MapEntry,Class,* Implements a map entry that checks additions via setValue.,"private , final ",org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator,
org.apache.commons.collections4.map.FixedSizeMap,Class,"* Decorates another {@code Map} to fix the size, preventing add/remove.\n * <p>\n * Any action that would change the size of the map is disallowed.\n * The put method is allowed to change the value associated with an existing\n * key however.\n * </p>\n * <p>\n * If trying to remove or clear the map, an UnsupportedOperationException is\n * thrown. If trying to put a new mapping into the map, an\n * IllegalArgumentException is thrown. This is because the put method can\n * succeed if the mapping's key already exists in the map, so the put method\n * is not always unsupported.\n * </p>\n * <p>\n * <strong>Note that FixedSizeMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.BoundedMap;java.io.Serializable
org.apache.commons.collections4.map.LazySortedMap,Class,"* Decorates another {@code SortedMap} to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * </p>\n * <p>\n * For instance:\n * </p>\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * SortedMap&lt;String, Date&gt; lazy =\n *     LazySortedMap.lazySortedMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(""NOW"");\n * </pre>\n *\n * <p>\n * After the above code is executed, {@code date} will refer to\n * a new {@code Date} instance. Furthermore, that {@code Date}\n * instance is mapped to the ""NOW"" key in the map.\n * </p>\n * <p>\n * <strong>Note that LazySortedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.LazyMap,java.util.SortedMap
org.apache.commons.collections4.map.UnmodifiableOrderedMap,Class,* Decorates another {@code OrderedMap} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.map.AbstractOrderedMapDecorator,org.apache.commons.collections4.Unmodifiable;java.io.Serializable
org.apache.commons.collections4.map.CaseInsensitiveMap,Class,"* A case-insensitive {@code Map}.\n * <p>\n * Before keys are added to the map or compared to other existing keys, they are converted\n * to all lowercase in a locale-independent fashion by using information from the Unicode\n * data file.\n * </p>\n * <p>\n * Null keys are supported.\n * </p>\n * <p>\n * The {@code keySet()} method returns all lowercase keys, or nulls.\n * </p>\n * <p>\n * Example:\n * </p>\n * <pre><code>\n *  Map&lt;String, String&gt; map = new CaseInsensitiveMap&lt;String, String&gt;();\n *  map.put(""One"", ""One"");\n *  map.put(""Two"", ""Two"");\n *  map.put(null, ""Three"");\n *  map.put(""one"", ""Four"");\n * </code></pre>\n * <p>\n * The example above creates a {@code CaseInsensitiveMap} with three entries.\n * </p>\n * <p>\n * {@code map.get(null)} returns {@code ""Three""} and {@code map.get(""ONE"")}\n * returns {@code ""Four"".}  The {@code Set} returned by {@code keySet()}\n * equals {@code {""one"", ""two"", null}.}\n * </p>\n * <p>\n * <strong>This map will violate the detail of various Map and map view contracts.</strong>\n * As a general rule, don't compare this map to other maps. In particular, you can't\n * use decorators like {@link ListOrderedMap} on it, which silently assume that these\n * contracts are fulfilled.\n * </p>\n * <p>\n * <strong>Note that CaseInsensitiveMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractHashedMap,java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.AbstractHashedMap,Class,"* An abstract implementation of a hash-based map which provides numerous points for\n * subclasses to override.\n * <p>\n * This class implements all the features necessary for a subclass hash-based map.\n * Key-value entries are stored in instances of the {@code HashEntry} class,\n * which can be overridden and replaced. The iterators can similarly be replaced,\n * without the need to replace the KeySet, EntrySet and Values view classes.\n * </p>\n * <p>\n * Overridable methods are provided to change the default hashing behavior, and\n * to change how entries are added to and removed from the map. Hopefully, all you\n * need for unusual subclasses is here.\n * </p>\n * <p>\n * NOTE: From Commons Collections 3.1 this class extends AbstractMap.\n * This is to provide backwards compatibility for ReferenceMap between v3.0 and v3.1.\n * This extends clause will be removed in v5.0.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,java.util.AbstractMap,org.apache.commons.collections4.IterableMap
org.apache.commons.collections4.map.AbstractHashedMap$EntrySet,Class,* EntrySet implementation.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map,"protected , static ",java.util.AbstractSet,
org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator,Class,* EntrySet iterator.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map,"protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,Class,* HashEntry used to store the data.\n     * <p>\n     * If you subclass {@code AbstractHashedMap} but not {@code HashEntry}\n     * then you will not be able to access the protected fields.\n     * The {@code entryXxx()} methods on {@code AbstractHashedMap} exist\n     * to provide the necessary access.\n     * </p>\n     *\n     * @param <K> the type of the keys\n     * @param <V> the type of the values,"protected , static ",,java.util.Map.Entry;org.apache.commons.collections4.KeyValue
org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator,Class,* MapIterator implementation.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map,"protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashIterator,org.apache.commons.collections4.MapIterator
org.apache.commons.collections4.map.AbstractHashedMap$KeySet,Class,* KeySet implementation.\n     *\n     * @param <K> the type of elements maintained by this set,"protected , static ",java.util.AbstractSet,
org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator,Class,* KeySet iterator.\n     *\n     * @param <K> the type of elements maintained by this set,"protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractHashedMap$Values,Class,* Values implementation.\n     *\n     * @param <V> the type of elements maintained by this collection,"protected , static ",java.util.AbstractCollection,
org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator,Class,* Values iterator.\n     *\n     * @param <V> the type of elements maintained by this collection,"protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractHashedMap$HashIterator,Abstract Class,* Base Iterator.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map,"protected , abstract , static ",,
org.apache.commons.collections4.map.AbstractOrderedMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to an OrderedMap via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with the map views.\n * Instead it simply returns the set/collection from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating implementation\n * it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.OrderedMap
org.apache.commons.collections4.map.UnmodifiableMap,Class,* Decorates another {@code Map} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0,"public , final ",org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.Unmodifiable;java.io.Serializable
org.apache.commons.collections4.map.ConcurrentReferenceHashMap,Class,"* An advanced hash map supporting configurable garbage collection semantics of keys and values, optional referential-equality, full concurrency of retrievals,\n * and adjustable expected concurrency for updates.\n * <p>\n * This map is designed around specific advanced use-cases. If there is any doubt whether this map is for you, you most likely should be using\n * {@link java.util.concurrent.ConcurrentHashMap} instead.\n * </p>\n * <p>\n * This map supports strong, weak, and soft keys and values. By default, keys are weak, and values are strong. Such a configuration offers similar behavior to\n * {@link java.util.WeakHashMap}, entries of this map are periodically removed once their corresponding keys are no longer referenced outside of this map. In\n * other words, this map will not prevent a key from being discarded by the garbage collector. Once a key has been discarded by the collector, the corresponding\n * entry is no longer visible to this map; however, the entry may occupy space until a future map operation decides to reclaim it. For this reason, summary\n * functions such as {@code size} and {@code isEmpty} might return a value greater than the observed number of entries. In order to support a high level of\n * concurrency, stale entries are only reclaimed during blocking (usually mutating) operations.\n * </p>\n * <p>\n * Enabling soft keys allows entries in this map to remain until their space is absolutely needed by the garbage collector. This is unlike weak keys which can\n * be reclaimed as soon as they are no longer referenced by a normal strong reference. The primary use case for soft keys is a cache, which ideally occupies\n * memory that is not in use for as long as possible.\n * </p>\n * <p>\n * By default, values are held using a normal strong reference. This provides the commonly desired guarantee that a value will always have at least the same\n * life-span as its key. For this reason, care should be taken to ensure that a value never refers, either directly or indirectly, to its key, thereby\n * preventing reclamation. If this is unavoidable, then it is recommended to use the same reference type in use for the key. However, it should be noted that\n * non-strong values may disappear before their corresponding key.\n * </p>\n * <p>\n * While this map does allow the use of both strong keys and values, it is recommended you use {@link java.util.concurrent.ConcurrentHashMap} for such a\n * configuration, since it is optimized for that case.\n * </p>\n * <p>\n * Just like {@link java.util.concurrent.ConcurrentHashMap}, this class obeys the same functional specification as {@link Hashtable}, and includes versions of\n * methods corresponding to each method of {@code Hashtable}. However, even though all operations are thread-safe, retrieval operations do <em>not</em> entail\n * locking, and there is <em>not</em> any support for locking the entire map in a way that prevents all access. This class is fully interoperable with\n * {@code Hashtable} in programs that rely on its thread safety but not on its synchronization details.\n * </p>\n * <p>\n * Retrieval operations (including {@code get}) generally do not block, so they may overlap with update operations (including {@code put} and {@code remove}).\n * Retrievals reflect the results of the most recently <em>completed</em> update operations holding upon their onset. For aggregate operations such as\n * {@code putAll} and {@code clear}, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators and Enumerations return\n * elements reflecting the state of the hash map at some point at or since the creation of the iterator/enumeration. They do <em>not</em> throw\n * {@link ConcurrentModificationException}. However, iterators are designed to be used by only one thread at a time.\n * </p>\n * <p>\n * The allowed concurrency among update operations is guided by the optional {@code concurrencyLevel} constructor argument (default\n * {@value #DEFAULT_CONCURRENCY_LEVEL}), which is used as a hint for internal sizing. The map is internally partitioned to try to permit the indicated number of\n * concurrent updates without contention. Because placement in hash tables is essentially random, the actual concurrency will vary. Ideally, you should choose a\n * value to accommodate as many threads as will ever concurrently modify the map. Using a significantly higher value than you need can waste space and time, and\n * a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much\n * noticeable impact. A value of one is appropriate when it is known that only one thread will modify and all others will only read. Also, resizing this or any\n * other kind of hash map is a relatively slow operation, so, when possible, it is a good idea that you provide estimates of expected map sizes in constructors.\n * </p>\n * <p>\n * This class and its views and iterators implement all of the <em>optional</em> methods of the {@link Map} and {@link Iterator} interfaces.\n * </p>\n * <p>\n * Like {@link Hashtable} but unlike {@link HashMap}, this class does <em>not</em> allow {@code null} to be used as a key or value.\n * </p>\n * <p>\n * Provenance: Copied and edited from Apache Groovy git master at commit 77dc80a7512ceb2168b1bc866c3d0c69b002fe11; via Doug Lea, Jason T. Greene, with\n * assistance from members of JCP JSR-166, and Hazelcast.\n * </p>\n *\n * @param <K> the type of keys maintained by this map.\n * @param <V> the type of mapped values.",public ,java.util.AbstractMap,java.util.concurrent.ConcurrentMap
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$Builder,Class,"* Builds new ConcurrentReferenceHashMap instances.\n     * <p>\n     * By default, keys are weak, and values are strong.\n     * </p>\n     * <p>\n     * The default values are:\n     * </p>\n     * <ul>\n     * <li>concurrency level: {@value #DEFAULT_CONCURRENCY_LEVEL}</li>\n     * <li>initial capacity: {@value #DEFAULT_INITIAL_CAPACITY}</li>\n     * <li>key reference type: {@link ReferenceType#WEAK}</li>\n     * <li>load factor: {@value #DEFAULT_LOAD_FACTOR}</li>\n     * <li>options: {@code null}</li>\n     * <li>source map: {@code null}</li>\n     * <li>value reference type: {@link ReferenceType#STRONG}</li>\n     * </ul>\n     *\n     * @param <K> the type of keys.\n     * @param <V> the type of values.","public , static ",,java.util.function.Supplier
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$CachedEntryIterator,Class,"* The basic strategy is to subdivide the table among Segments, each of which itself is a concurrently readable hash table.","private , final ",org.apache.commons.collections4.map.ConcurrentReferenceHashMap.HashIterator,java.util.Iterator
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$EntryIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.ConcurrentReferenceHashMap.HashIterator,java.util.Iterator
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$EntrySet,Class,No Comment,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$HashEntry,Class,"* ConcurrentReferenceHashMap list entry. Note that this is never exported out as a user-visible Map.Entry.\n     * <p>\n     * Because the value field is volatile, not final, it is legal wrt the Java Memory Model for an unsynchronized reader to see null instead of initial value\n     * when read via a data race. Although a reordering leading to this is not likely to ever actually occur, the Segment.readValueUnderLock method is used as a\n     * backup in case a null (pre-initialized) value is ever seen in an unsynchronized access method.\n     * </p>","private , static , final ",,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$InitializableEntry,Class,No Comment,"private , static , final ",,java.util.Map.Entry
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$KeyIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.ConcurrentReferenceHashMap.HashIterator,java.util.Iterator;java.util.Enumeration
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$KeyReference,Interface,No Comment,private ,,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$KeySet,Class,No Comment,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$Option,Enum,* Behavior-changing configuration options for the map,public ,enum has no extends,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$ReferenceType,Enum,* An option specifying which Java reference type should be used to refer to a key and/or value.,public ,enum has no extends,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$Segment,Class,"* Segments are specialized versions of hash tables. This subclasses from ReentrantLock opportunistically, just to simplify some locking and avoid separate\n     * construction.\n     * <p>\n     * Segments maintain a table of entry lists that are ALWAYS kept in a consistent state, so they can be read without locking. Next fields of nodes are\n     * immutable (final). All list additions are performed at the front of each bin. This makes it easy to check changes, and also fast to traverse. When nodes\n     * would otherwise be changed, new nodes are created to replace them. This works well for hash tables since the bin lists tend to be short. (The average\n     * length is less than two for the default load factor threshold.)\n     * </p>\n     * <p>\n     * Read operations can thus proceed without locking, but rely on selected uses of volatiles to ensure that completed write operations performed by other\n     * threads are noticed. For most purposes, the ""count"" field, tracking the number of elements, serves as that volatile variable ensuring visibility. This is\n     * convenient because this field needs to be read in many read operations anyway:\n     * </p>\n     * <ul>\n     * <li>All (unsynchronized) read operations must first read the ""count"" field, and should not look at table entries if it is 0.</li>\n     * <li>All (synchronized) write operations should write to the ""count"" field after structurally changing any bin. The operations must not take any action\n     * that could even momentarily cause a concurrent read operation to see inconsistent data. This is made easier by the nature of the read operations in Map.\n     * For example, no operation can reveal that the table has grown but the threshold has not yet been updated, so there are no atomicity requirements for this\n     * with respect to reads.</li>\n     * </ul>\n     * <p>\n     * As a guide, all critical volatile reads and writes to the count field are marked in code comments.\n     * </p>\n     *\n     * @param <K> the type of keys maintained by this Segment.\n     * @param <V> the type of mapped values.","private , static , final ",java.util.concurrent.locks.ReentrantLock,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$SimpleEntry,Class,No Comment,"private , static ",,java.util.Map.Entry
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$SoftKeyReference,Class,* A soft-key reference which stores the key hash needed for reclamation.,"private , static , final ",java.lang.ref.SoftReference,org.apache.commons.collections4.map.ConcurrentReferenceHashMap.KeyReference
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$SoftValueReference,Class,No Comment,"private , static , final ",java.lang.ref.SoftReference,org.apache.commons.collections4.map.ConcurrentReferenceHashMap.KeyReference
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$ValueIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.ConcurrentReferenceHashMap.HashIterator,java.util.Iterator;java.util.Enumeration
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$Values,Class,No Comment,"private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$WeakKeyReference,Class,* A weak-key reference which stores the key hash needed for reclamation.,"private , static , final ",java.lang.ref.WeakReference,org.apache.commons.collections4.map.ConcurrentReferenceHashMap.KeyReference
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$WeakValueReference,Class,No Comment,"private , static , final ",java.lang.ref.WeakReference,org.apache.commons.collections4.map.ConcurrentReferenceHashMap.KeyReference
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$WriteThroughEntry,Class,"* Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying map.","private , final ",org.apache.commons.collections4.map.ConcurrentReferenceHashMap.SimpleEntry,
org.apache.commons.collections4.map.ConcurrentReferenceHashMap$HashIterator,Abstract Class,No Comment,"private , abstract ",,
org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter,Class,* Adapts a Map entrySet to the MapIterator interface.\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0,public ,,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.AbstractIterableMap,Abstract Class,* Provide a basic {@link IterableMap} implementation.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0,"public , abstract ",,org.apache.commons.collections4.IterableMap
org.apache.commons.collections4.map.ListOrderedMap,Class,"* Decorates a {@code Map} to ensure that the order of addition is retained\n * using a {@code List} to maintain order.\n * <p>\n * The order will be used via the iterators and toArray methods on the views.\n * The order is also returned by the {@code MapIterator}.\n * The {@code orderedMapIterator()} method accesses an iterator that can\n * iterate both forwards and backwards through the map.\n * In addition, non-interface methods are provided to access the map by index.\n * </p>\n * <p>\n * If an object is added to the Map for a second time, it will remain in the\n * original position in the iteration.\n * </p>\n * <p>\n * <strong>Note that ListOrderedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * <strong>Note that ListOrderedMap doesn't work with\n * {@link java.util.IdentityHashMap IdentityHashMap}, {@link CaseInsensitiveMap},\n * or similar maps that violate the general contract of {@link java.util.Map}.</strong>\n * The {@code ListOrderedMap} (or, more precisely, the underlying {@code List})\n * is relying on {@link Object#equals(Object) equals()}. This is fine, as long as the\n * decorated {@code Map} is also based on {@link Object#equals(Object) equals()},\n * and {@link Object#hashCode() hashCode()}, which\n * {@link java.util.IdentityHashMap IdentityHashMap}, and\n * {@link CaseInsensitiveMap} don't: The former uses {@code ==}, and\n * the latter uses {@link Object#equals(Object) equals()} on a lower-cased\n * key.\n * </p>\n * <p>\n * This class is {@link Serializable} starting with Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.OrderedMap;java.io.Serializable
org.apache.commons.collections4.map.ListOrderedMap$EntrySetView,Class,No Comment,static ,java.util.AbstractSet,
org.apache.commons.collections4.map.ListOrderedMap$KeySetView,Class,No Comment,static ,java.util.AbstractSet,
org.apache.commons.collections4.map.ListOrderedMap$ListOrderedIterator,Class,No Comment,static ,org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator,
org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapEntry,Class,No Comment,static ,org.apache.commons.collections4.keyvalue.AbstractMapEntry,
org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator,Class,No Comment,static ,,org.apache.commons.collections4.OrderedMapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.ListOrderedMap$ValuesView,Class,No Comment,static ,java.util.AbstractList,
org.apache.commons.collections4.map.LinkedMap,Class,"* A {@code Map} implementation that maintains the order of the entries.\n * In this implementation order is maintained by original insertion.\n * <p>\n * This implementation improves on the JDK1.4 LinkedHashMap by adding the\n * {@link org.apache.commons.collections4.MapIterator MapIterator}\n * functionality, additional convenience methods and allowing\n * bidirectional iteration. It also implements {@code OrderedMap}.\n * In addition, non-interface methods are provided to access the map by index.\n * </p>\n * <p>\n * The {@code orderedMapIterator()} method provides direct access to a\n * bidirectional iterator. The iterators from the other views can also be cast\n * to {@code OrderedIterator} if required.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * The implementation is also designed to be subclassed, with lots of useful\n * methods exposed.\n * </p>\n * <p>\n * <strong>Note that LinkedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractLinkedMap,java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.LinkedMap$LinkedMapList,Class,* List view of map.,static ,java.util.AbstractList,
org.apache.commons.collections4.map.SingletonMap,Class,"* A {@code Map} implementation that holds a single item and is fixed size.\n * <p>\n * The single key/value pair is specified at creation.\n * The map is fixed size so any action that would change the size is disallowed.\n * However, the {@code put} or {@code setValue} methods can <em>change</em>\n * the value associated with the key.\n * </p>\n * <p>\n * If trying to remove or clear the map, an UnsupportedOperationException is thrown.\n * If trying to put a new mapping into the map, an  IllegalArgumentException is thrown.\n * The put method will only succeed if the key specified is the same as the\n * singleton key.\n * </p>\n * <p>\n * The key and value can be obtained by:\n * </p>\n * <ul>\n * <li>normal Map methods and views\n * <li>the {@code MapIterator}, see {@link #mapIterator()}\n * <li>the {@code KeyValue} interface (just cast - no object creation)\n * </ul>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.1",public ,,org.apache.commons.collections4.OrderedMap;org.apache.commons.collections4.BoundedMap;org.apache.commons.collections4.KeyValue;java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator,Class,* SingletonMapIterator.,static ,,org.apache.commons.collections4.OrderedMapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.map.SingletonMap$SingletonValues,Class,* Values implementation for the SingletonMap.\n     * This class is needed as values is a view that must update as the map updates.\n     *\n     * @param <V> the type of the values in this set.,static ,java.util.AbstractSet,java.io.Serializable
org.apache.commons.collections4.map.UnmodifiableEntrySet,Class,* Decorates a map entry {@code Set} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0,"public , final ",org.apache.commons.collections4.set.AbstractSetDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.map.UnmodifiableEntrySet$UnmodifiableEntry,Class,* Implements a map entry that is unmodifiable.,"private , final ",org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator,
org.apache.commons.collections4.map.UnmodifiableEntrySet$UnmodifiableEntrySetIterator,Class,* Implements an entry set iterator.,"private , final ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.map.StaticBucketMap,Class,"* A StaticBucketMap is an efficient, thread-safe implementation of\n * {@link java.util.Map} that performs well in a highly\n * thread-contentious environment.\n * <p>\n * The map supports very efficient\n * {@link #get(Object) get}, {@link #put(Object,Object) put},\n * {@link #remove(Object) remove} and {@link #containsKey(Object) containsKey}\n * operations, assuming (approximate) uniform hashing and\n * that the number of entries does not exceed the number of buckets.  If the\n * number of entries exceeds the number of buckets or if the hash codes of the\n * objects are not uniformly distributed, these operations have a worst case\n * scenario that is proportional to the number of elements in the map\n * (<em>O(n)</em>).\n * </p>\n * <p>\n * Each bucket in the hash table has its own monitor, so two threads can\n * safely operate on the map at the same time, often without incurring any\n * monitor contention.  This means that you don't have to wrap instances\n * of this class with {@link java.util.Collections#synchronizedMap(Map)};\n * instances are already thread-safe.  Unfortunately, however, this means\n * that this map implementation behaves in ways you may find disconcerting.\n * Bulk operations, such as {@link #putAll(Map) putAll} or the\n * {@link Collection#retainAll(Collection) retainAll} operation in collection\n * views, are <em>not</em> atomic.  If two threads are simultaneously\n * executing\n * </p>\n *\n * <pre>\n *   staticBucketMapInstance.putAll(map);\n * </pre>\n *\n * and\n *\n * <pre>\n *   staticBucketMapInstance.entrySet().removeAll(map.entrySet());\n * </pre>\n *\n * <p>\n * then the results are generally random.  Those two statement could cancel\n * each other out, leaving {@code staticBucketMapInstance} essentially\n * unchanged, or they could leave some random subset of {@code map} in\n * {@code staticBucketMapInstance}.\n * </p>\n * <p>\n * Also, much like an encyclopedia, the results of {@link #size()} and\n * {@link #isEmpty()} are out-of-date as soon as they are produced.\n * </p>\n * <p>\n * The iterators returned by the collection views of this class are <em>not</em>\n * fail-fast.  They will <em>never</em> raise a\n * {@link java.util.ConcurrentModificationException}.  Keys and values\n * added to the map after the iterator is created do not necessarily appear\n * during iteration.  Similarly, the iterator does not necessarily fail to\n * return keys and values that were removed after the iterator was created.\n * </p>\n * <p>\n * Finally, unlike {@link java.util.HashMap}-style implementations, this\n * class <em>never</em> rehashes the map.  The number of buckets is fixed\n * at construction time and never altered.  Performance may degrade if\n * you do not allocate enough buckets upfront.\n * </p>\n * <p>\n * The {@link #atomic(Runnable)} method is provided to allow atomic iterations\n * and bulk operations; however, overuse of {@link #atomic(Runnable) atomic}\n * will basically result in a map that's slower than an ordinary synchronized\n * {@link java.util.HashMap}.\n * </p>\n * <p>\n * Use this class if you do not require reliable bulk operations and\n * iterations, or if you can make your own guarantees about how bulk\n * operations will affect the map.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0 (previously in main package v2.1)","public , final ",org.apache.commons.collections4.map.AbstractIterableMap,
org.apache.commons.collections4.map.StaticBucketMap$BaseIterator,Class,No Comment,,,
org.apache.commons.collections4.map.StaticBucketMap$EntryIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.StaticBucketMap.BaseIterator,java.util.Iterator
org.apache.commons.collections4.map.StaticBucketMap$EntrySet,Class,No Comment,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.map.StaticBucketMap$KeyIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.StaticBucketMap.BaseIterator,java.util.Iterator
org.apache.commons.collections4.map.StaticBucketMap$KeySet,Class,No Comment,"private , final ",java.util.AbstractSet,
org.apache.commons.collections4.map.StaticBucketMap$Lock,Class,"* The lock object, which also includes a count of the nodes in this lock.","private , static , final ",,
org.apache.commons.collections4.map.StaticBucketMap$Node,Class,* The Map.Entry for the StaticBucketMap.,"private , static , final ",,java.util.Map.Entry;org.apache.commons.collections4.KeyValue
org.apache.commons.collections4.map.StaticBucketMap$ValueIterator,Class,No Comment,"private , final ",org.apache.commons.collections4.map.StaticBucketMap.BaseIterator,java.util.Iterator
org.apache.commons.collections4.map.StaticBucketMap$Values,Class,No Comment,"private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.map.AbstractMapDecorator,Abstract Class,"* Provides a base decorator that enables additional functionality to be added\n * to a Map via decoration.\n * <p>\n * Methods are forwarded directly to the decorated map.\n * </p>\n * <p>\n * This implementation does not perform any special processing with\n * {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead\n * it simply returns the set/collection from the wrapped map. This may be\n * undesirable, for example if you are trying to write a validating\n * implementation it would provide a loophole around the validation.\n * But, you might want that loophole, so this class is kept simple.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0","public , abstract ",org.apache.commons.collections4.map.AbstractIterableMap,
org.apache.commons.collections4.map.AbstractReferenceMap,Abstract Class,"* An abstract implementation of a hash-based map that allows the entries to\n * be removed by the garbage collector.\n * <p>\n * This class implements all the features necessary for a subclass reference\n * hash-based map. Key-value entries are stored in instances of the\n * {@code ReferenceEntry} class which can be overridden and replaced.\n * The iterators can similarly be replaced, without the need to replace the KeySet,\n * EntrySet and Values view classes.\n * </p>\n * <p>\n * Overridable methods are provided to change the default hashing behavior, and\n * to change how entries are added to and removed from the map. Hopefully, all you\n * need for unusual subclasses is here.\n * </p>\n * <p>\n * When you construct an {@code AbstractReferenceMap}, you can specify what\n * kind of references are used to store the map's keys and values.\n * If non-hard references are used, then the garbage collector can remove\n * mappings if a key or value becomes unreachable, or if the JVM's memory is\n * running low. For information on how the different reference types behave,\n * see {@link Reference}.\n * </p>\n * <p>\n * Different types of references can be specified for keys and values.\n * The keys can be configured to be weak but the values hard,\n * in which case this class will behave like a\n * <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html"">\n * {@code WeakHashMap}</a>. However, you can also specify hard keys and\n * weak values, or any other combination. The default constructor uses\n * hard keys and soft values, providing a memory-sensitive cache.\n * </p>\n * <p>\n * This {@link Map} implementation does <em>not</em> allow null elements.\n * Attempting to add a null key or value to the map will raise a\n * {@code NullPointerException}.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * This implementation is not synchronized.\n * You can use {@link java.util.Collections#synchronizedMap} to\n * provide synchronized access to a {@code ReferenceMap}.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @see java.lang.ref.Reference\n * @since 3.1 (extracted from ReferenceMap in 3.0)","public , abstract ",org.apache.commons.collections4.map.AbstractHashedMap,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator,Class,* Base iterator class.,static ,,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry,Class,"* A MapEntry implementation for the map.\n     * <p>\n     * If getKey() or getValue() returns null, it means\n     * the mapping is stale and should be removed.\n     * </p>\n     *\n     * @param <K> the type of the keys\n     * @param <V> the type of the values\n     * @since 3.1","protected , static ",org.apache.commons.collections4.map.AbstractHashedMap.HashEntry,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySet,Class,* EntrySet implementation.,static ,org.apache.commons.collections4.map.AbstractHashedMap.EntrySet,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySetIterator,Class,* The EntrySet iterator.,static ,org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySet,Class,* KeySet implementation.,static ,org.apache.commons.collections4.map.AbstractHashedMap.KeySet,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceKeySetIterator,Class,* The keySet iterator.,static ,org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator,Class,* The MapIterator implementation.,static ,org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator,org.apache.commons.collections4.MapIterator
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength,Enum,* Enumerates reference types.,public ,enum has no extends,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValues,Class,* Values implementation.,static ,org.apache.commons.collections4.map.AbstractHashedMap.Values,
org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValuesIterator,Class,* The values iterator.,static ,org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator,java.util.Iterator
org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef,Class,* A soft reference holder.,static ,java.lang.ref.SoftReference,
org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef,Class,* A weak reference holder.,static ,java.lang.ref.WeakReference,
org.apache.commons.collections4.map.MultiKeyMap,Class,"* A {@code Map} implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide {@code get}, {@code containsKey}, {@code put} and\n * {@code remove} for individual keys which operate without extra object creation.\n * </p>\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type {@code Map}.\n * </p>\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use {@code put()} with any other object type a\n * {@code ClassCastException} is thrown. If you try to use {@code null} as\n * the key in {@code put()} a {@code NullPointerException} is thrown.\n * </p>\n * <p>\n * This map is implemented as a decorator of a {@code AbstractHashedMap} which\n * enables extra behavior to be added easily.\n * </p>\n * <ul>\n * <li>{@code MultiKeyMap.decorate(new LinkedMap())} creates an ordered map.\n * <li>{@code MultiKeyMap.decorate(new LRUMap())} creates an least recently used map.\n * <li>{@code MultiKeyMap.decorate(new ReferenceMap())} creates a garbage collector sensitive map.\n * </ul>\n * <p>\n * Note that {@code IdentityMap} and {@code ReferenceIdentityMap} are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * </p>\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * </p>\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.1",public ,org.apache.commons.collections4.map.AbstractMapDecorator,java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.HashedMap,Class,"* A {@code Map} implementation that is a general purpose alternative\n * to {@code HashMap}.\n * <p>\n * This implementation improves on the JDK1.4 HashMap by adding the\n * {@link org.apache.commons.collections4.MapIterator MapIterator}\n * functionality and many methods for subclassing.\n * </p>\n * <p>\n * <strong>Note that HashedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractHashedMap,java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.LazyMap,Class,"* Decorates another {@code Map} to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * </p>\n * <p>\n * For instance:\n * </p>\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(""NOW"");\n * </pre>\n *\n * <p>\n * After the above code is executed, {@code date} will refer to\n * a new {@code Date} instance. Furthermore, that {@code Date}\n * instance is mapped to the ""NOW"" key in the map.\n * </p>\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractMapDecorator,java.io.Serializable
org.apache.commons.collections4.map.PassiveExpiringMap,Class,"* Decorates a {@code Map} to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and {@code null} is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsValue(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0",public ,org.apache.commons.collections4.map.AbstractMapDecorator,java.io.Serializable
org.apache.commons.collections4.map.PassiveExpiringMap$ConstantTimeToLiveExpirationPolicy,Class,* A {@link org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}\n     * that returns an expiration time that is a\n     * constant about of time in the future from the current time.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map\n     * @since 4.0,"public , static ",,org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy
org.apache.commons.collections4.map.PassiveExpiringMap$ExpirationPolicy,Interface,* A policy to determine the expiration time for key-value entries.\n     *\n     * @param <K> the key object type.\n     * @param <V> the value object type\n     * @since 4.0,public ,java.io.Serializable,
org.apache.commons.collections4.map.MultiValueMap,Class,"* A MultiValueMap decorates another map, allowing it to have\n * more than one value for a key.\n * <p>\n * A {@code MultiMap} is a Map with slightly different semantics.\n * Putting a value into the map will add the value to a Collection at that key.\n * Getting a value will return a Collection, holding all the values put to that key.\n * </p>\n * <p>\n * This implementation is a decorator, allowing any Map implementation\n * to be used as the base.\n * </p>\n * <p>\n * In addition, this implementation allows the type of collection used\n * for the values to be controlled. By default, an {@code ArrayList}\n * is used, however a {@code Class} to instantiate may be specified,\n * or a factory that returns a {@code Collection} instance.\n * </p>\n * <p>\n * <strong>Note that MultiValueMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.2\n * @deprecated since 4.1, use {@link org.apache.commons.collections4.MultiValuedMap MultiValuedMap} instead",public ,org.apache.commons.collections4.map.AbstractMapDecorator,org.apache.commons.collections4.MultiMap;java.io.Serializable
org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory,Class,* Inner class that provides a simple reflection factory.\n     *\n     * @param <T> the type of results supplied by this supplier.,"private , static , final ",,org.apache.commons.collections4.Factory;java.io.Serializable
org.apache.commons.collections4.map.MultiValueMap$Values,Class,* Inner class that provides the values view.,"private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.map.MultiValueMap$ValuesIterator,Class,* Inner class that provides the values iterator.,"private , final ",,java.util.Iterator
org.apache.commons.collections4.map.LRUMap,Class,"* A {@code Map} implementation with a fixed maximum size which removes\n * the least recently used entry if an entry is added when full.\n * <p>\n * The least recently used algorithm works on the get and put operations only.\n * Iteration of any kind, including setting the value by iteration, does not\n * change the order. Queries such as containsKey and containsValue or access\n * via views also do not change the order.\n * </p>\n * <p>\n * A somewhat subtle ramification of the least recently used\n * algorithm is that calls to {@link #get(Object)} stand a very good chance\n * of modifying the map's iteration order and thus invalidating any\n * iterators currently in use.  It is therefore suggested that iterations\n * over an {@link LRUMap} instance access entry values only through a\n * {@link org.apache.commons.collections4.MapIterator MapIterator} or {@link #entrySet()} iterator.\n * </p>\n * <p>\n * The map implements {@code OrderedMap} and entries may be queried using\n * the bidirectional {@code OrderedMapIterator}. The order returned is\n * least recently used to most recently used. Iterators from map views can\n * also be cast to {@code OrderedIterator} if required.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * <strong>Note that LRUMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * {@code NullPointerException}'s when accessed by concurrent threads.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0 (previously in main package v1.0)",public ,org.apache.commons.collections4.map.AbstractLinkedMap,org.apache.commons.collections4.BoundedMap;java.io.Serializable;java.lang.Cloneable
org.apache.commons.collections4.map.ReferenceMap,Class,"* A {@code Map} implementation that allows mappings to be\n * removed by the garbage collector.\n * <p>\n * When you construct a {@code ReferenceMap}, you can specify what kind\n * of references are used to store the map's keys and values.\n * If non-hard references are used, then the garbage collector can remove\n * mappings if a key or value becomes unreachable, or if the JVM's memory is\n * running low. For information on how the different reference types behave,\n * see {@link java.lang.ref.Reference Reference}.\n * </p>\n * <p>\n * Different types of references can be specified for keys and values.\n * The keys can be configured to be weak but the values hard,\n * in which case this class will behave like a\n * <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html"">\n * {@code WeakHashMap}</a>. However, you can also specify hard keys and\n * weak values, or any other combination. The default constructor uses\n * hard keys and soft values, providing a memory-sensitive cache.\n * </p>\n * <p>\n * This map is similar to\n * {@link org.apache.commons.collections4.map.ReferenceIdentityMap ReferenceIdentityMap}.\n * It differs in that keys and values in this class are compared using {@code equals()}.\n * </p>\n * <p>\n * This {@link java.util.Map Map} implementation does <em>not</em> allow null elements.\n * Attempting to add a null key or value to the map will raise a {@code NullPointerException}.\n * </p>\n * <p>\n * This implementation is not synchronized.\n * You can use {@link java.util.Collections#synchronizedMap} to\n * provide synchronized access to a {@code ReferenceMap}.\n * Remember that synchronization will not stop the garbage collector removing entries.\n * </p>\n * <p>\n * All the available iterators can be reset back to the start by casting to\n * {@code ResettableIterator} and calling {@code reset()}.\n * </p>\n * <p>\n * <strong>Note that ReferenceMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * NOTE: As from Commons Collections 3.1 this map extends {@code AbstractReferenceMap}\n * (previously it extended AbstractMap). As a result, the implementation is now\n * extensible and provides a {@code MapIterator}.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @see java.lang.ref.Reference\n * @since 3.0 (previously in main package v2.1)",public ,org.apache.commons.collections4.map.AbstractReferenceMap,java.io.Serializable
org.apache.commons.collections4.map.TransformedMap,Class,"* Decorates another {@code Map} to transform objects that are added.\n * <p>\n * The Map put methods and Map.Entry setValue method are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * <strong>Note that TransformedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @see org.apache.commons.collections4.splitmap.TransformedSplitMap\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator,java.io.Serializable
org.apache.commons.collections4.map.CompositeMap,Class,"* Decorates a map of other maps to provide a single unified view.\n * <p>\n * Changes made to this map will actually be made on the decorated map.\n * Add and remove operations require the use of a pluggable strategy. If no\n * strategy is provided then add and remove are unsupported.\n * </p>\n * <p>\n * <strong>Note that CompositeMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.map.AbstractIterableMap,java.io.Serializable
org.apache.commons.collections4.map.CompositeMap$MapMutator,Interface,"* This interface allows definition for all of the indeterminate\n     * mutators in a CompositeMap, as well as providing a hook for\n     * callbacks on key collisions.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map",public ,java.io.Serializable,
org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry,Class,* A {@link java.util.Map.Entry Map.Entry} that throws\n * UnsupportedOperationException when {@code setValue} is called.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , final ",org.apache.commons.collections4.keyvalue.AbstractMapEntry,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.keyvalue.MultiKey,Class,"* A {@code MultiKey} allows multiple map keys to be merged together.\n * <p>\n * The purpose of this class is to avoid the need to write code to handle\n * maps of maps. An example might be the need to look up a file name by\n * key and locale. The typical solution might be nested maps. This class\n * can be used instead by creating an instance passing in the key and locale.\n * </p>\n * <p>\n * Example usage:\n * </p>\n * <pre>\n * // populate map with data mapping key+locale to localizedText\n * Map map = new HashMap();\n * MultiKey multiKey = new MultiKey(key, locale);\n * map.put(multiKey, localizedText);\n *\n * // later retrieve the localized text\n * MultiKey multiKey = new MultiKey(key, locale);\n * String localizedText = (String) map.get(multiKey);\n * </pre>\n *\n * @param <K> the type of keys\n * @since 3.0",public ,,java.io.Serializable
org.apache.commons.collections4.keyvalue.DefaultMapEntry,Class,* A restricted implementation of {@link java.util.Map.Entry Map.Entry} that prevents\n * the {@link java.util.Map.Entry Map.Entry} contract from being broken.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , final ",org.apache.commons.collections4.keyvalue.AbstractMapEntry,
org.apache.commons.collections4.keyvalue.DefaultKeyValue,Class,* A mutable {@code KeyValue} pair that does not implement\n * {@link java.util.Map.Entry Map.Entry}.\n * <p>\n * Note that a {@code DefaultKeyValue} instance may not contain\n * itself as a key or value.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of values\n * @since 3.0,public ,org.apache.commons.collections4.keyvalue.AbstractKeyValue,
org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator,Abstract Class,* Provides a base decorator that allows additional functionality to be\n * added to a {@link java.util.Map.Entry Map.Entry}.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , abstract ",,java.util.Map.Entry;org.apache.commons.collections4.KeyValue
org.apache.commons.collections4.keyvalue.AbstractKeyValue,Abstract Class,* Abstract pair class to assist with creating {@code KeyValue}\n * and {@link java.util.Map.Entry Map.Entry} implementations.\n *\n * @param <K> the type of keys\n * @param <V> the type of values\n * @since 3.0,"public , abstract ",,org.apache.commons.collections4.KeyValue
org.apache.commons.collections4.keyvalue.TiedMapEntry,Class,"* A {@link java.util.Map.Entry Map.Entry} tied to a map underneath.\n * <p>\n * This can be used to enable a map entry to make changes on the underlying\n * map, however this will probably mess up any iterators.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0",public ,,java.util.Map.Entry;org.apache.commons.collections4.KeyValue;java.io.Serializable
org.apache.commons.collections4.keyvalue.AbstractMapEntry,Abstract Class,* Abstract Pair class to assist with creating correct\n * {@link java.util.Map.Entry Map.Entry} implementations.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.keyvalue.AbstractKeyValue,java.util.Map.Entry
org.apache.commons.collections4.MultiSetUtils,Class,* Provides utility methods and decorators for {@link MultiSet} instances.\n *\n * @since 4.1,public ,,
org.apache.commons.collections4.MapIterator,Interface,"* Defines an iterator that operates over a {@code Map}.\n * <p>\n * This iterator is a special version designed for maps. It can be more\n * efficient to use this rather than an entry set iterator where the option\n * is available, and it is certainly more convenient.\n * </p>\n * <p>\n * A map that provides this interface may not hold the data internally using\n * Map Entry objects, thus this interface can avoid lots of object creation.\n * </p>\n * <p>\n * In use, this iterator iterates through the keys in the map. After each call\n * to {@code next()}, the {@code getValue()} method provides direct\n * access to the value. The value can also be set using {@code setValue()}.\n * </p>\n * <pre>{@code\n * MapIterator<String,Integer> it = map.mapIterator();\n * while (it.hasNext()) {\n *   String key = it.next();\n *   Integer value = it.getValue();\n *   it.setValue(value + 1);\n * }\n * }</pre>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0",public ,java.util.Iterator,
org.apache.commons.collections4.properties.AbstractPropertiesFactory,Abstract Class,* Subclasses create and load {@link Properties} and subclasses of {@link Properties} like {@link SortedProperties}.\n *\n * @param <T> {@link Properties} or a subclass like {@link SortedProperties}.\n * @see Properties\n * @since 4.4,"public , abstract ",,
org.apache.commons.collections4.properties.AbstractPropertiesFactory$PropertyFormat,Enum,* Enumerates property formats.\n     *\n     * @since 4.5.0-M1,public ,enum has no extends,
org.apache.commons.collections4.properties.OrderedProperties,Class,* A drop-in replacement for {@link Properties} for ordered keys.\n * <p>\n * Overrides methods to keep keys in insertion order. Allows other methods in the superclass to work with ordered keys.\n * </p>\n *\n * @see OrderedPropertiesFactory#INSTANCE\n * @since 4.5.0-M1,public ,java.util.Properties,
org.apache.commons.collections4.properties.SortedProperties,Class,* A drop-in replacement for {@link Properties} for sorting keys.\n * <p>\n * Overrides {@link Properties#keys()} to sort keys. Allows other methods on the superclass to work with sorted keys.\n * </p>\n *\n * @see SortedPropertiesFactory#INSTANCE\n * @since 4.2,public ,java.util.Properties,
org.apache.commons.collections4.properties.OrderedPropertiesFactory,Class,* Creates and loads {@link OrderedProperties}.\n *\n * @see OrderedProperties\n * @since 4.5.0-M1,public ,org.apache.commons.collections4.properties.AbstractPropertiesFactory,
org.apache.commons.collections4.properties.PropertiesFactory,Class,* Creates and loads {@link Properties}.\n *\n * @see Properties\n * @since 4.4,public ,org.apache.commons.collections4.properties.AbstractPropertiesFactory,
org.apache.commons.collections4.properties.PropertiesFactory$EmptyProperties,Class,No Comment,"private , static , final ",java.util.Properties,
org.apache.commons.collections4.properties.SortedPropertiesFactory,Class,* Creates and loads {@link SortedProperties}.\n *\n * @see SortedProperties\n * @since 4.4,public ,org.apache.commons.collections4.properties.AbstractPropertiesFactory,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap,Abstract Class,* Abstract implementation of the {@link MultiValuedMap} interface to simplify\n * the creation of subclass implementations.\n * <p>\n * Subclasses specify a Map implementation to use as the internal storage.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1,"public , abstract ",,org.apache.commons.collections4.MultiValuedMap
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap,Class,* Inner class that provides the AsMap view.,"private , final ",java.util.AbstractMap,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap$AsMapEntrySet,Class,No Comment,final ,java.util.AbstractSet,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap$AsMapEntrySetIterator,Class,* EntrySet iterator for the asMap view.,final ,org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$EntryValues,Class,"* Inner class that provides the Entry<K, V> view","private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet,Class,* Inner class that provides a MultiSet<K> keys view.,"private , final ",org.apache.commons.collections4.multiset.AbstractMultiSet,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet$MapEntryTransformer,Class,No Comment,"private , final ",,org.apache.commons.collections4.Transformer
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapEntry,Class,* Inner class for MultiValuedMap Entries.,"private , final ",org.apache.commons.collections4.keyvalue.AbstractMapEntry,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator,Class,* Inner class for MapIterator.,"private , final ",,org.apache.commons.collections4.MapIterator
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$Values,Class,* Inner class that provides the values view.,"private , final ",java.util.AbstractCollection,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator,Class,* Inner class that provides the values iterator.,"private , final ",,java.util.Iterator
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection,Class,"* Wrapped collection to handle add and remove on the collection returned\n     * by get(object).\n     * <p>\n     * Currently, the wrapped collection is not cached and has to be retrieved\n     * from the underlying map. This is safe, but not very efficient and\n     * should be improved in subsequent releases. For this purpose, the\n     * scope of this collection is set to package private to simplify later\n     * refactoring.",,,java.util.Collection
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap.AsMapEntrySet,Class,No Comment,final ,java.util.AbstractSet,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$AsMap.AsMapEntrySetIterator,Class,* EntrySet iterator for the asMap view.,final ,org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet.MapEntryTransformer,Class,No Comment,"private , final ",,org.apache.commons.collections4.Transformer
org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap,Class,* Decorates another {@link MultiValuedMap} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of key elements\n * @param <V> the type of value elements\n * @since 4.1,"public , final ",org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.multimap.HashSetValuedHashMap,Class,"* Implements a {@code SetValuedMap}, using a {@link HashMap} to provide data\n * storage and {@link HashSet}s as value collections. This is the standard\n * implementation of a SetValuedMap.\n * <p>\n * <strong>Note that HashSetValuedHashMap is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,org.apache.commons.collections4.multimap.AbstractSetValuedMap,java.io.Serializable
org.apache.commons.collections4.multimap.LinkedHashSetValuedLinkedHashMap,Class,"* Implements a {@code SetValuedMap}, using a {@link LinkedHashMap} to provide data\n * storage and {@link LinkedHashSet}s as value collections. This is the standard\n * implementation of a SetValuedMap.\n * <p>\n * <strong>Note that LinkedHashSetValuedLinkedHashMap is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.5.0-M3",public ,org.apache.commons.collections4.multimap.AbstractSetValuedMap,java.io.Serializable
org.apache.commons.collections4.multimap.TransformedMultiValuedMap,Class,"* Decorates another {@code MultiValuedMap} to transform objects that are added.\n * <p>\n * This class affects the MultiValuedMap put methods. Thus objects must be\n * removed or searched for using their transformed form. For example, if the\n * transformation converts Strings to Integers, you must use the Integer form to\n * remove objects.\n * </p>\n * <p>\n * <strong>Note that TransformedMultiValuedMap is not synchronized and is not thread-safe.</strong>\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator,
org.apache.commons.collections4.multimap.AbstractSetValuedMap,Abstract Class,* Abstract implementation of the {@link SetValuedMap} interface to simplify the\n * creation of subclass implementations.\n * <p>\n * Subclasses specify a Map implementation to use as the internal storage and\n * the Set implementation to use as values.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1,"public , abstract ",org.apache.commons.collections4.multimap.AbstractMultiValuedMap,org.apache.commons.collections4.SetValuedMap
org.apache.commons.collections4.multimap.AbstractSetValuedMap$WrappedSet,Class,* Wrapped set to handle add and remove on the collection returned by\n     * {@code get(Object)}.,"private , final ",org.apache.commons.collections4.multimap.AbstractMultiValuedMap.WrappedCollection,java.util.Set
org.apache.commons.collections4.multimap.ArrayListValuedLinkedHashMap,Class,"* Implements a {@code ListValuedMap}, using a {@link LinkedHashMap} to provide data\n * storage and {@link ArrayList}s as value collections. This is the standard\n * implementation of a ListValuedMap.\n * <p>\n * <strong>Note that ArrayListValuedLinkedHashMap is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.5.0-M3",public ,org.apache.commons.collections4.multimap.AbstractListValuedMap,java.io.Serializable
org.apache.commons.collections4.multimap.AbstractListValuedMap,Abstract Class,* Abstract implementation of the {@link ListValuedMap} interface to simplify\n * the creation of subclass implementations.\n * <p>\n * Subclasses specify a Map implementation to use as the internal storage and\n * the List implementation to use as values.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1,"public , abstract ",org.apache.commons.collections4.multimap.AbstractMultiValuedMap,org.apache.commons.collections4.ListValuedMap
org.apache.commons.collections4.multimap.AbstractListValuedMap$ValuesListIterator,Class,Values ListIterator,"private , final ",,java.util.ListIterator
org.apache.commons.collections4.multimap.AbstractListValuedMap$WrappedList,Class,* Wrapped list to handle add and remove on the list returned by get(object),"private , final ",org.apache.commons.collections4.multimap.AbstractMultiValuedMap.WrappedCollection,java.util.List
org.apache.commons.collections4.multimap.ArrayListValuedHashMap,Class,"* Implements a {@code ListValuedMap}, using a {@link HashMap} to provide data\n * storage and {@link ArrayList}s as value collections. This is the standard\n * implementation of a ListValuedMap.\n * <p>\n * <strong>Note that ArrayListValuedHashMap is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,org.apache.commons.collections4.multimap.AbstractListValuedMap,java.io.Serializable
org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator,Abstract Class,* Decorates another {@code MultiValuedMap} to provide additional behavior.\n * <p>\n * Each method call made on this {@code MultiValuedMap} is forwarded to the\n * decorated {@code MultiValuedMap}. This class is used as a framework to build\n * to extensions such as synchronized and unmodifiable behavior.\n * </p>\n *\n * @param <K> the type of key elements\n * @param <V> the type of value elements\n * @since 4.1,"public , abstract ",,org.apache.commons.collections4.MultiValuedMap;java.io.Serializable
org.apache.commons.collections4.list.LazyList,Class,"* Decorates another {@code List} to create objects in the list on demand.\n * <p>\n * When the {@link #get(int)} method is called with an index greater than\n * the size of the list, the list will automatically grow in size and return\n * a new object from the specified factory or transformer. The gaps will be\n * filled by null. If a get method call encounters a null, it will be replaced\n * with a new object from the factory. Thus this list is unsuitable for\n * storing null objects.\n * </p>\n * <p>\n * For instance:\n * </p>\n *\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * List&lt;Date&gt; lazy = LazyList.decorate(new ArrayList&lt;Date&gt;(), factory);\n * Date date = lazy.get(3);\n * </pre>\n *\n * <p>\n * After the above code is executed, {@code date} will contain\n * a new {@code Date} instance.  Furthermore, that {@code Date}\n * instance is the fourth element in the list.  The first, second,\n * and third element are all set to {@code null}.\n * </p>\n * <p>\n * This class differs from {@link GrowthList} because here growth occurs on\n * get, where {@code GrowthList} grows on set and add. However, they\n * could easily be used together by decorating twice.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @see GrowthList\n * @since 3.0",public ,org.apache.commons.collections4.list.AbstractSerializableListDecorator,
org.apache.commons.collections4.list.AbstractSerializableListDecorator,Abstract Class,* Serializable subclass of AbstractListDecorator.\n *\n * @param <E> the type of the elements in the list.\n * @since 3.1,"public , abstract ",org.apache.commons.collections4.list.AbstractListDecorator,
org.apache.commons.collections4.list.TreeList,Class,"* A {@code List} implementation that is optimized for fast insertions and\n * removals at any index in the list.\n * <p>\n * This list implementation utilises a tree structure internally to ensure that\n * all insertions and removals are O(log n). This provides much faster performance\n * than both an {@code ArrayList} and a {@code LinkedList} where elements\n * are inserted and removed repeatedly from anywhere in the list.\n * </p>\n * <p>\n * The following relative performance statistics are indicative of this class:\n * </p>\n * <pre>\n *              get  add  insert  iterate  remove\n * TreeList       3    5       1       2       1\n * ArrayList      1    1      40       1      40\n * LinkedList  5800    1     350       2     325\n * </pre>\n * <p>\n * {@code ArrayList} is a good general purpose list implementation.\n * It is faster than {@code TreeList} for most operations except inserting\n * and removing in the middle of the list. {@code ArrayList} also uses less\n * memory as {@code TreeList} uses one object per entry.\n * </p>\n * <p>\n * {@code LinkedList} is rarely a good choice of implementation.\n * {@code TreeList} is almost always a good replacement for it, although it\n * does use slightly more memory.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.1",public ,java.util.AbstractList,
org.apache.commons.collections4.list.TreeList$AVLNode,Class,* Implements an AVLNode which keeps the offset updated.\n     * <p>\n     * This node contains the real work.\n     * TreeList is just there to implement {@link java.util.List}.\n     * The nodes don't know the index of the object they are holding.  They\n     * do know however their position relative to their parent node.\n     * This allows to calculate the index of a node while traversing the tree.\n     * <p>\n     * The Faedelung calculation stores a flag for both the left and right child\n     * to indicate if they are a child (false) or a link as in linked list (true).,static ,,
org.apache.commons.collections4.list.TreeList$TreeListIterator,Class,* A list iterator over the linked list.,static ,,java.util.ListIterator;org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.list.SetUniqueList,Class,"* Decorates a {@code List} to ensure that no duplicates are present much\n * like a {@code Set}.\n * <p>\n * The {@code List} interface makes certain assumptions/requirements. This\n * implementation breaks these in certain ways, but this is merely the result of\n * rejecting duplicates. Each violation is explained in the method, but it\n * should not affect you. Bear in mind that Sets require immutable objects to\n * function correctly.\n * </p>\n * <p>\n * The {@link org.apache.commons.collections4.set.ListOrderedSet ListOrderedSet}\n * class provides an alternative approach, by wrapping an existing Set and\n * retaining insertion order in the iterator.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0",public ,org.apache.commons.collections4.list.AbstractSerializableListDecorator,
org.apache.commons.collections4.list.SetUniqueList$SetListIterator,Class,* Inner class iterator.,static ,org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.list.SetUniqueList$SetListListIterator,Class,* Inner class iterator.,static ,org.apache.commons.collections4.iterators.AbstractListIteratorDecorator,
org.apache.commons.collections4.list.AbstractListDecorator,Abstract Class,* Decorates another {@link List} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated list.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,java.util.List
org.apache.commons.collections4.list.NodeCachingLinkedList,Class,"* A {@code List} implementation that stores a cache of internal Node objects\n * in an effort to reduce wasteful object creation.\n * <p>\n * A linked list creates one Node for each item of data added. This can result in\n * a lot of object creation and garbage collection. This implementation seeks to\n * avoid that by maintaining a store of cached nodes.\n * </p>\n * <p>\n * This implementation is suitable for long-lived lists where both add and remove\n * are used. Short-lived lists, or lists which only grow will have worse performance\n * using this class.\n * </p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong>\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0\n * @deprecated parent {@link AbstractLinkedList} is source incompatible with List methods added in Java 21",public ,org.apache.commons.collections4.list.AbstractLinkedList,java.io.Serializable
org.apache.commons.collections4.list.UnmodifiableList,Class,* Decorates another {@code List} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0,"public , final ",org.apache.commons.collections4.list.AbstractSerializableListDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.list.FixedSizeList,Class,"* Decorates another {@code List} to fix the size preventing add/remove.\n * <p>\n * The add, remove, clear and retain operations are unsupported.\n * The set method is allowed (as it doesn't change the list size).\n * </p>\n * <p>\n * NOTE:\n * Modifying the decorated list directly would results in influencing the outcome\n * of method calls on this object. For example, the bounds of this list would reflect\n * a newly added object to the underlying list.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this collection\n * @since 3.0",public ,org.apache.commons.collections4.list.AbstractSerializableListDecorator,org.apache.commons.collections4.BoundedCollection
org.apache.commons.collections4.list.FixedSizeList$FixedSizeListIterator,Class,* List iterator that only permits changes via set(),"private , final ",org.apache.commons.collections4.iterators.AbstractListIteratorDecorator,
org.apache.commons.collections4.list.AbstractLinkedListJava21,Abstract Class,"* An abstract implementation of a linked list which provides numerous points for\n * subclasses to override.\n * <p>\n * Overridable methods are provided to change the storage node and to change how\n * nodes are added to and removed. Hopefully, all you need for unusual subclasses\n * is here.\n * </p>\n * <p>\n * This is a copy of AbstractLinkedList, modified to be compatible with Java 21\n * (see COLLECTIONS-842 for details).\n * </p>\n *\n * @param <E> the type of elements in this list\n * @see AbstractLinkedList\n * @since 4.5.0-M3","public , abstract ",,java.util.List
org.apache.commons.collections4.list.AbstractLinkedListJava21$LinkedListIterator,Class,* A list iterator over the linked list.\n     *\n     * @param <E> the type of elements in this iterator.,"protected , static ",,java.util.ListIterator;org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.list.AbstractLinkedListJava21$LinkedSubList,Class,* The sublist implementation for AbstractLinkedListJava21.\n     *\n     * @param <E> the type of elements in this list.,"protected , static ",java.util.AbstractList,
org.apache.commons.collections4.list.AbstractLinkedListJava21$LinkedSubListIterator,Class,* A list iterator over the linked sub list.\n     *\n     * @param <E> the type of elements in this iterator.,"protected , static ",org.apache.commons.collections4.list.AbstractLinkedListJava21.LinkedListIterator,
org.apache.commons.collections4.list.AbstractLinkedListJava21$Node,Class,"* A node within the linked list.\n     * <p>\n     * From Commons Collections 3.1, all access to the {@code value} property\n     * is via the methods on this class.\n     * </p>\n     *\n     * @param <E> the type of the node value.","protected , static ",,
org.apache.commons.collections4.list.TransformedList,Class,"* Decorates another {@code List} to transform objects that are added.\n * <p>\n * The add and set methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0",public ,org.apache.commons.collections4.collection.TransformedCollection,java.util.List
org.apache.commons.collections4.list.TransformedList$TransformedListIterator,Class,* Inner class Iterator for the TransformedList,protected ,org.apache.commons.collections4.iterators.AbstractListIteratorDecorator,
org.apache.commons.collections4.list.GrowthList,Class,"* Decorates another {@code List} to make it seamlessly grow when\n * indices larger than the list size are used on add and set,\n * avoiding most IndexOutOfBoundsExceptions.\n * <p>\n * This class avoids errors by growing when a set or add method would\n * normally throw an IndexOutOfBoundsException.\n * Note that IndexOutOfBoundsException IS returned for invalid negative indices.\n * </p>\n * <p>\n * Trying to set or add to an index larger than the size will cause the list\n * to grow (using {@code null} elements). Clearly, care must be taken\n * not to use excessively large indices, as the internal list will grow to\n * match.\n * </p>\n * <p>\n * Trying to use any method other than add or set with an invalid index will\n * call the underlying list and probably result in an IndexOutOfBoundsException.\n * </p>\n * <p>\n * Take care when using this list with {@code null} values, as\n * {@code null} is the value added when growing the list.\n * </p>\n * <p>\n * All sub-lists will access the underlying list directly, and will throw\n * IndexOutOfBoundsExceptions.\n * </p>\n * <p>\n * This class differs from {@link LazyList} because here growth occurs on\n * set and add, where {@code LazyList} grows on get. However, they\n * can be used together by decorating twice.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @see LazyList\n * @since 3.2",public ,org.apache.commons.collections4.list.AbstractSerializableListDecorator,
org.apache.commons.collections4.list.AbstractLinkedList,Abstract Class,"* An abstract implementation of a linked list which provides numerous points for\n * subclasses to override.\n * <p>\n * Overridable methods are provided to change the storage node and to change how\n * nodes are added to and removed. Hopefully, all you need for unusual subclasses\n * is here.\n * </p>\n *\n * @param <E> the type of elements in this list\n * @since 3.0\n * @deprecated use {@link AbstractLinkedListJava21} instead","public , abstract ",,java.util.List
org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator,Class,* A list iterator over the linked list.\n     *\n     * @param <E> the type of elements in this iterator.,"protected , static ",,java.util.ListIterator;org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList,Class,* The sublist implementation for AbstractLinkedList.\n     *\n     * @param <E> the type of elements in this list.,"protected , static ",java.util.AbstractList,
org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator,Class,* A list iterator over the linked sub list.\n     *\n     * @param <E> the type of elements in this iterator.,"protected , static ",org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator,
org.apache.commons.collections4.list.AbstractLinkedList$Node,Class,"* A node within the linked list.\n     * <p>\n     * From Commons Collections 3.1, all access to the {@code value} property\n     * is via the methods on this class.\n     * </p>\n     *\n     * @param <E> The node value type.","protected , static ",,
org.apache.commons.collections4.list.CursorableLinkedList,Class,"* A {@code List} implementation with a {@code ListIterator} that\n * allows concurrent modifications to the underlying list.\n * <p>\n * This implementation supports all of the optional {@link List} operations.\n * It extends {@code AbstractLinkedList} and thus provides the\n * stack/queue/dequeue operations available in {@link java.util.LinkedList}.\n * </p>\n * <p>\n * The main feature of this class is the ability to modify the list and the\n * iterator at the same time. Both the {@link #listIterator()} and {@link #cursor()}\n * methods provides access to a {@code Cursor} instance which extends\n * {@code ListIterator}. The cursor allows changes to the list concurrent\n * with changes to the iterator. Note that the {@link #iterator()} method and\n * sublists do <strong>not</strong> provide this cursor behavior.\n * </p>\n * <p>\n * The {@code Cursor} class is provided partly for backwards compatibility\n * and partly because it allows the cursor to be directly closed. Closing the\n * cursor is optional because references are held via a {@code WeakReference}.\n * For most purposes, simply modify the iterator and list at will, and then let\n * the garbage collector to the rest.\n * </p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong>\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @see java.util.LinkedList\n * @since 1.0\n * @deprecated parent {@link AbstractLinkedList} is source incompatible with List methods added in Java 21",public ,org.apache.commons.collections4.list.AbstractLinkedList,java.io.Serializable
org.apache.commons.collections4.list.CursorableLinkedList$Cursor,Class,* An extended {@code ListIterator} that allows concurrent changes to\n     * the underlying list.\n     *\n     * @param <E> the type of elements in this cursor.,"public , static ",org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator,
org.apache.commons.collections4.list.CursorableLinkedList$SubCursor,Class,* A cursor for the sublist based on LinkedSubListIterator.\n     *\n     * @param <E> the type of elements in this cursor.\n     * @since 3.2,"protected , static ",org.apache.commons.collections4.list.CursorableLinkedList.Cursor,
org.apache.commons.collections4.list.PredicatedList,Class,"* Decorates another {@code List} to validate that all additions\n * match a specified predicate.\n * <p>\n * This list exists to provide validation for the decorated list.\n * It is normally created to decorate an empty list.\n * If an object cannot be added to the list, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the list.\n * </p>\n * <pre>\n * {@code\n * List<String> list =\n *   PredicatedList.predicatedList(new ArrayList<String>(), PredicateUtils.notNullPredicate());\n * }\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in the list.\n * @since 3.0",public ,org.apache.commons.collections4.collection.PredicatedCollection,java.util.List
org.apache.commons.collections4.list.PredicatedList$PredicatedListIterator,Class,* Inner class Iterator for the PredicatedList,protected ,org.apache.commons.collections4.iterators.AbstractListIteratorDecorator,
org.apache.commons.collections4.OrderedMap,Interface,* Defines a map that maintains order and allows both forward and backward\n * iteration through that order.\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0,public ,org.apache.commons.collections4.IterableMap,
org.apache.commons.collections4.queue.AbstractQueueDecorator,Abstract Class,"* Decorates another {@link Queue} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated queue.\n * </p>\n * <p>\n * This implementation does not forward the hashCode and equals methods through\n * to the backing object, but relies on Object's implementation. This is\n * necessary as some Queue implementations, for example LinkedList, have a custom\n * equals implementation for which symmetry cannot be preserved.\n * See class Javadoc of AbstractCollectionDecorator for more information.\n * </p>\n *\n * @param <E> the type of the elements in the queue\n * @since 4.0","public , abstract ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,java.util.Queue
org.apache.commons.collections4.queue.TransformedQueue,Class,"* Decorates another {@link Queue} to transform objects that are added.\n * <p>\n * The add/offer methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n *\n * @param <E> the type of elements held in this queue\n * @since 4.0",public ,org.apache.commons.collections4.collection.TransformedCollection,java.util.Queue
org.apache.commons.collections4.queue.UnmodifiableQueue,Class,* Decorates another {@link Queue} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements held in this queue\n * @since 4.0,"public , final ",org.apache.commons.collections4.queue.AbstractQueueDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.queue.CircularFifoQueue,Class,"* CircularFifoQueue is a first-in first-out queue with a fixed size that\n * replaces its oldest element if full.\n * <p>\n * The removal order of a {@link CircularFifoQueue} is based on the\n * insertion order; elements are removed in the same order in which they\n * were added.  The iteration order is the same as the removal order.\n * </p>\n * <p>\n * The {@link #add(Object)}, {@link #remove()}, {@link #peek()}, {@link #poll()},\n * {@link #offer(Object)} operations all perform in constant time.\n * All other operations perform in linear time or worse.\n * </p>\n * <p>\n * This queue prevents null objects from being added.\n * </p>\n *\n * @param <E> the type of elements in this collection\n * @since 4.0",public ,java.util.AbstractCollection,java.util.Queue;org.apache.commons.collections4.BoundedCollection;java.io.Serializable
org.apache.commons.collections4.queue.SynchronizedQueue,Class,"* Decorates another {@link Queue} to synchronize its behavior for a multithreaded environment.\n * <p>\n * Methods are synchronized, then forwarded to the decorated queue. Iterators must be separately synchronized around the\n * loop.\n * </p>\n *\n * @param <E> the type of the elements in the collection\n * @since 4.2",public ,org.apache.commons.collections4.collection.SynchronizedCollection,java.util.Queue
org.apache.commons.collections4.queue.PredicatedQueue,Class,"* Decorates another {@link Queue} to validate that additions\n * match a specified predicate.\n * <p>\n * This queue exists to provide validation for the decorated queue.\n * It is normally created to decorate an empty queue.\n * If an object cannot be added to the queue, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the queue.\n * </p>\n * <pre>Queue queue = PredicatedQueue.predicatedQueue(new UnboundedFifoQueue(), NotNullPredicate.INSTANCE);</pre>\n *\n * @param <E> the type of elements held in this queue\n * @since 4.0",public ,org.apache.commons.collections4.collection.PredicatedCollection,java.util.Queue
org.apache.commons.collections4.FluentIterable,Class,"* A FluentIterable provides a powerful yet simple API for manipulating\n * Iterable instances in a fluent manner.\n * <p>\n * A FluentIterable can be created either from an Iterable or from a set\n * of elements. The following types of methods are provided:\n * </p>\n * <ul>\n *   <li>fluent methods which return a new {@code FluentIterable} instance,\n *       providing a view of the original iterable (for example filter(Predicate));\n *   <li>conversion methods which copy the FluentIterable's contents into a\n *       new collection or array (for example toList());\n *   <li>utility methods which answer questions about the FluentIterable's\n *       contents (for example size(), anyMatch(Predicate)).\n *   <li>\n * </ul>\n * <p>\n * The following example outputs the first 3 even numbers in the range [1, 10]\n * into a list:\n * </p>\n * <pre>\n * List&lt;String&gt; result =\n *   FluentIterable\n *       .of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n *       .filter(new Predicate&lt;Integer&gt;() {\n *                   public boolean evaluate(Integer number) {\n *                        return number % 2 == 0;\n *                   }\n *              )\n *       .transform(TransformerUtils.stringValueTransformer())\n *       .limit(3)\n *       .toList();\n * </pre>\n * The resulting list will contain the following elements:\n * <pre>[2, 4, 6]</pre>\n *\n * @param <E>  the element type\n * @since 4.1",public ,,java.lang.Iterable
org.apache.commons.collections4.TransformerUtils,Class,"* {@code TransformerUtils} provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a {@link String} representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be safe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * </p>\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0",public ,,
org.apache.commons.collections4.PredicateUtils,Class,"* {@code PredicateUtils} provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * <p>\n * All the supplied predicates are Serializable.\n * </p>\n *\n * @since 3.0",public ,,
org.apache.commons.collections4.ResettableIterator,Interface,* Defines an iterator that can be reset back to an initial state.\n * <p>\n * This interface allows an iterator to be repeatedly reused.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0,public ,java.util.Iterator,
org.apache.commons.collections4.MultiValuedMap,Interface,"* Defines a map that holds a collection of values against each key.\n * <p>\n * A {@code MultiValuedMap} is a Map with slightly different semantics:\n * </p>\n * <ul>\n *   <li>Putting a value into the map will add the value to a {@link Collection} at that key.</li>\n *   <li>Getting a value will return a {@link Collection}, holding all the values put to that key.</li>\n * </ul>\n * <p>\n * For example:\n * </p>\n * <pre>{@code\n * MultiValuedMap<Integer, String> map = new ArrayListValuedHashMap<>();\n * map.put(1, ""A"");\n * map.put(1, ""B"");\n * map.put(1, ""C"");\n * Collection<String> coll = map.get(1);\n * }</pre>\n * <p>\n * {@code coll} will be a collection containing ""A"", ""B"", ""C"".\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,,
org.apache.commons.collections4.SetUtils,Class,* Provides utility methods and decorators for\n * {@link Set} and {@link SortedSet} instances.\n *\n * @since 2.1,public ,,
org.apache.commons.collections4.SetUtils$SetView,Abstract Class,"* An unmodifiable <strong>view</strong> of a set that may be backed by other sets.\n     * <p>\n     * If the decorated sets change, this view will change as well. The contents\n     * of this view can be transferred to another instance via the {@link #copyInto(Set)}\n     * and {@link #toSet()} methods.\n     * </p>\n     *\n     * @param <E> the element type\n     * @since 4.1","public , abstract , static ",java.util.AbstractSet,
org.apache.commons.collections4.SortedBidiMap,Interface,* Defines a map that allows bidirectional lookup between key and values\n * and retains both keys and values in sorted order.\n * <p>\n * Implementations should allow a value to be looked up from a key and\n * a key to be looked up from a value with equal performance.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0,public ,org.apache.commons.collections4.OrderedBidiMap;java.util.SortedMap,
org.apache.commons.collections4.ArrayStack,Class,"* An implementation of the {@link java.util.Stack} API that is based on an\n * {@code ArrayList} instead of a {@code Vector}, so it is not\n * synchronized to protect against multithreaded access.  The implementation\n * is therefore operates faster in environments where you do not need to\n * worry about multiple thread contention.\n * <p>\n * The removal order of an {@code ArrayStack} is based on insertion\n * order: The most recently added element is removed first.  The iteration\n * order is <em>not</em> the same as the removal order.  The iterator returns\n * elements from the bottom up.\n * </p>\n * <p>\n * Unlike {@code Stack}, {@code ArrayStack} accepts null entries.\n * <p>\n * <strong>Note:</strong> From version 4.0 onwards, this class does not implement the\n * removed {@code Buffer} interface anymore.\n * </p>\n *\n * @param <E> the type of elements in this list\n * @see java.util.Stack\n * @since 1.0\n * @deprecated use {@link java.util.ArrayDeque} instead (available from Java 1.6)",public ,java.util.ArrayList,
org.apache.commons.collections4.Put,Interface,"* The ""write"" subset of the {@link Map} interface.\n * <p>\n * NOTE: in the original {@link Map} interface, {@link Map#put(Object, Object)} is known\n * to have the same return type as {@link Map#get(Object)}, namely {@code V}. {@link Put}\n * makes no assumptions in this regard (there is no association with, nor even knowledge\n * of, a ""reading"" interface) and thus defines {@link #put(Object, Object)} as returning\n * {@link Object}.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0\n * @see Get",public ,,
org.apache.commons.collections4.bloomfilter.SparseBloomFilter,Class,* A bloom filter using a TreeSet of integers to track enabled bits. This is a standard\n * implementation and should work well for most low cardinality Bloom filters.\n *\n * @since 4.5.0-M1,"public , final ",,org.apache.commons.collections4.bloomfilter.BloomFilter
org.apache.commons.collections4.bloomfilter.BloomFilterExtractor,Interface,"* Produces Bloom filters from a collection (for example, {@link LayeredBloomFilter}).\n *\n * @since 4.5.0-M2",public ,,
org.apache.commons.collections4.bloomfilter.CountingBloomFilter,Interface,"* The interface that describes a Bloom filter that associates a count with each\n * bit index rather than a bit.  This allows reversal of merge operations with\n * remove operations.\n *\n * <p>A counting Bloom filter is expected to function identically to a standard\n * Bloom filter that is the merge of all the Bloom filters that have been added\n * to and not later subtracted from the counting Bloom filter. The functional\n * state of a CountingBloomFilter at the start and end of a series of merge and\n * subsequent remove operations of the same Bloom filters, irrespective of\n * remove order, is expected to be the same.</p>\n *\n * <p>Removal of a filter that has not previously been merged results in an\n * invalid state where the cells no longer represent a sum of merged Bloom\n * filters. It is impossible to validate merge and remove exactly without\n * explicitly storing all filters. Consequently such an operation may go\n * undetected. The CountingBloomFilter maintains a state flag that is used as a\n * warning that an operation was performed that resulted in invalid cells and\n * thus an invalid state. For example this may occur if a cell for an index was\n * set to negative following a remove operation.</p>\n *\n * <p>Implementations should document the expected state of the filter after an\n * operation that generates invalid cells, and any potential recovery options.\n * An implementation may support a reversal of the operation to restore the\n * state to that prior to the operation. In the event that invalid cells are\n * adjusted to a valid range then it should be documented if there has been\n * irreversible information loss.</p>\n *\n * <p>Implementations may choose to throw an exception during an operation that\n * generates invalid cells. Implementations should document the expected state\n * of the filter after such an operation. For example are the cells not updated,\n * partially updated or updated entirely before the exception is raised.</p>\n *\n * @see CellExtractor\n * @since 4.5.0-M1",public ,org.apache.commons.collections4.bloomfilter.BloomFilter;org.apache.commons.collections4.bloomfilter.CellExtractor,
org.apache.commons.collections4.bloomfilter.BitMaps,Class,* Contains functions to convert {@code int} indices into Bloom filter bit positions and visa versa.\n *\n * <p>The functions view an array of longs as a collection of bit maps each containing 64 bits. The bits are arranged\n * in memory as a little-endian long value. This matches the requirements of the BitMapExtractor interface.</p>\n *\n * @since 4.5.0-M2,public ,,
org.apache.commons.collections4.bloomfilter.CountingLongPredicate,Class,"* A long predicate that applies the test func to each member of the {@code ary} in sequence for each call to {@code test()}.\n * if the {@code ary} is exhausted, the subsequent calls to {@code test} are executed with a zero value.\n * If the calls to {@code test} do not exhaust the {@code ary} the {@code processRemaining} method can be called to\n * execute the @{code test} with a zero value for each remaining {@code idx} value.",default,,java.util.function.LongPredicate
org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher,Class,"* A Hasher that implements combinatorial hashing as described by\n * <a href=""https://www.eecs.harvard.edu/~michaelm/postscripts/tr-02-05.pdf"">Krisch and Mitzenmacher</a> using the enhanced double hashing technique\n * described in the wikipedia article  <a href=""https://en.wikipedia.org/wiki/Double_hashing#Enhanced_double_hashing"">Double Hashing</a>.\n * <p>\n * Common use for this hasher is to generate bit indices from a byte array output of a hashing\n * or MessageDigest algorithm.</p>\n *\n * <h2>Thoughts on the hasher input</h2>\n *\n * <p>Note that it is worse to create smaller numbers for the {@code initial} and {@code increment}. If the {@code initial} is smaller than\n * the number of bits in a filter then hashing will start at the same point when the size increases; likewise the {@code increment} will be\n * the same if it remains smaller than the number of bits in the filter and so the first few indices will be the same if the number of bits\n * changes (but is still larger than the {@code increment}). In a worse case scenario with small {@code initial} and {@code increment} for\n * all items, hashing may not create indices that fill the full region within a much larger filter. Imagine hashers created with {@code initial}\n * and {@code increment} values less than 255 with a filter size of 30000 and number of hash functions as 5. Ignoring the\n * tetrahedral addition (a maximum of 20 for k=5) the max index is 255 * 4 + 255 = 1275, this covers 4.25% of the filter. This also\n * ignores the negative wrapping but the behavior is the same, some bits cannot be reached.\n * </p><p>\n * So this needs to be avoided as the filter probability assumptions will be void. If the {@code initial} and {@code increment} are larger\n * than the number of bits then the modulus will create a 'random' position and increment within the size.\n * </p>\n *\n * @since 4.5.0-M1",public ,,org.apache.commons.collections4.bloomfilter.Hasher
org.apache.commons.collections4.bloomfilter.SetOperations,Class,* Implementations of set operations on BitMapExtractors.\n *\n * @since 4.5.0-M1,"public , final ",,
org.apache.commons.collections4.bloomfilter.IndexExtractor,Interface,* An object that produces indices of a Bloom filter.\n * <p><em>\n * The default implementation of {@code asIndexArray} is slow. Implementers should reimplement the\n * method where possible.</em></p>\n *\n * @since 4.5.0-M2,public ,,
org.apache.commons.collections4.bloomfilter.CellExtractor,Interface,* Some Bloom filter implementations use a count rather than a bit flag. The term {@code Cell} is used to\n * refer to these counts and their associated index.  This class is the equivalent of the index extractor except\n * that it produces cells.\n *\n * <p>Note that a CellExtractor must not return duplicate indices and must be ordered.</p>\n *\n * <p>Implementations must guarantee that:</p>\n *\n * <ul>\n * <li>The IndexExtractor implementation returns unique ordered indices.</li>\n * <li>The cells are produced in IndexExtractor order.</li>\n * <li>For every value produced by the IndexExtractor there will be only one matching\n * cell produced by the CellExtractor.</li>\n * <li>The CellExtractor will not generate cells with indices that are not output by the IndexExtractor.</li>\n * <li>The IndexExtractor will not generate indices that have a zero count for the cell.</li>\n * </ul>\n *\n * @since 4.5.0-M2,public ,org.apache.commons.collections4.bloomfilter.IndexExtractor,
org.apache.commons.collections4.bloomfilter.CellExtractor$CellPredicate,Interface,"* Represents an operation that accepts an {@code <index, count>} pair.\n     * Returns {@code true} if processing should continue, {@code false} otherwise.\n     *\n     * <p>Note: This is a functional interface as a specialization of\n     * {@link java.util.function.BiPredicate} for {@code int}.</p>",,,
org.apache.commons.collections4.bloomfilter.CellExtractor.CounterCell,Class,* Class to track cell values in the TreeMap.,final ,,java.lang.Comparable
org.apache.commons.collections4.bloomfilter.LongBiPredicate,Interface,"* Represents a function that accepts a two long-valued argument and produces a binary result.\n * This is the long-consuming primitive specialization for {@code BiPredicate}.\n * <p>\n * This is a functional interface whose functional method is {@code test(long,long)}.\n * </p>\n *\n * @since 4.5.0-M1",public ,,
org.apache.commons.collections4.bloomfilter.IndexFilter,Class,* A convenience class for Hasher implementations to filter out duplicate indices.\n *\n * <p><em>If the index is negative the behavior is not defined.</em></p>\n *\n * <p>This is conceptually a unique filter implemented as an {@link IntPredicate}.</p>\n *\n * @since 4.5.0-M1,"public , final ",,
org.apache.commons.collections4.bloomfilter.IndexFilter$ArrayTracker,Class,* An IndexTracker implementation that uses an array of integers to track whether or not a\n     * number has been seen. Suitable for Shapes that have few hash functions.\n     * @since 4.5.0,static ,,java.util.function.IntPredicate
org.apache.commons.collections4.bloomfilter.IndexFilter$BitMapTracker,Class,* An IndexTracker implementation that uses an array of bit maps to track whether or not a\n     * number has been seen.,static ,,java.util.function.IntPredicate
org.apache.commons.collections4.bloomfilter.Hasher,Interface,* A Hasher creates {@link IndexExtractor}s based on the hash implementation and the provided {@link Shape}.\n *\n * @since 4.5.0-M1,public ,,
org.apache.commons.collections4.bloomfilter.CountingPredicate,Class,"* A predicate that applies the test {@code func} to each member of the {@code ary} in\n * sequence for each call to {@code test()}. if the {@code ary} is exhausted,\n * the subsequent calls to {@code test} are executed with a {@code null} value.\n * If the calls to {@code test} do not exhaust the {@code ary} the {@code\n * processRemaining} method can be called to execute the @{code test} with a\n * {@code null} value for each remaining {@code idx} value.\n *\n * @param <T> the type of object being compared.",default,,java.util.function.Predicate
org.apache.commons.collections4.bloomfilter.WrappedBloomFilter,Abstract Class,* An abstract class to assist in implementing Bloom filter decorators.\n *\n * @param <T> The WrappedBloomFilter type.\n * @param <W> The <em>wrapped</em> BloomFilter type.\n * @since 4.5.0-M1,"public , abstract ",,org.apache.commons.collections4.bloomfilter.BloomFilter
org.apache.commons.collections4.bloomfilter.BitMapExtractor,Interface,* Produces bit map longs for a Bloom filter.\n * <p>\n * Each bit map is a little-endian long value representing a block of bits of in a filter.\n * </p>\n * <p>\n * The returned array will have length {@code ceil(m / 64)} where {@code m} is the number of bits in the filter and {@code ceil} is the ceiling function. Bits\n * 0-63 are in the first long. A value of 1 at a bit position indicates the bit index is enabled.\n * </p>\n * <p>\n * <em>The default implementations of the {@code makePredicate()} and {@code asBitMapArray} methods are slow and should be reimplemented in the implementing\n * classes where possible.</em>\n * </p>\n *\n * @since 4.5.0-M2,public ,,
org.apache.commons.collections4.bloomfilter.BloomFilter,Interface,* The interface that describes a Bloom filter.\n * <p>\n * <em>See implementation notes for {@link BitMapExtractor} and {@link IndexExtractor}.</em>\n * </p>\n *\n * @param <T> The BloomFilter type.\n * @see BitMapExtractor\n * @see IndexExtractor\n * @since 4.5.0-M1,public ,org.apache.commons.collections4.bloomfilter.IndexExtractor;org.apache.commons.collections4.bloomfilter.BitMapExtractor,
org.apache.commons.collections4.bloomfilter.LayeredBloomFilter,Class,"* Layered Bloom filters are described in Zhiwang, Cen; Jungang, Xu; Jian, Sun (2010), ""A multi-layer Bloom filter for duplicated URL detection"", Proc. 3rd\n * International Conference on Advanced Computer Theory and Engineering (ICACTE 2010), vol. 1, pp. V1-586-V1-591, doi:10.1109/ICACTE.2010.5578947, ISBN\n * 978-1-4244-6539-2, S2CID 3108985\n * <p>\n * In short, Layered Bloom filter contains several bloom filters arranged in layers.\n * </p>\n * <ul>\n * <li>When membership in the filter is checked each layer in turn is checked and if a match is found {@code true} is returned.</li>\n * <li>When merging each bloom filter is merged into the newest filter in the list of layers.</li>\n * <li>When questions of cardinality are asked the cardinality of the union of the enclosed Bloom filters is used.</li>\n * </ul>\n * <p>\n * The net result is that the layered Bloom filter can be populated with more items than the Shape would indicate and yet still return a false positive rate in\n * line with the Shape and not the over population.\n * </p>\n * <p>\n * This implementation uses a LayerManager to handle the manipulation of the layers.\n * </p>\n * <ul>\n * <li>Level 0 is the oldest layer and the highest level is the newest.</li>\n * <li>There is always at least one enclosed filter.</li>\n * <li>The newest filter is the {@code target} into which merges are performed.\n * <li>Whenever the target is retrieved, or a {@code merge} operation is performed the code checks if any older layers should be removed, and if so removes\n * them. It also checks it a new layer should be added, and if so adds it and sets the {@code target} before the operation.</li>\n * </ul>\n *\n * @param <T> The type of Bloom Filter that is used for the layers.\n * @since 4.5.0-M2",public ,,org.apache.commons.collections4.bloomfilter.BloomFilter;org.apache.commons.collections4.bloomfilter.BloomFilterExtractor
org.apache.commons.collections4.bloomfilter.LayeredBloomFilter$Finder,Class,* A class used to locate matching filters across all the layers.,private ,,java.util.function.Predicate
org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter,Class,"* A counting Bloom filter using an int array to track cells for each enabled bit.\n *\n * <p>\n * Any operation that results in negative counts or integer overflow of counts will mark this filter as invalid. This transition is not reversible. The\n * operation is completed in full, no exception is raised and the state is set to invalid. This allows the cells for the filter immediately prior to the\n * operation that created the invalid state to be recovered. See the documentation in {@link #isValid()} for details.\n * </p>\n *\n * <p>\n * All the operations in the filter assume the cells are currently valid, for example {@code cardinality} or {@code contains} operations. Behavior of an invalid\n * filter is undefined. It will no longer function identically to a standard Bloom filter that is the merge of all the Bloom filters that have been added to and\n * not later subtracted from the counting Bloom filter.\n * </p>\n *\n * <p>\n * The maximum supported number of items that can be stored in the filter is limited by the maximum array size combined with the {@link Shape}. For example an\n * implementation using a {@link Shape} with a false-positive probability of 1e-6 and {@link Integer#MAX_VALUE} bits can reversibly store approximately 75\n * million items using 20 hash functions per item with a memory consumption of approximately 8 GB.\n * </p>\n *\n * @see Shape\n * @see CellExtractor\n * @since 4.5.0-M1","public , final ",,org.apache.commons.collections4.bloomfilter.CountingBloomFilter
org.apache.commons.collections4.bloomfilter.LayerManager,Class,* Implementation of the methods to manage the layers in a layered Bloom filter.\n * <p>\n * The manager comprises a list of Bloom filters that are managed based on\n * various rules. The last filter in the list is known as the {@code target} and\n * is the filter into which merges are performed. The Layered manager utilizes\n * three methods to manage the list.\n * </p>\n * <ul>\n * <li>ExtendCheck - A Predicate that if true causes a new Bloom filter to be\n * created as the new target.</li>\n * <li>FilterSupplier - A Supplier that produces empty Bloom filters to be used\n * as a new target.</li>\n * <li>Cleanup - A Consumer of a {@code LinkedList} of BloomFilter that removes any\n * expired or out dated filters from the list.</li>\n * </ul>\n * <p>\n * When extendCheck returns {@code true} the following steps are taken:\n * </p>\n * <ol>\n * <li>{@code Cleanup} is called</li>\n * <li>{@code FilterSuplier} is executed and the new filter added to the list as\n * the {@code target} filter.</li>\n * </ol>\n *\n *\n * @param <T> the {@link BloomFilter} type.\n * @since 4.5.0-M1,public ,,org.apache.commons.collections4.bloomfilter.BloomFilterExtractor
org.apache.commons.collections4.bloomfilter.LayerManager$Builder,Class,* Builds new instances of {@link LayerManager}.\n     *\n     * @param <T> the {@link BloomFilter} type.,"public , static ",,java.util.function.Supplier
org.apache.commons.collections4.bloomfilter.LayerManager$Cleanup,Class,* Static methods to create a Consumer of a List of BloomFilter perform\n     * tests on whether to reduce the collection of Bloom filters.,"public , static , final ",,
org.apache.commons.collections4.bloomfilter.LayerManager$ExtendCheck,Class,* A collection of common ExtendCheck implementations to test whether to extend\n     * the depth of a LayerManager.,"public , static , final ",,
org.apache.commons.collections4.bloomfilter.SimpleBloomFilter,Class,* A bloom filter using an array of bit maps to track enabled bits. This is a standard implementation and should work well for most Bloom filters.\n *\n * @since 4.5.0-M1,"public , final ",,org.apache.commons.collections4.bloomfilter.BloomFilter
org.apache.commons.collections4.bloomfilter.IndexUtils,Class,* Provides functions to assist in IndexExtractor creation and manipulation.\n *\n * @see IndexExtractor,final ,,
org.apache.commons.collections4.bloomfilter.Shape,Class,"* The definition of a Bloom filter shape.\n *\n * <p>This class contains the values for the filter configuration and is used to\n * convert a Hasher into a BloomFilter as well as verify that two Bloom filters are\n * compatible. (i.e. can be compared or merged)</p>\n *\n * <h2>Interrelatedness of values</h2>\n *\n * <dl>\n * <dt>Number of Items ({@code n})</dt>\n * <dd>{@code n = ceil(m / (-k / ln(1 - exp(ln(p) / k))))}</dd>\n * <dt>Probability of False Positives ({@code p})</dt>\n * <dd>{@code p = pow(1 - exp(-k / (m / n)), k)}</dd>\n * <dt>Number of Bits ({@code m})</dt>\n * <dd>{@code m = ceil((n * ln(p)) / ln(1 / pow(2, ln(2))))}</dd>\n * <dt>Number of Functions ({@code k})</dt>\n * <dd>{@code k = round((m / n) * ln(2))}</dd>\n * </dl>\n *\n * <h2>Estimations from cardinality based on shape</h2>\n *\n * <p>Several estimates can be calculated from the Shape and the cardinality of a Bloom filter.</p>\n *\n * <p>In the calculation below the following values are used:</p>\n * <ul>\n * <li>double c = the cardinality of the Bloom filter.</li>\n * <li>double m = numberOfBits as specified in the shape.</li>\n * <li>double k = numberOfHashFunctions as specified in the shape.</li>\n * </ul>\n *\n * <h3>Estimate N - n()</h3>\n *\n * <p>The calculation for the estimate of N is: {@code -(m/k) * ln(1 - (c/m))}.  This is the calculation\n * performed by the {@code Shape.estimateN(cardinality)} method below.  This estimate is roughly equivalent to the\n * number of hashers that have been merged into a filter to create the cardinality specified.</p>\n *\n * <p><em>Note:</em></p>\n * <ul>\n * <li>if cardinality == numberOfBits, then result is infinity.</li>\n * <li>if cardinality &gt; numberOfBits, then result is NaN.</li>\n * </ul>\n *\n * <h3>Estimate N of Union - n(A &cup; B)</h3>\n *\n * <p>To estimate the number of items in the union of two Bloom filters with the same shape, merge them together and\n * calculate the estimated N from the result.</p>\n *\n * <h3>Estimate N of the Intersection - n(A &cap; B)</h3>\n *\n * <p>To estimate the number of items in the intersection of two Bloom filters A and B with the same shape the calculation is:\n * n(A) + n(b) - n(A &cup; B).</p>\n *\n * <p>Care must be taken when any of the n(x) returns infinity.  In general the following assumptions are true:\n *\n * <ul>\n * <li>If n(A) = &infin; and n(B) &lt; &infin; then n(A &cap; B) = n(B)</li>\n * <li>If n(A) &lt; &infin; and n(B) = &infin; then n(A &cap; B) = n(A)</li>\n * <li>If n(A) = &infin; and n(B) = &infin; then n(A &cap; B) = &infin;</li>\n * <li>If n(A) &lt; &infin; and n(B) &lt; &infin; and n(A &cup; B) = &infin; then n(A &cap; B) is undefined.</li>\n * </ul>\n *\n * @see <a href=""https://hur.st/bloomfilter"">Bloom Filter calculator</a>\n * @see <a href=""https://en.wikipedia.org/wiki/Bloom_filter"">Bloom filter\n * [Wikipedia]</a>\n * @since 4.5.0-M1","public , final ",,
org.apache.commons.collections4.OrderedMapIterator,Interface,* Defines an iterator that operates over an ordered {@code Map}.\n * <p>\n * This iterator allows both forward and reverse iteration through the map.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 3.0,public ,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.OrderedIterator,
org.apache.commons.collections4.set.TransformedSet,Class,"* Decorates another {@code Set} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,org.apache.commons.collections4.collection.TransformedCollection,java.util.Set
org.apache.commons.collections4.set.CompositeSet,Class,"* Decorates a set of other sets to provide a single unified view.\n * <p>\n * Changes made to this set will actually be made on the decorated set.\n * Add operations require the use of a pluggable strategy.\n * If no strategy is provided then add is unsupported.\n * </p>\n * <p>\n * From version 4.0, this class does not extend\n * {@link org.apache.commons.collections4.collection.CompositeCollection CompositeCollection}\n * anymore due to its input restrictions (only accepts Sets).\n * See <a href=""https://issues.apache.org/jira/browse/COLLECTIONS-424"">COLLECTIONS-424</a>\n * for more details.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,,java.util.Set;java.io.Serializable
org.apache.commons.collections4.set.CompositeSet$SetMutator,Interface,* Defines callbacks for mutation operations.\n     *\n     * @param <E> the type of the elements in this instance.,public ,java.io.Serializable,
org.apache.commons.collections4.set.TransformedNavigableSet,Class,"* Decorates another {@code NavigableSet} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 4.1",public ,org.apache.commons.collections4.set.TransformedSortedSet,java.util.NavigableSet
org.apache.commons.collections4.set.PredicatedNavigableSet,Class,"* Decorates another {@code NavigableSet} to validate that all additions\n * match a specified predicate.\n * <p>\n * This set exists to provide validation for the decorated set.\n * It is normally created to decorate an empty set.\n * If an object cannot be added to the set, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the set.\n * </p>\n * <pre>\n * NavigableSet set =\n *   PredicatedSortedSet.predicatedNavigableSet(new TreeSet(),\n *                                              NotNullPredicate.notNullPredicate());\n * </pre>\n *\n * @param <E> the type of the elements in this set\n * @since 4.1",public ,org.apache.commons.collections4.set.PredicatedSortedSet,java.util.NavigableSet
org.apache.commons.collections4.set.AbstractSetDecorator,Abstract Class,* Decorates another {@code Set} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated set.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,java.util.Set
org.apache.commons.collections4.set.ListOrderedSet,Class,"* Decorates another {@code Set} to ensure that the order of addition is\n * retained and used by the iterator.\n * <p>\n * If an object is added to the set for a second time, it will remain in the\n * original position in the iteration. The order can be observed from the set\n * via the iterator or toArray methods.\n * </p>\n * <p>\n * The ListOrderedSet also has various useful direct methods. These include many\n * from {@code List}, such as {@code get(int)},\n * {@code remove(int)} and {@code indexOf(int)}. An unmodifiable\n * {@code List} view of the set can be obtained via {@code asList()}.\n * </p>\n * <p>\n * This class cannot implement the {@code List} interface directly as\n * various interface methods (notably equals/hashCode) are incompatible with a\n * set.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,org.apache.commons.collections4.set.AbstractSerializableSetDecorator,
org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator,Class,* Internal iterator handle remove.,static ,org.apache.commons.collections4.iterators.AbstractIteratorDecorator,org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.set.UnmodifiableSet,Class,* Decorates another {@code Set} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0,"public , final ",org.apache.commons.collections4.set.AbstractSerializableSetDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.set.AbstractSerializableSetDecorator,Abstract Class,* Serializable subclass of AbstractSetDecorator.\n *\n * @param <E> the type of the elements in this set\n * @since 3.1,"public , abstract ",org.apache.commons.collections4.set.AbstractSetDecorator,
org.apache.commons.collections4.set.MapBackedSet,Class,"* Decorates a {@code Map} to obtain {@code Set} behavior.\n * <p>\n * This class is used to create a {@code Set} with the same properties as\n * the key set of any map. Thus, a ReferenceSet can be created by wrapping a\n * {@code ReferenceMap} in an instance of this class.\n * </p>\n * <p>\n * Most map implementation can be used to create a set by passing in dummy values.\n * Exceptions include {@code BidiMap} implementations, as they require unique values.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @param <V> the dummy value type in this map\n * @since 3.1","public , final ",,java.util.Set;java.io.Serializable
org.apache.commons.collections4.set.UnmodifiableSortedSet,Class,* Decorates another {@code SortedSet} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0,"public , final ",org.apache.commons.collections4.set.AbstractSortedSetDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.set.PredicatedSortedSet,Class,"* Decorates another {@code SortedSet} to validate that all additions\n * match a specified predicate.\n * <p>\n * This set exists to provide validation for the decorated set.\n * It is normally created to decorate an empty set.\n * If an object cannot be added to the set, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the set.\n * </p>\n * <pre>\n * SortedSet set =\n *   PredicatedSortedSet.predicatedSortedSet(new TreeSet(),\n *                                           NotNullPredicate.notNullPredicate());\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,org.apache.commons.collections4.set.PredicatedSet,java.util.SortedSet
org.apache.commons.collections4.set.AbstractSortedSetDecorator,Abstract Class,* Decorates another {@code SortedSet} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated set.\n * </p>\n *\n * @param <E> the type of the elements in the sorted set\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.set.AbstractSetDecorator,java.util.SortedSet
org.apache.commons.collections4.set.PredicatedSet,Class,"* Decorates another {@code Set} to validate that all additions\n * match a specified predicate.\n * <p>\n * This set exists to provide validation for the decorated set.\n * It is normally created to decorate an empty set.\n * If an object cannot be added to the set, an IllegalArgumentException is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the set.\n * </p>\n * <pre>Set set = PredicatedSet.decorate(new HashSet(), NotNullPredicate.INSTANCE);</pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,org.apache.commons.collections4.collection.PredicatedCollection,java.util.Set
org.apache.commons.collections4.set.AbstractNavigableSetDecorator,Abstract Class,* Decorates another {@code NavigableSet} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated set.\n * </p>\n *\n * @param <E> the type of the elements in the navigable set\n * @since 4.1,"public , abstract ",org.apache.commons.collections4.set.AbstractSortedSetDecorator,java.util.NavigableSet
org.apache.commons.collections4.set.UnmodifiableNavigableSet,Class,* Decorates another {@code NavigableSet} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 4.1,"public , final ",org.apache.commons.collections4.set.AbstractNavigableSetDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.set.TransformedSortedSet,Class,"* Decorates another {@code SortedSet} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of the elements in this set\n * @since 3.0",public ,org.apache.commons.collections4.set.TransformedSet,java.util.SortedSet
org.apache.commons.collections4.IterableMap,Interface,"* Defines a map that can be iterated directly without needing to create an entry set.\n * <p>\n * A map iterator is an efficient way of iterating over maps.\n * There is no need to access the entry set or use Map Entry objects.\n * </p>\n * <pre>\n * IterableMap&lt;String,Integer&gt; map = new HashedMap&lt;String,Integer&gt;();\n * MapIterator&lt;String,Integer&gt; it = map.mapIterator();\n * while (it.hasNext()) {\n *   String key = it.next();\n *   Integer value = it.getValue();\n *   it.setValue(value + 1);\n * }\n * </pre>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,java.util.Map;org.apache.commons.collections4.Put;org.apache.commons.collections4.IterableGet,
org.apache.commons.collections4.EnumerationUtils,Class,* Provides utility methods for {@link Enumeration} instances.\n *\n * @since 3.0,public ,,
org.apache.commons.collections4.sequence.DeleteCommand,Class,"* Command representing the deletion of one object of the first sequence.\n * <p>\n * When one object of the first sequence has no corresponding object in the\n * second sequence at the right place, the {@link EditScript edit script}\n * transforming the first sequence into the second sequence uses an instance of\n * this class to represent the deletion of this object. The objects embedded in\n * these type of commands always come from the first sequence.\n * </p>\n *\n * @param <T> the type of object to apply this command.\n * @see SequencesComparator\n * @see EditScript\n * @since 4.0",public ,org.apache.commons.collections4.sequence.EditCommand,
org.apache.commons.collections4.sequence.ReplacementsHandler,Interface,* This interface is devoted to handle synchronized replacement sequences.\n *\n * @param <T> the type of elements in the lists.\n * @see ReplacementsFinder\n * @since 4.0,public ,,
org.apache.commons.collections4.sequence.InsertCommand,Class,"* Command representing the insertion of one object of the second sequence.\n * <p>\n * When one object of the second sequence has no corresponding object in the\n * first sequence at the right place, the {@link EditScript edit script}\n * transforming the first sequence into the second sequence uses an instance of\n * this class to represent the insertion of this object. The objects embedded in\n * these type of commands always come from the second sequence.\n * </p>\n *\n * @param <T> the type of object to apply this command.\n * @see SequencesComparator\n * @see EditScript\n * @since 4.0",public ,org.apache.commons.collections4.sequence.EditCommand,
org.apache.commons.collections4.sequence.SequencesComparator,Class,"* This class allows to compare two objects sequences.\n * <p>\n * The two sequences can hold any object type, as only the {@code equals}\n * method is used to compare the elements of the sequences. It is guaranteed\n * that the comparisons will always be done as {@code o1.equals(o2)} where\n * {@code o1} belongs to the first sequence and {@code o2} belongs to\n * the second sequence. This can be important if subclassing is used for some\n * elements in the first sequence and the {@code equals} method is\n * specialized.\n * </p>\n * <p>\n * Comparison can be seen from two points of view: either as giving the smallest\n * modification allowing to transform the first sequence into the second one, or\n * as giving the longest sequence which is a subsequence of both initial\n * sequences. The {@code equals} method is used to compare objects, so any\n * object can be put into sequences. Modifications include deleting, inserting\n * or keeping one object, starting from the beginning of the first sequence.\n * </p>\n * <p>\n * This class implements the comparison algorithm, which is the very efficient\n * algorithm from Eugene W. Myers\n * <a href=""https://www.cis.upenn.edu/~bcpierce/courses/dd/papers/diff.ps"">\n * An O(ND) Difference Algorithm and Its Variations</a>. This algorithm produces\n * the shortest possible\n * {@link EditScript edit script}\n * containing all the\n * {@link EditCommand commands}\n * needed to transform the first sequence into the second one.\n * </p>\n *\n * @param <T> the type of elements in the lists.\n * @see EditScript\n * @see EditCommand\n * @see CommandVisitor\n * @since 4.0",public ,,
org.apache.commons.collections4.sequence.SequencesComparator$Snake,Class,* This class is a simple placeholder to hold the end part of a path\n     * under construction in a {@link SequencesComparator SequencesComparator}.,"private , static , final ",,
org.apache.commons.collections4.sequence.ReplacementsFinder,Class,"* This class handles sequences of replacements resulting from a comparison.\n * <p>\n * The comparison of two objects sequences leads to the identification of common\n * parts and parts which only belong to the first or to the second sequence. The\n * common parts appear in the edit script in the form of <em>keep</em> commands,\n * they can be considered as synchronization objects between the two sequences.\n * These synchronization objects split the two sequences in synchronized\n * sub-sequences. The first sequence can be transformed into the second one by\n * replacing each synchronized sub-sequence of the first sequence by the\n * corresponding sub-sequence of the second sequence. This is a synthetic way to\n * see an {@link EditScript edit script}, replacing individual\n * {@link DeleteCommand delete}, {@link KeepCommand keep} and\n * {@link InsertCommand insert} commands by fewer replacements acting on\n * complete sub-sequences.\n * </p>\n * <p>\n * This class is devoted to perform this interpretation. It visits an\n * {@link EditScript edit script} (because it implements the\n * {@link CommandVisitor CommandVisitor} interface) and calls a user-supplied\n * handler implementing the {@link ReplacementsHandler ReplacementsHandler}\n * interface to process the sub-sequences.\n * </p>\n *\n * @param <T> the type of the input to the visit operations.\n * @see ReplacementsHandler\n * @see EditScript\n * @see SequencesComparator\n * @since 4.0",public ,,org.apache.commons.collections4.sequence.CommandVisitor
org.apache.commons.collections4.sequence.KeepCommand,Class,"* Command representing the keeping of one object present in both sequences.\n * <p>\n * When one object of the first sequence {@code equals} another objects in\n * the second sequence at the right place, the {@link EditScript edit script}\n * transforming the first sequence into the second sequence uses an instance of\n * this class to represent the keeping of this object. The objects embedded in\n * these type of commands always come from the first sequence.\n * </p>\n *\n * @param <T> the type of object to apply this command.\n * @see SequencesComparator\n * @see EditScript\n * @since 4.0",public ,org.apache.commons.collections4.sequence.EditCommand,
org.apache.commons.collections4.sequence.EditCommand,Abstract Class,"* Abstract base class for all commands used to transform an objects sequence\n * into another one.\n * <p>\n * When two objects sequences are compared through the\n * {@link SequencesComparator#getScript SequencesComparator.getScript} method,\n * the result is provided has a {@link EditScript script} containing the commands\n * that progressively transform the first sequence into the second one.\n * </p>\n * <p>\n * There are only three types of commands, all of which are subclasses of this\n * abstract class. Each command is associated with one object belonging to at\n * least one of the sequences. These commands are {@link InsertCommand\n * InsertCommand} which correspond to an object of the second sequence being\n * inserted into the first sequence, {@link DeleteCommand DeleteCommand} which\n * correspond to an object of the first sequence being removed and\n * {@link KeepCommand KeepCommand} which correspond to an object of the first\n * sequence which {@code equals} an object in the second sequence. It is\n * guaranteed that comparison is always performed this way (i.e. the\n * {@code equals} method of the object from the first sequence is used and\n * the object passed as an argument comes from the second sequence) ; this can\n * be important if subclassing is used for some elements in the first sequence\n * and the {@code equals} method is specialized.\n * </p>\n *\n * @param <T> the type of object to apply this command.\n * @see SequencesComparator\n * @see EditScript\n * @since 4.0","public , abstract ",,
org.apache.commons.collections4.sequence.CommandVisitor,Interface,"* This interface should be implemented by user object to walk\n * through {@link EditScript EditScript} objects.\n * <p>\n * Users should implement this interface in order to walk through\n * the {@link EditScript EditScript} object created by the comparison\n * of two sequences. This is a direct application of the visitor\n * design pattern. The {@link EditScript#visit EditScript.visit}\n * method takes an object implementing this interface as an argument,\n * it will perform the loop over all commands in the script and the\n * proper methods of the user class will be called as the commands are\n * encountered.\n * </p>\n * <p>\n * The implementation of the user visitor class will depend on the\n * need. Here are two examples.\n * </p>\n * <p>\n * The first example is a visitor that build the longest common\n * subsequence:\n * </p>\n * <pre>\n * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n *\n * import java.util.ArrayList;\n *\n * public class LongestCommonSubSequence implements CommandVisitor {\n *\n *   public LongestCommonSubSequence() {\n *     a = new ArrayList();\n *   }\n *\n *   public void visitInsertCommand(Object object) {\n *   }\n *\n *   public void visitKeepCommand(Object object) {\n *     a.add(object);\n *   }\n *\n *   public void visitDeleteCommand(Object object) {\n *   }\n *\n *   public Object[] getSubSequence() {\n *     return a.toArray();\n *   }\n *\n *   private ArrayList a;\n *\n * }\n * </pre>\n * <p>\n * The second example is a visitor that shows the commands and the way\n * they transform the first sequence into the second one:\n * </p>\n * <pre>\n * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n *\n * import java.util.Arrays;\n * import java.util.ArrayList;\n * import java.util.Iterator;\n *\n * public class ShowVisitor implements CommandVisitor {\n *\n *   public ShowVisitor(Object[] sequence1) {\n *     v = new ArrayList();\n *     v.addAll(Arrays.asList(sequence1));\n *     index = 0;\n *   }\n *\n *   public void visitInsertCommand(Object object) {\n *     v.insertElementAt(object, index++);\n *     display(""insert"", object);\n *   }\n *\n *   public void visitKeepCommand(Object object) {\n *     ++index;\n *     display(""keep  "", object);\n *   }\n *\n *   public void visitDeleteCommand(Object object) {\n *     v.remove(index);\n *     display(""delete"", object);\n *   }\n *\n *   private void display(String commandName, Object object) {\n *     System.out.println(commandName + "" "" + object + "" -&gt;"" + this);\n *   }\n *\n *   public String toString() {\n *     StringBuilder buffer = new StringBuilder();\n *     for (Iterator iter = v.iterator(); iter.hasNext();) {\n *       buffer.append(' ').append(iter.next());\n *     }\n *     return buffer.toString();\n *   }\n *\n *   private ArrayList v;\n *   private int index;\n *\n * }\n * </pre>\n *\n * @param <T> the type of the input to the visit operations.\n * @since 4.0",public ,,
org.apache.commons.collections4.sequence.EditScript,Class,* This class gathers all the {@link EditCommand commands} needed to transform\n * one objects sequence into another objects sequence.\n * <p>\n * An edit script is the most general view of the differences between two\n * sequences. It is built as the result of the comparison between two sequences\n * by the {@link SequencesComparator SequencesComparator} class. The user can\n * walk through it using the <em>visitor</em> design pattern.\n * </p>\n * <p>\n * It is guaranteed that the objects embedded in the {@link InsertCommand insert\n * commands} come from the second sequence and that the objects embedded in\n * either the {@link DeleteCommand delete commands} or {@link KeepCommand keep\n * commands} come from the first sequence. This can be important if subclassing\n * is used for some elements in the first sequence and the {@code equals}\n * method is specialized.\n * </p>\n *\n * @param <T> the type of object to apply commands.\n * @see SequencesComparator\n * @see EditCommand\n * @see CommandVisitor\n * @see ReplacementsHandler\n * @since 4.0,public ,,
org.apache.commons.collections4.QueueUtils,Class,* Provides utility methods and decorators for {@link Queue} instances.\n *\n * @since 4.0,public ,,
org.apache.commons.collections4.SetValuedMap,Interface,"* Defines a map that holds a set of values against each key.\n * <p>\n * A {@code SetValuedMap} is a Map with slightly different semantics:\n * </p>\n * <ul>\n *   <li>Putting a value into the map will add the value to a {@link Set} at that key.</li>\n *   <li>Getting a value will return a {@link Set}, holding all the values put to that key.</li>\n * </ul>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.1",public ,org.apache.commons.collections4.MultiValuedMap,
org.apache.commons.collections4.bag.SynchronizedBag,Class,"* Decorates another {@link Bag} to synchronize its behavior\n * for a multithreaded environment.\n * <p>\n * Methods are synchronized, then forwarded to the decorated bag.\n * Iterators must be separately synchronized around the loop.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.collection.SynchronizedCollection,org.apache.commons.collections4.Bag
org.apache.commons.collections4.bag.SynchronizedBag$SynchronizedBagSet,Class,* Synchronized Set for the Bag class.,final ,org.apache.commons.collections4.collection.SynchronizedCollection,java.util.Set
org.apache.commons.collections4.bag.AbstractMapBag,Abstract Class,* Abstract implementation of the {@link Bag} interface to simplify the creation\n * of subclass implementations.\n * <p>\n * Subclasses specify a Map implementation to use as the internal storage. The\n * map will be used to map bag elements to a number; the number represents the\n * number of occurrences of that element in the bag.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0 (previously DefaultMapBag v2.0),"public , abstract ",,org.apache.commons.collections4.Bag
org.apache.commons.collections4.bag.AbstractMapBag$BagIterator,Class,* Inner class iterator for the Bag.,static ,,java.util.Iterator
org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger,Class,* Mutable integer class for storing the data.,"protected , static ",,
org.apache.commons.collections4.bag.CollectionBag,Class,"* Decorates another {@link Bag} to comply with the Collection contract.\n * <p>\n * By decorating an existing {@link Bag} instance with a {@link CollectionBag},\n * it can be safely passed on to methods that require Collection types that\n * are fully compliant with the Collection contract.\n * </p>\n * <p>\n * The method Javadoc highlights the differences compared to the original Bag interface.\n * </p>\n *\n * @see Bag\n * @param <E> the type of elements in this bag\n * @since 4.0","public , final ",org.apache.commons.collections4.bag.AbstractBagDecorator,
org.apache.commons.collections4.bag.UnmodifiableBag,Class,* Decorates another {@link Bag} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0,"public , final ",org.apache.commons.collections4.bag.AbstractBagDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.bag.PredicatedSortedBag,Class,"* Decorates another {@link SortedBag} to validate that additions\n * match a specified predicate.\n * <p>\n * This bag exists to provide validation for the decorated bag.\n * It is normally created to decorate an empty bag.\n * If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the bag.\n * <pre>\n * SortedBag bag = PredicatedSortedBag.predicatedSortedBag(new TreeBag(), NotNullPredicate.INSTANCE);\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.bag.PredicatedBag,org.apache.commons.collections4.SortedBag
org.apache.commons.collections4.bag.UnmodifiableSortedBag,Class,* Decorates another {@link SortedBag} to ensure it can't be altered.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0,"public , final ",org.apache.commons.collections4.bag.AbstractSortedBagDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.bag.HashBag,Class,"* Implements {@code Bag}, using a {@link HashMap} to provide the\n * data storage. This is the standard implementation of a bag.\n * <p>\n * A {@code Bag} stores each object in the collection together with a\n * count of occurrences. Extra methods on the interface allow multiple copies\n * of an object to be added or removed at once. It is important to read the\n * interface Javadoc carefully as several methods violate the\n * {@link Collection} interface specification.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0 (previously in main package v2.0)",public ,org.apache.commons.collections4.bag.AbstractMapBag,java.io.Serializable
org.apache.commons.collections4.bag.AbstractBagDecorator,Abstract Class,* Decorates another {@code Bag} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated bag.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,org.apache.commons.collections4.Bag
org.apache.commons.collections4.bag.TransformedSortedBag,Class,"* Decorates another {@link SortedBag} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.bag.TransformedBag,org.apache.commons.collections4.SortedBag
org.apache.commons.collections4.bag.TreeBag,Class,"* Implements {@link SortedBag}, using a {@link TreeMap} to provide the data storage.\n * This is the standard implementation of a sorted bag.\n * <p>\n * Order will be maintained among the bag members and can be viewed through the iterator.\n * </p>\n * <p>\n * A {@link org.apache.commons.collections4.Bag Bag} stores each object in the collection\n * together with a count of occurrences. Extra methods on the interface allow multiple\n * copies of an object to be added or removed at once. It is important to read the interface\n * Javadoc carefully as several methods violate the {@link Collection} interface specification.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0 (previously in main package v2.0)",public ,org.apache.commons.collections4.bag.AbstractMapBag,org.apache.commons.collections4.SortedBag;java.io.Serializable
org.apache.commons.collections4.bag.PredicatedBag,Class,"* Decorates another {@link Bag} to validate that additions\n * match a specified predicate.\n * <p>\n * This bag exists to provide validation for the decorated bag.\n * It is normally created to decorate an empty bag.\n * If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the bag.\n * </p>\n * <pre>\n * Bag bag = PredicatedBag.predicatedBag(new HashBag(), NotNullPredicate.INSTANCE);\n * </pre>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.collection.PredicatedCollection,org.apache.commons.collections4.Bag
org.apache.commons.collections4.bag.SynchronizedSortedBag,Class,"* Decorates another {@link SortedBag} to synchronize its behavior\n * for a multithreaded environment.\n * <p>\n * Methods are synchronized, then forwarded to the decorated bag.\n * Iterators must be separately synchronized around the loop.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.bag.SynchronizedBag,org.apache.commons.collections4.SortedBag
org.apache.commons.collections4.bag.CollectionSortedBag,Class,* Decorates another {@link SortedBag} to comply with the Collection contract.\n *\n * @param <E> the type of elements in this bag\n * @since 4.0,"public , final ",org.apache.commons.collections4.bag.AbstractSortedBagDecorator,
org.apache.commons.collections4.bag.TransformedBag,Class,"* Decorates another {@link Bag} to transform objects that are added.\n * <p>\n * The add methods are affected by this class.\n * Thus objects must be removed or searched for using their transformed form.\n * For example, if the transformation converts Strings to Integers, you must\n * use the Integer form to remove objects.\n * </p>\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0",public ,org.apache.commons.collections4.collection.TransformedCollection,org.apache.commons.collections4.Bag
org.apache.commons.collections4.bag.AbstractSortedBagDecorator,Abstract Class,* Decorates another {@code SortedBag} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated bag.\n * </p>\n *\n * @param <E> the type of elements in this bag\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.bag.AbstractBagDecorator,org.apache.commons.collections4.SortedBag
org.apache.commons.collections4.multiset.HashMultiSet,Class,"* Implements {@code MultiSet}, using a {@link HashMap} to provide the\n * data storage. This is the standard implementation of a multiset.\n * <p>\n * A {@code MultiSet} stores each object in the collection together with a\n * count of occurrences. Extra methods on the interface allow multiple copies\n * of an object to be added or removed at once.\n * </p>\n *\n * @param <E> the type held in the multiset\n * @since 4.1",public ,org.apache.commons.collections4.multiset.AbstractMapMultiSet,java.io.Serializable
org.apache.commons.collections4.multiset.AbstractMultiSet,Abstract Class,* Abstract implementation of the {@link MultiSet} interface to simplify the\n * creation of subclass implementations.\n *\n * @param <E> the type held in the multiset\n * @since 4.1,"public , abstract ",java.util.AbstractCollection,org.apache.commons.collections4.MultiSet
org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet,Class,* Inner class EntrySet.\n     *\n     * @param <E> the element type.,"protected , static ",java.util.AbstractSet,
org.apache.commons.collections4.multiset.AbstractMultiSet$MultiSetIterator,Class,* Inner class iterator for the MultiSet.,"private , static , final ",,java.util.Iterator
org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet,Class,* Inner class UniqueSet.\n     *\n     * @param <E> the element type.,"protected , static ",java.util.AbstractSet,
org.apache.commons.collections4.multiset.AbstractMultiSet$AbstractEntry,Abstract Class,* Inner class AbstractEntry.\n     *\n     * @param <E> the element type.,"protected , abstract , static ",,org.apache.commons.collections4.MultiSet.Entry
org.apache.commons.collections4.multiset.PredicatedMultiSet,Class,"* Decorates another {@link MultiSet} to validate that additions\n * match a specified predicate.\n * <p>\n * This multiset exists to provide validation for the decorated multiset.\n * It is normally created to decorate an empty multiset.\n * If an object cannot be added to the multiset, an {@link IllegalArgumentException}\n * is thrown.\n * </p>\n * <p>\n * One usage would be to ensure that no null entries are added to the multiset.\n * </p>\n * <pre>\n * MultiSet&lt;E&gt; set =\n *      PredicatedMultiSet.predicatedMultiSet(new HashMultiSet&lt;E&gt;(),\n *                                            NotNullPredicate.notNullPredicate());\n * </pre>\n *\n * @param <E> the type held in the multiset\n * @since 4.1",public ,org.apache.commons.collections4.collection.PredicatedCollection,org.apache.commons.collections4.MultiSet
org.apache.commons.collections4.multiset.AbstractMultiSetDecorator,Abstract Class,* Decorates another {@code MultiSet} to provide additional behavior.\n * <p>\n * Methods are forwarded directly to the decorated multiset.\n * </p>\n *\n * @param <E> the type held in the multiset\n * @since 4.1,"public , abstract ",org.apache.commons.collections4.collection.AbstractCollectionDecorator,org.apache.commons.collections4.MultiSet
org.apache.commons.collections4.multiset.AbstractMapMultiSet,Abstract Class,* Abstract implementation of the {@link MultiSet} interface to simplify the\n * creation of subclass implementations.\n * <p>\n * Subclasses specify a Map implementation to use as the internal storage. The\n * map will be used to map multiset elements to a number; the number represents the\n * number of occurrences of that element in the multiset.\n * </p>\n *\n * @param <E> the type held in the multiset.\n * @since 4.1,"public , abstract ",org.apache.commons.collections4.multiset.AbstractMultiSet,
org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator,Class,* Inner class EntrySetIterator.\n     *\n     * @param <E> the element type.,"protected , static ",,java.util.Iterator
org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator,Class,* Inner class iterator for the MultiSet.,"private , static , final ",,java.util.Iterator
org.apache.commons.collections4.multiset.AbstractMapMultiSet$MultiSetEntry,Class,* Inner class MultiSetEntry.\n     *\n     * @param <E> the key type.,"protected , static ",org.apache.commons.collections4.multiset.AbstractMultiSet.AbstractEntry,
org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger,Class,* Mutable integer class for storing the data.,"protected , static ",,
org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator,Class,* Inner class UniqueSetIterator.\n     *\n     * @param <E> the element type.,"protected , static ",org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.multiset.UnmodifiableMultiSet,Class,* Decorates another {@link MultiSet} to ensure it can't be altered.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type held in the multiset\n * @since 4.1,"public , final ",org.apache.commons.collections4.multiset.AbstractMultiSetDecorator,org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.multiset.SynchronizedMultiSet,Class,"* Decorates another {@link MultiSet} to synchronize its behavior\n * for a multithreaded environment.\n * <p>\n * Methods are synchronized, then forwarded to the decorated multiset.\n * Iterators must be separately synchronized around the loop.\n * </p>\n *\n * @param <E> the type held in the multiset.\n * @since 4.1",public ,org.apache.commons.collections4.collection.SynchronizedCollection,org.apache.commons.collections4.MultiSet
org.apache.commons.collections4.multiset.SynchronizedMultiSet$SynchronizedSet,Class,* Synchronized Set for the MultiSet class.\n     *\n     * @param <T> the type held in this Set.,static ,org.apache.commons.collections4.collection.SynchronizedCollection,java.util.Set
org.apache.commons.collections4.BagUtils,Class,* Provides utility methods and decorators for {@link Bag} and {@link SortedBag} instances.\n *\n * @since 2.1,public ,,
org.apache.commons.collections4.Unmodifiable,Interface,"* Marker interface for collections, maps and iterators that are unmodifiable.\n * <p>\n * This interface enables testing such as:\n * </p>\n * <pre>\n * if (coll instanceof Unmodifiable) {\n *   coll = new ArrayList(coll);\n * }\n * // now we know coll is modifiable\n * </pre>\n * <p>\n * Of course all this only works if you use the Unmodifiable classes defined\n * in this library. If you use the JDK unmodifiable class via {@code java.util Collections}\n * then the interface won't be there.\n * </p>\n *\n * @since 3.0",public ,,
org.apache.commons.collections4.Get,Interface,"* The ""read"" subset of the {@link Map} interface.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0\n * @see Put",public ,,
org.apache.commons.collections4.Trie,Interface,"* Defines the interface for a prefix tree, an ordered tree data structure. For more information, see <a href=""https://en.wikipedia.org/wiki/Trie"">Tries</a>.\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 4.0",public ,org.apache.commons.collections4.IterableSortedMap,
org.apache.commons.collections4.MultiMap,Interface,"* Defines a map that holds a collection of values against each key.\n * <p>\n * A {@code MultiMap} is a Map with slightly different semantics.\n * Putting a value into the map will add the value to a Collection at that key.\n * Getting a value will return a Collection, holding all the values put to that key.\n * </p>\n * <p>\n * For example:\n * </p>\n * <pre>\n * MultiMap mhm = new MultiValueMap();\n * mhm.put(key, ""A"");\n * mhm.put(key, ""B"");\n * mhm.put(key, ""C"");\n * Collection coll = (Collection) mhm.get(key);</pre>\n * <p>\n * {@code coll} will be a collection containing ""A"", ""B"", ""C"".\n * </p>\n * <p>\n * NOTE: Additional methods were added to this interface in Commons Collections 3.1.\n * These were added solely for documentation purposes and do not change the interface\n * as they were defined in the superinterface {@code Map} anyway.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 2.0\n * @deprecated since 4.1, use {@link MultiValuedMap} instead",public ,org.apache.commons.collections4.IterableMap,
org.apache.commons.collections4.KeyValue,Interface,"* Defines a simple key value pair.\n * <p>\n * A Map Entry has considerable additional semantics over and above a simple\n * key-value pair. This interface defines the minimum key value, with just the\n * two get methods.\n * </p>\n *\n * @param <K> the type of the key\n * @param <V> the type of the value\n * @since 3.0",public ,,
org.apache.commons.collections4.iterators.IteratorChain,Class,"* An IteratorChain is an Iterator that wraps a number of Iterators.\n * <p>\n * This class makes multiple iterators look like one to the caller. When any\n * method from the Iterator interface is called, the IteratorChain will delegate\n * to a single underlying Iterator. The IteratorChain will invoke the Iterators\n * in sequence until all Iterators are exhausted.\n * </p>\n * <p>\n * Under many circumstances, linking Iterators together in this manner is more\n * efficient (and convenient) than reading out the contents of each Iterator\n * into a List and creating a new Iterator.\n * </p>\n * <p>\n * Calling a method that adds new Iterator <i>after a method in the Iterator\n * interface has been called</i> will result in an UnsupportedOperationException.\n * </p>\n * <p>\n * NOTE: As from version 3.0, the IteratorChain may contain no iterators. In\n * this case the class will function as an empty iterator.\n * </p>\n * <p>\n * NOTE: As from version 4.0, the IteratorChain stores the iterators in a queue\n * and removes any reference to them as soon as they are not used anymore. Thus,\n * the methods {@code setIterator(Iterator)} and {@code getIterators()} have been\n * removed and {@link #size()} will return the number of remaining iterators in\n * the queue.\n * </p>\n *\n * @param <E> the type of elements in this iterator.\n * @since 2.1",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.EmptyListIterator,Class,* Provides an implementation of an empty list iterator.\n * <p>\n * This class provides an implementation of an empty list iterator. This class\n * provides for binary compatibility between Commons Collections 2.1.1 and 3.1\n * due to issues with {@code IteratorUtils}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.1.1 and 3.1,public ,org.apache.commons.collections4.iterators.AbstractEmptyIterator,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator,Class,* Decorates an ordered map iterator such that it cannot be modified.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , final ",,org.apache.commons.collections4.OrderedMapIterator;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.iterators.CartesianProductIterator,Class,"* This iterator creates a Cartesian product of the input iterables,\n * equivalent to nested for-loops.\n * <p>\n * The iterables provided to the constructor are used in reverse order, each\n * until exhaustion before proceeding to the next element of the prior iterable\n * and repeating. Consider the following example:\n * </p>\n * <pre>{@code\n * List<Character> iterable1 = Arrays.asList('A', 'B', 'C');\n * List<Character> iterable2 = Arrays.asList('1', '2', '3');\n * CartesianProductIterator<Character> it = new CartesianProductIterator<>(\n *         iterable1,\n *         iterable2);\n * while (it.hasNext()) {\n *     List<Character> tuple = it.next();\n *     System.out.println(tuple.get(0) + "", "" + tuple.get(1));\n * }\n * }</pre>\n * <p>\n * The output will be:\n * </p>\n * <pre>\n * A, 1\n * A, 2\n * A, 3\n * B, 1\n * B, 2\n * B, 3\n * C, 1\n * C, 2\n * C, 3\n * </pre>\n * <p>\n * The {@code remove()} operation is not supported, and will throw an\n * {@code UnsupportedOperationException}.\n * </p>\n * <p>\n * If any of the input iterables is empty, the Cartesian product will be empty.\n * If any of the input iterables is infinite, the Cartesian product will be\n * infinite.\n * </p>\n *\n * @param <E> the type of the objects being permuted\n * @since 4.5.0-M3",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.AbstractListIteratorDecorator,Class,* Provides basic behavior for decorating a list iterator with extra functionality.\n * <p>\n * All methods are forwarded to the decorated list iterator.\n * </p>\n *\n * @param <E> the type of elements in this iterator.\n * @since 3.0,public ,,java.util.ListIterator
org.apache.commons.collections4.iterators.ZippingIterator,Class,"* Provides an interleaved iteration over the elements contained in a\n * collection of Iterators.\n * <p>\n * Given two {@link Iterator} instances {@code A} and {@code B}, the\n * {@link #next} method on this iterator will switch between {@code A.next()}\n * and {@code B.next()} until both iterators are exhausted.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.1",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.UnmodifiableIterator,Class,* Decorates an iterator such that it cannot be modified.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0,"public , final ",,java.util.Iterator;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.iterators.CollatingIterator,Class,"* Provides an ordered iteration over the elements contained in a collection of\n * ordered Iterators.\n * <p>\n * Given two ordered {@link Iterator} instances {@code A} and\n * {@code B}, the {@link #next} method on this iterator will return the\n * lesser of {@code A.next()} and {@code B.next()}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.1",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.UniqueFilterIterator,Class,"* A FilterIterator which only returns ""unique"" Objects.  Internally,\n * the Iterator maintains a Set of objects it has already encountered,\n * and duplicate Objects are skipped.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.1",public ,org.apache.commons.collections4.iterators.FilterIterator,
org.apache.commons.collections4.iterators.ReverseListIterator,Class,"* Iterates backwards through a List, starting with the last element\n * and continuing to the first. This is useful for looping around\n * a list in reverse order without needing to actually reverse the list.\n * <p>\n * The first call to {@code next()} will return the last element\n * from the list, and so on. The {@code hasNext()} method works\n * in concert with the {@code next()} method as expected.\n * However, the {@code nextIndex()} method returns the correct\n * index in the list, thus it starts high and reduces as the iteration\n * continues. The previous methods work similarly.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.2",public ,,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.BoundedIterator,Class,"* Decorates another iterator to return elements in a specific range.\n * <p>\n * The decorated iterator is bounded in the range [offset, offset+max).\n * The {@code offset} corresponds to the position of the first element to\n * be returned from the decorated iterator, and {@code max} is the maximum\n * number of elements to be returned at most.\n * </p>\n * <p>\n * In case an offset parameter other than 0 is provided, the decorated\n * iterator is immediately advanced to this position, skipping all elements\n * before that position.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.1",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.AbstractIteratorDecorator,Abstract Class,* Provides basic behavior for decorating an iterator with extra functionality.\n * <p>\n * All methods are forwarded to the decorated iterator.\n * </p>\n *\n * @param <E> the type of the iterator being decorated.\n * @since 3.0,"public , abstract ",org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator,
org.apache.commons.collections4.iterators.TransformIterator,Class,* Decorates an iterator such that each element returned is transformed.\n *\n * @param <I> the type of the input to the function.\n * @param <O> the type of the result of the function.\n * @since 1.0,public ,,java.util.Iterator
org.apache.commons.collections4.iterators.AbstractEmptyIterator,Abstract Class,* Provides an abstract implementation of an empty iterator.\n *\n * @since 3.1,abstract ,,org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.NodeListIterator,Class,* An {@link Iterator} over a {@link NodeList}.\n * <p>\n * This iterator does not support {@link #remove()} as a {@link NodeList} does not support\n * removal of items.\n * </p>\n *\n * @since 4.0\n * @see NodeList,public ,,Iterator<Node>
org.apache.commons.collections4.iterators.ArrayListIterator,Class,"* Implements a {@link java.util.ListIterator} over an array.\n * <p>\n * The array can be either an array of object or of primitives. If you know\n * that you have an object array, the {@link ObjectArrayListIterator}\n * class is a better choice, as it will perform better.\n * </p>\n * <p>\n * This iterator does not support {@link #add(Object)} or {@link #remove()}, as the array\n * cannot be changed in size. The {@link #set(Object)} method is supported however.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @see org.apache.commons.collections4.iterators.ArrayIterator\n * @see java.util.Iterator\n * @see java.util.ListIterator\n * @since 3.0",public ,org.apache.commons.collections4.iterators.ArrayIterator,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.LazyIteratorChain,Abstract Class,"* An LazyIteratorChain is an Iterator that wraps a number of Iterators in a lazy manner.\n * <p>\n * This class makes multiple iterators look like one to the caller. When any\n * method from the Iterator interface is called, the LazyIteratorChain will delegate\n * to a single underlying Iterator. The LazyIteratorChain will invoke the Iterators\n * in sequence until all Iterators are exhausted.\n * </p>\n * <p>\n * The Iterators are provided by {@link #nextIterator(int)} which has to be overridden by\n * subclasses and allows to lazily create the Iterators as they are accessed:\n * </p>\n * <pre>\n * return new LazyIteratorChain&lt;String&gt;() {\n *     protected Iterator&lt;String&gt; nextIterator(int count) {\n *         return count == 1 ? Arrays.asList(""foo"", ""bar"").iterator() : null;\n *     }\n * };\n * </pre>\n * <p>\n * Once the inner Iterator's {@link Iterator#hasNext()} method returns false,\n * {@link #nextIterator(int)} will be called to obtain another iterator, and so on\n * until {@link #nextIterator(int)} returns null, indicating that the chain is exhausted.\n * </p>\n * <p>\n * NOTE: The LazyIteratorChain may contain no iterators. In this case the class will\n * function as an empty iterator.\n * </p>\n *\n * @param <E> the type of elements in this iterator.\n * @since 4.0","public , abstract ",,java.util.Iterator
org.apache.commons.collections4.iterators.LoopingListIterator,Class,"* A ListIterator that restarts when it reaches the end or when it\n * reaches the beginning.\n * <p>\n * The iterator will loop continuously around the provided list,\n * unless there are no elements in the collection to begin with, or\n * all of the elements have been {@link #remove removed}.\n * </p>\n * <p>\n * Concurrent modifications are not directly supported, and for most\n * collection implementations will throw a\n * ConcurrentModificationException.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.2",public ,,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.PeekingIterator,Class,"* Decorates an iterator to support one-element lookahead while iterating.\n * <p>\n * The decorator supports the removal operation, but an {@link IllegalStateException} will be thrown if {@link #remove()} is called directly after a call to\n * {@link #peek()} or {@link #element()}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.0",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.ObjectGraphIterator,Class,"* An Iterator that can traverse multiple iterators down an object graph.\n * <p>\n * This iterator can extract multiple objects from a complex tree-like object graph.\n * The iteration starts from a single root object.\n * It uses a {@code Transformer} to extract the iterators and elements.\n * Its main benefit is that no intermediate {@code List} is created.\n * </p>\n * <p>\n * For example, consider an object graph:\n * </p>\n * <pre>\n *                 |- Branch -- Leaf\n *                 |         \- Leaf\n *         |- Tree |         /- Leaf\n *         |       |- Branch -- Leaf\n *  Forest |                 \- Leaf\n *         |       |- Branch -- Leaf\n *         |       |         \- Leaf\n *         |- Tree |         /- Leaf\n *                 |- Branch -- Leaf\n *                 |- Branch -- Leaf</pre>\n * <p>\n * The following {@code Transformer}, used in this class, will extract all\n * the Leaf objects without creating a combined intermediate list:\n * </p>\n * <pre>\n * public Object transform(Object input) {\n *   if (input instanceof Forest) {\n *     return ((Forest) input).treeIterator();\n *   }\n *   if (input instanceof Tree) {\n *     return ((Tree) input).branchIterator();\n *   }\n *   if (input instanceof Branch) {\n *     return ((Branch) input).leafIterator();\n *   }\n *   if (input instanceof Leaf) {\n *     return input;\n *   }\n *   throw new ClassCastException();\n * }</pre>\n * <p>\n * Internally, iteration starts from the root object. When next is called,\n * the transformer is called to examine the object. The transformer will return\n * either an iterator or an object. If the object is an Iterator, the next element\n * from that iterator is obtained and the process repeats. If the element is an object\n * it is returned.\n * </p>\n * <p>\n * Under many circumstances, linking Iterators together in this manner is\n * more efficient (and convenient) than using nested for loops to extract a list.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.1",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.ArrayIterator,Class,"* Implements an {@link java.util.Iterator Iterator} over any array.\n * <p>\n * The array can be either an array of object or of primitives. If you know\n * that you have an object array, the\n * {@link org.apache.commons.collections4.iterators.ObjectArrayIterator ObjectArrayIterator}\n * class is a better choice, as it will perform better.\n * </p>\n * <p>\n * The iterator implements a {@link #reset} method, allowing the reset of\n * the iterator back to the start if required.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 1.0",public ,,org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.IteratorOperations,Interface,* Extends {@link Iterator} with additional default methods.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.5.0-M3,public ,java.util.Iterator,
org.apache.commons.collections4.iterators.PermutationIterator,Class,"* This iterator creates permutations of an input collection, using the\n * Steinhaus-Johnson-Trotter algorithm (also called plain changes).\n * <p>\n * The iterator will return exactly n! permutations of the input collection.\n * The {@code remove()} operation is not supported, and will throw an\n * {@code UnsupportedOperationException}.\n * </p>\n * <p>\n * NOTE: in case an empty collection is provided, the iterator will\n * return exactly one empty list as result, as 0! = 1.\n * </p>\n *\n * @param <E>  the type of the objects being permuted\n * @since 4.0",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.SingletonListIterator,Class,* {@code SingletonIterator} is an {@link java.util.ListIterator} over a single\n * object instance.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.1,public ,,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.EmptyMapIterator,Class,* Provides an implementation of an empty map iterator.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.1,public ,org.apache.commons.collections4.iterators.AbstractEmptyMapIterator,org.apache.commons.collections4.MapIterator
org.apache.commons.collections4.iterators.ObjectArrayIterator,Class,"* An {@link java.util.Iterator Iterator} over an array of objects.\n * <p>\n * This iterator does not support {@link #remove}, as the object array cannot be\n * structurally modified.\n * </p>\n * <p>\n * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n * back to the start if required.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0",public ,,org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.EnumerationIterator,Class,* Adapter to make {@link Enumeration Enumeration} instances appear\n * to be {@link Iterator Iterator} instances.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 1.0,public ,,java.util.Iterator
org.apache.commons.collections4.iterators.IteratorIterable,Class,"* Adapter to make an {@link Iterator Iterator} instance appear to be an\n * {@link Iterable Iterable} instance.  The iterable can be constructed in one\n * of two variants:  single use, multiple use.\n *\n * <p>\n * In the single use iterable case, the iterable is only usable for one\n * iterative operation over the source iterator.  Subsequent iterative\n * operations use the same, exhausted source iterator.  To create a single use\n * iterable, construct a new {@link IteratorIterable} using a {@link Iterator}\n * that is NOT a {@link ResettableIterator} iterator:\n * </p>\n *\n * <pre>\n *   Iterator&lt;Integer&gt; iterator = // some non-resettable iterator\n *   Iterable&lt;Integer&gt; iterable = new IteratorIterable&lt;Integer&gt;(iterator);\n * </pre>\n *\n * <p>\n * In the multiple use iterable case, the iterable is usable for any number of\n * iterative operations over the source iterator.  Of special note, even though\n * the iterable supports multiple iterations, it does not support concurrent\n * iterations. To implicitly create a multiple use iterable, construct a new\n * {@link IteratorIterable} using a {@link ResettableIterator} iterator:\n * </p>\n *\n * <pre>\n *   Integer[] array = {Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(3)};\n *   Iterator&lt;Integer&gt; iterator = IteratorUtils.arrayIterator(array); // a resettable iterator\n *   Iterable&lt;Integer&gt; iterable = new IteratorIterable&lt;Integer&gt;(iterator);\n * </pre>\n *\n * <p>\n * A multiple use iterable can also be explicitly constructed using any\n * {@link Iterator} and specifying {@code true} for the\n * {@code multipleUse} flag:\n * </p>\n *\n * <pre>\n *   Iterator&lt;Integer&gt; iterator = // some non-resettable iterator\n *   Iterable&lt;Integer&gt; iterable = new IteratorIterable&lt;Integer&gt;(iterator, true);\n * </pre>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.0",public ,,java.lang.Iterable
org.apache.commons.collections4.iterators.AbstractEmptyMapIterator,Abstract Class,* Provides an implementation of an empty map iterator.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 4.0,"public , abstract ",org.apache.commons.collections4.iterators.AbstractEmptyIterator,
org.apache.commons.collections4.iterators.LoopingIterator,Class,"* An Iterator that restarts when it reaches the end.\n * <p>\n * The iterator will loop continuously around the provided elements, unless\n * there are no elements in the collection to begin with, or all the elements\n * have been {@link #remove removed}.\n * </p>\n * <p>\n * Concurrent modifications are not directly supported, and for most collection\n * implementations will throw a ConcurrentModificationException.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0",public ,,org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.IteratorEnumeration,Class,* Adapter to make an {@link Iterator Iterator} instance appear to be an\n * {@link Enumeration Enumeration} instance.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 1.0,public ,,java.util.Enumeration
org.apache.commons.collections4.iterators.SingletonIterator,Class,* {@code SingletonIterator} is an {@link java.util.Iterator} over a single\n * object instance.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.0,public ,,org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.ListIteratorWrapper,Class,* Converts an {@link Iterator} into a {@link ResettableListIterator}.\n * For plain {@code Iterator}s this is accomplished by caching the returned\n * elements.  This class can also be used to simply add\n * {@link org.apache.commons.collections4.ResettableIterator ResettableIterator}\n * functionality to a given {@link ListIterator}.\n * <p>\n * The {@code ListIterator} interface has additional useful methods\n * for navigation - {@code previous()} and the index methods.\n * This class allows a regular {@code Iterator} to behave as a\n * {@code ListIterator}. It achieves this by building a list internally\n * of as the underlying iterator is traversed.\n * </p>\n * <p>\n * The optional operations of {@code ListIterator} are not supported for plain {@code Iterator}s.\n * </p>\n * <p>\n * This class implements ResettableListIterator from Commons Collections 3.2.\n * </p>\n *\n * @param <E> the type of elements in this iterator.\n * @since 2.1,public ,,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.SkippingIterator,Class,"* Decorates another iterator to skip the first N elements.\n * <p>\n * In case an offset parameter other than 0 is provided, the decorated\n * iterator is immediately advanced to this position, skipping all elements\n * before that position.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.1",public ,org.apache.commons.collections4.iterators.AbstractIteratorDecorator,
org.apache.commons.collections4.iterators.EmptyOrderedIterator,Class,* Provides an implementation of an empty ordered iterator.\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.1,public ,org.apache.commons.collections4.iterators.AbstractEmptyIterator,org.apache.commons.collections4.OrderedIterator
org.apache.commons.collections4.iterators.ExtendedIterator,Class,"* Extends Iterator functionality to include operations commonly found on streams (for example filtering, concatenating, mapping). It also provides convenience methods\n * for common operations.\n *\n * @param <T> The type of object returned from the iterator.\n * @since 4.5.0-M3","public , final ",,org.apache.commons.collections4.iterators.IteratorOperations
org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator,Class,* Provides basic behavior for decorating a map iterator with extra functionality.\n * <p>\n * All methods are forwarded to the decorated map iterator.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,public ,,org.apache.commons.collections4.MapIterator
org.apache.commons.collections4.iterators.ObjectArrayListIterator,Class,"* Implements a {@link java.util.ListIterator} over an array of objects.\n * <p>\n * This iterator does not support {@link #add} or {@link #remove}, as the object array\n * cannot be structurally modified. The {@link #set} method is supported however.\n * </p>\n * <p>\n * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n * back to the start if required.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @see org.apache.commons.collections4.iterators.ObjectArrayIterator\n * @see java.util.Iterator\n * @see java.util.ListIterator\n * @since 3.0",public ,org.apache.commons.collections4.iterators.ObjectArrayIterator,org.apache.commons.collections4.ResettableListIterator
org.apache.commons.collections4.iterators.UnmodifiableListIterator,Class,* Decorates a list iterator such that it cannot be modified.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 3.0,"public , final ",,java.util.ListIterator;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.iterators.EmptyOrderedMapIterator,Class,* Provides an implementation of an empty ordered map iterator.\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.1,public ,org.apache.commons.collections4.iterators.AbstractEmptyMapIterator,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.iterators.UnmodifiableMapIterator,Class,* Decorates a map iterator such that it cannot be modified.\n * <p>\n * Attempts to modify it will result in an UnsupportedOperationException.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,"public , final ",,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.iterators.EmptyIterator,Class,* Provides an implementation of an empty iterator.\n * <p>\n * This class provides an implementation of an empty iterator.\n * This class provides for binary compatibility between Commons Collections\n * 2.1.1 and 3.1 due to issues with {@code IteratorUtils}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.1.1 and 3.1,public ,org.apache.commons.collections4.iterators.AbstractEmptyIterator,
org.apache.commons.collections4.iterators.EntrySetMapIterator,Class,* Implements a {@code MapIterator} using a Map entrySet.\n * Reverse iteration is not supported.\n * <pre>\n * MapIterator it = map.mapIterator();\n * while (it.hasNext()) {\n *   Object key = it.next();\n *   Object value = it.getValue();\n *   it.setValue(newValue);\n * }\n * </pre>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,public ,,org.apache.commons.collections4.MapIterator;org.apache.commons.collections4.ResettableIterator
org.apache.commons.collections4.iterators.PushbackIterator,Class,"* Decorates an iterator to support pushback of elements.\n * <p>\n * The decorator stores the pushed back elements in a LIFO manner: the last element\n * that has been pushed back, will be returned as the next element in a call to {@link #next()}.\n * </p>\n * <p>\n * The decorator does not support the removal operation. Any call to {@link #remove()} will\n * result in an {@link UnsupportedOperationException}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 4.0",public ,,java.util.Iterator
org.apache.commons.collections4.iterators.FilterIterator,Class,"* Decorates an {@link Iterator} using an optional predicate to filter elements.\n * <p>\n * This iterator decorates the underlying iterator, only allowing through\n * those elements that match the specified {@link Predicate Predicate}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 1.0",public ,,org.apache.commons.collections4.iterators.IteratorOperations
org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator,Abstract Class,* Provides basic behavior for decorating an iterator with extra functionality without committing the generic type of the Iterator implementation.\n * <p>\n * All methods are forwarded to the decorated iterator.\n * </p>\n *\n * @param <I> the type of the iterator being decorated.\n * @param <O> the type of elements returned by this iterator.\n * @since 4.0,"public , abstract ",,java.util.Iterator
org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator,Class,* Provides basic behavior for decorating an ordered map iterator with extra functionality.\n * <p>\n * All methods are forwarded to the decorated map iterator.\n * </p>\n *\n * @param <K> the type of keys\n * @param <V> the type of mapped values\n * @since 3.0,public ,,org.apache.commons.collections4.OrderedMapIterator
org.apache.commons.collections4.iterators.FilterListIterator,Class,"* Decorates another {@link ListIterator} using a predicate to filter elements.\n * <p>\n * This iterator decorates the underlying iterator, only allowing through\n * those elements that match the specified {@link Predicate Predicate}.\n * </p>\n *\n * @param <E> the type of elements returned by this iterator.\n * @since 2.0",public ,,java.util.ListIterator
org.apache.commons.collections4.SplitMapUtils,Class,"* Utilities for working with ""split maps:"" objects that implement {@link Put}\n * and/or {@link Get} but not {@link Map}.\n *\n * @since 4.0\n * @see Get\n * @see Put",public ,,
org.apache.commons.collections4.SplitMapUtils$WrappedGet,Class,No Comment,"private , static , final ",,org.apache.commons.collections4.IterableMap;org.apache.commons.collections4.Unmodifiable
org.apache.commons.collections4.SplitMapUtils$WrappedPut,Class,No Comment,"private , static , final ",,java.util.Map;org.apache.commons.collections4.Put
org.apache.commons.collections4.BoundedMap,Interface,"* Defines a map that is bounded in size.\n * <p>\n * The size of the map can vary, but it can never exceed a preset\n * maximum number of elements. This interface allows the querying of details\n * associated with the maximum number of elements.\n * </p>\n *\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n * @since 3.0",public ,org.apache.commons.collections4.IterableMap,
