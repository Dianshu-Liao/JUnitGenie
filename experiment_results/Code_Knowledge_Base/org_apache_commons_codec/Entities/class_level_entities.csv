FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
org.apache.commons.codec.CodecPolicy,Enum,* Defines encoding and decoding policies.\n *\n * @since 1.15,public ,enum has no extends,
org.apache.commons.codec.BinaryDecoder,Interface,* Defines common decoding methods for byte array decoders.,public ,org.apache.commons.codec.Decoder,
org.apache.commons.codec.DecoderException,Class,"* Thrown when there is a failure condition during the decoding process. This exception is thrown when a {@link Decoder}\n * encounters a decoding specific exception such as invalid data, or characters outside of the expected range.",public ,java.lang.Exception,
org.apache.commons.codec.net.Utils,Class,* Utility methods for this package.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @since 1.4,final ,,
org.apache.commons.codec.net.RFC1522Codec,Abstract Class,"* Implements methods common to all codecs defined in RFC 1522.\n * <p>\n * <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522</a> describes techniques to allow the\n * encoding of non-ASCII text in various portions of a RFC 822 [2] message header, in a manner which\n * is unlikely to confuse existing message handling software.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc1522.txt"">MIME (Multipurpose Internet Mail Extensions) Part Two:\n *          Message Header Extensions for Non-ASCII Text</a>\n * @since 1.3",abstract ,,
org.apache.commons.codec.net.QuotedPrintableCodec,Class,"* Codec for the Quoted-Printable section of <a href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC 1521</a>.\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n * <p>\n * Note:\n * </p>\n * <p>\n * Depending on the selected {@code strict} parameter, this class will implement a different set of rules of the\n * quoted-printable spec:\n * </p>\n * <ul>\n *   <li>{@code strict=false}: only rules #1 and #2 are implemented</li>\n *   <li>{@code strict=true}: all rules #1 through #5 are implemented</li>\n * </ul>\n * <p>\n * Originally, this class only supported the non-strict mode, but the codec in this partial form could already be used\n * for certain applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance\n * Q codec. The strict mode has been added in 1.10.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @since 1.3",public ,,org.apache.commons.codec.BinaryEncoder;org.apache.commons.codec.BinaryDecoder;org.apache.commons.codec.StringEncoder;org.apache.commons.codec.StringDecoder
org.apache.commons.codec.net.QCodec,Class,"* Similar to the Quoted-Printable content-transfer-encoding defined in\n * <a href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC 1521</a> and designed to allow text containing mostly ASCII\n * characters to be decipherable on an ASCII terminal without decoding.\n * <p>\n * <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522</a> describes techniques to allow the encoding of non-ASCII\n * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n * handling software.\n * </p>\n * <p>\n * This class is conditionally thread-safe.\n * The instance field for encoding blanks is mutable {@link #setEncodeBlanks(boolean)}\n * but is not volatile, and accesses are not synchronized.\n * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronization\n * is used to ensure safe publication of the value between threads, and must not invoke\n * {@link #setEncodeBlanks(boolean)} after initial setup.\n * </p>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc1522.txt"">MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n *          Header Extensions for Non-ASCII Text</a>\n *\n * @since 1.3",public ,org.apache.commons.codec.net.RFC1522Codec,org.apache.commons.codec.StringEncoder;org.apache.commons.codec.StringDecoder
org.apache.commons.codec.net.PercentCodec,Class,"* Implements the Percent-Encoding scheme, as described in HTTP 1.1 specification. For extensibility, an array of\n * special US-ASCII characters can be specified in order to perform proper URI encoding for the different parts\n * of the URI.\n * <p>\n * This class is immutable. It is also thread-safe besides using BitSet which is not thread-safe, but its public\n * interface only call the access\n * </p>\n *\n * @see <a href=""https://tools.ietf.org/html/rfc3986#section-2.1"">Percent-Encoding</a>\n * @since 1.12",public ,,org.apache.commons.codec.BinaryEncoder;org.apache.commons.codec.BinaryDecoder
org.apache.commons.codec.net.URLCodec,Class,"* Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.\n * <p>\n * This codec is meant to be a replacement for standard Java classes {@link java.net.URLEncoder} and\n * {@link java.net.URLDecoder} on older Java platforms, as these classes in Java versions below\n * 1.4 rely on the platform's default charset encoding.\n * </p>\n * <p>\n * This class is thread-safe as of 1.11\n * </p>\n *\n * @see <a href=""http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1"">Chapter 17.13.4 Form content types</a>\n *           of the <a href=""http://www.w3.org/TR/html4/"">HTML 4.01 Specification</a>\n *\n * @since 1.2",public ,,org.apache.commons.codec.BinaryEncoder;org.apache.commons.codec.BinaryDecoder;org.apache.commons.codec.StringEncoder;org.apache.commons.codec.StringDecoder
org.apache.commons.codec.net.BCodec,Class,"* Identical to the Base64 encoding defined by <a href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC 1521</a>\n * and allows a character set to be specified.\n * <p>\n * <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522</a> describes techniques to allow the encoding of non-ASCII\n * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n * handling software.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc1522.txt"">MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n *          Header Extensions for Non-ASCII Text</a>\n *\n * @since 1.3",public ,org.apache.commons.codec.net.RFC1522Codec,org.apache.commons.codec.StringEncoder;org.apache.commons.codec.StringDecoder
org.apache.commons.codec.Charsets,Class,"* Charsets required of every implementation of the Java platform.\n *\n * From the Java documentation <a href=""https://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard\n * charsets</a>:\n * <p>\n * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n * release documentation for your implementation to see if any other encodings are supported. Consult the release\n * documentation for your implementation to see if any other encodings are supported. </cite>\n * </p>\n *\n * <ul>\n * <li>{@code US-ASCII}<p>\n * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</p></li>\n * <li>{@code ISO-8859-1}<p>\n * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</p></li>\n * <li>{@code UTF-8}<p>\n * Eight-bit Unicode Transformation Format.</p></li>\n * <li>{@code UTF-16BE}<p>\n * Sixteen-bit Unicode Transformation Format, big-endian byte order.</p></li>\n * <li>{@code UTF-16LE}<p>\n * Sixteen-bit Unicode Transformation Format, little-endian byte order.</p></li>\n * <li>{@code UTF-16}<p>\n * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n * accepted on input, big-endian used on output.)</p></li>\n * </ul>\n *\n * This perhaps would best belong in the Commons Lang project. Even if a similar class is defined in Commons Lang, it is\n * not foreseen that Commons Codec would be made to depend on Commons Lang.\n *\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""https://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>\n * @since 1.7",public ,,
org.apache.commons.codec.Decoder,Interface,* Provides the highest level of abstraction for Decoders.\n * <p>\n * This is the sister interface of {@link Encoder}. All Decoders implement this common generic interface.\n * Allows a user to pass a generic Object to any Decoder implementation in the codec package.\n * </p>\n * <p>\n * One of the two interfaces at the center of the codec package.\n * </p>,public ,,
org.apache.commons.codec.digest.Md5Crypt,Class,"* The libc crypt() ""$1$"" and Apache ""$apr1$"" MD5-based hash algorithm.\n * <p>\n * Based on the public domain (""beer-ware"") C implementation from Poul-Henning Kamp which was found at: <a\n * href=""http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain"">\n * crypt-md5.c @ freebsd.org</a>\n * </p>\n * <p>\n * Source:\n * </p>\n * <pre>\n * $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $\n * </pre>\n * <p>\n * Conversion to Kotlin and from there to Java in 2012.\n * </p>\n * <p>\n * The C style comments are from the original C code, the ones with ""//"" from the port.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @since 1.7",public ,,
org.apache.commons.codec.digest.Crypt,Class,"* GNU libc crypt(3) compatible hash method.\n * <p>\n * See {@link #crypt(String, String)} for further details.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @since 1.7",public ,,
org.apache.commons.codec.digest.B64,Class,* Base64-like method to convert binary bytes into ASCII chars.\n * <p>\n * TODO: Can Base64 be reused?\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>,final ,,
org.apache.commons.codec.digest.PureJavaCrc32,Class,* A pure-Java implementation of the CRC32 checksum that uses\n * the same polynomial as the built-in native CRC32.\n * <p>\n * This is to avoid the JNI overhead for certain uses of checksumming\n * where many small pieces of data are checksummed in succession.\n * </p>\n * <p>\n * The current version is ~10x to 1.8x as fast as Sun's native\n * java.util.zip.CRC32 in Java 1.6\n * </p>\n * <p>\n * Copied from Apache Hadoop 2.6.3.\n * The code agrees with the following file in the 2.6.3 tag:\n * https://gitbox.apache.org/repos/asf?p=hadoop.git;a=blob_plain;\n * f=hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/PureJavaCrc32.java;\n * hb=2120de588b92b9f22b1cc4188761d6a8c61aa778\n * </p>\n * <p>\n * This class is Not ThreadSafe\n * </p>\n *\n * @see java.util.zip.CRC32\n * @since 1.11,public ,,java.util.zip.Checksum
org.apache.commons.codec.digest.HmacUtils,Class,"* Simplifies common {@link javax.crypto.Mac} tasks. This class is immutable and thread-safe.\n * However the Mac may not be.\n * <p>\n * <strong>Note: Not all JCE implementations support all algorithms. If not supported, an IllegalArgumentException is\n * thrown.</strong>\n * </p>\n * <p>\n * Sample usage:\n * </p>\n * <pre>\n * import static HmacAlgorithms.*;\n * byte[] key = {1,2,3,4}; // don't use this actual key!\n * String valueToDigest = ""The quick brown fox jumps over the lazy dog"";\n * byte[] hmac = new HmacUtils(HMAC_SHA_224, key).hmac(valueToDigest);\n * // Mac re-use\n * HmacUtils hm1 = new HmacUtils(""HmacAlgoName"", key); // use a valid name here!\n * String hexPom = hm1.hmacHex(new File(""pom.xml""));\n * String hexNot = hm1.hmacHex(new File(""NOTICE.txt""));\n * </pre>\n * @since 1.10","public , final ",,
org.apache.commons.codec.digest.UnixCrypt,Class,* Unix crypt(3) algorithm implementation.\n * <p>\n * This class only implements the traditional 56 bit DES based algorithm. Please use Crypt.crypt() for a method\n * that distinguishes between all the algorithms supported in the current glibc's crypt().\n * </p>\n * <p>\n * The Java implementation was taken from the JetSpeed Portal project (see\n * org.apache.jetspeed.services.security.ldap.UnixCrypt).\n * </p>\n * <p>\n * This class is slightly incompatible if the given salt contains characters that are not part of the allowed range\n * [a-zA-Z0-9./].\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @since 1.7,public ,,
org.apache.commons.codec.digest.Blake3,Class,"* Implements the Blake3 algorithm providing a {@linkplain #initHash() hash function} with extensible output (XOF), a\n * {@linkplain #initKeyedHash(byte[]) keyed hash function} (MAC, PRF), and a\n * {@linkplain #initKeyDerivationFunction(byte[]) key derivation function} (KDF). Blake3 has a 128-bit security level\n * and a default output length of 256 bits (32 bytes) which can extended up to 2<sup>64</sup> bytes.\n * <h2>Hashing</h2>\n * <p>Hash mode calculates the same output hash given the same input bytes and can be used as both a message digest and\n * and extensible output function.</p>\n * <pre>{@code\n *      Blake3 hasher = Blake3.initHash();\n *      hasher.update(""Hello, world!"".getBytes(StandardCharsets.UTF_8));\n *      byte[] hash = new byte[32];\n *      hasher.doFinalize(hash);\n * }</pre>\n * <h2>Keyed Hashing</h2>\n * <p>Keyed hashes take a 32-byte secret key and calculates a message authentication code on some input bytes. These\n * also work as pseudo-random functions (PRFs) with extensible output similar to the extensible hash output. Note that\n * Blake3 keyed hashes have the same performance as plain hashes; the key is used in initialization in place of a\n * standard initialization vector used for plain hashing.</p>\n * <pre>{@code\n *      SecureRandom random = SecureRandom.getInstanceStrong();\n *      byte[] key = new byte[32];\n *      random.nextBytes(key);\n *      Blake3 hasher = Blake3.initKeyedHash(key);\n *      hasher.update(""Hello, Alice!"".getBytes(StandardCharsets.UTF_8));\n *      byte[] mac = new byte[32];\n *      hasher.doFinalize(mac);\n * }</pre>\n * <h2>Key Derivation</h2>\n * <p>A specific hash mode for deriving session keys and other derived keys in a unique key derivation context\n * identified by some sequence of bytes. These context strings should be unique but do not need to be kept secret.\n * Additional input data is hashed for key material which can be finalized to derive subkeys.</p>\n * <pre>{@code\n *      String context = ""org.apache.commons.codec.digest.Blake3Example"";\n *      byte[] sharedSecret = ...;\n *      byte[] senderId = ...;\n *      byte[] recipientId = ...;\n *      Blake3 kdf = Blake3.initKeyDerivationFunction(context.getBytes(StandardCharsets.UTF_8));\n *      kdf.update(sharedSecret);\n *      kdf.update(senderId);\n *      kdf.update(recipientId);\n *      byte[] txKey = new byte[32];\n *      byte[] rxKey = new byte[32];\n *      kdf.doFinalize(txKey);\n *      kdf.doFinalize(rxKey);\n * }</pre>\n * <p>\n * Adapted from the ISC-licensed O(1) Cryptography library by Matt Sicker and ported from the reference public domain\n * implementation by Jack O'Connor.\n * </p>\n *\n * @see <a href=""https://github.com/BLAKE3-team/BLAKE3"">BLAKE3 hash function</a>\n * @since 1.16","public , final ",,
org.apache.commons.codec.digest.Blake3$ChunkState,Class,No Comment,"private , static , final ",,
org.apache.commons.codec.digest.Blake3$EngineState,Class,No Comment,"private , static , final ",,
org.apache.commons.codec.digest.Blake3$Output,Class,* Represents the state just prior to either producing an eight word chaining value or any number of output bytes\n     * when the ROOT flag is set.,"private , static , final ",,
org.apache.commons.codec.digest.MessageDigestAlgorithms,Class,"* Standard {@link MessageDigest} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm Name\n * Documentation</cite>.\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n * <ul>\n * <li>Java 8 and up: SHA-224.</li>\n * <li>Java 9 and up: SHA3-224, SHA3-256, SHA3-384, SHA3-512.</li>\n * </ul>\n *\n * @see <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest"">\n *      Java 8 Cryptography Architecture Standard Algorithm Name Documentation</a>\n * @see <a href=""https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#messagedigest-algorithms"">\n *      Java 11 Cryptography Architecture Standard Algorithm Name Documentation</a>\n * @see <a href=""https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#messagedigest-algorithms"">\n *      Java 17 Cryptography Architecture Standard Algorithm Name Documentation</a>\n * @see <a href=""https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#messagedigest-algorithms"">\n *      Java 21 Cryptography Architecture Standard Algorithm Name Documentation</a>\n *\n * @see <a href=""https://dx.doi.org/10.6028/NIST.FIPS.180-4"">FIPS PUB 180-4</a>\n * @see <a href=""https://dx.doi.org/10.6028/NIST.FIPS.202"">FIPS PUB 202</a>\n * @since 1.7",public ,,
org.apache.commons.codec.digest.MurmurHash3,Class,"* Implements the MurmurHash3 32-bit and 128-bit hash functions.\n *\n * <p>\n * MurmurHash is a non-cryptographic hash function suitable for general hash-based lookup. The name comes from two basic\n * operations, multiply (MU) and rotate (R), used in its inner loop. Unlike cryptographic hash functions, it is not\n * specifically designed to be difficult to reverse by an adversary, making it unsuitable for cryptographic purposes.\n * </p>\n *\n * <p>\n * This contains a Java port of the 32-bit hash function {@code MurmurHash3_x86_32} and the 128-bit hash function\n * {@code MurmurHash3_x64_128} from Austin Appleby's original {@code c++} code in SMHasher.\n * </p>\n *\n * <p>\n * This is public domain code with no copyrights. From home page of\n * <a href=""https://github.com/aappleby/smhasher"">SMHasher</a>:\n * </p>\n *\n * <blockquote> ""All MurmurHash versions are public domain software, and the author disclaims all copyright to their\n * code."" </blockquote>\n *\n * <p>\n * Original adaption from Apache Hive. That adaption contains a {@code hash64} method that is not part of the original\n * MurmurHash3 code. It is not recommended to use these methods. They will be removed in a future release. To obtain a\n * 64-bit hash use half of the bits from the {@code hash128x64} methods using the input data converted to bytes.\n * </p>\n *\n * @see <a href=""https://en.wikipedia.org/wiki/MurmurHash"">MurmurHash</a>\n * @see <a href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp""> Original MurmurHash3 c++\n *      code</a>\n * @see <a href=\n *      ""https://github.com/apache/hive/blob/master/storage-api/src/java/org/apache/hive/common/util/Murmur3.java"">\n *      Apache Hive Murmer3</a>\n * @since 1.13","public , final ",,
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32,Class,* Generates 32-bit hash from input bytes. Bytes can be added incrementally and the new\n     * hash computed.\n     *\n     * <p>This is an implementation of the 32-bit hash function {@code MurmurHash3_x86_32}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @deprecated Use IncrementalHash32x86. This corrects the processing of trailing bytes.,"public , static ",org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86,
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86,Class,* Generates 32-bit hash from input bytes. Bytes can be added incrementally and the new\n     * hash computed.\n     *\n     * <p>This is an implementation of the 32-bit hash function {@code MurmurHash3_x86_32}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * @since 1.14,"public , static ",,
org.apache.commons.codec.digest.DigestUtils,Class,"* Operations to simplify common {@link java.security.MessageDigest} tasks. This class is immutable and thread-safe. However the MessageDigest instances it\n * creates generally won't be.\n * <p>\n * The {@link MessageDigestAlgorithms} class provides constants for standard digest algorithms that can be used with the {@link #getDigest(String)} method and\n * other methods that require the Digest algorithm name.\n * </p>\n * <p>\n * Note: The class has shorthand methods for all the algorithms present as standard in Java 6. This approach requires lots of methods for each algorithm, and\n * quickly becomes unwieldy. The following code works with all algorithms:\n * </p>\n *\n * <pre>\n * import static org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_224;\n * ...\n * byte [] digest = new DigestUtils(SHA_224).digest(dataToDigest);\n * String hdigest = new DigestUtils(SHA_224).digestAsHex(new File(""pom.xml""));\n * </pre>\n *\n * @see MessageDigestAlgorithms",public ,,
org.apache.commons.codec.digest.MurmurHash2,Class,"* Implements the MurmurHash2 32-bit and 64-bit hash functions.\n *\n * <p>MurmurHash is a non-cryptographic hash function suitable for general\n * hash-based lookup. The name comes from two basic operations, multiply (MU)\n * and rotate (R), used in its inner loop. Unlike cryptographic hash functions,\n * it is not specifically designed to be difficult to reverse by an adversary,\n * making it unsuitable for cryptographic purposes.</p>\n *\n * <p>This contains a Java port of the 32-bit hash function {@code MurmurHash2}\n * and the 64-bit hash function {@code MurmurHash64A} from Austin Appleby's\n * original {@code c++} code in SMHasher.</p>\n *\n * <p>This is a re-implementation of the original C code plus some additional\n * features.</p>\n *\n * <p>This is public domain code with no copyrights. From home page of\n * <a href=""https://github.com/aappleby/smhasher"">SMHasher</a>:</p>\n *\n * <blockquote>\n * ""All MurmurHash versions are public domain software, and the author\n * disclaims all copyright to their code.""\n * </blockquote>\n *\n * @see <a href=""https://en.wikipedia.org/wiki/MurmurHash"">MurmurHash</a>\n * @see <a href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash2.cpp"">\n *   Original MurmurHash2 c++ code</a>\n * @since 1.13","public , final ",,
org.apache.commons.codec.digest.PureJavaCrc32C,Class,"* A pure-Java implementation of the CRC32 checksum that uses the CRC32-C polynomial, the same polynomial used by iSCSI and implemented on many Intel chipsets\n * supporting SSE 4.2.\n *\n * <p>\n * Copied from Apache Hadoop 2.3.6: https://gitbox.apache.org/repos/asf?p=hadoop.git;a=blob_plain;\n * f=hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/PureJavaCrc32C.java; hb=2120de588b92b9f22b1cc4188761d6a8c61aa778\n * </p>\n * <p>\n * This class is Not ThreadSafe\n * </p>\n *\n * @since 1.11",public ,,java.util.zip.Checksum
org.apache.commons.codec.digest.HmacAlgorithms,Enum,"* Standard {@link HmacUtils} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm Name\n * Documentation</cite>.\n *\n * <p>\n * <strong>Note: Not all JCE implementations support all the algorithms in this enum.</strong>\n * </p>\n *\n * @see <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider""> Java\n *      8 Cryptography Architecture Sun Providers Documentation</a>\n * @see <a href=\n *      ""https://docs.oracle.com/en/java/javase/11/security/oracle-providers.html#GUID-A47B1249-593C-4C38-A0D0-68FA7681E0A7"">\n *      Java 11 Cryptography Architecture Sun Providers Documentation</a>\n * @see <a href=\n *      ""https://docs.oracle.com/en/java/javase/17/security/oracle-providers.html#GUID-A47B1249-593C-4C38-A0D0-68FA7681E0A7"">\n *      Java 17 Cryptography Architecture Sun Providers Documentation</a>\n *\n * @since 1.10",public ,enum has no extends,
org.apache.commons.codec.digest.Sha2Crypt,Class,* SHA2-based Unix crypt implementation.\n * <p>\n * Based on the C implementation released into the Public Domain by Ulrich Drepper &lt;drepper@redhat.com&gt;\n * http://www.akkadia.org/drepper/SHA-crypt.txt\n * </p>\n * <p>\n * Conversion to Kotlin and from there to Java in 2012 by Christian Hammers &lt;ch@lathspell.de&gt; and likewise put\n * into the Public Domain.\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @since 1.7,public ,,
org.apache.commons.codec.digest.XXHash32,Class,"* Implements the xxHash32 hash algorithm.\n *\n * <p>\n * Copied from Commons Compress 1.14 <a href=\n * ""https://gitbox.apache.org/repos/asf?p=commons-compress.git;a=blob;f=src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java;h=a406ffc197449be594d46f0d2712b2d4786a1e68;hb=HEAD"">https://gitbox.apache.org/repos/asf?p=commons-compress.git;a=blob;f=src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java;h=a406ffc197449be594d46f0d2712b2d4786a1e68;hb=HEAD</a>\n * </p>\n * <p>\n * NotThreadSafe\n * </p>\n *\n * @see <a href=""https://cyan4973.github.io/xxHash/"">xxHash</a>\n * @since 1.11",public ,,java.util.zip.Checksum
org.apache.commons.codec.EncoderException,Class,"* Thrown when there is a failure condition during the encoding process. This exception is thrown when an\n * {@link Encoder} encounters an encoding specific exception such as invalid data, inability to calculate a checksum,\n * characters outside of the expected range.",public ,java.lang.Exception,
org.apache.commons.codec.StringDecoder,Interface,* Defines common decoding methods for String decoders.,public ,org.apache.commons.codec.Decoder,
org.apache.commons.codec.language.ColognePhonetic,Class,"* Encodes a string into a Cologne Phonetic value.\n * <p>\n * Implements the <a href=""https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik"">K&ouml;lner Phonetik</a> (Cologne\n * Phonetic) algorithm issued by Hans Joachim Postel in 1969.\n * </p>\n * <p>\n * The <em>K&ouml;lner Phonetik</em> is a phonetic algorithm which is optimized for the German language. It is related to\n * the well-known soundex algorithm.\n * </p>\n *\n * <h2>Algorithm</h2>\n *\n * <ul>\n *\n * <li>\n * <h3>Step 1:</h3>\n * After preprocessing (conversion to upper case, transcription of <a\n * href=""https://en.wikipedia.org/wiki/Germanic_umlaut"">germanic umlauts</a>, removal of non alphabetical characters) the\n * letters of the supplied text are replaced by their phonetic code according to the following table.\n * <table border=""1"">\n * <caption style=""caption-side: bottom""><small><i>(Source: <a\n * href=""https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik#Buchstabencodes"">Wikipedia (de): K&ouml;lner Phonetik --\n * Buchstabencodes</a>)</i></small></caption> <tbody>\n * <tr>\n * <th>Letter</th>\n * <th>Context</th>\n * <th>Code</th>\n * </tr>\n * <tr>\n * <td>A, E, I, J, O, U, Y</td>\n * <td></td>\n * <td>0</td>\n * </tr>\n * <tr>\n *\n * <td>H</td>\n * <td></td>\n * <td>-</td>\n * </tr>\n * <tr>\n * <td>B</td>\n * <td></td>\n * <td rowspan=""2"">1</td>\n * </tr>\n * <tr>\n * <td>P</td>\n * <td>not before H</td>\n *\n * </tr>\n * <tr>\n * <td>D, T</td>\n * <td>not before C, S, Z</td>\n * <td>2</td>\n * </tr>\n * <tr>\n * <td>F, V, W</td>\n * <td></td>\n * <td rowspan=""2"">3</td>\n * </tr>\n * <tr>\n *\n * <td>P</td>\n * <td>before H</td>\n * </tr>\n * <tr>\n * <td>G, K, Q</td>\n * <td></td>\n * <td rowspan=""3"">4</td>\n * </tr>\n * <tr>\n * <td rowspan=""2"">C</td>\n * <td>at onset before A, H, K, L, O, Q, R, U, X</td>\n *\n * </tr>\n * <tr>\n * <td>before A, H, K, O, Q, U, X except after S, Z</td>\n * </tr>\n * <tr>\n * <td>X</td>\n * <td>not after C, K, Q</td>\n * <td>48</td>\n * </tr>\n * <tr>\n * <td>L</td>\n * <td></td>\n *\n * <td>5</td>\n * </tr>\n * <tr>\n * <td>M, N</td>\n * <td></td>\n * <td>6</td>\n * </tr>\n * <tr>\n * <td>R</td>\n * <td></td>\n * <td>7</td>\n * </tr>\n *\n * <tr>\n * <td>S, Z</td>\n * <td></td>\n * <td rowspan=""6"">8</td>\n * </tr>\n * <tr>\n * <td rowspan=""3"">C</td>\n * <td>after S, Z</td>\n * </tr>\n * <tr>\n * <td>at onset except before A, H, K, L, O, Q, R, U, X</td>\n * </tr>\n *\n * <tr>\n * <td>not before A, H, K, O, Q, U, X</td>\n * </tr>\n * <tr>\n * <td>D, T</td>\n * <td>before C, S, Z</td>\n * </tr>\n * <tr>\n * <td>X</td>\n * <td>after C, K, Q</td>\n * </tr>\n * </tbody>\n * </table>\n *\n * <h4>Example:</h4>\n *\n * {@code ""M}&uuml;{@code ller-L}&uuml;<code>denscheidt""\n * =&gt; ""MULLERLUDENSCHEIDT"" =&gt; ""6005507500206880022""</code>\n *\n * </li>\n *\n * <li>\n * <h3>Step 2:</h3>\n * Collapse of all multiple consecutive code digits.\n * <h4>Example:</h4>\n * {@code ""6005507500206880022"" =&gt; ""6050750206802""}</li>\n *\n * <li>\n * <h3>Step 3:</h3>\n * Removal of all codes ""0"" except at the beginning. This means that two or more identical consecutive digits can occur\n * if they occur after removing the ""0"" digits.\n *\n * <h4>Example:</h4>\n * {@code ""6050750206802"" =&gt; ""65752682""}</li>\n *\n * </ul>\n *\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see <a href=""https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik"">Wikipedia (de): K&ouml;lner Phonetik (in German)</a>\n * @since 1.5",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer,Class,No Comment,"private , final ",org.apache.commons.codec.language.ColognePhonetic.CologneBuffer,
org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer,Class,No Comment,"private , final ",org.apache.commons.codec.language.ColognePhonetic.CologneBuffer,
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer,Abstract Class,"* This class is not thread-safe; the field {@link #length} is mutable.\n     * However, it is not shared between threads, as it is constructed on demand\n     * by the method {@link ColognePhonetic#colognePhonetic(String)}","abstract , static ",,
org.apache.commons.codec.language.RefinedSoundex,Class,* Encodes a string into a Refined Soundex value. A refined soundex code is\n * optimized for spell checking words. Soundex method originally developed by\n * <CITE>Margaret Odell</CITE> and <CITE>Robert Russell</CITE>.\n *\n * <p>This class is immutable and thread-safe.</p>,public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.AbstractCaverphone,Abstract Class,"* Encodes a string into a Caverphone value.\n *\n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n * algorithm:\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see <a href=""https://en.wikipedia.org/wiki/Caverphone"">Wikipedia - Caverphone</a>\n * @since 1.5","public , abstract ",,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.Metaphone,Class,"* Encodes a string into a Metaphone value.\n * <p>\n * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>.\n * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n * </p>\n * <p>\n * <CITE>Hanging on the Metaphone</CITE> by <CITE>Lawrence Philips</CITE> in <CITE>Computer Language of Dec. 1990,\n * p 39.</CITE>\n * </p>\n * <p>\n * Note, that this does not match the algorithm that ships with PHP, or the algorithm found in the Perl implementations:\n * </p>\n * <ul>\n * <li><a href=""https://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm"">Text:Metaphone-1.96</a>\n *  (broken link 4/30/2013) </li>\n * <li><a href=""https://metacpan.org/source/MSCHWERN/Text-Metaphone-1.96//Metaphone.pm"">Text:Metaphone-1.96</a>\n *  (link checked 4/30/2013) </li>\n * </ul>\n * <p>\n * They have had undocumented changes from the originally published algorithm.\n * For more information, see <a href=""https://issues.apache.org/jira/browse/CODEC-57"">CODEC-57</a>.\n * </p>\n * <p>\n * This class is conditionally thread-safe.\n * The instance field for maximum code length is mutable {@link #setMaxCodeLen(int)}\n * but is not volatile, and accesses are not synchronized.\n * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronization\n * is used to ensure safe publication of the value between threads, and must not invoke {@link #setMaxCodeLen(int)}\n * after initial setup.\n * </p>",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.DoubleMetaphone,Class,"* Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n * Philips</CITE>.\n * <p>\n * This class is conditionally thread-safe. The instance field for the maximum code length is mutable\n * {@link #setMaxCodeLen(int)} but is not volatile, and accesses are not synchronized. If an instance of the class is\n * shared between threads, the caller needs to ensure that suitable synchronization is used to ensure safe publication\n * of the value between threads, and must not invoke {@link #setMaxCodeLen(int)} after initial setup.\n * </p>\n *\n * @see <a href=""https://drdobbs.com/the-double-metaphone-search-algorithm/184401251?pgno=2"">Dr. Dobbs Original Article</a>\n * @see <a href=""https://en.wikipedia.org/wiki/Metaphone"">Wikipedia Metaphone</a>",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,Class,"* Stores results, since there is the optional alternate encoding.",public ,,
org.apache.commons.codec.language.Caverphone2,Class,"* Encodes a string into a Caverphone 2.0 value.\n *\n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n * algorithm:\n *\n * @see <a href=""https://en.wikipedia.org/wiki/Caverphone"">Wikipedia - Caverphone</a>\n * @see <a href=""https://caversham.otago.ac.nz/files/working/ctp150804.pdf"">Caverphone 2.0 specification</a>\n * @since 1.5\n *\n * <p>This class is immutable and thread-safe.</p>",public ,org.apache.commons.codec.language.AbstractCaverphone,
org.apache.commons.codec.language.bm.Lang,Class,"* Language guessing utility.\n * <p>\n * This class encapsulates rules used to guess the possible languages that a word originates from. This is\n * done by reference to a whole series of rules distributed in resource files.\n * </p>\n * <p>\n * Instances of this class are typically managed through the static factory method instance().\n * Unless you are developing your own language guessing rules, you will not need to interact with this class directly.\n * </p>\n * <p>\n * This class is intended to be immutable and thread-safe.\n * </p>\n * <h2>Lang resources</h2>\n * <p>\n * Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files.\n * They are systematically named following the pattern:\n * </p>\n * <blockquote>org/apache/commons/codec/language/bm/lang.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * </p>\n * <ul>\n * <li><strong>Rules:</strong> whitespace separated strings.\n * There should be 3 columns to each row, and these will be interpreted as:\n * <ol>\n * <li>pattern: a regular expression.</li>\n * <li>languages: a '+'-separated list of languages.</li>\n * <li>acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.</li>\n * </ol>\n * </li>\n * <li><strong>End-of-line comments:</strong> Any occurrence of '//' will cause all text following on that line to be\n * discarded as a comment.</li>\n * <li><strong>Multi-line comments:</strong> Any line starting with '/*' will start multi-line commenting mode.\n * This will skip all content until a line ending in '*' and '/' is found.</li>\n * <li><strong>Blank lines:</strong> All blank lines will be skipped.</li>\n * </ul>\n * <p>\n * Port of lang.php\n * </p>\n *\n * @since 1.6",public ,,
org.apache.commons.codec.language.bm.Lang$LangRule,Class,No Comment,"private , static , final ",,
org.apache.commons.codec.language.bm.ResourceConstants,Class,* Constants used to process resource files.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @since 1.6,final ,,
org.apache.commons.codec.language.bm.NameType,Enum,"* Supported types of names. Unless you are matching particular family names, use {@link #GENERIC}. The\n * {@code GENERIC} NameType should work reasonably well for non-name words. The other encodings are\n * specifically tuned to family names, and may not work well at all for general text.\n *\n * @since 1.6",public ,enum has no extends,
org.apache.commons.codec.language.bm.BeiderMorseEncoder,Class,"* Encodes strings into their Beider-Morse phonetic encoding.\n * <p>\n * Beider-Morse phonetic encodings are optimized for family names. However, they may be useful for a wide range of\n * words.\n * </p>\n * <p>\n * This encoder is intentionally mutable to allow dynamic configuration through bean properties. As such, it is mutable,\n * and may not be thread-safe. If you require a guaranteed thread-safe encoding then use {@link PhoneticEngine}\n * directly.\n * </p>\n * <h2>Encoding overview</h2>\n * <p>\n * Beider-Morse phonetic encodings is a multi-step process. Firstly, a table of rules is consulted to guess what\n * language the word comes from. For example, if it ends in ""{@code ault}"" then it infers that the word is French.\n * Next, the word is translated into a phonetic representation using a language-specific phonetics table. Some runs of\n * letters can be pronounced in multiple ways, and a single run of letters may be potentially broken up into phonemes at\n * different places, so this stage results in a set of possible language-specific phonetic representations. Lastly, this\n * language-specific phonetic representation is processed by a table of rules that re-writes it phonetically taking into\n * account systematic pronunciation differences between languages, to move it towards a pan-indo-european phonetic\n * representation. Again, sometimes there are multiple ways this could be done and sometimes things that can be\n * pronounced in several ways in the source language have only one way to represent them in this average phonetic\n * language, so the result is again a set of phonetic spellings.\n * </p>\n * <p>\n * Some names are treated as having multiple parts. This can be due to two things. Firstly, they may be hyphenated. In\n * this case, each individual hyphenated word is encoded, and then these are combined end-to-end for the final encoding.\n * Secondly, some names have standard prefixes, for example, ""{@code Mac/Mc}"" in Scottish (English) names. As\n * sometimes it is ambiguous whether the prefix is intended or is an accident of the spelling, the word is encoded once\n * with the prefix and once without it. The resulting encoding contains one and then the other result.\n * </p>\n * <h2>Encoding format</h2>\n * <p>\n * Individual phonetic spellings of an input word are represented in upper- and lower-case roman characters. Where there\n * are multiple possible phonetic representations, these are joined with a pipe ({@code |}) character. If multiple\n * hyphenated words where found, or if the word may contain a name prefix, each encoded word is placed in ellipses and\n * these blocks are then joined with hyphens. For example, ""{@code d'ortley}"" has a possible prefix. The form\n * without prefix encodes to ""{@code ortlaj|ortlej}"", while the form with prefix encodes to ""\n * {@code dortlaj|dortlej}"". Thus, the full, combined encoding is ""{@code (ortlaj|ortlej)-(dortlaj|dortlej)}"".\n * </p>\n * <p>\n * The encoded forms are often quite a bit longer than the input strings. This is because a single input may have many\n * potential phonetic interpretations. For example, ""{@code Renault}"" encodes to ""\n * {@code rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult}"". The {@code APPROX} rules will tend to produce larger\n * encodings as they consider a wider range of possible, approximate phonetic interpretations of the original word.\n * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by\n * splitting on pipe ({@code |}) and indexing under each of these alternatives.\n * </p>\n * <p>\n * <strong>Note</strong>: this version of the Beider-Morse encoding is equivalent with v3.4 of the reference implementation.\n * </p>\n * @see <a href=""https://stevemorse.org/phonetics/bmpm.htm"">Beider-Morse Phonetic Matching</a>\n * @see <a href=""https://stevemorse.org/phoneticinfo.htm"">Reference implementation</a>\n *\n * <p>\n * This class is Not ThreadSafe.\n * </p>\n * @since 1.6",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.bm.PhoneticEngine,Class,"* Converts words into potential phonetic representations.\n * <p>\n * This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes\n * into account the likely source language. Next, this phonetic representation is converted into a\n * pan-European 'average' representation, allowing comparison between different versions of essentially\n * the same word from different languages.\n * </p>\n * <p>\n * This class is intentionally immutable and thread-safe.\n * If you wish to alter the settings for a PhoneticEngine, you\n * must make a new one with the updated settings.\n * </p>\n * <p>\n * Ported from phoneticengine.php\n * </p>\n *\n * @since 1.6",public ,,
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,Class,"* Utility for manipulating a set of phonemes as they are being built up. Not intended for use outside\n     * this package, and probably not outside the {@link PhoneticEngine} class.\n     *\n     * @since 1.6","static , final ",,
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication,Class,"* A function closure capturing the application of a list of rules to an input sequence at a particular offset.\n     * After invocation, the values {@code i} and {@code found} are updated. {@code i} points to the\n     * index of the next char in {@code input} that must be processed next (the input up to that index having been\n     * processed already), and {@code found} indicates if a matching rule was found or not. In the case where a\n     * matching rule was found, {@code phonemeBuilder} is replaced with a new builder containing the phonemes\n     * updated by the matching rule.\n     * <p>\n     * Although this class is not thread-safe (it has mutable unprotected fields), it is not shared between threads\n     * as it is constructed as needed by the calling methods.\n     * </p>\n     *\n     * @since 1.6","private , static , final ",,
org.apache.commons.codec.language.bm.Languages,Class,* Language codes.\n * <p>\n * Language codes are typically loaded from resource files. These are UTF-8\n * encoded text files. They are systematically named following the pattern:\n * </p>\n * <blockquote>org/apache/commons/codec/language/bm/${{@link NameType#getName()}\n * languages.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * </p>\n * <ul>\n * <li><strong>Language:</strong> a single string containing no whitespace</li>\n * <li><strong>End-of-line comments:</strong> Any occurrence of '//' will cause all text\n * following on that line to be discarded as a comment.</li>\n * <li><strong>Multi-line comments:</strong> Any line starting with '/*' will start\n * multi-line commenting mode. This will skip all content until a line ending in\n * '*' and '/' is found.</li>\n * <li><strong>Blank lines:</strong> All blank lines will be skipped.</li>\n * </ul>\n * <p>\n * Ported from language.php\n * </p>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @since 1.6,public ,,
org.apache.commons.codec.language.bm.Languages$SomeLanguages,Class,"* Some languages, explicitly enumerated.","public , static , final ",org.apache.commons.codec.language.bm.Languages.LanguageSet,
org.apache.commons.codec.language.bm.Languages$LanguageSet,Abstract Class,* A set of languages.,"public , abstract , static ",,
org.apache.commons.codec.language.bm.Rule,Class,"* A phoneme rule.\n * <p>\n * Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply\n * and a logical flag indicating if all languages must be in play. A rule matches if:\n * </p>\n * <ul>\n * <li>the pattern matches at the current position</li>\n * <li>the string up until the beginning of the pattern matches the left context</li>\n * <li>the string from the end of the pattern matches the right context</li>\n * <li>logical is ALL and all languages are in scope; or</li>\n * <li>logical is any other value and at least one language is in scope</li>\n * </ul>\n * <p>\n * Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user\n * to explicitly construct their own.\n * </p>\n * <p>\n * Rules are immutable and thread-safe.\n * </p>\n * <h2>Rules resources</h2>\n * <p>\n * Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically\n * named following the pattern:\n * </p>\n * <blockquote>/org/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * </p>\n * <ul>\n * <li><strong>Rules:</strong> whitespace separated, double-quoted strings. There should be 4 columns to each row, and these\n * will be interpreted as:\n * <ol>\n * <li>pattern</li>\n * <li>left context</li>\n * <li>right context</li>\n * <li>phoneme</li>\n * </ol>\n * </li>\n * <li><strong>End-of-line comments:</strong> Any occurrence of '//' will cause all text following on that line to be discarded\n * as a comment.</li>\n * <li><strong>Multi-line comments:</strong> Any line starting with '/*' will start multi-line commenting mode. This will skip\n * all content until a line ending in '*' and '/' is found.</li>\n * <li><strong>Blank lines:</strong> All blank lines will be skipped.</li>\n * </ul>\n *\n * @since 1.6",public ,,
org.apache.commons.codec.language.bm.Rule$Phoneme,Class,* A phoneme.,"public , static , final ",,org.apache.commons.codec.language.bm.Rule.PhonemeExpr
org.apache.commons.codec.language.bm.Rule$PhonemeExpr,Interface,* A phoneme expression.,public ,,
org.apache.commons.codec.language.bm.Rule$PhonemeList,Class,* A list of phonemes.,"public , static , final ",,org.apache.commons.codec.language.bm.Rule.PhonemeExpr
org.apache.commons.codec.language.bm.Rule$RPattern,Interface,"* A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.",public ,,
org.apache.commons.codec.language.bm.RuleType,Enum,* Types of rule.\n *\n * @since 1.6,public ,enum has no extends,
org.apache.commons.codec.language.MatchRatingApproachEncoder,Class,"* Match Rating Approach Phonetic Algorithm Developed by <CITE>Western Airlines</CITE> in 1977.\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""https://en.wikipedia.org/wiki/Match_rating_approach"">Wikipedia - Match Rating Approach</a>\n * @since 1.8",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.Soundex,Class,"* Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * <p>This class is thread-safe.\n * Although not strictly immutable, the mutable fields are not actually used.</p>",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.DaitchMokotoffSoundex,Class,"* Encodes a string into a Daitch-Mokotoff Soundex value.\n * <p>\n * The Daitch-Mokotoff Soundex algorithm is a refinement of the Russel and American Soundex algorithms, yielding greater\n * accuracy in matching especially Slavish and Yiddish surnames with similar pronunciation but differences in spelling.\n * </p>\n * <p>\n * The main differences compared to the other soundex variants are:\n * </p>\n * <ul>\n * <li>coded names are 6 digits long\n * <li>the initial character of the name is coded\n * <li>rules to encoded multi-character n-grams\n * <li>multiple possible encodings for the same name (branching)\n * </ul>\n * <p>\n * This implementation supports branching, depending on the used method:\n * <ul>\n * <li>{@link #encode(String)} - branching disabled, only the first code will be returned\n * <li>{@link #soundex(String)} - branching enabled, all codes will be returned, separated by '|'\n * </ul>\n * <p>\n * Note: This implementation has additional branching rules compared to the original description of the algorithm. The\n * rules can be customized by overriding the default rules contained in the resource file\n * {@code org/apache/commons/codec/language/dmrules.txt}.\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see Soundex\n * @see <a href=""https://en.wikipedia.org/wiki/Daitch%E2%80%93Mokotoff_Soundex""> Wikipedia - Daitch-Mokotoff Soundex</a>\n * @see <a href=""http://www.avotaynu.com/soundex.htm"">Avotaynu - Soundexing and Genealogy</a>\n * @since 1.10",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch,Class,* Inner class representing a branch during DM soundex encoding.,"private , static , final ",,
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule,Class,* Inner class for storing rules.,"private , static , final ",,
org.apache.commons.codec.language.Nysiis,Class,"* Encodes a string into a NYSIIS value. NYSIIS is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n * <p>\n * NYSIIS features an accuracy increase of 2.7% over the traditional Soundex algorithm.\n * </p>\n * <p>\n * Algorithm description:\n * </p>\n * <pre>\n * 1. Transcode first characters of name\n *   1a. MAC -&gt;   MCC\n *   1b. KN  -&gt;   NN\n *   1c. K   -&gt;   C\n *   1d. PH  -&gt;   FF\n *   1e. PF  -&gt;   FF\n *   1f. SCH -&gt;   SSS\n * 2. Transcode last characters of name\n *   2a. EE, IE          -&gt;   Y\n *   2b. DT,RT,RD,NT,ND  -&gt;   D\n * 3. First character of key = first character of name\n * 4. Transcode remaining characters by following these rules, incrementing by one character each time\n *   4a. EV  -&gt;   AF  else A,E,I,O,U -&gt; A\n *   4b. Q   -&gt;   G\n *   4c. Z   -&gt;   S\n *   4d. M   -&gt;   N\n *   4e. KN  -&gt;   N   else K -&gt; C\n *   4f. SCH -&gt;   SSS\n *   4g. PH  -&gt;   FF\n *   4h. H   -&gt;   If previous or next is non-vowel, previous\n *   4i. W   -&gt;   If previous is vowel, previous\n *   4j. Add current to key if current != last key character\n * 5. If last character is S, remove it\n * 6. If last characters are AY, replace with Y\n * 7. If last character is A, remove it\n * 8. Collapse all strings of repeated characters\n * 9. Add original first character of name as first character of key\n * </pre>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see <a href=""https://en.wikipedia.org/wiki/NYSIIS"">NYSIIS on Wikipedia</a>\n * @see <a href=""http://www.dropby.com/NYSIIS.html"">NYSIIS on dropby.com</a>\n * @see Soundex\n * @since 1.7",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.Caverphone,Class,"* Encodes a string into a Caverphone 2.0 value. Delegate to a {@link Caverphone2} instance.\n *\n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n * algorithm:\n *\n * @see <a href=""https://en.wikipedia.org/wiki/Caverphone"">Wikipedia - Caverphone</a>\n * @see <a href=""https://caversham.otago.ac.nz/files/working/ctp150804.pdf"">Caverphone 2.0 specification</a>\n * @since 1.4\n * @deprecated 1.5 Replaced by {@link Caverphone2}, will be removed in 2.0.",public ,,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.language.Caverphone1,Class,"* Encodes a string into a Caverphone 1.0 value.\n *\n * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 1.0\n * algorithm:\n *\n * @see <a href=""https://en.wikipedia.org/wiki/Caverphone"">Wikipedia - Caverphone</a>\n * @see <a href=""https://caversham.otago.ac.nz/files/working/ctp060902.pdf"">Caverphone 1.0 specification</a>\n * @since 1.5\n *\n * <p>This class is immutable and thread-safe.</p>",public ,org.apache.commons.codec.language.AbstractCaverphone,
org.apache.commons.codec.language.SoundexUtils,Class,* Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @since 1.3,final ,,
org.apache.commons.codec.cli.Digest,Class,"* A minimal command line to run digest over files, directories or a string.\n *\n * @see #main(String[])\n * @since 1.11",public ,,
org.apache.commons.codec.Resources,Class,* Consider this class package private. Helps load resources.\n *\n * @since 1.12,public ,,
org.apache.commons.codec.CharEncoding,Class,"* Character encoding names required of every implementation of the Java platform.\n *\n * From the Java documentation for {@link Charset}:\n * <p>\n * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n * release documentation for your implementation to see if any other encodings are supported. Consult the release\n * documentation for your implementation to see if any other encodings are supported.</cite>\n * </p>\n *\n * <ul>\n * <li>{@code US-ASCII}<p>\n * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</p></li>\n * <li>{@code ISO-8859-1}<p>\n * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</p></li>\n * <li>{@code UTF-8}<p>\n * Eight-bit Unicode Transformation Format.</p></li>\n * <li>{@code UTF-16BE}<p>\n * Sixteen-bit Unicode Transformation Format, big-endian byte order.</p></li>\n * <li>{@code UTF-16LE}<p>\n * Sixteen-bit Unicode Transformation Format, little-endian byte order.</p></li>\n * <li>{@code UTF-16}<p>\n * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n * accepted on input, big-endian used on output.)</p></li>\n * </ul>\n *\n * This perhaps would best belong in the [lang] project. Even if a similar interface is defined in [lang], it is not\n * foreseen that [codec] would be made to depend on [lang].\n *\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @see Charset\n * @since 1.4",public ,,
org.apache.commons.codec.BinaryEncoder,Interface,* Defines common encoding methods for byte array encoders.,public ,org.apache.commons.codec.Encoder,
org.apache.commons.codec.StringEncoderComparator,Class,"* Compares Strings using a {@link StringEncoder}. This comparator is used to sort Strings by an encoding scheme such as\n * Soundex, Metaphone, etc. This class can come in handy if one need to sort Strings by an encoded form of a name such\n * as Soundex.\n *\n * <p>This class is immutable and thread-safe.</p>",public ,,java.util.Comparator
org.apache.commons.codec.binary.Base64OutputStream,Class,"* Provides Base64 encoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behavior of the Base64OutputStream is to ENCODE, whereas the default behavior of the Base64InputStream\n * is to DECODE. But this behavior can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * <p>\n * <strong>Note:</strong> It is mandatory to close the stream after the last byte has been written to it, otherwise the\n * final padding will be omitted and the resulting data will be incomplete/inconsistent.\n * </p>\n * <p>\n * You can set the decoding behavior when the input bytes contain leftover trailing bits that cannot be created by a\n * valid encoding. These can be bits that are unused from the final character or entire characters. The default mode is\n * lenient decoding.\n * </p>\n * <ul>\n * <li>Lenient: Any trailing bits are composed into 8-bit bytes where possible. The remainder are discarded.\n * <li>Strict: The decoding will raise an {@link IllegalArgumentException} if trailing bits are not part of a valid\n * encoding. Any unused bits from the final character must be zero. Impossible counts of entire final characters are not\n * allowed.\n * </ul>\n * <p>\n * When strict decoding is enabled it is expected that the decoded bytes will be re-encoded to a byte array that matches\n * the original, i.e. no changes occur on the final character. This requires that the input bytes use the same padding\n * and alphabet as the encoder.\n * </p>\n * @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>\n * @since 1.4",public ,org.apache.commons.codec.binary.BaseNCodecOutputStream,
org.apache.commons.codec.binary.Base32,Class,"* Provides Base32 encoding and decoding as defined by <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>.\n *\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>Whether to use the ""base32hex"" variant instead of the default ""base32""</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n * <li>Line separator: Default is CRLF (""\r\n"")</li>\n * </ul>\n * <p>\n * This class operates directly on byte streams, and not character streams.\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n * <p>\n * You can configure instances with the {@link Builder}.\n * </p>\n * <pre>\n * Base32 base32 = Base32.builder()\n *   .setDecodingPolicy(DecodingPolicy.LENIENT) // default is lenient\n *   .setEncodeTable(customEncodeTable)\n *   .setLineLength(0)                          // default is none\n *   .setLineSeparator('\r', '\n')              // default is CR LF\n *   .setPadding('=')                           // default is =\n *   .get()\n * </pre>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>\n * @since 1.5",public ,org.apache.commons.codec.binary.BaseNCodec,
org.apache.commons.codec.binary.Base32$Builder,Class,* Builds {@link Base32} instances.\n     *\n     * @since 1.17.0,"public , static ",org.apache.commons.codec.binary.BaseNCodec.AbstractBuilder,
org.apache.commons.codec.binary.StringUtils,Class,* Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in standard {@link Charset}.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see Charset\n * @see StandardCharsets\n * @since 1.4,public ,,
org.apache.commons.codec.binary.Base64,Class,"* Provides Base64 encoding and decoding as defined by <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>.\n *\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (""\r\n"")</li>\n * </ul>\n * <p>\n * The URL-safe parameter is only applied to encode operations. Decoding seamlessly handles both modes.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only\n * encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,\n * UTF-8, etc).\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n * <p>\n * You can configure instances with the {@link Builder}.\n * </p>\n * <pre>\n * Base64 base64 = Base64.builder()\n *   .setDecodingPolicy(DecodingPolicy.LENIENT) // default is lenient, null resets to default\n *   .setEncodeTable(customEncodeTable)         // default is built in, null resets to default\n *   .setLineLength(0)                          // default is none\n *   .setLineSeparator('\r', '\n')              // default is CR LF, null resets to default\n *   .setPadding('=')                           // default is =\n *   .setUrlSafe(false)                         // default is false\n *   .get()\n * </pre>\n *\n * @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>\n * @since 1.0",public ,org.apache.commons.codec.binary.BaseNCodec,
org.apache.commons.codec.binary.Base64$Builder,Class,* Builds {@link Base64} instances.\n     *\n     * @since 1.17.0,"public , static ",org.apache.commons.codec.binary.BaseNCodec.AbstractBuilder,
org.apache.commons.codec.binary.BaseNCodec,Abstract Class,"* Abstract superclass for Base-N encoders and decoders.\n *\n * <p>\n * This class is thread-safe.\n * </p>\n * <p>\n * You can set the decoding behavior when the input bytes contain leftover trailing bits that cannot be created by a\n * valid encoding. These can be bits that are unused from the final character or entire characters. The default mode is\n * lenient decoding.\n * </p>\n * <ul>\n * <li>Lenient: Any trailing bits are composed into 8-bit bytes where possible. The remainder are discarded.\n * <li>Strict: The decoding will raise an {@link IllegalArgumentException} if trailing bits are not part of a valid\n * encoding. Any unused bits from the final character must be zero. Impossible counts of entire final characters are not\n * allowed.\n * </ul>\n * <p>\n * When strict decoding is enabled it is expected that the decoded bytes will be re-encoded to a byte array that matches\n * the original, i.e. no changes occur on the final character. This requires that the input bytes use the same padding\n * and alphabet as the encoder.\n * </p>","public , abstract ",,org.apache.commons.codec.BinaryEncoder;org.apache.commons.codec.BinaryDecoder
org.apache.commons.codec.binary.BaseNCodec$Context,Class,* Holds thread context so classes can be thread-safe.\n     *\n     * This class is not itself thread-safe; each thread must allocate its own copy.,static ,,
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,Abstract Class,* Builds {@link Base64} instances.\n     *\n     * @param <T> the codec type to build.\n     * @param <B> the codec builder subtype.\n     * @since 1.17.0,"public , abstract , static ",,java.util.function.Supplier
org.apache.commons.codec.binary.Base16InputStream,Class,"* Provides Base16 decoding in a streaming fashion (unlimited size).\n * <p>\n * The default behavior of the Base16InputStream is to DECODE, whereas the default behavior of the\n * {@link Base16OutputStream} is to ENCODE, but this behavior can be overridden by using a different constructor.\n * </p>\n *\n * @since 1.15",public ,org.apache.commons.codec.binary.BaseNCodecInputStream,
org.apache.commons.codec.binary.Base32InputStream,Class,"* Provides Base32 decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behavior of the Base32InputStream is to DECODE, whereas the default behavior of the Base32OutputStream\n * is to ENCODE, but this behavior can be overridden by using a different constructor.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * <p>\n * You can set the decoding behavior when the input bytes contain leftover trailing bits that cannot be created by a\n * valid encoding. These can be bits that are unused from the final character or entire characters. The default mode is\n * lenient decoding.\n * </p>\n * <ul>\n * <li>Lenient: Any trailing bits are composed into 8-bit bytes where possible. The remainder are discarded.\n * <li>Strict: The decoding will raise an {@link IllegalArgumentException} if trailing bits are not part of a valid\n * encoding. Any unused bits from the final character must be zero. Impossible counts of entire final characters are not\n * allowed.\n * </ul>\n * <p>\n * When strict decoding is enabled it is expected that the decoded bytes will be re-encoded to a byte array that matches\n * the original, i.e. no changes occur on the final character. This requires that the input bytes use the same padding\n * and alphabet as the encoder.\n * </p>\n * @see <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>\n * @since 1.5",public ,org.apache.commons.codec.binary.BaseNCodecInputStream,
org.apache.commons.codec.binary.Hex,Class,"* Converts hexadecimal Strings. The Charset used for certain operation can be set, the default is set in\n * {@link #DEFAULT_CHARSET_NAME}\n *\n * This class is thread-safe.\n *\n * @since 1.1",public ,,org.apache.commons.codec.BinaryEncoder;org.apache.commons.codec.BinaryDecoder
org.apache.commons.codec.binary.BaseNCodecOutputStream,Class,"* Abstract superclass for Base-N output streams.\n * <p>\n * To write the EOF marker without closing the stream, call {@link #eof()} or use an <a\n * href=""https://commons.apache.org/proper/commons-io/"">Apache Commons IO</a> <a href=\n * ""https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/output/CloseShieldOutputStream.html""\n * >CloseShieldOutputStream</a>.\n * </p>\n *\n * @since 1.5",public ,java.io.FilterOutputStream,
org.apache.commons.codec.binary.Base64InputStream,Class,"* Provides Base64 decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behavior of the Base64InputStream is to DECODE, whereas the default behavior of the Base64OutputStream\n * is to ENCODE, but this behavior can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * <p>\n * You can set the decoding behavior when the input bytes contain leftover trailing bits that cannot be created by a\n * valid encoding. These can be bits that are unused from the final character or entire characters. The default mode is\n * lenient decoding.\n * </p>\n * <ul>\n * <li>Lenient: Any trailing bits are composed into 8-bit bytes where possible. The remainder are discarded.\n * <li>Strict: The decoding will raise an {@link IllegalArgumentException} if trailing bits are not part of a valid\n * encoding. Any unused bits from the final character must be zero. Impossible counts of entire final characters are not\n * allowed.\n * </ul>\n * <p>\n * When strict decoding is enabled it is expected that the decoded bytes will be re-encoded to a byte array that matches\n * the original, i.e. no changes occur on the final character. This requires that the input bytes use the same padding\n * and alphabet as the encoder.\n * </p>\n * @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>\n * @since 1.4",public ,org.apache.commons.codec.binary.BaseNCodecInputStream,
org.apache.commons.codec.binary.BinaryCodec,Class,"* Converts between byte arrays and strings of ""0""s and ""1""s.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * TODO: may want to add more bit vector functions like and/or/xor/nand\n * TODO: also might be good to generate boolean[] from byte[] et cetera.\n *\n * @since 1.3",public ,,org.apache.commons.codec.BinaryDecoder;org.apache.commons.codec.BinaryEncoder
org.apache.commons.codec.binary.Base16,Class,"* Provides Base32 encoding and decoding as defined by <a href=""https://tools.ietf.org/html/rfc4648#section-8"">RFC 4648 - 8. Base 16 Encoding</a>.\n *\n * <p>\n * This class is thread-safe.\n * </p>\n * <p>\n * This implementation strictly follows RFC 4648, and as such unlike the {@link Base32} and {@link Base64} implementations, it does not ignore invalid alphabet\n * characters or whitespace, neither does it offer chunking or padding characters.\n * </p>\n * <p>\n * The only additional feature above those specified in RFC 4648 is support for working with a lower-case alphabet in addition to the default upper-case\n * alphabet.\n * </p>\n *\n * @see <a href=""https://tools.ietf.org/html/rfc4648#section-8"">RFC 4648 - 8. Base 16 Encoding</a>\n * @since 1.15",public ,org.apache.commons.codec.binary.BaseNCodec,
org.apache.commons.codec.binary.CharSequenceUtils,Class,"* <p>\n * Operations on {@link CharSequence} that are {@code null} safe.\n * </p>\n * <p>\n * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).\n * </p>\n *\n * @see CharSequence\n * @since 1.10",public ,,
org.apache.commons.codec.binary.BaseNCodecInputStream,Class,* Abstract superclass for Base-N input streams.\n *\n * @since 1.5,public ,java.io.FilterInputStream,
org.apache.commons.codec.binary.Base32OutputStream,Class,"* Provides Base32 encoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behavior of the Base32OutputStream is to ENCODE, whereas the default behavior of the Base32InputStream\n * is to DECODE. But this behavior can be overridden by using a different constructor.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * <p>\n * <strong>Note:</strong> It is mandatory to close the stream after the last byte has been written to it, otherwise the\n * final padding will be omitted and the resulting data will be incomplete/inconsistent.\n * </p>\n * <p>\n * You can set the decoding behavior when the input bytes contain leftover trailing bits that cannot be created by a\n * valid encoding. These can be bits that are unused from the final character or entire characters. The default mode is\n * lenient decoding.\n * </p>\n * <ul>\n * <li>Lenient: Any trailing bits are composed into 8-bit bytes where possible. The remainder are discarded.\n * <li>Strict: The decoding will raise an {@link IllegalArgumentException} if trailing bits are not part of a valid\n * encoding. Any unused bits from the final character must be zero. Impossible counts of entire final characters are not\n * allowed.\n * </ul>\n * <p>\n * When strict decoding is enabled it is expected that the decoded bytes will be re-encoded to a byte array that matches\n * the original, i.e. no changes occur on the final character. This requires that the input bytes use the same padding\n * and alphabet as the encoder.\n * </p>\n * @see <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>\n * @since 1.5",public ,org.apache.commons.codec.binary.BaseNCodecOutputStream,
org.apache.commons.codec.binary.Base16OutputStream,Class,"* Provides Hex encoding in a streaming fashion (unlimited size).\n * <p>\n * The default behavior of the HexOutputStream is to ENCODE, whereas the default behavior of the\n * {@link Base16InputStream} is to DECODE. But this behavior can be overridden by using a different constructor.\n * </p>\n *\n * @since 1.15",public ,org.apache.commons.codec.binary.BaseNCodecOutputStream,
org.apache.commons.codec.Encoder,Interface,* Provides the highest level of abstraction for Encoders.\n * <p>\n * This is the sister interface of {@link Decoder}.  Every implementation of Encoder provides this\n * common generic interface which allows a user to pass a generic Object to any Encoder implementation\n * in the codec package.\n * </p>,public ,,
org.apache.commons.codec.StringEncoder,Interface,* Defines common encoding methods for String encoders.,public ,org.apache.commons.codec.Encoder,
