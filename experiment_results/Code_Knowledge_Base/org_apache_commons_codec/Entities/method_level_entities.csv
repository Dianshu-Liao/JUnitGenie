FEN:ID,:LABEL,Comment,Source Code,Signature,CFG,Modifiers
org.apache.commons.codec.BinaryDecoder.decode(byte[]),Abstract Method,* Decodes a byte array and returns the results as a byte array.\n     *\n     * @param source\n     *            A byte array which has been encoded with the appropriate encoder\n     * @return a byte array that contains decoded content\n     * @throws DecoderException\n     *             A decoder exception is thrown if a Decoder encounters a failure condition during the decode process.,byte[] decode(byte[] source) throws DecoderException;,byte[] decode(byte[]),digraph cfg_decode {\n}\n,default
org.apache.commons.codec.DecoderException.<init>(),Constructor,"* Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n     * subsequently be initialized by a call to {@link #initCause}.\n     *\n     * @since 1.4",public DecoderException() {\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Exception: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.DecoderException""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.DecoderException.<init>(String),Constructor,"* Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n     * be initialized by a call to {@link #initCause}.\n     *\n     * @param message\n     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.",public DecoderException(final String message) {\n    super(message);\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""message := @parameter0: java.lang.String""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(message)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.DecoderException""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.DecoderException.<init>(String,Throwable)",Constructor,"* Constructs a new exception with the specified detail message and cause.\n     * <p>\n     * Note that the detail message associated with {@code cause} is not automatically incorporated into this\n     * exception's detail message.\n     * </p>\n     *\n     * @param message\n     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n     * @param cause\n     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n     * @since 1.4","public DecoderException(final String message, final Throwable cause) {\n    super(message, cause);\n}","void <init>(java.lang.String,java.lang.Throwable)","digraph cfg_init {\n	""1"" [label=""cause := @parameter1: java.lang.Throwable""];\n	""2"" [label=""message := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(message, cause)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.DecoderException""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.DecoderException.<init>(Throwable),Constructor,"* Constructs a new exception with the specified cause and a detail message of {@code (cause==null ?\n     * null : cause.toString())} (which typically contains the class and detail message of {@code cause}).\n     * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n     *\n     * @param cause\n     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n     * @since 1.4",public DecoderException(final Throwable cause) {\n    super(cause);\n},void <init>(java.lang.Throwable),"digraph cfg_init {\n	""1"" [label=""cause := @parameter0: java.lang.Throwable""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.Throwable)>(cause)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.DecoderException""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.Utils.digit16(byte),Method,"* Returns the numeric value of the character {@code b} in radix 16.\n     *\n     * @param b\n     *            The byte to be converted.\n     * @return The numeric value represented by the character in radix 16.\n     * @throws DecoderException\n     *             Thrown when the byte is not valid per {@link Character#digit(char,int)}","static int digit16(final byte b) throws DecoderException {\n    final int i = Character.digit((char) b, RADIX);\n    if (i == -1) {\n        throw new DecoderException(""Invalid URL encoding: not a valid digit (radix "" + RADIX + ""): "" + b);\n    }\n    return i;\n}",int digit16(byte),"digraph cfg_digit16 {\n	""1"" [label=""$stack2 = (char) b""];\n	""2"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid URL encoding: not a valid digit (radix 16): \"")""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b)""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack7 = new org.apache.commons.codec.DecoderException""];\n	""7"" [label=""b := @parameter0: byte""];\n	""8"" [label=""i = staticinvoke <java.lang.Character: int digit(char,int)>($stack2, 16)""];\n	""9"" [label=""if i != -1""];\n	""10"" [label=""return i""];\n	""11"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""12"" [label=""specialinvoke $stack7.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack6)""];\n	""13"" [label=""throw $stack7""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_true""];\n	""9"" -> ""6""[label=""cfg_false""];\n}\n",static 
org.apache.commons.codec.net.Utils.hexDigit(int),Method,* Returns the upper case hexadecimal digit of the lower 4 bits of the int.\n     *\n     * @param b the input int\n     * @return the upper case hexadecimal digit of the lower 4 bits of the int.,"static char hexDigit(final int b) {\n    return Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));\n}",char hexDigit(int),"digraph cfg_hexDigit {\n	""1"" [label=""$stack1 = b & 15""];\n	""2"" [label=""$stack2 = staticinvoke <java.lang.Character: char forDigit(int,int)>($stack1, 16)""];\n	""3"" [label=""$stack3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($stack2)""];\n	""4"" [label=""b := @parameter0: int""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",static 
org.apache.commons.codec.net.RFC1522Codec.decodeText(String),Method,"* Applies an RFC 1522 compliant decoding scheme to the given string of text.\n     * <p>\n     * This method processes the ""encoded-word"" header common to all the RFC 1522 codecs and then invokes\n     * {@link #doDecoding(byte[])}  method of a concrete class to perform the specific decoding.\n     * </p>\n     *\n     * @param text\n     *            a string to decode\n     * @return A new decoded String or {@code null} if the input is {@code null}.\n     * @throws DecoderException\n     *             thrown if there is an error condition during the decoding process.\n     * @throws UnsupportedEncodingException\n     *             thrown if charset specified in the ""encoded-word"" header is not supported","protected String decodeText(final String text) throws DecoderException, UnsupportedEncodingException {\n    if (text == null) {\n        return null;\n    }\n    if (!text.startsWith(PREFIX) || !text.endsWith(POSTFIX)) {\n        throw new DecoderException(""RFC 1522 violation: malformed encoded content"");\n    }\n    final int terminator = text.length() - 2;\n    int from = 2;\n    int to = text.indexOf(SEP, from);\n    if (to == terminator) {\n        throw new DecoderException(""RFC 1522 violation: charset token not found"");\n    }\n    final String charset = text.substring(from, to);\n    if (charset.isEmpty()) {\n        throw new DecoderException(""RFC 1522 violation: charset not specified"");\n    }\n    from = to + 1;\n    to = text.indexOf(SEP, from);\n    if (to == terminator) {\n        throw new DecoderException(""RFC 1522 violation: encoding token not found"");\n    }\n    final String encoding = text.substring(from, to);\n    if (!getEncoding().equalsIgnoreCase(encoding)) {\n        throw new DecoderException(""This codec cannot decode "" + encoding + "" encoded content"");\n    }\n    from = to + 1;\n    to = text.indexOf(SEP, from);\n    byte[] data = StringUtils.getBytesUsAscii(text.substring(from, to));\n    data = doDecoding(data);\n    return new String(data, charset);\n}",java.lang.String decodeText(java.lang.String),"digraph cfg_decodeText {\n	""1"" [label=""$stack10 = virtualinvoke text.<java.lang.String: boolean endsWith(java.lang.String)>(\""?=\"")""];\n	""2"" [label=""$stack11 = virtualinvoke text.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack12 = virtualinvoke charset.<java.lang.String: boolean isEmpty()>()""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.net.RFC1522Codec: java.lang.String getEncoding()>()""];\n	""5"" [label=""$stack14 = virtualinvoke $stack13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(encoding)""];\n	""6"" [label=""$stack15 = virtualinvoke text.<java.lang.String: java.lang.String substring(int,int)>(from, to)""];\n	""7"" [label=""$stack16 = new java.lang.String""];\n	""8"" [label=""$stack17 = new java.lang.StringBuilder""];\n	""9"" [label=""$stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""This codec cannot decode \"")""];\n	""10"" [label=""$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(encoding)""];\n	""11"" [label=""$stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" encoded content\"")""];\n	""12"" [label=""$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""13"" [label=""$stack22 = new org.apache.commons.codec.DecoderException""];\n	""14"" [label=""$stack23 = new org.apache.commons.codec.DecoderException""];\n	""15"" [label=""$stack24 = new org.apache.commons.codec.DecoderException""];\n	""16"" [label=""$stack25 = new org.apache.commons.codec.DecoderException""];\n	""17"" [label=""$stack8 = virtualinvoke text.<java.lang.String: boolean startsWith(java.lang.String)>(\""=?\"")""];\n	""18"" [label=""$stack9 = new org.apache.commons.codec.DecoderException""];\n	""19"" [label=""charset = virtualinvoke text.<java.lang.String: java.lang.String substring(int,int)>(from, to)""];\n	""20"" [label=""data = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUsAscii(java.lang.String)>($stack15)""];\n	""21"" [label=""data = virtualinvoke this.<org.apache.commons.codec.net.RFC1522Codec: byte[] doDecoding(byte[])>(data)""];\n	""22"" [label=""encoding = virtualinvoke text.<java.lang.String: java.lang.String substring(int,int)>(from, to)""];\n	""23"" [label=""from = 2""];\n	""24"" [label=""from = to + 1""];\n	""25"" [label=""from = to + 1""];\n	""26"" [label=""if $stack10 != 0""];\n	""27"" [label=""if $stack12 == 0""];\n	""28"" [label=""if $stack14 != 0""];\n	""29"" [label=""if $stack8 == 0""];\n	""30"" [label=""if text != null""];\n	""31"" [label=""if to != terminator""];\n	""32"" [label=""if to != terminator""];\n	""33"" [label=""return $stack16""];\n	""34"" [label=""return null""];\n	""35"" [label=""specialinvoke $stack16.<java.lang.String: void <init>(byte[],java.lang.String)>(data, charset)""];\n	""36"" [label=""specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>()""];\n	""37"" [label=""specialinvoke $stack22.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack21)""];\n	""38"" [label=""specialinvoke $stack23.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""RFC 1522 violation: encoding token not found\"")""];\n	""39"" [label=""specialinvoke $stack24.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""RFC 1522 violation: charset not specified\"")""];\n	""40"" [label=""specialinvoke $stack25.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""RFC 1522 violation: charset token not found\"")""];\n	""41"" [label=""specialinvoke $stack9.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""RFC 1522 violation: malformed encoded content\"")""];\n	""42"" [label=""terminator = $stack11 - 2""];\n	""43"" [label=""text := @parameter0: java.lang.String""];\n	""44"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""45"" [label=""throw $stack22""];\n	""46"" [label=""throw $stack23""];\n	""47"" [label=""throw $stack24""];\n	""48"" [label=""throw $stack25""];\n	""49"" [label=""throw $stack9""];\n	""50"" [label=""to = virtualinvoke text.<java.lang.String: int indexOf(int,int)>(63, from)""];\n	""51"" [label=""to = virtualinvoke text.<java.lang.String: int indexOf(int,int)>(63, from)""];\n	""52"" [label=""to = virtualinvoke text.<java.lang.String: int indexOf(int,int)>(63, from)""];\n	""1"" -> ""26""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""37""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_next""];\n	""14"" -> ""38""[label=""cfg_next""];\n	""15"" -> ""39""[label=""cfg_next""];\n	""16"" -> ""40""[label=""cfg_next""];\n	""17"" -> ""29""[label=""cfg_next""];\n	""18"" -> ""41""[label=""cfg_next""];\n	""19"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""42""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""7""[label=""cfg_next""];\n	""22"" -> ""4""[label=""cfg_next""];\n	""23"" -> ""50""[label=""cfg_next""];\n	""24"" -> ""51""[label=""cfg_next""];\n	""25"" -> ""52""[label=""cfg_next""];\n	""26"" -> ""18""[label=""cfg_false""];\n	""26"" -> ""2""[label=""cfg_true""];\n	""27"" -> ""15""[label=""cfg_false""];\n	""27"" -> ""24""[label=""cfg_true""];\n	""28"" -> ""13""[label=""cfg_false""];\n	""28"" -> ""25""[label=""cfg_true""];\n	""29"" -> ""1""[label=""cfg_false""];\n	""29"" -> ""18""[label=""cfg_true""];\n	""3"" -> ""27""[label=""cfg_next""];\n	""30"" -> ""17""[label=""cfg_true""];\n	""30"" -> ""34""[label=""cfg_false""];\n	""31"" -> ""16""[label=""cfg_false""];\n	""31"" -> ""19""[label=""cfg_true""];\n	""32"" -> ""14""[label=""cfg_false""];\n	""32"" -> ""22""[label=""cfg_true""];\n	""35"" -> ""33""[label=""cfg_next""];\n	""36"" -> ""9""[label=""cfg_next""];\n	""37"" -> ""45""[label=""cfg_next""];\n	""38"" -> ""46""[label=""cfg_next""];\n	""39"" -> ""47""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""48""[label=""cfg_next""];\n	""41"" -> ""49""[label=""cfg_next""];\n	""42"" -> ""23""[label=""cfg_next""];\n	""43"" -> ""30""[label=""cfg_next""];\n	""44"" -> ""43""[label=""cfg_next""];\n	""5"" -> ""28""[label=""cfg_next""];\n	""50"" -> ""31""[label=""cfg_next""];\n	""51"" -> ""32""[label=""cfg_next""];\n	""52"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""35""[label=""cfg_next""];\n	""8"" -> ""36""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.RFC1522Codec.doDecoding(byte[]),Abstract Method,* Decodes an array of bytes using the defined encoding scheme.\n     *\n     * @param bytes\n     *            Data to be decoded\n     * @return a byte array that contains decoded data\n     * @throws DecoderException\n     *             A decoder exception is thrown if a Decoder encounters a failure condition during the decode process.,protected abstract byte[] doDecoding(byte[] bytes) throws DecoderException;,byte[] doDecoding(byte[]),digraph cfg_doDecoding {\n}\n,"protected , abstract "
org.apache.commons.codec.net.RFC1522Codec.doEncoding(byte[]),Abstract Method,* Encodes an array of bytes using the defined encoding scheme.\n     *\n     * @param bytes\n     *            Data to be encoded\n     * @return A byte array containing the encoded data\n     * @throws EncoderException\n     *             thrown if the Encoder encounters a failure condition during the encoding process.,protected abstract byte[] doEncoding(byte[] bytes) throws EncoderException;,byte[] doEncoding(byte[]),digraph cfg_doEncoding {\n}\n,"protected , abstract "
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,Charset)",Method,"* Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n     * <p>\n     * This method constructs the ""encoded-word"" header common to all the RFC 1522 codecs and then invokes\n     * {@link #doEncoding(byte[])}  method of a concrete class to perform the specific encoding.\n     * </p>\n     *\n     * @param text\n     *            a string to encode\n     * @param charset\n     *            a charset to be used\n     * @return RFC 1522 compliant ""encoded-word""\n     * @throws EncoderException\n     *             thrown if there is an error condition during the Encoding process.\n     * @see Charset","protected String encodeText(final String text, final Charset charset) throws EncoderException {\n    if (text == null) {\n        return null;\n    }\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(PREFIX);\n    buffer.append(charset);\n    buffer.append(SEP);\n    buffer.append(getEncoding());\n    buffer.append(SEP);\n    buffer.append(StringUtils.newStringUsAscii(doEncoding(text.getBytes(charset))));\n    buffer.append(POSTFIX);\n    return buffer.toString();\n}","java.lang.String encodeText(java.lang.String,java.nio.charset.Charset)","digraph cfg_encodeText {\n	""1"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.net.RFC1522Codec: java.lang.String getEncoding()>()""];\n	""3"" [label=""$stack6 = virtualinvoke text.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(charset)""];\n	""4"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.net.RFC1522Codec: byte[] doEncoding(byte[])>($stack6)""];\n	""5"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack7)""];\n	""6"" [label=""$stack9 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""7"" [label=""buffer = $stack4""];\n	""8"" [label=""charset := @parameter1: java.nio.charset.Charset""];\n	""9"" [label=""if text != null""];\n	""10"" [label=""return $stack9""];\n	""11"" [label=""return null""];\n	""12"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""13"" [label=""text := @parameter0: java.lang.String""];\n	""14"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""15"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63)""];\n	""16"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63)""];\n	""17"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(charset)""];\n	""18"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""=?\"")""];\n	""19"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""?=\"")""];\n	""20"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""21"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8)""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""3""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""20""[label=""cfg_next""];\n	""20"" -> ""16""[label=""cfg_next""];\n	""21"" -> ""19""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""21""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""18""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_true""];\n	""9"" -> ""11""[label=""cfg_false""];\n}\n",protected 
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,String)",Method,"* Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n     * <p>\n     * This method constructs the ""encoded-word"" header common to all the RFC 1522 codecs and then invokes\n     * {@link #doEncoding(byte[])}  method of a concrete class to perform the specific encoding.\n     * </p>\n     *\n     * @param text\n     *            a string to encode\n     * @param charsetName\n     *            the charset to use\n     * @return RFC 1522 compliant ""encoded-word""\n     * @throws EncoderException\n     *             thrown if there is an error condition during the Encoding process.\n     * @throws UnsupportedCharsetException\n     *             if charset is not available\n     * @see Charset","protected String encodeText(final String text, final String charsetName) throws EncoderException {\n    if (text == null) {\n        // Don't attempt charsetName conversion.\n        return null;\n    }\n    return encodeText(text, Charset.forName(charsetName));\n}","java.lang.String encodeText(java.lang.String,java.lang.String)","digraph cfg_encodeText {\n	""1"" [label=""$stack3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.RFC1522Codec: java.lang.String encodeText(java.lang.String,java.nio.charset.Charset)>(text, $stack3)""];\n	""3"" [label=""charsetName := @parameter1: java.lang.String""];\n	""4"" [label=""if text != null""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""return null""];\n	""7"" [label=""text := @parameter0: java.lang.String""];\n	""8"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.RFC1522Codec.getCharset(),Method,* Gets the default Charset name used for string decoding and encoding.\n     *\n     * @return the default Charset name\n     * @since 1.7,public Charset getCharset() {\n    return charset;\n},java.nio.charset.Charset getCharset(),"digraph cfg_getCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.RFC1522Codec: java.nio.charset.Charset charset>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.RFC1522Codec.getDefaultCharset(),Method,* Gets the default Charset name used for string decoding and encoding.\n     *\n     * @return the default Charset name,public String getDefaultCharset() {\n    return charset.name();\n},java.lang.String getDefaultCharset(),"digraph cfg_getDefaultCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.RFC1522Codec: java.nio.charset.Charset charset>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.nio.charset.Charset: java.lang.String name()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.RFC1522Codec.getEncoding(),Abstract Method,* Returns the codec name (referred to as encoding in the RFC 1522).\n     *\n     * @return name of the codec.,protected abstract String getEncoding();,java.lang.String getEncoding(),digraph cfg_getEncoding {\n}\n,"protected , abstract "
org.apache.commons.codec.net.RFC1522Codec.<init>(Charset),Constructor,No Comment,"RFC1522Codec(final Charset charset) {\n    this.charset = Objects.requireNonNull(charset, ""charset"");\n}",void <init>(java.nio.charset.Charset),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(charset, \""charset\"")""];\n	""2"" [label=""$stack3 = (java.nio.charset.Charset) $stack2""];\n	""3"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.net.RFC1522Codec""];\n	""7"" [label=""this.<org.apache.commons.codec.net.RFC1522Codec: java.nio.charset.Charset charset> = $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[]),Method,* Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as\n     * defined in RFC 1521.\n     * </p>\n     *\n     * @param bytes\n     *            array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *             Thrown if quoted-printable decoding is unsuccessful,"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {\n    if (bytes == null) {\n        return null;\n    }\n    final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    for (int i = 0; i < bytes.length; i++) {\n        final int b = bytes[i];\n        if (b == ESCAPE_CHAR) {\n            try {\n                // if the next octet is a CR we have found a soft line break\n                if (bytes[++i] == CR) {\n                    continue;\n                }\n                final int u = Utils.digit16(bytes[i]);\n                final int l = Utils.digit16(bytes[++i]);\n                buffer.write((char) ((u << 4) + l));\n            } catch (final ArrayIndexOutOfBoundsException e) {\n                throw new DecoderException(""Invalid quoted-printable encoding"", e);\n            }\n        } else if (b != CR && b != LF) {\n            // every other octet is appended except for CR & LF\n            buffer.write(b);\n        }\n    }\n    return buffer.toByteArray();\n}",byte[] decodeQuotedPrintable(byte[]),"digraph cfg_decodeQuotedPrintable {\n	""1"" [label=""$stack10 = bytes[i]""];\n	""2"" [label=""$stack11 = bytes[i]""];\n	""3"" [label=""$stack12 = u << 4""];\n	""4"" [label=""$stack13 = $stack12 + l""];\n	""5"" [label=""$stack14 = (char) $stack13""];\n	""6"" [label=""$stack15 := @caughtexception""];\n	""7"" [label=""$stack16 = new org.apache.commons.codec.DecoderException""];\n	""8"" [label=""$stack6 = new java.io.ByteArrayOutputStream""];\n	""9"" [label=""$stack7 = lengthof bytes""];\n	""10"" [label=""$stack8 = virtualinvoke buffer.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()""];\n	""11"" [label=""$stack9 = bytes[i]""];\n	""12"" [label=""b = bytes[i]""];\n	""13"" [label=""buffer = $stack6""];\n	""14"" [label=""bytes := @parameter0: byte[]""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""i = 0""];\n	""19"" [label=""i = i + 1""];\n	""20"" [label=""i = i + 1""];\n	""21"" [label=""i = i + 1""];\n	""22"" [label=""if $stack9 != 13""];\n	""23"" [label=""if b != 61""];\n	""24"" [label=""if b == 10""];\n	""25"" [label=""if b == 13""];\n	""26"" [label=""if bytes != null""];\n	""27"" [label=""if i >= $stack7""];\n	""28"" [label=""l = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack11)""];\n	""29"" [label=""return $stack8""];\n	""30"" [label=""return null""];\n	""31"" [label=""specialinvoke $stack16.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>(\""Invalid quoted-printable encoding\"", u)""];\n	""32"" [label=""specialinvoke $stack6.<java.io.ByteArrayOutputStream: void <init>()>()""];\n	""33"" [label=""throw $stack16""];\n	""34"" [label=""u = $stack15""];\n	""35"" [label=""u = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack10)""];\n	""36"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>($stack14)""];\n	""37"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(b)""];\n	""1"" -> ""35""[label=""cfg_next""];\n	""1"" -> ""6""[label=""cfg_except""];\n	""10"" -> ""29""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_except""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""13"" -> ""18""[label=""cfg_next""];\n	""14"" -> ""26""[label=""cfg_next""];\n	""15"" -> ""20""[label=""cfg_goto""];\n	""16"" -> ""20""[label=""cfg_goto""];\n	""17"" -> ""9""[label=""cfg_goto""];\n	""18"" -> ""9""[label=""cfg_next""];\n	""19"" -> ""11""[label=""cfg_next""];\n	""19"" -> ""6""[label=""cfg_except""];\n	""2"" -> ""28""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_except""];\n	""20"" -> ""17""[label=""cfg_next""];\n	""21"" -> ""2""[label=""cfg_next""];\n	""21"" -> ""6""[label=""cfg_except""];\n	""22"" -> ""1""[label=""cfg_true""];\n	""22"" -> ""15""[label=""cfg_false""];\n	""22"" -> ""6""[label=""cfg_except""];\n	""23"" -> ""19""[label=""cfg_false""];\n	""23"" -> ""25""[label=""cfg_true""];\n	""24"" -> ""20""[label=""cfg_true""];\n	""24"" -> ""37""[label=""cfg_false""];\n	""25"" -> ""20""[label=""cfg_true""];\n	""25"" -> ""24""[label=""cfg_false""];\n	""26"" -> ""30""[label=""cfg_false""];\n	""26"" -> ""8""[label=""cfg_true""];\n	""27"" -> ""10""[label=""cfg_true""];\n	""27"" -> ""12""[label=""cfg_false""];\n	""28"" -> ""3""[label=""cfg_next""];\n	""28"" -> ""6""[label=""cfg_except""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_except""];\n	""31"" -> ""33""[label=""cfg_next""];\n	""32"" -> ""13""[label=""cfg_next""];\n	""34"" -> ""7""[label=""cfg_next""];\n	""35"" -> ""21""[label=""cfg_next""];\n	""35"" -> ""6""[label=""cfg_except""];\n	""36"" -> ""16""[label=""cfg_next""];\n	""36"" -> ""6""[label=""cfg_except""];\n	""37"" -> ""20""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_except""];\n	""5"" -> ""36""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_except""];\n	""6"" -> ""34""[label=""cfg_next""];\n	""7"" -> ""31""[label=""cfg_next""];\n	""8"" -> ""32""[label=""cfg_next""];\n	""9"" -> ""27""[label=""cfg_next""];\n}\n","public , static , final "
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,ByteArrayOutputStream)",Method,* Encodes a byte in the buffer.\n     *\n     * @param b\n     *            byte to write\n     * @param encode\n     *            indicates whether the octet shall be encoded\n     * @param buffer\n     *            the buffer to write to\n     * @return the number of bytes that have been written to the buffer,"private static int encodeByte(final int b, final boolean encode, final ByteArrayOutputStream buffer) {\n    if (encode) {\n        return encodeQuotedPrintable(b, buffer);\n    }\n    buffer.write(b);\n    return 1;\n}","int encodeByte(int,boolean,java.io.ByteArrayOutputStream)","digraph cfg_encodeByte {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)>(b, buffer)""];\n	""2"" [label=""b := @parameter0: int""];\n	""3"" [label=""buffer := @parameter2: java.io.ByteArrayOutputStream""];\n	""4"" [label=""encode := @parameter1: boolean""];\n	""5"" [label=""if encode == 0""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""return 1""];\n	""8"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(b)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""8""[label=""cfg_true""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[])",Method,* Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     * <p>\n     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param printable\n     *            bitset of characters deemed quoted-printable\n     * @param bytes\n     *            array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data,"public static final byte[] encodeQuotedPrintable(final BitSet printable, final byte[] bytes) {\n    return encodeQuotedPrintable(printable, bytes, false);\n}","byte[] encodeQuotedPrintable(java.util.BitSet,byte[])","digraph cfg_encodeQuotedPrintable {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[],boolean)>(printable, bytes, 0)""];\n	""2"" [label=""bytes := @parameter1: byte[]""];\n	""3"" [label=""printable := @parameter0: java.util.BitSet""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n","public , static , final "
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[],boolean)",Method,"* Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     * <p>\n     * Depending on the selection of the {@code strict} parameter, this function either implements the full ruleset\n     * or only a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param printable\n     *            bitset of characters deemed quoted-printable\n     * @param bytes\n     *            array of bytes to be encoded\n     * @param strict\n     *            if {@code true} the full ruleset is used, otherwise only rule #1 and rule #2\n     * @return array of bytes containing quoted-printable data\n     * @since 1.10","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    final int bytesLength = bytes.length;\n    if (strict) {\n        if (bytesLength < MIN_BYTES) {\n            return null;\n        }\n        int pos = 1;\n        // encode up to buffer.length - 3, the last three octets will be treated\n        // separately for simplification of note #3\n        for (int i = 0; i < bytesLength - 3; i++) {\n            final int b = getUnsignedOctet(i, bytes);\n            if (pos < SAFE_LENGTH) {\n                // up to this length it is safe to add any byte, encoded or not\n                pos += encodeByte(b, !printable.get(b), buffer);\n            } else {\n                // rule #3: whitespace at the end of a line *must* be encoded\n                encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);\n                // rule #5: soft line break\n                buffer.write(ESCAPE_CHAR);\n                buffer.write(CR);\n                buffer.write(LF);\n                pos = 1;\n            }\n        }\n        // rule #3: whitespace at the end of a line *must* be encoded\n        // if we would do a soft break line after this octet, encode whitespace\n        int b = getUnsignedOctet(bytesLength - 3, bytes);\n        boolean encode = !printable.get(b) || isWhitespace(b) && pos > SAFE_LENGTH - 5;\n        pos += encodeByte(b, encode, buffer);\n        // note #3: '=' *must not* be the ultimate or penultimate character\n        // simplification: if < 6 bytes left, do a soft line break as we may need\n        //                 exactly 6 bytes space for the last 2 bytes\n        if (pos > SAFE_LENGTH - 2) {\n            buffer.write(ESCAPE_CHAR);\n            buffer.write(CR);\n            buffer.write(LF);\n        }\n        for (int i = bytesLength - 2; i < bytesLength; i++) {\n            b = getUnsignedOctet(i, bytes);\n            // rule #3: trailing whitespace shall be encoded\n            encode = !printable.get(b) || i > bytesLength - 2 && isWhitespace(b);\n            encodeByte(b, encode, buffer);\n        }\n    } else {\n        for (final byte c : bytes) {\n            int b = c;\n            if (b < 0) {\n                b = 256 + b;\n            }\n            if (printable.get(b)) {\n                buffer.write(b);\n            } else {\n                encodeQuotedPrintable(b, buffer);\n            }\n        }\n    }\n    return buffer.toByteArray();\n}","byte[] encodeQuotedPrintable(java.util.BitSet,byte[],boolean)","digraph cfg_encodeQuotedPrintable {\n	""1"" [label=""$stack10 = new java.io.ByteArrayOutputStream""];\n	""2"" [label=""$stack11 = virtualinvoke buffer.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()""];\n	""3"" [label=""$stack12 = virtualinvoke printable.<java.util.BitSet: boolean get(int)>(b_1)""];\n	""4"" [label=""$stack13 = bytesLength - 3""];\n	""5"" [label=""$stack14 = bytesLength - 3""];\n	""6"" [label=""$stack15 = virtualinvoke printable.<java.util.BitSet: boolean get(int)>(i)""];\n	""7"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeByte(int,boolean,java.io.ByteArrayOutputStream)>(i, b, buffer)""];\n	""8"" [label=""$stack17 = virtualinvoke printable.<java.util.BitSet: boolean get(int)>(i)""];\n	""9"" [label=""$stack18 = bytesLength - 2""];\n	""10"" [label=""$stack19 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: boolean isWhitespace(int)>(i)""];\n	""11"" [label=""$stack20 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: boolean isWhitespace(int)>(i)""];\n	""12"" [label=""$stack21 = virtualinvoke printable.<java.util.BitSet: boolean get(int)>(b)""];\n	""13"" [label=""$stack22 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: boolean isWhitespace(int)>(b)""];\n	""14"" [label=""$stack23 = 0""];\n	""15"" [label=""$stack23 = 1""];\n	""16"" [label=""$stack24 = virtualinvoke printable.<java.util.BitSet: boolean get(int)>(b)""];\n	""17"" [label=""$stack25 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeByte(int,boolean,java.io.ByteArrayOutputStream)>(b, $stack26, buffer)""];\n	""18"" [label=""$stack26 = 0""];\n	""19"" [label=""$stack26 = 1""];\n	""20"" [label=""b = 0""];\n	""21"" [label=""b = 0""];\n	""22"" [label=""b = 0""];\n	""23"" [label=""b = 1""];\n	""24"" [label=""b = 1""];\n	""25"" [label=""b = b + 1""];\n	""26"" [label=""b = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int getUnsignedOctet(int,byte[])>(i, bytes)""];\n	""27"" [label=""b_1 = 256 + b_1""];\n	""28"" [label=""b_1 = i_1""];\n	""29"" [label=""buffer = $stack10""];\n	""30"" [label=""bytes := @parameter1: byte[]""];\n	""31"" [label=""bytesLength = lengthof bytes""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""goto""];\n	""42"" [label=""i = 0""];\n	""43"" [label=""i = i + 1""];\n	""44"" [label=""i = lengthof pos""];\n	""45"" [label=""i = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int getUnsignedOctet(int,byte[])>($stack14, bytes)""];\n	""46"" [label=""i = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int getUnsignedOctet(int,byte[])>(i_1, bytes)""];\n	""47"" [label=""i_1 = bytesLength - 2""];\n	""48"" [label=""i_1 = i_1 + 1""];\n	""49"" [label=""i_1 = pos[b]""];\n	""50"" [label=""if $stack12 == 0""];\n	""51"" [label=""if $stack15 == 0""];\n	""52"" [label=""if $stack17 == 0""];\n	""53"" [label=""if $stack19 == 0""];\n	""54"" [label=""if $stack20 == 0""];\n	""55"" [label=""if $stack21 == 0""];\n	""56"" [label=""if $stack22 == 0""];\n	""57"" [label=""if $stack24 != 0""];\n	""58"" [label=""if b >= i""];\n	""59"" [label=""if b_1 >= 0""];\n	""60"" [label=""if bytes != null""];\n	""61"" [label=""if bytesLength >= 3""];\n	""62"" [label=""if i >= $stack13""];\n	""63"" [label=""if i_1 <= $stack18""];\n	""64"" [label=""if i_1 >= bytesLength""];\n	""65"" [label=""if pos <= 68""];\n	""66"" [label=""if pos <= 71""];\n	""67"" [label=""if pos >= 73""];\n	""68"" [label=""if printable != null""];\n	""69"" [label=""if strict == 0""];\n	""70"" [label=""pos = 1""];\n	""71"" [label=""pos = 1""];\n	""72"" [label=""pos = bytes""];\n	""73"" [label=""pos = pos + $stack16""];\n	""74"" [label=""pos = pos + $stack25""];\n	""75"" [label=""printable := @parameter0: java.util.BitSet""];\n	""76"" [label=""printable = <org.apache.commons.codec.net.QuotedPrintableCodec: java.util.BitSet PRINTABLE_CHARS>""];\n	""77"" [label=""return $stack11""];\n	""78"" [label=""return null""];\n	""79"" [label=""return null""];\n	""80"" [label=""specialinvoke $stack10.<java.io.ByteArrayOutputStream: void <init>()>()""];\n	""81"" [label=""staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeByte(int,boolean,java.io.ByteArrayOutputStream)>(b, $stack23, buffer)""];\n	""82"" [label=""staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeByte(int,boolean,java.io.ByteArrayOutputStream)>(i, b, buffer)""];\n	""83"" [label=""staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: int encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)>(b_1, buffer)""];\n	""84"" [label=""strict := @parameter2: boolean""];\n	""85"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(10)""];\n	""86"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(10)""];\n	""87"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(13)""];\n	""88"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(13)""];\n	""89"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(61)""];\n	""90"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(61)""];\n	""91"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(b_1)""];\n	""1"" -> ""80""[label=""cfg_next""];\n	""10"" -> ""53""[label=""cfg_next""];\n	""11"" -> ""54""[label=""cfg_next""];\n	""12"" -> ""55""[label=""cfg_next""];\n	""13"" -> ""56""[label=""cfg_next""];\n	""14"" -> ""81""[label=""cfg_next""];\n	""15"" -> ""34""[label=""cfg_next""];\n	""16"" -> ""57""[label=""cfg_next""];\n	""17"" -> ""74""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""32""[label=""cfg_next""];\n	""2"" -> ""77""[label=""cfg_next""];\n	""20"" -> ""7""[label=""cfg_next""];\n	""21"" -> ""82""[label=""cfg_next""];\n	""22"" -> ""58""[label=""cfg_next""];\n	""23"" -> ""36""[label=""cfg_next""];\n	""24"" -> ""38""[label=""cfg_next""];\n	""25"" -> ""41""[label=""cfg_next""];\n	""26"" -> ""67""[label=""cfg_next""];\n	""27"" -> ""3""[label=""cfg_next""];\n	""28"" -> ""59""[label=""cfg_next""];\n	""29"" -> ""31""[label=""cfg_next""];\n	""3"" -> ""50""[label=""cfg_next""];\n	""30"" -> ""84""[label=""cfg_next""];\n	""31"" -> ""69""[label=""cfg_next""];\n	""32"" -> ""17""[label=""cfg_goto""];\n	""33"" -> ""43""[label=""cfg_goto""];\n	""34"" -> ""81""[label=""cfg_goto""];\n	""35"" -> ""4""[label=""cfg_goto""];\n	""36"" -> ""7""[label=""cfg_goto""];\n	""37"" -> ""2""[label=""cfg_goto""];\n	""38"" -> ""82""[label=""cfg_goto""];\n	""39"" -> ""64""[label=""cfg_goto""];\n	""4"" -> ""62""[label=""cfg_next""];\n	""40"" -> ""25""[label=""cfg_goto""];\n	""41"" -> ""58""[label=""cfg_goto""];\n	""42"" -> ""4""[label=""cfg_next""];\n	""43"" -> ""35""[label=""cfg_next""];\n	""44"" -> ""22""[label=""cfg_next""];\n	""45"" -> ""6""[label=""cfg_next""];\n	""46"" -> ""8""[label=""cfg_next""];\n	""47"" -> ""64""[label=""cfg_next""];\n	""48"" -> ""39""[label=""cfg_next""];\n	""49"" -> ""28""[label=""cfg_next""];\n	""5"" -> ""45""[label=""cfg_next""];\n	""50"" -> ""83""[label=""cfg_true""];\n	""50"" -> ""91""[label=""cfg_false""];\n	""51"" -> ""11""[label=""cfg_false""];\n	""51"" -> ""23""[label=""cfg_true""];\n	""52"" -> ""24""[label=""cfg_true""];\n	""52"" -> ""9""[label=""cfg_false""];\n	""53"" -> ""21""[label=""cfg_true""];\n	""53"" -> ""24""[label=""cfg_false""];\n	""54"" -> ""20""[label=""cfg_true""];\n	""54"" -> ""65""[label=""cfg_false""];\n	""55"" -> ""13""[label=""cfg_false""];\n	""55"" -> ""15""[label=""cfg_true""];\n	""56"" -> ""14""[label=""cfg_true""];\n	""56"" -> ""15""[label=""cfg_false""];\n	""57"" -> ""18""[label=""cfg_true""];\n	""57"" -> ""19""[label=""cfg_false""];\n	""58"" -> ""2""[label=""cfg_true""];\n	""58"" -> ""49""[label=""cfg_false""];\n	""59"" -> ""27""[label=""cfg_false""];\n	""59"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""51""[label=""cfg_next""];\n	""60"" -> ""68""[label=""cfg_true""];\n	""60"" -> ""78""[label=""cfg_false""];\n	""61"" -> ""70""[label=""cfg_true""];\n	""61"" -> ""79""[label=""cfg_false""];\n	""62"" -> ""26""[label=""cfg_false""];\n	""62"" -> ""5""[label=""cfg_true""];\n	""63"" -> ""10""[label=""cfg_false""];\n	""63"" -> ""21""[label=""cfg_true""];\n	""64"" -> ""37""[label=""cfg_true""];\n	""64"" -> ""46""[label=""cfg_false""];\n	""65"" -> ""20""[label=""cfg_true""];\n	""65"" -> ""23""[label=""cfg_false""];\n	""66"" -> ""47""[label=""cfg_true""];\n	""66"" -> ""90""[label=""cfg_false""];\n	""67"" -> ""12""[label=""cfg_true""];\n	""67"" -> ""16""[label=""cfg_false""];\n	""68"" -> ""1""[label=""cfg_true""];\n	""68"" -> ""76""[label=""cfg_false""];\n	""69"" -> ""61""[label=""cfg_false""];\n	""69"" -> ""72""[label=""cfg_true""];\n	""7"" -> ""73""[label=""cfg_next""];\n	""70"" -> ""42""[label=""cfg_next""];\n	""71"" -> ""43""[label=""cfg_next""];\n	""72"" -> ""44""[label=""cfg_next""];\n	""73"" -> ""66""[label=""cfg_next""];\n	""74"" -> ""33""[label=""cfg_next""];\n	""75"" -> ""30""[label=""cfg_next""];\n	""76"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""52""[label=""cfg_next""];\n	""80"" -> ""29""[label=""cfg_next""];\n	""81"" -> ""89""[label=""cfg_next""];\n	""82"" -> ""48""[label=""cfg_next""];\n	""83"" -> ""25""[label=""cfg_next""];\n	""84"" -> ""60""[label=""cfg_next""];\n	""85"" -> ""71""[label=""cfg_next""];\n	""86"" -> ""47""[label=""cfg_next""];\n	""87"" -> ""85""[label=""cfg_next""];\n	""88"" -> ""86""[label=""cfg_next""];\n	""89"" -> ""87""[label=""cfg_next""];\n	""9"" -> ""63""[label=""cfg_next""];\n	""90"" -> ""88""[label=""cfg_next""];\n	""91"" -> ""40""[label=""cfg_next""];\n}\n","public , static , final "
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,ByteArrayOutputStream)",Method,* Encodes byte into its quoted-printable representation.\n     *\n     * @param b\n     *            byte to encode\n     * @param buffer\n     *            the buffer to write to\n     * @return The number of bytes written to the {@code buffer},"private static int encodeQuotedPrintable(final int b, final ByteArrayOutputStream buffer) {\n    buffer.write(ESCAPE_CHAR);\n    final char hex1 = Utils.hexDigit(b >> 4);\n    final char hex2 = Utils.hexDigit(b);\n    buffer.write(hex1);\n    buffer.write(hex2);\n    return 3;\n}","int encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)","digraph cfg_encodeQuotedPrintable {\n	""1"" [label=""$stack4 = b >> 4""];\n	""2"" [label=""b := @parameter0: int""];\n	""3"" [label=""buffer := @parameter1: java.io.ByteArrayOutputStream""];\n	""4"" [label=""hex1 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>($stack4)""];\n	""5"" [label=""hex2 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>(b)""];\n	""6"" [label=""return 3""];\n	""7"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(61)""];\n	""8"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(hex1)""];\n	""9"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(hex2)""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[])",Method,* Gets the byte at position {@code index} of the byte array and\n     * make sure it is unsigned.\n     *\n     * @param index\n     *            position in the array\n     * @param bytes\n     *            the byte array\n     * @return the unsigned octet at position {@code index} from the array,"private static int getUnsignedOctet(final int index, final byte[] bytes) {\n    int b = bytes[index];\n    if (b < 0) {\n        b = 256 + b;\n    }\n    return b;\n}","int getUnsignedOctet(int,byte[])","digraph cfg_getUnsignedOctet {\n	""1"" [label=""b = 256 + b""];\n	""2"" [label=""b = bytes[index]""];\n	""3"" [label=""bytes := @parameter1: byte[]""];\n	""4"" [label=""if b >= 0""];\n	""5"" [label=""index := @parameter0: int""];\n	""6"" [label=""return b""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_false""];\n	""4"" -> ""6""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int),Method,* Checks whether the given byte is whitespace.\n     *\n     * @param b\n     *            byte to be checked\n     * @return {@code true} if the byte is either a space or tab character,private static boolean isWhitespace(final int b) {\n    return b == SPACE || b == TAB;\n},boolean isWhitespace(int),"digraph cfg_isWhitespace {\n	""1"" [label=""$stack1 = 0""];\n	""2"" [label=""$stack1 = 1""];\n	""3"" [label=""b := @parameter0: int""];\n	""4"" [label=""goto""];\n	""5"" [label=""if b != 9""];\n	""6"" [label=""if b == 32""];\n	""7"" [label=""return $stack1""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""5""[label=""cfg_false""];\n}\n","private , static "
org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[]),Method,* Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     * <p>\n     * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as\n     * defined in RFC 1521.\n     * </p>\n     *\n     * @param bytes\n     *            array of quoted-printable characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *             Thrown if quoted-printable decoding is unsuccessful,@Override\npublic byte[] decode(final byte[] bytes) throws DecoderException {\n    return decodeQuotedPrintable(bytes);\n},byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])>(bytes)""];\n	""2"" [label=""bytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.decode(Object),Method,* Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param obj\n     *            quoted-printable object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *             Thrown if the argument is not a {@code String} or {@code byte[]}. Thrown if a failure\n     *             condition is encountered during the decode process.,"@Override\npublic Object decode(final Object obj) throws DecoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return decode((byte[]) obj);\n    }\n    if (obj instanceof String) {\n        return decode((String) obj);\n    }\n    throw new DecoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be quoted-printable decoded"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.DecoderException""];\n	""3"" [label=""$stack12 = (java.lang.String) obj""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String decode(java.lang.String)>($stack12)""];\n	""5"" [label=""$stack14 = (byte[]) obj""];\n	""6"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decode(byte[])>($stack14)""];\n	""7"" [label=""$stack2 = obj instanceof byte[]""];\n	""8"" [label=""$stack3 = obj instanceof java.lang.String""];\n	""9"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""10"" [label=""$stack5 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""11"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>()""];\n	""12"" [label=""$stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""13"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6)""];\n	""14"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be quoted-printable decoded\"")""];\n	""15"" [label=""if $stack2 == 0""];\n	""16"" [label=""if $stack3 == 0""];\n	""17"" [label=""if obj != null""];\n	""18"" [label=""obj := @parameter0: java.lang.Object""];\n	""19"" [label=""return $stack13""];\n	""20"" [label=""return $stack15""];\n	""21"" [label=""return null""];\n	""22"" [label=""specialinvoke $stack11.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack10)""];\n	""23"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""25"" [label=""throw $stack11""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""15"" -> ""5""[label=""cfg_false""];\n	""15"" -> ""8""[label=""cfg_true""];\n	""16"" -> ""2""[label=""cfg_true""];\n	""16"" -> ""3""[label=""cfg_false""];\n	""17"" -> ""21""[label=""cfg_false""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""12""[label=""cfg_next""];\n	""24"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.decode(String),Method,* Decodes a quoted-printable string into its original form using the default string Charset. Escaped characters are\n     * converted back to their original representation.\n     *\n     * @param sourceStr\n     *            quoted-printable string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *             Thrown if quoted-printable decoding is unsuccessful. Thrown if Charset is not supported.\n     * @see #getCharset(),"@Override\npublic String decode(final String sourceStr) throws DecoderException {\n    return this.decode(sourceStr, getCharset());\n}",java.lang.String decode(java.lang.String),"digraph cfg_decode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String decode(java.lang.String,java.nio.charset.Charset)>(sourceStr, $stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,Charset)",Method,* Decodes a quoted-printable string into its original form using the specified string Charset. Escaped characters\n     * are converted back to their original representation.\n     *\n     * @param sourceStr\n     *            quoted-printable string to convert into its original form\n     * @param sourceCharset\n     *            the original string Charset\n     * @return original string\n     * @throws DecoderException\n     *             Thrown if quoted-printable decoding is unsuccessful\n     * @since 1.7,"public String decode(final String sourceStr, final Charset sourceCharset) throws DecoderException {\n    if (sourceStr == null) {\n        return null;\n    }\n    return new String(this.decode(StringUtils.getBytesUsAscii(sourceStr)), sourceCharset);\n}","java.lang.String decode(java.lang.String,java.nio.charset.Charset)","digraph cfg_decode {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUsAscii(java.lang.String)>(sourceStr)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = new java.lang.String""];\n	""4"" [label=""if sourceStr != null""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""return null""];\n	""7"" [label=""sourceCharset := @parameter1: java.nio.charset.Charset""];\n	""8"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""9"" [label=""specialinvoke $stack5.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($stack4, sourceCharset)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,String)",Method,* Decodes a quoted-printable string into its original form using the specified string Charset. Escaped characters\n     * are converted back to their original representation.\n     *\n     * @param sourceStr\n     *            quoted-printable string to convert into its original form\n     * @param sourceCharset\n     *            the original string Charset\n     * @return original string\n     * @throws DecoderException\n     *             Thrown if quoted-printable decoding is unsuccessful\n     * @throws UnsupportedEncodingException\n     *             Thrown if Charset is not supported,"public String decode(final String sourceStr, final String sourceCharset) throws DecoderException, UnsupportedEncodingException {\n    if (sourceStr == null) {\n        return null;\n    }\n    return new String(decode(StringUtils.getBytesUsAscii(sourceStr)), sourceCharset);\n}","java.lang.String decode(java.lang.String,java.lang.String)","digraph cfg_decode {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUsAscii(java.lang.String)>(sourceStr)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = new java.lang.String""];\n	""4"" [label=""if sourceStr != null""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""return null""];\n	""7"" [label=""sourceCharset := @parameter1: java.lang.String""];\n	""8"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""9"" [label=""specialinvoke $stack5.<java.lang.String: void <init>(byte[],java.lang.String)>($stack4, sourceCharset)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[]),Method,"* Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n     * <p>\n     * Depending on the selection of the {@code strict} parameter, this function either implements the full ruleset\n     * or only a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param bytes\n     *            array of bytes to be encoded\n     * @return array of bytes containing quoted-printable data","@Override\npublic byte[] encode(final byte[] bytes) {\n    return encodeQuotedPrintable(PRINTABLE_CHARS, bytes, strict);\n}",byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.net.QuotedPrintableCodec: boolean strict>""];\n	""2"" [label=""$stack3 = <org.apache.commons.codec.net.QuotedPrintableCodec: java.util.BitSet PRINTABLE_CHARS>""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[],boolean)>($stack3, bytes, $stack2)""];\n	""4"" [label=""bytes := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.encode(Object),Method,* Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n     *\n     * @param obj\n     *            string to convert to a quoted-printable form\n     * @return quoted-printable object\n     * @throws EncoderException\n     *             Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n     *             unsuccessful,"@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return encode((byte[]) obj);\n    }\n    if (obj instanceof String) {\n        return encode((String) obj);\n    }\n    throw new EncoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be quoted-printable encoded"");\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.EncoderException""];\n	""3"" [label=""$stack12 = (java.lang.String) obj""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String)>($stack12)""];\n	""5"" [label=""$stack14 = (byte[]) obj""];\n	""6"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encode(byte[])>($stack14)""];\n	""7"" [label=""$stack2 = obj instanceof byte[]""];\n	""8"" [label=""$stack3 = obj instanceof java.lang.String""];\n	""9"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""10"" [label=""$stack5 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""11"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>()""];\n	""12"" [label=""$stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""13"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6)""];\n	""14"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be quoted-printable encoded\"")""];\n	""15"" [label=""if $stack2 == 0""];\n	""16"" [label=""if $stack3 == 0""];\n	""17"" [label=""if obj != null""];\n	""18"" [label=""obj := @parameter0: java.lang.Object""];\n	""19"" [label=""return $stack13""];\n	""20"" [label=""return $stack15""];\n	""21"" [label=""return null""];\n	""22"" [label=""specialinvoke $stack11.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack10)""];\n	""23"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""25"" [label=""throw $stack11""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""15"" -> ""5""[label=""cfg_false""];\n	""15"" -> ""8""[label=""cfg_true""];\n	""16"" -> ""2""[label=""cfg_true""];\n	""16"" -> ""3""[label=""cfg_false""];\n	""17"" -> ""21""[label=""cfg_false""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""12""[label=""cfg_next""];\n	""24"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.encode(String),Method,"* Encodes a string into its quoted-printable form using the default string Charset. Unsafe characters are escaped.\n     * <p>\n     * Depending on the selection of the {@code strict} parameter, this function either implements the full ruleset\n     * or only a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @return quoted-printable string\n     * @throws EncoderException\n     *             Thrown if quoted-printable encoding is unsuccessful\n     *\n     * @see #getCharset()","@Override\npublic String encode(final String sourceStr) throws EncoderException {\n    return encode(sourceStr, getCharset());\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String,java.nio.charset.Charset)>(sourceStr, $stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,Charset)",Method,"* Encodes a string into its quoted-printable form using the specified Charset. Unsafe characters are escaped.\n     * <p>\n     * Depending on the selection of the {@code strict} parameter, this function either implements the full ruleset\n     * or only a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @param sourceCharset\n     *            the Charset for sourceStr\n     * @return quoted-printable string\n     * @since 1.7","public String encode(final String sourceStr, final Charset sourceCharset) {\n    if (sourceStr == null) {\n        return null;\n    }\n    return StringUtils.newStringUsAscii(this.encode(sourceStr.getBytes(sourceCharset)));\n}","java.lang.String encode(java.lang.String,java.nio.charset.Charset)","digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke sourceStr.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(sourceCharset)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack4)""];\n	""4"" [label=""if sourceStr != null""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""return null""];\n	""7"" [label=""sourceCharset := @parameter1: java.nio.charset.Charset""];\n	""8"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""9"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,String)",Method,"* Encodes a string into its quoted-printable form using the specified Charset. Unsafe characters are escaped.\n     * <p>\n     * Depending on the selection of the {@code strict} parameter, this function either implements the full ruleset\n     * or only a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n     * </p>\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @param sourceCharset\n     *            the Charset for sourceStr\n     * @return quoted-printable string\n     * @throws UnsupportedEncodingException\n     *             Thrown if the Charset is not supported","public String encode(final String sourceStr, final String sourceCharset) throws UnsupportedEncodingException {\n    if (sourceStr == null) {\n        return null;\n    }\n    return StringUtils.newStringUsAscii(encode(sourceStr.getBytes(sourceCharset)));\n}","java.lang.String encode(java.lang.String,java.lang.String)","digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke sourceStr.<java.lang.String: byte[] getBytes(java.lang.String)>(sourceCharset)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack4)""];\n	""4"" [label=""if sourceStr != null""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""return null""];\n	""7"" [label=""sourceCharset := @parameter1: java.lang.String""];\n	""8"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""9"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.getCharset(),Method,* Gets the default Charset name used for string decoding and encoding.\n     *\n     * @return the default Charset name\n     * @since 1.7,public Charset getCharset() {\n    return this.charset;\n},java.nio.charset.Charset getCharset(),"digraph cfg_getCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.nio.charset.Charset charset>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.getDefaultCharset(),Method,* Gets the default Charset name used for string decoding and encoding.\n     *\n     * @return the default Charset name,public String getDefaultCharset() {\n    return this.charset.name();\n},java.lang.String getDefaultCharset(),"digraph cfg_getDefaultCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.nio.charset.Charset charset>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.nio.charset.Charset: java.lang.String name()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(),Constructor,"* Default constructor, assumes default Charset of {@link StandardCharsets#UTF_8}","public QuotedPrintableCodec() {\n    this(StandardCharsets.UTF_8, false);\n}",void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: void <init>(java.nio.charset.Charset,boolean)>($stack1, 0)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(boolean),Constructor,"* Constructor which allows for the selection of the strict mode.\n     *\n     * @param strict\n     *            if {@code true}, soft line breaks will be used\n     * @since 1.10","public QuotedPrintableCodec(final boolean strict) {\n    this(StandardCharsets.UTF_8, strict);\n}",void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""$stack2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: void <init>(java.nio.charset.Charset,boolean)>($stack2, strict)""];\n	""4"" [label=""strict := @parameter0: boolean""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset),Constructor,* Constructor which allows for the selection of a default Charset.\n     *\n     * @param charset\n     *            the default string Charset to use.\n     * @since 1.7,"public QuotedPrintableCodec(final Charset charset) {\n    this(charset, false);\n}",void <init>(java.nio.charset.Charset),"digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: void <init>(java.nio.charset.Charset,boolean)>(charset, 0)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset,boolean)",Constructor,"* Constructor which allows for the selection of a default Charset and strict mode.\n     *\n     * @param charset\n     *            the default string Charset to use.\n     * @param strict\n     *            if {@code true}, soft line breaks will be used\n     * @since 1.10","public QuotedPrintableCodec(final Charset charset, final boolean strict) {\n    this.charset = charset;\n    this.strict = strict;\n}","void <init>(java.nio.charset.Charset,boolean)","digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""strict := @parameter1: boolean""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""6"" [label=""this.<org.apache.commons.codec.net.QuotedPrintableCodec: boolean strict> = strict""];\n	""7"" [label=""this.<org.apache.commons.codec.net.QuotedPrintableCodec: java.nio.charset.Charset charset> = charset""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(String),Constructor,* Constructor which allows for the selection of a default Charset.\n     *\n     * @param charsetName\n     *            the default string Charset to use.\n     * @throws UnsupportedCharsetException\n     *             If no support for the named Charset is available\n     *             in this instance of the Java virtual machine\n     * @throws IllegalArgumentException\n     *             If the given charsetName is null\n     * @throws IllegalCharsetNameException\n     *             If the given Charset name is illegal\n     *\n     * @since 1.7 throws UnsupportedCharsetException if the named Charset is unavailable,"public QuotedPrintableCodec(final String charsetName) throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {\n    this(Charset.forName(charsetName), false);\n}",void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName)""];\n	""2"" [label=""charsetName := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.net.QuotedPrintableCodec: void <init>(java.nio.charset.Charset,boolean)>($stack2, 0)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QuotedPrintableCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.decode(Object),Method,* Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param obj\n     *            quoted-printable object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *             Thrown if the argument is not a {@code String}. Thrown if a failure condition is encountered\n     *             during the decode process.,"@Override\npublic Object decode(final Object obj) throws DecoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof String) {\n        return decode((String) obj);\n    }\n    throw new DecoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be decoded using Q codec"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.DecoderException""];\n	""2"" [label=""$stack11 = (java.lang.String) obj""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String decode(java.lang.String)>($stack11)""];\n	""4"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be decoded using Q codec\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if obj != null""];\n	""14"" [label=""obj := @parameter0: java.lang.Object""];\n	""15"" [label=""return $stack12""];\n	""16"" [label=""return null""];\n	""17"" [label=""specialinvoke $stack10.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack9)""];\n	""18"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""19"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""20"" [label=""throw $stack10""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""16""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""20""[label=""cfg_next""];\n	""18"" -> ""8""[label=""cfg_next""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.decode(String),Method,* Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param str\n     *            quoted-printable string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *             A decoder exception is thrown if a failure condition is encountered during the decode process.,"@Override\npublic String decode(final String str) throws DecoderException {\n    try {\n        return decodeText(str);\n    } catch (final UnsupportedEncodingException e) {\n        throw new DecoderException(e.getMessage(), e);\n    }\n}",java.lang.String decode(java.lang.String),"digraph cfg_decode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String decodeText(java.lang.String)>(str)""];\n	""2"" [label=""$stack4 := @caughtexception""];\n	""3"" [label=""$stack5 = virtualinvoke e.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>()""];\n	""4"" [label=""$stack6 = new org.apache.commons.codec.DecoderException""];\n	""5"" [label=""e = $stack4""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""specialinvoke $stack6.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack5, e)""];\n	""8"" [label=""str := @parameter0: java.lang.String""];\n	""9"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""10"" [label=""throw $stack6""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.doDecoding(byte[]),Method,No Comment,@Override\nprotected byte[] doDecoding(final byte[] bytes) throws DecoderException {\n    if (bytes == null) {\n        return null;\n    }\n    boolean hasUnderscores = false;\n    for (final byte b : bytes) {\n        if (b == UNDERSCORE) {\n            hasUnderscores = true;\n            break;\n        }\n    }\n    if (hasUnderscores) {\n        final byte[] tmp = new byte[bytes.length];\n        for (int i = 0; i < bytes.length; i++) {\n            final byte b = bytes[i];\n            if (b != UNDERSCORE) {\n                tmp[i] = b;\n            } else {\n                tmp[i] = SPACE;\n            }\n        }\n        return QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n    }\n    return QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n},byte[] doDecoding(byte[]),"digraph cfg_doDecoding {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])>(tmp)""];\n	""2"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])>(bytes)""];\n	""3"" [label=""$stack8 = lengthof bytes""];\n	""4"" [label=""$stack9 = lengthof bytes""];\n	""5"" [label=""b = 0""];\n	""6"" [label=""b = b + 1""];\n	""7"" [label=""b = bytes[i]""];\n	""8"" [label=""b_1 = tmp[b]""];\n	""9"" [label=""bytes := @parameter0: byte[]""];\n	""10"" [label=""goto""];\n	""11"" [label=""goto""];\n	""12"" [label=""goto""];\n	""13"" [label=""goto""];\n	""14"" [label=""hasUnderscores = 0""];\n	""15"" [label=""hasUnderscores = 1""];\n	""16"" [label=""i = 0""];\n	""17"" [label=""i = i + 1""];\n	""18"" [label=""i = lengthof tmp""];\n	""19"" [label=""if b == 95""];\n	""20"" [label=""if b >= i""];\n	""21"" [label=""if b_1 != 95""];\n	""22"" [label=""if bytes != null""];\n	""23"" [label=""if hasUnderscores == 0""];\n	""24"" [label=""if i >= $stack9""];\n	""25"" [label=""return $stack10""];\n	""26"" [label=""return $stack7""];\n	""27"" [label=""return null""];\n	""28"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""29"" [label=""tmp = bytes""];\n	""30"" [label=""tmp = newarray (byte)[$stack8]""];\n	""31"" [label=""tmp[i] = 32""];\n	""32"" [label=""tmp[i] = b""];\n	""1"" -> ""25""[label=""cfg_next""];\n	""10"" -> ""23""[label=""cfg_goto""];\n	""11"" -> ""20""[label=""cfg_goto""];\n	""12"" -> ""17""[label=""cfg_goto""];\n	""13"" -> ""4""[label=""cfg_goto""];\n	""14"" -> ""29""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""4""[label=""cfg_next""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""18"" -> ""5""[label=""cfg_next""];\n	""19"" -> ""31""[label=""cfg_true""];\n	""19"" -> ""32""[label=""cfg_false""];\n	""2"" -> ""26""[label=""cfg_next""];\n	""20"" -> ""23""[label=""cfg_true""];\n	""20"" -> ""8""[label=""cfg_false""];\n	""21"" -> ""15""[label=""cfg_false""];\n	""21"" -> ""6""[label=""cfg_true""];\n	""22"" -> ""14""[label=""cfg_true""];\n	""22"" -> ""27""[label=""cfg_false""];\n	""23"" -> ""2""[label=""cfg_true""];\n	""23"" -> ""3""[label=""cfg_false""];\n	""24"" -> ""1""[label=""cfg_true""];\n	""24"" -> ""7""[label=""cfg_false""];\n	""28"" -> ""9""[label=""cfg_next""];\n	""29"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""30""[label=""cfg_next""];\n	""30"" -> ""16""[label=""cfg_next""];\n	""31"" -> ""17""[label=""cfg_next""];\n	""32"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""24""[label=""cfg_next""];\n	""5"" -> ""20""[label=""cfg_next""];\n	""6"" -> ""11""[label=""cfg_next""];\n	""7"" -> ""19""[label=""cfg_next""];\n	""8"" -> ""21""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.QCodec.doEncoding(byte[]),Method,No Comment,"@Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    final byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);\n    if (this.encodeBlanks) {\n        for (int i = 0; i < data.length; i++) {\n            if (data[i] == SPACE) {\n                data[i] = UNDERSCORE;\n            }\n        }\n    }\n    return data;\n}",byte[] doEncoding(byte[]),"digraph cfg_doEncoding {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.net.QCodec: java.util.BitSet PRINTABLE_CHARS>""];\n	""2"" [label=""$stack5 = this.<org.apache.commons.codec.net.QCodec: boolean encodeBlanks>""];\n	""3"" [label=""$stack6 = lengthof data""];\n	""4"" [label=""$stack7 = data[i]""];\n	""5"" [label=""bytes := @parameter0: byte[]""];\n	""6"" [label=""data = staticinvoke <org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])>($stack4, bytes)""];\n	""7"" [label=""data[i] = 95""];\n	""8"" [label=""goto""];\n	""9"" [label=""i = 0""];\n	""10"" [label=""i = i + 1""];\n	""11"" [label=""if $stack5 == 0""];\n	""12"" [label=""if $stack7 != 32""];\n	""13"" [label=""if bytes != null""];\n	""14"" [label=""if i >= $stack6""];\n	""15"" [label=""return data""];\n	""16"" [label=""return null""];\n	""17"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""15""[label=""cfg_true""];\n	""11"" -> ""9""[label=""cfg_false""];\n	""12"" -> ""10""[label=""cfg_true""];\n	""12"" -> ""7""[label=""cfg_false""];\n	""13"" -> ""1""[label=""cfg_true""];\n	""13"" -> ""16""[label=""cfg_false""];\n	""14"" -> ""15""[label=""cfg_true""];\n	""14"" -> ""4""[label=""cfg_false""];\n	""17"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_goto""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.QCodec.encode(Object),Method,* Encodes an object into its quoted-printable form using the default Charset. Unsafe characters are escaped.\n     *\n     * @param obj\n     *            object to convert to quoted-printable form\n     * @return quoted-printable object\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof String) {\n        return encode((String) obj);\n    }\n    throw new EncoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be encoded using Q codec"");\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.EncoderException""];\n	""2"" [label=""$stack11 = (java.lang.String) obj""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String)>($stack11)""];\n	""4"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be encoded using Q codec\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if obj != null""];\n	""14"" [label=""obj := @parameter0: java.lang.Object""];\n	""15"" [label=""return $stack12""];\n	""16"" [label=""return null""];\n	""17"" [label=""specialinvoke $stack10.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack9)""];\n	""18"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""19"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""20"" [label=""throw $stack10""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""16""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""20""[label=""cfg_next""];\n	""18"" -> ""8""[label=""cfg_next""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.encode(String),Method,* Encodes a string into its quoted-printable form using the default Charset. Unsafe characters are escaped.\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @return quoted-printable string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"@Override\npublic String encode(final String sourceStr) throws EncoderException {\n    return encode(sourceStr, getCharset());\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String,java.nio.charset.Charset)>(sourceStr, $stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QCodec.encode(String,Charset)",Method,* Encodes a string into its quoted-printable form using the specified Charset. Unsafe characters are escaped.\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @param sourceCharset\n     *            the Charset for sourceStr\n     * @return quoted-printable string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.\n     * @since 1.7,"public String encode(final String sourceStr, final Charset sourceCharset) throws EncoderException {\n    return encodeText(sourceStr, sourceCharset);\n}","java.lang.String encode(java.lang.String,java.nio.charset.Charset)","digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String encodeText(java.lang.String,java.nio.charset.Charset)>(sourceStr, sourceCharset)""];\n	""2"" [label=""return $stack3""];\n	""3"" [label=""sourceCharset := @parameter1: java.nio.charset.Charset""];\n	""4"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.QCodec.encode(String,String)",Method,* Encodes a string into its quoted-printable form using the specified Charset. Unsafe characters are escaped.\n     *\n     * @param sourceStr\n     *            string to convert to quoted-printable form\n     * @param sourceCharset\n     *            the Charset for sourceStr\n     * @return quoted-printable string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"public String encode(final String sourceStr, final String sourceCharset) throws EncoderException {\n    try {\n        return encodeText(sourceStr, sourceCharset);\n    } catch (final UnsupportedCharsetException e) {\n        throw new EncoderException(e.getMessage(), e);\n    }\n}","java.lang.String encode(java.lang.String,java.lang.String)","digraph cfg_encode {\n	""1"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.QCodec: java.lang.String encodeText(java.lang.String,java.lang.String)>(sourceStr, sourceCharset)""];\n	""2"" [label=""$stack5 := @caughtexception""];\n	""3"" [label=""$stack6 = virtualinvoke e.<java.nio.charset.UnsupportedCharsetException: java.lang.String getMessage()>()""];\n	""4"" [label=""$stack7 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""e = $stack5""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""sourceCharset := @parameter1: java.lang.String""];\n	""8"" [label=""sourceStr := @parameter0: java.lang.String""];\n	""9"" [label=""specialinvoke $stack7.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack6, e)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""11"" [label=""throw $stack7""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.getEncoding(),Method,No Comment,"@Override\nprotected String getEncoding() {\n    return ""Q"";\n}",java.lang.String getEncoding(),"digraph cfg_getEncoding {\n	""1"" [label=""return \""Q\""""];\n	""2"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.QCodec.isEncodeBlanks(),Method,"* Tests if optional transformation of SPACE characters is to be used\n     *\n     * @return {@code true} if SPACE characters are to be transformed, {@code false} otherwise",public boolean isEncodeBlanks() {\n    return this.encodeBlanks;\n},boolean isEncodeBlanks(),"digraph cfg_isEncodeBlanks {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.QCodec: boolean encodeBlanks>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean),Method,"* Defines whether optional transformation of SPACE characters is to be used\n     *\n     * @param b\n     *            {@code true} if SPACE characters are to be transformed, {@code false} otherwise",public void setEncodeBlanks(final boolean b) {\n    this.encodeBlanks = b;\n},void setEncodeBlanks(boolean),"digraph cfg_setEncodeBlanks {\n	""1"" [label=""b := @parameter0: boolean""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""4"" [label=""this.<org.apache.commons.codec.net.QCodec: boolean encodeBlanks> = b""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.<init>(),Constructor,* Default constructor.,public QCodec() {\n    this(StandardCharsets.UTF_8);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.QCodec: void <init>(java.nio.charset.Charset)>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.<init>(Charset),Constructor,* Constructor which allows for the selection of a default Charset.\n     *\n     * @param charset\n     *            the default string Charset to use.\n     *\n     * @see Charset\n     * @since 1.7,public QCodec(final Charset charset) {\n    super(charset);\n},void <init>(java.nio.charset.Charset),"digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.RFC1522Codec: void <init>(java.nio.charset.Charset)>(charset)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.QCodec.<init>(String),Constructor,* Constructor which allows for the selection of a default Charset.\n     *\n     * @param charsetName\n     *            the Charset to use.\n     * @throws java.nio.charset.UnsupportedCharsetException\n     *             If the named Charset is unavailable\n     * @since 1.7 throws UnsupportedCharsetException if the named Charset is unavailable\n     * @see Charset,public QCodec(final String charsetName) {\n    this(Charset.forName(charsetName));\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName)""];\n	""2"" [label=""charsetName := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.net.QCodec: void <init>(java.nio.charset.Charset)>($stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.QCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.PercentCodec.canEncode(byte),Method,No Comment,private boolean canEncode(final byte c) {\n    return !isAsciiChar(c) || inAlwaysEncodeCharsRange(c) && alwaysEncodeChars.get(c);\n},boolean canEncode(byte),"digraph cfg_canEncode {\n	""1"" [label=""$stack2 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: boolean isAsciiChar(byte)>(c)""];\n	""2"" [label=""$stack3 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: boolean inAlwaysEncodeCharsRange(byte)>(c)""];\n	""3"" [label=""$stack4 = 0""];\n	""4"" [label=""$stack4 = 1""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.net.PercentCodec: java.util.BitSet alwaysEncodeChars>""];\n	""6"" [label=""$stack6 = virtualinvoke $stack5.<java.util.BitSet: boolean get(int)>(c)""];\n	""7"" [label=""c := @parameter0: byte""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack2 == 0""];\n	""10"" [label=""if $stack3 == 0""];\n	""11"" [label=""if $stack6 == 0""];\n	""12"" [label=""return $stack4""];\n	""13"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_true""];\n	""10"" -> ""5""[label=""cfg_false""];\n	""11"" -> ""3""[label=""cfg_true""];\n	""11"" -> ""4""[label=""cfg_false""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""11""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""12""[label=""cfg_goto""];\n	""9"" -> ""2""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_true""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.containsSpace(byte[]),Method,No Comment,private boolean containsSpace(final byte[] bytes) {\n    for (final byte b : bytes) {\n        if (b == ' ') {\n            return true;\n        }\n    }\n    return false;\n},boolean containsSpace(byte[]),"digraph cfg_containsSpace {\n	""1"" [label=""b = l2[l4]""];\n	""2"" [label=""bytes := @parameter0: byte[]""];\n	""3"" [label=""goto""];\n	""4"" [label=""if b != 32""];\n	""5"" [label=""if l4 >= l3""];\n	""6"" [label=""l2 = bytes""];\n	""7"" [label=""l3 = lengthof l2""];\n	""8"" [label=""l4 = 0""];\n	""9"" [label=""l4 = l4 + 1""];\n	""10"" [label=""return 0""];\n	""11"" [label=""return 1""];\n	""12"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""11""[label=""cfg_false""];\n	""4"" -> ""9""[label=""cfg_true""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""10""[label=""cfg_true""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.decode(byte[]),Method,* Decodes bytes encoded with Percent-Encoding based on RFC 3986. The reverse process is performed in order to\n     * decode the encoded characters to Unicode.,"@Override\npublic byte[] decode(final byte[] bytes) throws DecoderException {\n    if (bytes == null) {\n        return null;\n    }\n    final ByteBuffer buffer = ByteBuffer.allocate(expectedDecodingBytes(bytes));\n    for (int i = 0; i < bytes.length; i++) {\n        final byte b = bytes[i];\n        if (b == ESCAPE_CHAR) {\n            try {\n                final int u = Utils.digit16(bytes[++i]);\n                final int l = Utils.digit16(bytes[++i]);\n                buffer.put((byte) ((u << 4) + l));\n            } catch (final ArrayIndexOutOfBoundsException e) {\n                throw new DecoderException(""Invalid percent decoding: "", e);\n            }\n        } else if (plusForSpace && b == '+') {\n            buffer.put((byte) ' ');\n        } else {\n            buffer.put(b);\n        }\n    }\n    return buffer.array();\n}",byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.net.PercentCodec: boolean plusForSpace>""];\n	""2"" [label=""$stack11 = bytes[i]""];\n	""3"" [label=""$stack12 = bytes[i]""];\n	""4"" [label=""$stack13 = u << 4""];\n	""5"" [label=""$stack14 = $stack13 + l""];\n	""6"" [label=""$stack15 = (byte) $stack14""];\n	""7"" [label=""$stack16 := @caughtexception""];\n	""8"" [label=""$stack17 = new org.apache.commons.codec.DecoderException""];\n	""9"" [label=""$stack7 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: int expectedDecodingBytes(byte[])>(bytes)""];\n	""10"" [label=""$stack8 = lengthof bytes""];\n	""11"" [label=""$stack9 = virtualinvoke buffer.<java.nio.ByteBuffer: byte[] array()>()""];\n	""12"" [label=""b = bytes[i]""];\n	""13"" [label=""buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($stack7)""];\n	""14"" [label=""bytes := @parameter0: byte[]""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""i = 0""];\n	""19"" [label=""i = i + 1""];\n	""20"" [label=""i = i + 1""];\n	""21"" [label=""i = i + 1""];\n	""22"" [label=""if $stack10 == 0""];\n	""23"" [label=""if b != 37""];\n	""24"" [label=""if b != 43""];\n	""25"" [label=""if bytes != null""];\n	""26"" [label=""if i >= $stack8""];\n	""27"" [label=""l = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack12)""];\n	""28"" [label=""return $stack9""];\n	""29"" [label=""return null""];\n	""30"" [label=""specialinvoke $stack17.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>(\""Invalid percent decoding: \"", u)""];\n	""31"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""32"" [label=""throw $stack17""];\n	""33"" [label=""u = $stack16""];\n	""34"" [label=""u = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack11)""];\n	""35"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack15)""];\n	""36"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(32)""];\n	""37"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b)""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""26""[label=""cfg_next""];\n	""11"" -> ""28""[label=""cfg_next""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""13"" -> ""18""[label=""cfg_next""];\n	""14"" -> ""25""[label=""cfg_next""];\n	""15"" -> ""21""[label=""cfg_goto""];\n	""16"" -> ""21""[label=""cfg_goto""];\n	""17"" -> ""10""[label=""cfg_goto""];\n	""18"" -> ""10""[label=""cfg_next""];\n	""19"" -> ""2""[label=""cfg_next""];\n	""19"" -> ""7""[label=""cfg_except""];\n	""2"" -> ""34""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_except""];\n	""20"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""7""[label=""cfg_except""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_false""];\n	""22"" -> ""37""[label=""cfg_true""];\n	""23"" -> ""1""[label=""cfg_true""];\n	""23"" -> ""19""[label=""cfg_false""];\n	""24"" -> ""36""[label=""cfg_false""];\n	""24"" -> ""37""[label=""cfg_true""];\n	""25"" -> ""29""[label=""cfg_false""];\n	""25"" -> ""9""[label=""cfg_true""];\n	""26"" -> ""11""[label=""cfg_true""];\n	""26"" -> ""12""[label=""cfg_false""];\n	""27"" -> ""4""[label=""cfg_next""];\n	""27"" -> ""7""[label=""cfg_except""];\n	""3"" -> ""27""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_except""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""14""[label=""cfg_next""];\n	""33"" -> ""8""[label=""cfg_next""];\n	""34"" -> ""20""[label=""cfg_next""];\n	""34"" -> ""7""[label=""cfg_except""];\n	""35"" -> ""15""[label=""cfg_next""];\n	""35"" -> ""7""[label=""cfg_except""];\n	""36"" -> ""16""[label=""cfg_next""];\n	""37"" -> ""21""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_except""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_except""];\n	""6"" -> ""35""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_except""];\n	""7"" -> ""33""[label=""cfg_next""];\n	""8"" -> ""30""[label=""cfg_next""];\n	""9"" -> ""13""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.PercentCodec.decode(Object),Method,"* Decodes a byte[] Object, whose bytes are encoded with Percent-Encoding.\n     *\n     * @param obj the object to decode\n     * @return the decoding result byte[] as Object\n     * @throws DecoderException if the object is not a byte array","@Override\npublic Object decode(final Object obj) throws DecoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return decode((byte[]) obj);\n    }\n    throw new DecoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be Percent decoded"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.DecoderException""];\n	""2"" [label=""$stack11 = (byte[]) obj""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.PercentCodec: byte[] decode(byte[])>($stack11)""];\n	""4"" [label=""$stack2 = obj instanceof byte[]""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be Percent decoded\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if obj != null""];\n	""14"" [label=""obj := @parameter0: java.lang.Object""];\n	""15"" [label=""return $stack12""];\n	""16"" [label=""return null""];\n	""17"" [label=""specialinvoke $stack10.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack9)""];\n	""18"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""19"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""20"" [label=""throw $stack10""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""16""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""20""[label=""cfg_next""];\n	""18"" -> ""8""[label=""cfg_next""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.PercentCodec.doEncode(byte[],int,boolean)",Method,No Comment,"private byte[] doEncode(final byte[] bytes, final int expectedLength, final boolean willEncode) {\n    final ByteBuffer buffer = ByteBuffer.allocate(expectedLength);\n    for (final byte b : bytes) {\n        if (willEncode && canEncode(b)) {\n            byte bb = b;\n            if (bb < 0) {\n                bb = (byte) (256 + bb);\n            }\n            final char hex1 = Utils.hexDigit(bb >> 4);\n            final char hex2 = Utils.hexDigit(bb);\n            buffer.put(ESCAPE_CHAR);\n            buffer.put((byte) hex1);\n            buffer.put((byte) hex2);\n        } else if (plusForSpace && b == ' ') {\n            buffer.put((byte) '+');\n        } else {\n            buffer.put(b);\n        }\n    }\n    return buffer.array();\n}","byte[] doEncode(byte[],int,boolean)","digraph cfg_doEncode {\n	""1"" [label=""$stack12 = virtualinvoke buffer.<java.nio.ByteBuffer: byte[] array()>()""];\n	""2"" [label=""$stack13 = this.<org.apache.commons.codec.net.PercentCodec: boolean plusForSpace>""];\n	""3"" [label=""$stack14 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: boolean canEncode(byte)>(b)""];\n	""4"" [label=""$stack15 = bb >> 4""];\n	""5"" [label=""$stack16 = (byte) hex1""];\n	""6"" [label=""$stack17 = (byte) hex2""];\n	""7"" [label=""$stack18 = 256 + bb""];\n	""8"" [label=""b = l5[l7]""];\n	""9"" [label=""bb = (byte) $stack18""];\n	""10"" [label=""bb = b""];\n	""11"" [label=""buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(expectedLength)""];\n	""12"" [label=""bytes := @parameter0: byte[]""];\n	""13"" [label=""expectedLength := @parameter1: int""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""hex1 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>($stack15)""];\n	""18"" [label=""hex2 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>(bb)""];\n	""19"" [label=""if $stack13 == 0""];\n	""20"" [label=""if $stack14 == 0""];\n	""21"" [label=""if b != 32""];\n	""22"" [label=""if bb >= 0""];\n	""23"" [label=""if l7 >= l6""];\n	""24"" [label=""if willEncode == 0""];\n	""25"" [label=""l5 = bytes""];\n	""26"" [label=""l6 = lengthof l5""];\n	""27"" [label=""l7 = 0""];\n	""28"" [label=""l7 = l7 + 1""];\n	""29"" [label=""return $stack12""];\n	""30"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""31"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack16)""];\n	""32"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack17)""];\n	""33"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(37)""];\n	""34"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(43)""];\n	""35"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b)""];\n	""36"" [label=""willEncode := @parameter2: boolean""];\n	""1"" -> ""29""[label=""cfg_next""];\n	""10"" -> ""22""[label=""cfg_next""];\n	""11"" -> ""25""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""36""[label=""cfg_next""];\n	""14"" -> ""28""[label=""cfg_goto""];\n	""15"" -> ""28""[label=""cfg_goto""];\n	""16"" -> ""23""[label=""cfg_goto""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""33""[label=""cfg_next""];\n	""19"" -> ""21""[label=""cfg_false""];\n	""19"" -> ""35""[label=""cfg_true""];\n	""2"" -> ""19""[label=""cfg_next""];\n	""20"" -> ""10""[label=""cfg_false""];\n	""20"" -> ""2""[label=""cfg_true""];\n	""21"" -> ""34""[label=""cfg_false""];\n	""21"" -> ""35""[label=""cfg_true""];\n	""22"" -> ""4""[label=""cfg_true""];\n	""22"" -> ""7""[label=""cfg_false""];\n	""23"" -> ""1""[label=""cfg_true""];\n	""23"" -> ""8""[label=""cfg_false""];\n	""24"" -> ""2""[label=""cfg_true""];\n	""24"" -> ""3""[label=""cfg_false""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""23""[label=""cfg_next""];\n	""28"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""20""[label=""cfg_next""];\n	""30"" -> ""12""[label=""cfg_next""];\n	""31"" -> ""6""[label=""cfg_next""];\n	""32"" -> ""14""[label=""cfg_next""];\n	""33"" -> ""5""[label=""cfg_next""];\n	""34"" -> ""15""[label=""cfg_next""];\n	""35"" -> ""28""[label=""cfg_next""];\n	""36"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""31""[label=""cfg_next""];\n	""6"" -> ""32""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.encode(byte[]),Method,"* Percent-Encoding based on RFC 3986. The non US-ASCII characters are encoded, as well as the\n     * US-ASCII characters that are configured to be always encoded.","@Override\npublic byte[] encode(final byte[] bytes) throws EncoderException {\n    if (bytes == null) {\n        return null;\n    }\n    final int expectedEncodingBytes = expectedEncodingBytes(bytes);\n    final boolean willEncode = expectedEncodingBytes != bytes.length;\n    if (willEncode || plusForSpace && containsSpace(bytes)) {\n        return doEncode(bytes, expectedEncodingBytes, willEncode);\n    }\n    return bytes;\n}",byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack4 = lengthof bytes""];\n	""2"" [label=""$stack5 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: byte[] doEncode(byte[],int,boolean)>(bytes, expectedEncodingBytes, willEncode)""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.net.PercentCodec: boolean plusForSpace>""];\n	""4"" [label=""$stack7 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: boolean containsSpace(byte[])>(bytes)""];\n	""5"" [label=""bytes := @parameter0: byte[]""];\n	""6"" [label=""expectedEncodingBytes = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: int expectedEncodingBytes(byte[])>(bytes)""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack6 == 0""];\n	""9"" [label=""if $stack7 == 0""];\n	""10"" [label=""if bytes != null""];\n	""11"" [label=""if expectedEncodingBytes == $stack4""];\n	""12"" [label=""if willEncode != 0""];\n	""13"" [label=""return $stack5""];\n	""14"" [label=""return bytes""];\n	""15"" [label=""return null""];\n	""16"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""17"" [label=""willEncode = 0""];\n	""18"" [label=""willEncode = 1""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_false""];\n	""10"" -> ""6""[label=""cfg_true""];\n	""11"" -> ""17""[label=""cfg_true""];\n	""11"" -> ""18""[label=""cfg_false""];\n	""12"" -> ""2""[label=""cfg_true""];\n	""12"" -> ""3""[label=""cfg_false""];\n	""16"" -> ""5""[label=""cfg_next""];\n	""17"" -> ""12""[label=""cfg_next""];\n	""18"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_goto""];\n	""8"" -> ""14""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""14""[label=""cfg_true""];\n	""9"" -> ""2""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.net.PercentCodec.encode(Object),Method,* Encodes an object into using the Percent-Encoding. Only byte[] objects are accepted.\n     *\n     * @param obj the object to encode\n     * @return the encoding result byte[] as Object\n     * @throws EncoderException if the object is not a byte array,"@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return encode((byte[]) obj);\n    }\n    throw new EncoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be Percent encoded"");\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.EncoderException""];\n	""2"" [label=""$stack11 = (byte[]) obj""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.PercentCodec: byte[] encode(byte[])>($stack11)""];\n	""4"" [label=""$stack2 = obj instanceof byte[]""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be Percent encoded\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if obj != null""];\n	""14"" [label=""obj := @parameter0: java.lang.Object""];\n	""15"" [label=""return $stack12""];\n	""16"" [label=""return null""];\n	""17"" [label=""specialinvoke $stack10.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack9)""];\n	""18"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""19"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""20"" [label=""throw $stack10""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""16""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""20""[label=""cfg_next""];\n	""18"" -> ""8""[label=""cfg_next""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.PercentCodec.expectedDecodingBytes(byte[]),Method,No Comment,private int expectedDecodingBytes(final byte[] bytes) {\n    int byteCount = 0;\n    for (int i = 0; i < bytes.length; ) {\n        final byte b = bytes[i];\n        i += b == ESCAPE_CHAR ? 3 : 1;\n        byteCount++;\n    }\n    return byteCount;\n},int expectedDecodingBytes(byte[]),"digraph cfg_expectedDecodingBytes {\n	""1"" [label=""$stack5 = lengthof bytes""];\n	""2"" [label=""$stack6 = 1""];\n	""3"" [label=""$stack6 = 3""];\n	""4"" [label=""b = bytes[i]""];\n	""5"" [label=""byteCount = 0""];\n	""6"" [label=""byteCount = byteCount + 1""];\n	""7"" [label=""bytes := @parameter0: byte[]""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""i = 0""];\n	""11"" [label=""i = i + $stack6""];\n	""12"" [label=""if b != 37""];\n	""13"" [label=""if i >= $stack5""];\n	""14"" [label=""return byteCount""];\n	""15"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_true""];\n	""12"" -> ""3""[label=""cfg_false""];\n	""13"" -> ""14""[label=""cfg_true""];\n	""13"" -> ""4""[label=""cfg_false""];\n	""15"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_goto""];\n	""9"" -> ""1""[label=""cfg_goto""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.expectedEncodingBytes(byte[]),Method,No Comment,private int expectedEncodingBytes(final byte[] bytes) {\n    int byteCount = 0;\n    for (final byte b : bytes) {\n        byteCount += canEncode(b) ? 3 : 1;\n    }\n    return byteCount;\n},int expectedEncodingBytes(byte[]),"digraph cfg_expectedEncodingBytes {\n	""1"" [label=""$stack7 = specialinvoke this.<org.apache.commons.codec.net.PercentCodec: boolean canEncode(byte)>(b)""];\n	""2"" [label=""$stack8 = 1""];\n	""3"" [label=""$stack8 = 3""];\n	""4"" [label=""b = l3[l5]""];\n	""5"" [label=""byteCount = 0""];\n	""6"" [label=""byteCount = byteCount + $stack8""];\n	""7"" [label=""bytes := @parameter0: byte[]""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""if $stack7 == 0""];\n	""11"" [label=""if l5 >= l4""];\n	""12"" [label=""l3 = bytes""];\n	""13"" [label=""l4 = lengthof l3""];\n	""14"" [label=""l5 = 0""];\n	""15"" [label=""l5 = l5 + 1""];\n	""16"" [label=""return byteCount""];\n	""17"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_true""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""11"" -> ""16""[label=""cfg_true""];\n	""11"" -> ""4""[label=""cfg_false""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""9""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_goto""];\n	""9"" -> ""11""[label=""cfg_goto""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.inAlwaysEncodeCharsRange(byte),Method,No Comment,private boolean inAlwaysEncodeCharsRange(final byte c) {\n    return c >= alwaysEncodeCharsMin && c <= alwaysEncodeCharsMax;\n},boolean inAlwaysEncodeCharsRange(byte),"digraph cfg_inAlwaysEncodeCharsRange {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMin>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMax>""];\n	""3"" [label=""$stack4 = 0""];\n	""4"" [label=""$stack4 = 1""];\n	""5"" [label=""c := @parameter0: byte""];\n	""6"" [label=""goto""];\n	""7"" [label=""if c < $stack2""];\n	""8"" [label=""if c > $stack3""];\n	""9"" [label=""return $stack4""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_goto""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""8"" -> ""3""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChar(byte),Method,* Inserts a single character into a BitSet and maintains the min and max of the characters of the\n     * {@code BitSet alwaysEncodeChars} in order to avoid look-ups when a byte is out of this range.\n     *\n     * @param b the byte that is candidate for min and max limit,"private void insertAlwaysEncodeChar(final byte b) {\n    if (b < 0) {\n        throw new IllegalArgumentException(""byte must be >= 0"");\n    }\n    this.alwaysEncodeChars.set(b);\n    if (b < alwaysEncodeCharsMin) {\n        alwaysEncodeCharsMin = b;\n    }\n    if (b > alwaysEncodeCharsMax) {\n        alwaysEncodeCharsMax = b;\n    }\n}",void insertAlwaysEncodeChar(byte),"digraph cfg_insertAlwaysEncodeChar {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.net.PercentCodec: java.util.BitSet alwaysEncodeChars>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMin>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMax>""];\n	""4"" [label=""$stack5 = new java.lang.IllegalArgumentException""];\n	""5"" [label=""b := @parameter0: byte""];\n	""6"" [label=""if b <= $stack4""];\n	""7"" [label=""if b >= $stack3""];\n	""8"" [label=""if b >= 0""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""byte must be >= 0\"")""];\n	""11"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""12"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMax> = b""];\n	""13"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMin> = b""];\n	""14"" [label=""throw $stack5""];\n	""15"" [label=""virtualinvoke $stack2.<java.util.BitSet: void set(int)>(b)""];\n	""1"" -> ""15""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""5""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""3""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_false""];\n	""6"" -> ""9""[label=""cfg_true""];\n	""7"" -> ""13""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChars(byte[]),Method,* Inserts the byte array into a BitSet for faster lookup.\n     *\n     * @param alwaysEncodeCharsArray,private void insertAlwaysEncodeChars(final byte[] alwaysEncodeCharsArray) {\n    if (alwaysEncodeCharsArray != null) {\n        for (final byte b : alwaysEncodeCharsArray) {\n            insertAlwaysEncodeChar(b);\n        }\n    }\n    insertAlwaysEncodeChar(ESCAPE_CHAR);\n},void insertAlwaysEncodeChars(byte[]),"digraph cfg_insertAlwaysEncodeChars {\n	""1"" [label=""alwaysEncodeCharsArray := @parameter0: byte[]""];\n	""2"" [label=""b = l2[l4]""];\n	""3"" [label=""goto""];\n	""4"" [label=""if alwaysEncodeCharsArray == null""];\n	""5"" [label=""if l4 >= l3""];\n	""6"" [label=""l2 = alwaysEncodeCharsArray""];\n	""7"" [label=""l3 = lengthof l2""];\n	""8"" [label=""l4 = 0""];\n	""9"" [label=""l4 = l4 + 1""];\n	""10"" [label=""return""];\n	""11"" [label=""specialinvoke this.<org.apache.commons.codec.net.PercentCodec: void insertAlwaysEncodeChar(byte)>(37)""];\n	""12"" [label=""specialinvoke this.<org.apache.commons.codec.net.PercentCodec: void insertAlwaysEncodeChar(byte)>(b)""];\n	""13"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""11""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""5"" -> ""11""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.isAsciiChar(byte),Method,No Comment,private boolean isAsciiChar(final byte c) {\n    return c >= 0;\n},boolean isAsciiChar(byte),"digraph cfg_isAsciiChar {\n	""1"" [label=""$stack2 = 0""];\n	""2"" [label=""$stack2 = 1""];\n	""3"" [label=""c := @parameter0: byte""];\n	""4"" [label=""goto""];\n	""5"" [label=""if c < 0""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.net.PercentCodec.<init>(),Constructor,"* Constructs a Percent coded that will encode all the non US-ASCII characters using the Percent-Encoding\n     * while it will not encode all the US-ASCII characters, except for character '%' that is used as escape\n     * character for Percent-Encoding.",public PercentCodec() {\n    this.plusForSpace = false;\n    insertAlwaysEncodeChar(ESCAPE_CHAR);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = new java.util.BitSet""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke $stack1.<java.util.BitSet: void <init>()>()""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.net.PercentCodec: void insertAlwaysEncodeChar(byte)>(37)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""7"" [label=""this.<org.apache.commons.codec.net.PercentCodec: boolean plusForSpace> = 0""];\n	""8"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMax> = -2147483648""];\n	""9"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMin> = 2147483647""];\n	""10"" [label=""this.<org.apache.commons.codec.net.PercentCodec: java.util.BitSet alwaysEncodeChars> = $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.PercentCodec.<init>(byte[],boolean)",Constructor,"* Constructs a Percent codec by specifying the characters that belong to US-ASCII that should\n     * always be encoded. The rest US-ASCII characters will not be encoded, except for character '%' that\n     * is used as escape character for Percent-Encoding.\n     *\n     * @param alwaysEncodeChars the unsafe characters that should always be encoded\n     * @param plusForSpace      the flag defining if the space character should be encoded as '+'","public PercentCodec(final byte[] alwaysEncodeChars, final boolean plusForSpace) {\n    this.plusForSpace = plusForSpace;\n    insertAlwaysEncodeChars(alwaysEncodeChars);\n}","void <init>(byte[],boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = new java.util.BitSet""];\n	""2"" [label=""alwaysEncodeChars := @parameter0: byte[]""];\n	""3"" [label=""plusForSpace := @parameter1: boolean""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<java.util.BitSet: void <init>()>()""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""specialinvoke this.<org.apache.commons.codec.net.PercentCodec: void insertAlwaysEncodeChars(byte[])>(alwaysEncodeChars)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.net.PercentCodec""];\n	""9"" [label=""this.<org.apache.commons.codec.net.PercentCodec: boolean plusForSpace> = plusForSpace""];\n	""10"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMax> = -2147483648""];\n	""11"" [label=""this.<org.apache.commons.codec.net.PercentCodec: int alwaysEncodeCharsMin> = 2147483647""];\n	""12"" [label=""this.<org.apache.commons.codec.net.PercentCodec: java.util.BitSet alwaysEncodeChars> = $stack3""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.decodeUrl(byte[]),Method,* Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     *\n     * @param bytes\n     *            array of URL safe characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *             Thrown if URL decoding is unsuccessful,"public static final byte[] decodeUrl(final byte[] bytes) throws DecoderException {\n    if (bytes == null) {\n        return null;\n    }\n    final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    for (int i = 0; i < bytes.length; i++) {\n        final int b = bytes[i];\n        if (b == '+') {\n            buffer.write(' ');\n        } else if (b == ESCAPE_CHAR) {\n            try {\n                final int u = Utils.digit16(bytes[++i]);\n                final int l = Utils.digit16(bytes[++i]);\n                buffer.write((char) ((u << 4) + l));\n            } catch (final ArrayIndexOutOfBoundsException e) {\n                throw new DecoderException(""Invalid URL encoding: "", e);\n            }\n        } else {\n            buffer.write(b);\n        }\n    }\n    return buffer.toByteArray();\n}",byte[] decodeUrl(byte[]),"digraph cfg_decodeUrl {\n	""1"" [label=""$stack10 = bytes[i]""];\n	""2"" [label=""$stack11 = u << 4""];\n	""3"" [label=""$stack12 = $stack11 + l""];\n	""4"" [label=""$stack13 = (char) $stack12""];\n	""5"" [label=""$stack14 := @caughtexception""];\n	""6"" [label=""$stack15 = new org.apache.commons.codec.DecoderException""];\n	""7"" [label=""$stack6 = new java.io.ByteArrayOutputStream""];\n	""8"" [label=""$stack7 = lengthof bytes""];\n	""9"" [label=""$stack8 = virtualinvoke buffer.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()""];\n	""10"" [label=""$stack9 = bytes[i]""];\n	""11"" [label=""b = bytes[i]""];\n	""12"" [label=""buffer = $stack6""];\n	""13"" [label=""bytes := @parameter0: byte[]""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""i = 0""];\n	""18"" [label=""i = i + 1""];\n	""19"" [label=""i = i + 1""];\n	""20"" [label=""i = i + 1""];\n	""21"" [label=""if b != 37""];\n	""22"" [label=""if b != 43""];\n	""23"" [label=""if bytes != null""];\n	""24"" [label=""if i >= $stack7""];\n	""25"" [label=""l = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack10)""];\n	""26"" [label=""return $stack8""];\n	""27"" [label=""return null""];\n	""28"" [label=""specialinvoke $stack15.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>(\""Invalid URL encoding: \"", u)""];\n	""29"" [label=""specialinvoke $stack6.<java.io.ByteArrayOutputStream: void <init>()>()""];\n	""30"" [label=""throw $stack15""];\n	""31"" [label=""u = $stack14""];\n	""32"" [label=""u = staticinvoke <org.apache.commons.codec.net.Utils: int digit16(byte)>($stack9)""];\n	""33"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>($stack13)""];\n	""34"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(32)""];\n	""35"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(b)""];\n	""1"" -> ""25""[label=""cfg_next""];\n	""1"" -> ""5""[label=""cfg_except""];\n	""10"" -> ""32""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_except""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""12"" -> ""17""[label=""cfg_next""];\n	""13"" -> ""23""[label=""cfg_next""];\n	""14"" -> ""18""[label=""cfg_goto""];\n	""15"" -> ""18""[label=""cfg_goto""];\n	""16"" -> ""8""[label=""cfg_goto""];\n	""17"" -> ""8""[label=""cfg_next""];\n	""18"" -> ""16""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""19"" -> ""5""[label=""cfg_except""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_except""];\n	""20"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""5""[label=""cfg_except""];\n	""21"" -> ""19""[label=""cfg_false""];\n	""21"" -> ""35""[label=""cfg_true""];\n	""22"" -> ""21""[label=""cfg_true""];\n	""22"" -> ""34""[label=""cfg_false""];\n	""23"" -> ""27""[label=""cfg_false""];\n	""23"" -> ""7""[label=""cfg_true""];\n	""24"" -> ""11""[label=""cfg_false""];\n	""24"" -> ""9""[label=""cfg_true""];\n	""25"" -> ""2""[label=""cfg_next""];\n	""25"" -> ""5""[label=""cfg_except""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_except""];\n	""31"" -> ""6""[label=""cfg_next""];\n	""32"" -> ""20""[label=""cfg_next""];\n	""32"" -> ""5""[label=""cfg_except""];\n	""33"" -> ""15""[label=""cfg_next""];\n	""33"" -> ""5""[label=""cfg_except""];\n	""34"" -> ""14""[label=""cfg_next""];\n	""35"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""33""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_except""];\n	""5"" -> ""31""[label=""cfg_next""];\n	""6"" -> ""28""[label=""cfg_next""];\n	""7"" -> ""29""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""26""[label=""cfg_next""];\n}\n","public , static , final "
"org.apache.commons.codec.net.URLCodec.encodeUrl(BitSet,byte[])",Method,* Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n     *\n     * @param urlsafe\n     *            bitset of characters deemed URL safe\n     * @param bytes\n     *            array of bytes to convert to URL safe characters\n     * @return array of bytes containing URL safe characters,"public static final byte[] encodeUrl(BitSet urlsafe, final byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (urlsafe == null) {\n        urlsafe = WWW_FORM_URL_SAFE;\n    }\n    final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    for (final byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (urlsafe.get(b)) {\n            if (b == ' ') {\n                b = '+';\n            }\n            buffer.write(b);\n        } else {\n            buffer.write(ESCAPE_CHAR);\n            final char hex1 = Utils.hexDigit(b >> 4);\n            final char hex2 = Utils.hexDigit(b);\n            buffer.write(hex1);\n            buffer.write(hex2);\n        }\n    }\n    return buffer.toByteArray();\n}","byte[] encodeUrl(java.util.BitSet,byte[])","digraph cfg_encodeUrl {\n	""1"" [label=""$stack10 = new java.io.ByteArrayOutputStream""];\n	""2"" [label=""$stack11 = virtualinvoke buffer.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()""];\n	""3"" [label=""$stack12 = virtualinvoke urlsafe.<java.util.BitSet: boolean get(int)>(b)""];\n	""4"" [label=""$stack13 = b >> 4""];\n	""5"" [label=""b = 256 + b""];\n	""6"" [label=""b = 43""];\n	""7"" [label=""b = c""];\n	""8"" [label=""buffer = $stack10""];\n	""9"" [label=""bytes := @parameter1: byte[]""];\n	""10"" [label=""c = l3[l5]""];\n	""11"" [label=""goto""];\n	""12"" [label=""goto""];\n	""13"" [label=""hex1 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>($stack13)""];\n	""14"" [label=""hex2 = staticinvoke <org.apache.commons.codec.net.Utils: char hexDigit(int)>(b)""];\n	""15"" [label=""if $stack12 == 0""];\n	""16"" [label=""if b != 32""];\n	""17"" [label=""if b >= 0""];\n	""18"" [label=""if bytes != null""];\n	""19"" [label=""if l5 >= l4""];\n	""20"" [label=""if urlsafe != null""];\n	""21"" [label=""l3 = bytes""];\n	""22"" [label=""l4 = lengthof l3""];\n	""23"" [label=""l5 = 0""];\n	""24"" [label=""l5 = l5 + 1""];\n	""25"" [label=""return $stack11""];\n	""26"" [label=""return null""];\n	""27"" [label=""specialinvoke $stack10.<java.io.ByteArrayOutputStream: void <init>()>()""];\n	""28"" [label=""urlsafe := @parameter0: java.util.BitSet""];\n	""29"" [label=""urlsafe = <org.apache.commons.codec.net.URLCodec: java.util.BitSet WWW_FORM_URL_SAFE>""];\n	""30"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(37)""];\n	""31"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(b)""];\n	""32"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(hex1)""];\n	""33"" [label=""virtualinvoke buffer.<java.io.ByteArrayOutputStream: void write(int)>(hex2)""];\n	""1"" -> ""27""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""24""[label=""cfg_goto""];\n	""12"" -> ""19""[label=""cfg_goto""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""32""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_false""];\n	""15"" -> ""30""[label=""cfg_true""];\n	""16"" -> ""31""[label=""cfg_true""];\n	""16"" -> ""6""[label=""cfg_false""];\n	""17"" -> ""3""[label=""cfg_true""];\n	""17"" -> ""5""[label=""cfg_false""];\n	""18"" -> ""20""[label=""cfg_true""];\n	""18"" -> ""26""[label=""cfg_false""];\n	""19"" -> ""10""[label=""cfg_false""];\n	""19"" -> ""2""[label=""cfg_true""];\n	""2"" -> ""25""[label=""cfg_next""];\n	""20"" -> ""1""[label=""cfg_true""];\n	""20"" -> ""29""[label=""cfg_false""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""24"" -> ""12""[label=""cfg_next""];\n	""27"" -> ""8""[label=""cfg_next""];\n	""28"" -> ""9""[label=""cfg_next""];\n	""29"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""30"" -> ""4""[label=""cfg_next""];\n	""31"" -> ""11""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""24""[label=""cfg_next""];\n	""4"" -> ""13""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""31""[label=""cfg_next""];\n	""7"" -> ""17""[label=""cfg_next""];\n	""8"" -> ""21""[label=""cfg_next""];\n	""9"" -> ""18""[label=""cfg_next""];\n}\n","public , static , final "
org.apache.commons.codec.net.URLCodec.decode(byte[]),Method,* Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted\n     * back to their original representation.\n     *\n     * @param bytes\n     *            array of URL safe characters\n     * @return array of original bytes\n     * @throws DecoderException\n     *             Thrown if URL decoding is unsuccessful,@Override\npublic byte[] decode(final byte[] bytes) throws DecoderException {\n    return decodeUrl(bytes);\n},byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>(bytes)""];\n	""2"" [label=""bytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.decode(Object),Method,* Decodes a URL safe object into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param obj\n     *            URL safe object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *             Thrown if the argument is not a {@code String} or {@code byte[]}. Thrown if a failure\n     *             condition is encountered during the decode process.,"@Override\npublic Object decode(final Object obj) throws DecoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return decode((byte[]) obj);\n    }\n    if (obj instanceof String) {\n        return decode((String) obj);\n    }\n    throw new DecoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be URL decoded"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.DecoderException""];\n	""3"" [label=""$stack12 = (java.lang.String) obj""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>($stack12)""];\n	""5"" [label=""$stack14 = (byte[]) obj""];\n	""6"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: byte[] decode(byte[])>($stack14)""];\n	""7"" [label=""$stack2 = obj instanceof byte[]""];\n	""8"" [label=""$stack3 = obj instanceof java.lang.String""];\n	""9"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""10"" [label=""$stack5 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""11"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>()""];\n	""12"" [label=""$stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""13"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6)""];\n	""14"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be URL decoded\"")""];\n	""15"" [label=""if $stack2 == 0""];\n	""16"" [label=""if $stack3 == 0""];\n	""17"" [label=""if obj != null""];\n	""18"" [label=""obj := @parameter0: java.lang.Object""];\n	""19"" [label=""return $stack13""];\n	""20"" [label=""return $stack15""];\n	""21"" [label=""return null""];\n	""22"" [label=""specialinvoke $stack11.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack10)""];\n	""23"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""25"" [label=""throw $stack11""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""15"" -> ""5""[label=""cfg_false""];\n	""15"" -> ""8""[label=""cfg_true""];\n	""16"" -> ""2""[label=""cfg_true""];\n	""16"" -> ""3""[label=""cfg_false""];\n	""17"" -> ""21""[label=""cfg_false""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""12""[label=""cfg_next""];\n	""24"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.decode(String),Method,* Decodes a URL safe string into its original form using the default string charset. Escaped characters are\n     * converted back to their original representation.\n     *\n     * @param str\n     *            URL safe string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *             Thrown if URL decoding is unsuccessful\n     * @see #getDefaultCharset(),"@Override\npublic String decode(final String str) throws DecoderException {\n    if (str == null) {\n        return null;\n    }\n    try {\n        return decode(str, getDefaultCharset());\n    } catch (final UnsupportedEncodingException e) {\n        throw new DecoderException(e.getMessage(), e);\n    }\n}",java.lang.String decode(java.lang.String),"digraph cfg_decode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String getDefaultCharset()>()""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String,java.lang.String)>(str, $stack3)""];\n	""3"" [label=""$stack5 := @caughtexception""];\n	""4"" [label=""$stack6 = virtualinvoke e.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>()""];\n	""5"" [label=""$stack7 = new org.apache.commons.codec.DecoderException""];\n	""6"" [label=""e = $stack5""];\n	""7"" [label=""if str != null""];\n	""8"" [label=""return $stack4""];\n	""9"" [label=""return null""];\n	""10"" [label=""specialinvoke $stack7.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack6, e)""];\n	""11"" [label=""str := @parameter0: java.lang.String""];\n	""12"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""13"" [label=""throw $stack7""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""1"" -> ""3""[label=""cfg_except""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_except""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""9""[label=""cfg_false""];\n}\n",public 
"org.apache.commons.codec.net.URLCodec.decode(String,String)",Method,* Decodes a URL safe string into its original form using the specified encoding. Escaped characters are converted\n     * back to their original representation.\n     *\n     * @param str\n     *            URL safe string to convert into its original form\n     * @param charsetName\n     *            the original string charset\n     * @return original string\n     * @throws DecoderException\n     *             Thrown if URL decoding is unsuccessful\n     * @throws UnsupportedEncodingException\n     *             Thrown if charset is not supported,"public String decode(final String str, final String charsetName) throws DecoderException, UnsupportedEncodingException {\n    if (str == null) {\n        return null;\n    }\n    return new String(decode(StringUtils.getBytesUsAscii(str)), charsetName);\n}","java.lang.String decode(java.lang.String,java.lang.String)","digraph cfg_decode {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUsAscii(java.lang.String)>(str)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: byte[] decode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = new java.lang.String""];\n	""4"" [label=""charsetName := @parameter1: java.lang.String""];\n	""5"" [label=""if str != null""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""return null""];\n	""8"" [label=""specialinvoke $stack5.<java.lang.String: void <init>(byte[],java.lang.String)>($stack4, charsetName)""];\n	""9"" [label=""str := @parameter0: java.lang.String""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_false""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.encode(byte[]),Method,* Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n     *\n     * @param bytes\n     *            array of bytes to convert to URL safe characters\n     * @return array of bytes containing URL safe characters,"@Override\npublic byte[] encode(final byte[] bytes) {\n    return encodeUrl(WWW_FORM_URL_SAFE, bytes);\n}",byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.net.URLCodec: java.util.BitSet WWW_FORM_URL_SAFE>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>($stack2, bytes)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.encode(Object),Method,* Encodes an object into its URL safe form. Unsafe characters are escaped.\n     *\n     * @param obj\n     *            string to convert to a URL safe form\n     * @return URL safe object\n     * @throws EncoderException\n     *             Thrown if URL encoding is not applicable to objects of this type or if encoding is unsuccessful,"@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof byte[]) {\n        return encode((byte[]) obj);\n    }\n    if (obj instanceof String) {\n        return encode((String) obj);\n    }\n    throw new EncoderException(""Objects of type "" + obj.getClass().getName() + "" cannot be URL encoded"");\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.EncoderException""];\n	""3"" [label=""$stack12 = (java.lang.String) obj""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>($stack12)""];\n	""5"" [label=""$stack14 = (byte[]) obj""];\n	""6"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>($stack14)""];\n	""7"" [label=""$stack2 = obj instanceof byte[]""];\n	""8"" [label=""$stack3 = obj instanceof java.lang.String""];\n	""9"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""10"" [label=""$stack5 = virtualinvoke obj.<java.lang.Object: java.lang.Class getClass()>()""];\n	""11"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>()""];\n	""12"" [label=""$stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""13"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6)""];\n	""14"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be URL encoded\"")""];\n	""15"" [label=""if $stack2 == 0""];\n	""16"" [label=""if $stack3 == 0""];\n	""17"" [label=""if obj != null""];\n	""18"" [label=""obj := @parameter0: java.lang.Object""];\n	""19"" [label=""return $stack13""];\n	""20"" [label=""return $stack15""];\n	""21"" [label=""return null""];\n	""22"" [label=""specialinvoke $stack11.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack10)""];\n	""23"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""25"" [label=""throw $stack11""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""15"" -> ""5""[label=""cfg_false""];\n	""15"" -> ""8""[label=""cfg_true""];\n	""16"" -> ""2""[label=""cfg_true""];\n	""16"" -> ""3""[label=""cfg_false""];\n	""17"" -> ""21""[label=""cfg_false""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""12""[label=""cfg_next""];\n	""24"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.encode(String),Method,* Encodes a string into its URL safe form using the default string charset. Unsafe characters are escaped.\n     *\n     * @param str\n     *            string to convert to a URL safe form\n     * @return URL safe string\n     * @throws EncoderException\n     *             Thrown if URL encoding is unsuccessful\n     *\n     * @see #getDefaultCharset(),"@Override\npublic String encode(final String str) throws EncoderException {\n    if (str == null) {\n        return null;\n    }\n    try {\n        return encode(str, getDefaultCharset());\n    } catch (final UnsupportedEncodingException e) {\n        throw new EncoderException(e.getMessage(), e);\n    }\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String getDefaultCharset()>()""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(str, $stack3)""];\n	""3"" [label=""$stack5 := @caughtexception""];\n	""4"" [label=""$stack6 = virtualinvoke e.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>()""];\n	""5"" [label=""$stack7 = new org.apache.commons.codec.EncoderException""];\n	""6"" [label=""e = $stack5""];\n	""7"" [label=""if str != null""];\n	""8"" [label=""return $stack4""];\n	""9"" [label=""return null""];\n	""10"" [label=""specialinvoke $stack7.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack6, e)""];\n	""11"" [label=""str := @parameter0: java.lang.String""];\n	""12"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""13"" [label=""throw $stack7""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""1"" -> ""3""[label=""cfg_except""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_except""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""9""[label=""cfg_false""];\n}\n",public 
"org.apache.commons.codec.net.URLCodec.encode(String,String)",Method,* Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.\n     *\n     * @param str\n     *            string to convert to a URL safe form\n     * @param charsetName\n     *            the charset for str\n     * @return URL safe string\n     * @throws UnsupportedEncodingException\n     *             Thrown if charset is not supported,"public String encode(final String str, final String charsetName) throws UnsupportedEncodingException {\n    if (str == null) {\n        return null;\n    }\n    return StringUtils.newStringUsAscii(encode(str.getBytes(charsetName)));\n}","java.lang.String encode(java.lang.String,java.lang.String)","digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke str.<java.lang.String: byte[] getBytes(java.lang.String)>(charsetName)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>($stack3)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack4)""];\n	""4"" [label=""charsetName := @parameter1: java.lang.String""];\n	""5"" [label=""if str != null""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""return null""];\n	""8"" [label=""str := @parameter0: java.lang.String""];\n	""9"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_false""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.getDefaultCharset(),Method,* The default charset used for string decoding and encoding.\n     *\n     * @return the default string charset.,public String getDefaultCharset() {\n    return this.charset;\n},java.lang.String getDefaultCharset(),"digraph cfg_getDefaultCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.URLCodec: java.lang.String charset>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.getEncoding(),Method,"* The {@code String} encoding used for decoding and encoding.\n     *\n     * @return the encoding.\n     * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.",@Deprecated\npublic String getEncoding() {\n    return this.charset;\n},java.lang.String getEncoding(),"digraph cfg_getEncoding {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.net.URLCodec: java.lang.String charset>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.<init>(),Constructor,* Default constructor.,public URLCodec() {\n    this(CharEncoding.UTF_8);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.CharEncoding: java.lang.String UTF_8>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.URLCodec: void <init>(java.lang.String)>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.URLCodec.<init>(String),Constructor,* Constructor which allows for the selection of a default charset.\n     *\n     * @param charset the default string charset to use.,public URLCodec(final String charset) {\n    this.charset = charset;\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.lang.String""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.URLCodec""];\n	""5"" [label=""this.<org.apache.commons.codec.net.URLCodec: java.lang.String charset> = charset""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.decode(Object),Method,* Decodes a Base64 object into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param value\n     *            Base64 object to convert into its original form\n     * @return original object\n     * @throws DecoderException\n     *             Thrown if the argument is not a {@code String}. Thrown if a failure condition is encountered\n     *             during the decode process.,"@Override\npublic Object decode(final Object value) throws DecoderException {\n    if (value == null) {\n        return null;\n    }\n    if (value instanceof String) {\n        return decode((String) value);\n    }\n    throw new DecoderException(""Objects of type "" + value.getClass().getName() + "" cannot be decoded using BCodec"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.DecoderException""];\n	""2"" [label=""$stack11 = (java.lang.String) value""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String decode(java.lang.String)>($stack11)""];\n	""4"" [label=""$stack2 = value instanceof java.lang.String""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be decoded using BCodec\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if value != null""];\n	""14"" [label=""return $stack12""];\n	""15"" [label=""return null""];\n	""16"" [label=""specialinvoke $stack10.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack9)""];\n	""17"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""19"" [label=""throw $stack10""];\n	""20"" [label=""value := @parameter0: java.lang.Object""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""15""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""16"" -> ""19""[label=""cfg_next""];\n	""17"" -> ""8""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""17""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.decode(String),Method,* Decodes a Base64 string into its original form. Escaped characters are converted back to their original\n     * representation.\n     *\n     * @param value\n     *            Base64 string to convert into its original form\n     * @return original string\n     * @throws DecoderException\n     *             A decoder exception is thrown if a failure condition is encountered during the decode process.,"@Override\npublic String decode(final String value) throws DecoderException {\n    try {\n        return decodeText(value);\n    } catch (final UnsupportedEncodingException | IllegalArgumentException e) {\n        throw new DecoderException(e.getMessage(), e);\n    }\n}",java.lang.String decode(java.lang.String),"digraph cfg_decode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String decodeText(java.lang.String)>(value)""];\n	""2"" [label=""$stack4 := @caughtexception""];\n	""3"" [label=""$stack5 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>()""];\n	""4"" [label=""$stack6 = new org.apache.commons.codec.DecoderException""];\n	""5"" [label=""e = $stack4""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""specialinvoke $stack6.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack5, e)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""9"" [label=""throw $stack6""];\n	""10"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.doDecoding(byte[]),Method,No Comment,"@Override\nprotected byte[] doDecoding(final byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    return new Base64(0, BaseNCodec.getChunkSeparator(), false, decodingPolicy).decode(bytes);\n}",byte[] doDecoding(byte[]),"digraph cfg_doDecoding {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.net.BCodec: org.apache.commons.codec.CodecPolicy decodingPolicy>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: byte[] getChunkSeparator()>()""];\n	""3"" [label=""$stack4 = new org.apache.commons.codec.binary.Base64""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>(bytes)""];\n	""5"" [label=""bytes := @parameter0: byte[]""];\n	""6"" [label=""if bytes != null""];\n	""7"" [label=""return $stack5""];\n	""8"" [label=""return null""];\n	""9"" [label=""specialinvoke $stack4.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean,org.apache.commons.codec.CodecPolicy)>(0, $stack3, 0, $stack2)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""8""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.BCodec.doEncoding(byte[]),Method,No Comment,@Override\nprotected byte[] doEncoding(final byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    return Base64.encodeBase64(bytes);\n},byte[] doEncoding(byte[]),"digraph cfg_doEncoding {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(bytes)""];\n	""2"" [label=""bytes := @parameter0: byte[]""];\n	""3"" [label=""if bytes != null""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""return null""];\n	""6"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_true""];\n	""3"" -> ""5""[label=""cfg_false""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.BCodec.encode(Object),Method,* Encodes an object into its Base64 form using the default Charset. Unsafe characters are escaped.\n     *\n     * @param value\n     *            object to convert to Base64 form\n     * @return Base64 object\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"@Override\npublic Object encode(final Object value) throws EncoderException {\n    if (value == null) {\n        return null;\n    }\n    if (value instanceof String) {\n        return encode((String) value);\n    }\n    throw new EncoderException(""Objects of type "" + value.getClass().getName() + "" cannot be encoded using BCodec"");\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.EncoderException""];\n	""2"" [label=""$stack11 = (java.lang.String) value""];\n	""3"" [label=""$stack12 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String)>($stack11)""];\n	""4"" [label=""$stack2 = value instanceof java.lang.String""];\n	""5"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack4 = virtualinvoke value.<java.lang.Object: java.lang.Class getClass()>()""];\n	""7"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>()""];\n	""8"" [label=""$stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Objects of type \"")""];\n	""9"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""10"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" cannot be encoded using BCodec\"")""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""if $stack2 == 0""];\n	""13"" [label=""if value != null""];\n	""14"" [label=""return $stack12""];\n	""15"" [label=""return null""];\n	""16"" [label=""specialinvoke $stack10.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack9)""];\n	""17"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""19"" [label=""throw $stack10""];\n	""20"" [label=""value := @parameter0: java.lang.Object""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""15""[label=""cfg_false""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""16"" -> ""19""[label=""cfg_next""];\n	""17"" -> ""8""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""17""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.encode(String),Method,* Encodes a string into its Base64 form using the default Charset. Unsafe characters are escaped.\n     *\n     * @param strSource\n     *            string to convert to Base64 form\n     * @return Base64 string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"@Override\npublic String encode(final String strSource) throws EncoderException {\n    return encode(strSource, getCharset());\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String,java.nio.charset.Charset)>(strSource, $stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""strSource := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.BCodec.encode(String,Charset)",Method,* Encodes a string into its Base64 form using the specified Charset. Unsafe characters are escaped.\n     *\n     * @param strSource\n     *            string to convert to Base64 form\n     * @param sourceCharset\n     *            the Charset for {@code value}\n     * @return Base64 string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.\n     * @since 1.7,"public String encode(final String strSource, final Charset sourceCharset) throws EncoderException {\n    return encodeText(strSource, sourceCharset);\n}","java.lang.String encode(java.lang.String,java.nio.charset.Charset)","digraph cfg_encode {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String encodeText(java.lang.String,java.nio.charset.Charset)>(strSource, sourceCharset)""];\n	""2"" [label=""return $stack3""];\n	""3"" [label=""sourceCharset := @parameter1: java.nio.charset.Charset""];\n	""4"" [label=""strSource := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.BCodec.encode(String,String)",Method,* Encodes a string into its Base64 form using the specified Charset. Unsafe characters are escaped.\n     *\n     * @param strSource\n     *            string to convert to Base64 form\n     * @param sourceCharset\n     *            the Charset for {@code value}\n     * @return Base64 string\n     * @throws EncoderException\n     *             thrown if a failure condition is encountered during the encoding process.,"public String encode(final String strSource, final String sourceCharset) throws EncoderException {\n    try {\n        return encodeText(strSource, sourceCharset);\n    } catch (final UnsupportedCharsetException e) {\n        throw new EncoderException(e.getMessage(), e);\n    }\n}","java.lang.String encode(java.lang.String,java.lang.String)","digraph cfg_encode {\n	""1"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.net.BCodec: java.lang.String encodeText(java.lang.String,java.lang.String)>(strSource, sourceCharset)""];\n	""2"" [label=""$stack5 := @caughtexception""];\n	""3"" [label=""$stack6 = virtualinvoke e.<java.nio.charset.UnsupportedCharsetException: java.lang.String getMessage()>()""];\n	""4"" [label=""$stack7 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""e = $stack5""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""sourceCharset := @parameter1: java.lang.String""];\n	""8"" [label=""specialinvoke $stack7.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack6, e)""];\n	""9"" [label=""strSource := @parameter0: java.lang.String""];\n	""10"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""11"" [label=""throw $stack7""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.getEncoding(),Method,No Comment,"@Override\nprotected String getEncoding() {\n    return ""B"";\n}",java.lang.String getEncoding(),"digraph cfg_getEncoding {\n	""1"" [label=""return \""B\""""];\n	""2"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.net.BCodec.isStrictDecoding(),Method,* Returns true if decoding behavior is strict. Decoding will raise a\n     * {@link DecoderException} if trailing bits are not part of a valid Base64 encoding.\n     *\n     * <p>The default is false for lenient encoding. Decoding will compose trailing bits\n     * into 8-bit bytes and discard the remainder.\n     *\n     * @return true if using strict decoding\n     * @since 1.15,public boolean isStrictDecoding() {\n    return decodingPolicy == CodecPolicy.STRICT;\n},boolean isStrictDecoding(),"digraph cfg_isStrictDecoding {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.CodecPolicy: org.apache.commons.codec.CodecPolicy STRICT>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.net.BCodec: org.apache.commons.codec.CodecPolicy decodingPolicy>""];\n	""3"" [label=""$stack3 = 0""];\n	""4"" [label=""$stack3 = 1""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack2 != $stack1""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.<init>(),Constructor,* Default constructor.,public BCodec() {\n    this(StandardCharsets.UTF_8);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.net.BCodec: void <init>(java.nio.charset.Charset)>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.<init>(Charset),Constructor,* Constructor which allows for the selection of a default Charset\n     *\n     * @param charset\n     *            the default string Charset to use.\n     *\n     * @see Charset\n     * @since 1.7,"public BCodec(final Charset charset) {\n    this(charset, DECODING_POLICY_DEFAULT);\n}",void <init>(java.nio.charset.Charset),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.net.BCodec: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.net.BCodec: void <init>(java.nio.charset.Charset,org.apache.commons.codec.CodecPolicy)>(charset, $stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.net.BCodec.<init>(Charset,CodecPolicy)",Constructor,* Constructor which allows for the selection of a default Charset.\n     *\n     * @param charset\n     *            the default string Charset to use.\n     * @param decodingPolicy The decoding policy.\n     * @see Charset\n     * @since 1.15,"public BCodec(final Charset charset, final CodecPolicy decodingPolicy) {\n    super(charset);\n    this.decodingPolicy = decodingPolicy;\n}","void <init>(java.nio.charset.Charset,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""2"" [label=""decodingPolicy := @parameter1: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.net.RFC1522Codec: void <init>(java.nio.charset.Charset)>(charset)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""6"" [label=""this.<org.apache.commons.codec.net.BCodec: org.apache.commons.codec.CodecPolicy decodingPolicy> = decodingPolicy""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.net.BCodec.<init>(String),Constructor,* Constructor which allows for the selection of a default Charset\n     *\n     * @param charsetName\n     *            the default Charset to use.\n     * @throws java.nio.charset.UnsupportedCharsetException\n     *             If the named Charset is unavailable\n     * @since 1.7 throws UnsupportedCharsetException if the named Charset is unavailable\n     * @see Charset,public BCodec(final String charsetName) {\n    this(Charset.forName(charsetName));\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName)""];\n	""2"" [label=""charsetName := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.net.BCodec: void <init>(java.nio.charset.Charset)>($stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.net.BCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.Charsets.toCharset(Charset),Method,* Returns the given Charset or the default Charset if the given Charset is null.\n     *\n     * @param charset\n     *            A charset or null.\n     * @return the given Charset or the default Charset if the given Charset is null.,public static Charset toCharset(final Charset charset) {\n    return charset == null ? Charset.defaultCharset() : charset;\n},java.nio.charset.Charset toCharset(java.nio.charset.Charset),"digraph cfg_toCharset {\n	""1"" [label=""$stack1 = charset""];\n	""2"" [label=""$stack1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>()""];\n	""3"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""4"" [label=""goto""];\n	""5"" [label=""if charset != null""];\n	""6"" [label=""return $stack1""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n}\n","public , static "
org.apache.commons.codec.Charsets.toCharset(String),Method,"* Returns a Charset for the named charset. If the name is null, return the default Charset.\n     *\n     * @param charset The name of the requested charset, may be null.\n     * @return a Charset for the named charset\n     * @throws java.nio.charset.UnsupportedCharsetException If the named charset is unavailable",public static Charset toCharset(final String charset) {\n    return charset == null ? Charset.defaultCharset() : Charset.forName(charset);\n},java.nio.charset.Charset toCharset(java.lang.String),"digraph cfg_toCharset {\n	""1"" [label=""$stack1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>()""];\n	""2"" [label=""$stack1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charset)""];\n	""3"" [label=""charset := @parameter0: java.lang.String""];\n	""4"" [label=""goto""];\n	""5"" [label=""if charset != null""];\n	""6"" [label=""return $stack1""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""2""[label=""cfg_true""];\n}\n","public , static "
org.apache.commons.codec.Charsets.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic Charsets() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.Charsets""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.Decoder.decode(Object),Abstract Method,"* Decodes an ""encoded"" Object and returns a ""decoded"" Object. Note that the implementation of this interface will\n     * try to cast the Object parameter to the specific type expected by a particular Decoder implementation. If a\n     * {@link ClassCastException} occurs this decode method will throw a DecoderException.\n     *\n     * @param source\n     *            the object to decode\n     * @return a 'decoded"" object\n     * @throws DecoderException\n     *             a decoder exception can be thrown for any number of reasons. Some good candidates are that the\n     *             parameter passed to this method is null, a param cannot be cast to the appropriate type for a\n     *             specific encoder.",Object decode(Object source) throws DecoderException;,java.lang.Object decode(java.lang.Object),digraph cfg_decode {\n}\n,default
org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[]),Method,"* See {@link #apr1Crypt(byte[], String)} for details.\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}; your own {@link Random} in\n     * {@link #apr1Crypt(byte[], Random)}.\n     * </p>\n     *\n     * @param keyBytes plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @return the hash value\n     * @throws IllegalArgumentException when a {@link java.security.NoSuchAlgorithmException} is caught. *\n     * @see #apr1Crypt(byte[], String)","public static String apr1Crypt(final byte[] keyBytes) {\n    return apr1Crypt(keyBytes, APR1_PREFIX + B64.getRandomSalt(8));\n}",java.lang.String apr1Crypt(byte[]),"digraph cfg_apr1Crypt {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8)""];\n	""3"" [label=""$stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$apr1$\"")""];\n	""4"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2)""];\n	""5"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[],java.lang.String)>(keyBytes, $stack5)""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""return $stack6""];\n	""9"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],Random)",Method,"* See {@link #apr1Crypt(byte[], String)} for details.\n     * <p>\n     * A salt is generated for you using the user provided {@link Random}.\n     * </p>\n     *\n     * @param keyBytes plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param random the instance of {@link Random} to use for generating the salt.\n     *              Consider using {@link SecureRandom} for more secure salts.\n     * @return the hash value\n     * @throws IllegalArgumentException when a {@link java.security.NoSuchAlgorithmException} is caught. *\n     * @see #apr1Crypt(byte[], String)\n     * @since 1.12","public static String apr1Crypt(final byte[] keyBytes, final Random random) {\n    return apr1Crypt(keyBytes, APR1_PREFIX + B64.getRandomSalt(8, random));\n}","java.lang.String apr1Crypt(byte[],java.util.Random)","digraph cfg_apr1Crypt {\n	""1"" [label=""$stack2 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(8, random)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$apr1$\"")""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3)""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[],java.lang.String)>(keyBytes, $stack6)""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""random := @parameter1: java.util.Random""];\n	""9"" [label=""return $stack7""];\n	""10"" [label=""specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],String)",Method,"* See {@link #apr1Crypt(String, String)} for details.\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            An APR1 salt. The salt may be null, in which case a salt is generated for you using\n     *            {@link SecureRandom}\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String apr1Crypt(final byte[] keyBytes, String salt) {\n    // to make the md5Crypt regex happy\n    if (salt != null && !salt.startsWith(APR1_PREFIX)) {\n        salt = APR1_PREFIX + salt;\n    }\n    return Md5Crypt.md5Crypt(keyBytes, salt, APR1_PREFIX);\n}","java.lang.String apr1Crypt(byte[],java.lang.String)","digraph cfg_apr1Crypt {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)>(keyBytes, salt, \""$apr1$\"")""];\n	""2"" [label=""$stack3 = virtualinvoke salt.<java.lang.String: boolean startsWith(java.lang.String)>(\""$apr1$\"")""];\n	""3"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$apr1$\"")""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(salt)""];\n	""6"" [label=""if $stack3 != 0""];\n	""7"" [label=""if salt == null""];\n	""8"" [label=""keyBytes := @parameter0: byte[]""];\n	""9"" [label=""return $stack2""];\n	""10"" [label=""salt := @parameter1: java.lang.String""];\n	""11"" [label=""salt = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String),Method,"* See {@link #apr1Crypt(String, String)} for details.\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @see #apr1Crypt(byte[], String)",public static String apr1Crypt(final String keyBytes) {\n    return apr1Crypt(keyBytes.getBytes(StandardCharsets.UTF_8));\n},java.lang.String apr1Crypt(java.lang.String),"digraph cfg_apr1Crypt {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack2 = virtualinvoke keyBytes.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack1)""];\n	""3"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[])>($stack2)""];\n	""4"" [label=""keyBytes := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String,String)",Method,"* Generates an Apache htpasswd compatible ""$apr1$"" MD5 based hash value.\n     * <p>\n     * The algorithm is identical to the crypt(3) ""$1$"" one but produces different outputs due to the different salt\n     * prefix.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            salt string including the prefix and optionally garbage at the end. The salt may be null, in which\n     *            case a salt is generated for you using {@link SecureRandom}.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String apr1Crypt(final String keyBytes, final String salt) {\n    return apr1Crypt(keyBytes.getBytes(StandardCharsets.UTF_8), salt);\n}","java.lang.String apr1Crypt(java.lang.String,java.lang.String)","digraph cfg_apr1Crypt {\n	""1"" [label=""$stack2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack3 = virtualinvoke keyBytes.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack2)""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[],java.lang.String)>($stack3, salt)""];\n	""4"" [label=""keyBytes := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""salt := @parameter1: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[]),Method,"* Generates a libc6 crypt() compatible ""$1$"" hash value.\n     * <p>\n     * See {@link #md5Crypt(byte[], String)} for details.\n     * </p>\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @see #md5Crypt(byte[], String)","public static String md5Crypt(final byte[] keyBytes) {\n    return md5Crypt(keyBytes, MD5_PREFIX + B64.getRandomSalt(8));\n}",java.lang.String md5Crypt(byte[]),"digraph cfg_md5Crypt {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8)""];\n	""3"" [label=""$stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$1$\"")""];\n	""4"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2)""];\n	""5"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String)>(keyBytes, $stack5)""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""return $stack6""];\n	""9"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],Random)",Method,"* Generates a libc6 crypt() compatible ""$1$"" hash value.\n     * <p>\n     * See {@link #md5Crypt(byte[], String)} for details.\n     * </p>\n     * <p>\n     * A salt is generated for you using the instance of {@link Random} you supply.\n     * </p>\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param random\n     *            the instance of {@link Random} to use for generating the salt.\n     *            Consider using {@link SecureRandom} for more secure salts.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @see #md5Crypt(byte[], String)\n     * @since 1.12","public static String md5Crypt(final byte[] keyBytes, final Random random) {\n    return md5Crypt(keyBytes, MD5_PREFIX + B64.getRandomSalt(8, random));\n}","java.lang.String md5Crypt(byte[],java.util.Random)","digraph cfg_md5Crypt {\n	""1"" [label=""$stack2 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(8, random)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$1$\"")""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3)""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String)>(keyBytes, $stack6)""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""random := @parameter1: java.util.Random""];\n	""9"" [label=""return $stack7""];\n	""10"" [label=""specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String)",Method,"* Generates a libc crypt() compatible ""$1$"" MD5 based hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details. We use {@link SecureRandom} for seed generation by\n     * default.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            salt string including the prefix and optionally garbage at the end. The salt may be null, in which\n     *            case a salt is generated for you using {@link SecureRandom}.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String md5Crypt(final byte[] keyBytes, final String salt) {\n    return md5Crypt(keyBytes, salt, MD5_PREFIX);\n}","java.lang.String md5Crypt(byte[],java.lang.String)","digraph cfg_md5Crypt {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)>(keyBytes, salt, \""$1$\"")""];\n	""2"" [label=""keyBytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""salt := @parameter1: java.lang.String""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String)",Method,"* Generates a libc6 crypt() ""$1$"" or Apache htpasswd ""$apr1$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details. We use\n     * {@link SecureRandom by default}.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a salt\n     *            is generated for you using {@link SecureRandom}.\n     * @param prefix\n     *            The salt prefix {@value #APR1_PREFIX}, {@value #MD5_PREFIX}.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {\n    return md5Crypt(keyBytes, salt, prefix, new SecureRandom());\n}","java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)","digraph cfg_md5Crypt {\n	""1"" [label=""$stack3 = new java.security.SecureRandom""];\n	""2"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String,java.util.Random)>(keyBytes, salt, prefix, $stack3)""];\n	""3"" [label=""keyBytes := @parameter0: byte[]""];\n	""4"" [label=""prefix := @parameter2: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""salt := @parameter1: java.lang.String""];\n	""7"" [label=""specialinvoke $stack3.<java.security.SecureRandom: void <init>()>()""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random)",Method,"* Generates a libc6 crypt() ""$1$"" or Apache htpasswd ""$apr1$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext string to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a salt\n     *            is generated for you using {@link SecureRandom}.\n     * @param prefix\n     *            The salt prefix {@value #APR1_PREFIX}, {@value #MD5_PREFIX}.\n     * @param random\n     *            the instance of {@link Random} to use for generating the salt.\n     *            Consider using {@link SecureRandom} for more secure salts.\n     * @return the hash value\n     * @throws IllegalArgumentException\n     *             if the salt or prefix does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @since 1.12","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix, final Random random) {\n    final int keyLen = keyBytes.length;\n    // Extract the real salt from the given string which can be a complete hash string.\n    final String saltString;\n    if (salt == null) {\n        saltString = B64.getRandomSalt(8, random);\n    } else {\n        Objects.requireNonNull(prefix, ""prefix"");\n        if (prefix.length() < 3) {\n            throw new IllegalArgumentException(""Invalid prefix value: "" + prefix);\n        }\n        if (prefix.charAt(0) != '$' && prefix.charAt(prefix.length() - 1) != '$') {\n            throw new IllegalArgumentException(""Invalid prefix value: "" + prefix);\n        }\n        final Pattern p = Pattern.compile(""^"" + prefix.replace(""$"", ""\\$"") + ""([\\.\\/a-zA-Z0-9]{1,8}).*"");\n        final Matcher m = p.matcher(salt);\n        if (!m.find()) {\n            throw new IllegalArgumentException(""Invalid salt value: "" + salt);\n        }\n        saltString = m.group(1);\n    }\n    final byte[] saltBytes = saltString.getBytes(StandardCharsets.UTF_8);\n    final MessageDigest ctx = DigestUtils.getMd5Digest();\n    /*\n         * The password first, since that is what is most unknown\n         */\n    ctx.update(keyBytes);\n    /*\n         * Then our magic string\n         */\n    ctx.update(prefix.getBytes(StandardCharsets.UTF_8));\n    /*\n         * Then the raw salt\n         */\n    ctx.update(saltBytes);\n    /*\n         * Then just as many characters of the MD5(pw,salt,pw)\n         */\n    MessageDigest ctx1 = DigestUtils.getMd5Digest();\n    ctx1.update(keyBytes);\n    ctx1.update(saltBytes);\n    ctx1.update(keyBytes);\n    byte[] finalb = ctx1.digest();\n    int ii = keyLen;\n    while (ii > 0) {\n        ctx.update(finalb, 0, Math.min(ii, 16));\n        ii -= 16;\n    }\n    /*\n         * Don't leave anything around in JVM they could use.\n         */\n    Arrays.fill(finalb, (byte) 0);\n    /*\n         * Then something really weird...\n         */\n    ii = keyLen;\n    final int j = 0;\n    while (ii > 0) {\n        if ((ii & 1) == 1) {\n            ctx.update(finalb[j]);\n        } else {\n            ctx.update(keyBytes[j]);\n        }\n        ii >>= 1;\n    }\n    /*\n         * Now make the output string\n         */\n    final StringBuilder passwd = new StringBuilder(prefix + saltString + ""$"");\n    finalb = ctx.digest();\n    /*\n         * and now, just to make sure things don't run too fast On a 60 Mhz Pentium this takes 34 milliseconds, so you\n         * would need 30 seconds to build a 1000 entry dictionary...\n         */\n    for (int i = 0; i < ROUNDS; i++) {\n        ctx1 = DigestUtils.getMd5Digest();\n        if ((i & 1) != 0) {\n            ctx1.update(keyBytes);\n        } else {\n            ctx1.update(finalb, 0, BLOCKSIZE);\n        }\n        if (i % 3 != 0) {\n            ctx1.update(saltBytes);\n        }\n        if (i % 7 != 0) {\n            ctx1.update(keyBytes);\n        }\n        if ((i & 1) != 0) {\n            ctx1.update(finalb, 0, BLOCKSIZE);\n        } else {\n            ctx1.update(keyBytes);\n        }\n        finalb = ctx1.digest();\n    }\n    // The following was nearly identical to the Sha2Crypt code.\n    // Again, the buflen is not really needed.\n    // int buflen = MD5_PREFIX.length() - 1 + salt_string.length() + 1 + BLOCKSIZE + 1;\n    B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n    B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n    B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n    B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n    B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n    B64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);\n    /*\n         * Don't leave anything around in JVM they could use.\n         */\n    // Is there a better way to do this with the JVM?\n    ctx.reset();\n    ctx1.reset();\n    Arrays.fill(keyBytes, (byte) 0);\n    Arrays.fill(saltBytes, (byte) 0);\n    Arrays.fill(finalb, (byte) 0);\n    return passwd.toString();\n}","java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String,java.util.Random)","digraph cfg_md5Crypt {\n	""1"" [label=""$stack14 = virtualinvoke prefix.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack15 = virtualinvoke prefix.<java.lang.String: char charAt(int)>(0)""];\n	""3"" [label=""$stack16 = new java.lang.StringBuilder""];\n	""4"" [label=""$stack17 = virtualinvoke prefix.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""$\"", \""\\$\"")""];\n	""5"" [label=""$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""^\"")""];\n	""6"" [label=""$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)""];\n	""7"" [label=""$stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""([\\.\\/a-zA-Z0-9]\{1,8\}).*\"")""];\n	""8"" [label=""$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""9"" [label=""$stack22 = virtualinvoke m.<java.util.regex.Matcher: boolean find()>()""];\n	""10"" [label=""$stack23 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""11"" [label=""$stack24 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""12"" [label=""$stack25 = virtualinvoke prefix.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack24)""];\n	""13"" [label=""$stack26 = new java.lang.StringBuilder""];\n	""14"" [label=""$stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix)""];\n	""15"" [label=""$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(saltString)""];\n	""16"" [label=""$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$\"")""];\n	""17"" [label=""$stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""18"" [label=""$stack31 = new java.lang.StringBuilder""];\n	""19"" [label=""$stack32 = finalb[12]""];\n	""20"" [label=""$stack33 = finalb[6]""];\n	""21"" [label=""$stack34 = finalb[0]""];\n	""22"" [label=""$stack35 = finalb[13]""];\n	""23"" [label=""$stack36 = finalb[7]""];\n	""24"" [label=""$stack37 = finalb[1]""];\n	""25"" [label=""$stack38 = finalb[14]""];\n	""26"" [label=""$stack39 = finalb[8]""];\n	""27"" [label=""$stack40 = finalb[2]""];\n	""28"" [label=""$stack41 = finalb[15]""];\n	""29"" [label=""$stack42 = finalb[9]""];\n	""30"" [label=""$stack43 = finalb[3]""];\n	""31"" [label=""$stack44 = finalb[5]""];\n	""32"" [label=""$stack45 = finalb[10]""];\n	""33"" [label=""$stack46 = finalb[4]""];\n	""34"" [label=""$stack47 = finalb[11]""];\n	""35"" [label=""$stack48 = virtualinvoke passwd.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""36"" [label=""$stack49 = i & 1""];\n	""37"" [label=""$stack50 = i % 3""];\n	""38"" [label=""$stack51 = i % 7""];\n	""39"" [label=""$stack52 = i & 1""];\n	""40"" [label=""$stack53 = ii & 1""];\n	""41"" [label=""$stack54 = keyBytes[0]""];\n	""42"" [label=""$stack55 = finalb[0]""];\n	""43"" [label=""$stack56 = staticinvoke <java.lang.Math: int min(int,int)>(ii, 16)""];\n	""44"" [label=""$stack57 = new java.lang.StringBuilder""];\n	""45"" [label=""$stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid salt value: \"")""];\n	""46"" [label=""$stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(salt)""];\n	""47"" [label=""$stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""48"" [label=""$stack61 = new java.lang.IllegalArgumentException""];\n	""49"" [label=""$stack62 = virtualinvoke prefix.<java.lang.String: int length()>()""];\n	""50"" [label=""$stack63 = $stack62 - 1""];\n	""51"" [label=""$stack64 = virtualinvoke prefix.<java.lang.String: char charAt(int)>($stack63)""];\n	""52"" [label=""$stack65 = new java.lang.StringBuilder""];\n	""53"" [label=""$stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid prefix value: \"")""];\n	""54"" [label=""$stack67 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix)""];\n	""55"" [label=""$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""56"" [label=""$stack69 = new java.lang.IllegalArgumentException""];\n	""57"" [label=""$stack70 = new java.lang.StringBuilder""];\n	""58"" [label=""$stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid prefix value: \"")""];\n	""59"" [label=""$stack72 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix)""];\n	""60"" [label=""$stack73 = virtualinvoke $stack72.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""61"" [label=""$stack74 = new java.lang.IllegalArgumentException""];\n	""62"" [label=""ctx1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>()""];\n	""63"" [label=""ctx1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>()""];\n	""64"" [label=""finalb = virtualinvoke ctx1.<java.security.MessageDigest: byte[] digest()>()""];\n	""65"" [label=""finalb = virtualinvoke ctx1.<java.security.MessageDigest: byte[] digest()>()""];\n	""66"" [label=""finalb = virtualinvoke m.<java.security.MessageDigest: byte[] digest()>()""];\n	""67"" [label=""goto""];\n	""68"" [label=""goto""];\n	""69"" [label=""goto""];\n	""70"" [label=""goto""];\n	""71"" [label=""goto""];\n	""72"" [label=""goto""];\n	""73"" [label=""goto""];\n	""74"" [label=""i = 0""];\n	""75"" [label=""i = i + 1""];\n	""76"" [label=""if $stack14 >= 3""];\n	""77"" [label=""if $stack15 == 36""];\n	""78"" [label=""if $stack22 != 0""];\n	""79"" [label=""if $stack49 == 0""];\n	""80"" [label=""if $stack50 == 0""];\n	""81"" [label=""if $stack51 == 0""];\n	""82"" [label=""if $stack52 == 0""];\n	""83"" [label=""if $stack53 != 1""];\n	""84"" [label=""if $stack64 == 36""];\n	""85"" [label=""if i >= 1000""];\n	""86"" [label=""if ii <= 0""];\n	""87"" [label=""if ii <= 0""];\n	""88"" [label=""if salt != null""];\n	""89"" [label=""ii = ii + -16""];\n	""90"" [label=""ii = ii >> 1""];\n	""91"" [label=""ii = keyLen""];\n	""92"" [label=""ii = keyLen""];\n	""93"" [label=""j = 0""];\n	""94"" [label=""keyBytes := @parameter0: byte[]""];\n	""95"" [label=""keyLen = lengthof keyBytes""];\n	""96"" [label=""m = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>()""];\n	""97"" [label=""m = virtualinvoke p.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(salt)""];\n	""98"" [label=""p = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($stack21)""];\n	""99"" [label=""p = virtualinvoke saltString.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack23)""];\n	""100"" [label=""passwd = $stack31""];\n	""101"" [label=""prefix := @parameter2: java.lang.String""];\n	""102"" [label=""random := @parameter3: java.util.Random""];\n	""103"" [label=""return $stack48""];\n	""104"" [label=""salt := @parameter1: java.lang.String""];\n	""105"" [label=""saltString = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(8, random)""];\n	""106"" [label=""saltString = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(1)""];\n	""107"" [label=""specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>()""];\n	""108"" [label=""specialinvoke $stack26.<java.lang.StringBuilder: void <init>()>()""];\n	""109"" [label=""specialinvoke $stack31.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack30)""];\n	""110"" [label=""specialinvoke $stack57.<java.lang.StringBuilder: void <init>()>()""];\n	""111"" [label=""specialinvoke $stack61.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack60)""];\n	""112"" [label=""specialinvoke $stack65.<java.lang.StringBuilder: void <init>()>()""];\n	""113"" [label=""specialinvoke $stack69.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack68)""];\n	""114"" [label=""specialinvoke $stack70.<java.lang.StringBuilder: void <init>()>()""];\n	""115"" [label=""specialinvoke $stack74.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack73)""];\n	""116"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(finalb, 0)""];\n	""117"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(finalb, 0)""];\n	""118"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(keyBytes, 0)""];\n	""119"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(p, 0)""];\n	""120"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(prefix, \""prefix\"")""];\n	""121"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack34, $stack33, $stack32, 4, passwd)""];\n	""122"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack37, $stack36, $stack35, 4, passwd)""];\n	""123"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack40, $stack39, $stack38, 4, passwd)""];\n	""124"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack43, $stack42, $stack41, 4, passwd)""];\n	""125"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack46, $stack45, $stack44, 4, passwd)""];\n	""126"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, 0, $stack47, 2, passwd)""];\n	""127"" [label=""throw $stack61""];\n	""128"" [label=""throw $stack69""];\n	""129"" [label=""throw $stack74""];\n	""130"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void reset()>()""];\n	""131"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""132"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""133"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""134"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""135"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""136"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(p)""];\n	""137"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[])>(p)""];\n	""138"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[],int,int)>(finalb, 0, 16)""];\n	""139"" [label=""virtualinvoke ctx1.<java.security.MessageDigest: void update(byte[],int,int)>(finalb, 0, 16)""];\n	""140"" [label=""virtualinvoke m.<java.security.MessageDigest: void reset()>()""];\n	""141"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte)>($stack54)""];\n	""142"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte)>($stack55)""];\n	""143"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte[])>($stack25)""];\n	""144"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""145"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte[])>(p)""];\n	""146"" [label=""virtualinvoke m.<java.security.MessageDigest: void update(byte[],int,int)>(finalb, 0, $stack56)""];\n	""1"" -> ""76""[label=""cfg_next""];\n	""10"" -> ""99""[label=""cfg_next""];\n	""100"" -> ""66""[label=""cfg_next""];\n	""101"" -> ""102""[label=""cfg_next""];\n	""102"" -> ""95""[label=""cfg_next""];\n	""104"" -> ""101""[label=""cfg_next""];\n	""105"" -> ""67""[label=""cfg_next""];\n	""106"" -> ""10""[label=""cfg_next""];\n	""107"" -> ""5""[label=""cfg_next""];\n	""108"" -> ""14""[label=""cfg_next""];\n	""109"" -> ""100""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""110"" -> ""45""[label=""cfg_next""];\n	""111"" -> ""127""[label=""cfg_next""];\n	""112"" -> ""53""[label=""cfg_next""];\n	""113"" -> ""128""[label=""cfg_next""];\n	""114"" -> ""58""[label=""cfg_next""];\n	""115"" -> ""129""[label=""cfg_next""];\n	""116"" -> ""92""[label=""cfg_next""];\n	""117"" -> ""35""[label=""cfg_next""];\n	""118"" -> ""119""[label=""cfg_next""];\n	""119"" -> ""117""[label=""cfg_next""];\n	""12"" -> ""143""[label=""cfg_next""];\n	""120"" -> ""1""[label=""cfg_next""];\n	""121"" -> ""24""[label=""cfg_next""];\n	""122"" -> ""27""[label=""cfg_next""];\n	""123"" -> ""30""[label=""cfg_next""];\n	""124"" -> ""33""[label=""cfg_next""];\n	""125"" -> ""34""[label=""cfg_next""];\n	""126"" -> ""140""[label=""cfg_next""];\n	""13"" -> ""108""[label=""cfg_next""];\n	""130"" -> ""118""[label=""cfg_next""];\n	""131"" -> ""136""[label=""cfg_next""];\n	""132"" -> ""64""[label=""cfg_next""];\n	""133"" -> ""71""[label=""cfg_next""];\n	""134"" -> ""39""[label=""cfg_next""];\n	""135"" -> ""65""[label=""cfg_next""];\n	""136"" -> ""132""[label=""cfg_next""];\n	""137"" -> ""38""[label=""cfg_next""];\n	""138"" -> ""37""[label=""cfg_next""];\n	""139"" -> ""72""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""140"" -> ""130""[label=""cfg_next""];\n	""141"" -> ""90""[label=""cfg_next""];\n	""142"" -> ""69""[label=""cfg_next""];\n	""143"" -> ""145""[label=""cfg_next""];\n	""144"" -> ""11""[label=""cfg_next""];\n	""145"" -> ""62""[label=""cfg_next""];\n	""146"" -> ""89""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""109""[label=""cfg_next""];\n	""18"" -> ""13""[label=""cfg_next""];\n	""19"" -> ""121""[label=""cfg_next""];\n	""2"" -> ""77""[label=""cfg_next""];\n	""20"" -> ""19""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""122""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""25"" -> ""123""[label=""cfg_next""];\n	""26"" -> ""25""[label=""cfg_next""];\n	""27"" -> ""26""[label=""cfg_next""];\n	""28"" -> ""124""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""107""[label=""cfg_next""];\n	""30"" -> ""29""[label=""cfg_next""];\n	""31"" -> ""125""[label=""cfg_next""];\n	""32"" -> ""31""[label=""cfg_next""];\n	""33"" -> ""32""[label=""cfg_next""];\n	""34"" -> ""126""[label=""cfg_next""];\n	""35"" -> ""103""[label=""cfg_next""];\n	""36"" -> ""79""[label=""cfg_next""];\n	""37"" -> ""80""[label=""cfg_next""];\n	""38"" -> ""81""[label=""cfg_next""];\n	""39"" -> ""82""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""83""[label=""cfg_next""];\n	""41"" -> ""141""[label=""cfg_next""];\n	""42"" -> ""142""[label=""cfg_next""];\n	""43"" -> ""146""[label=""cfg_next""];\n	""44"" -> ""110""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""111""[label=""cfg_next""];\n	""48"" -> ""44""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""84""[label=""cfg_next""];\n	""52"" -> ""112""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""113""[label=""cfg_next""];\n	""56"" -> ""52""[label=""cfg_next""];\n	""57"" -> ""114""[label=""cfg_next""];\n	""58"" -> ""59""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""115""[label=""cfg_next""];\n	""61"" -> ""57""[label=""cfg_next""];\n	""62"" -> ""131""[label=""cfg_next""];\n	""63"" -> ""36""[label=""cfg_next""];\n	""64"" -> ""91""[label=""cfg_next""];\n	""65"" -> ""75""[label=""cfg_next""];\n	""66"" -> ""74""[label=""cfg_next""];\n	""67"" -> ""10""[label=""cfg_goto""];\n	""68"" -> ""86""[label=""cfg_goto""];\n	""69"" -> ""90""[label=""cfg_goto""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""87""[label=""cfg_goto""];\n	""71"" -> ""37""[label=""cfg_goto""];\n	""72"" -> ""65""[label=""cfg_goto""];\n	""73"" -> ""85""[label=""cfg_goto""];\n	""74"" -> ""85""[label=""cfg_next""];\n	""75"" -> ""73""[label=""cfg_next""];\n	""76"" -> ""2""[label=""cfg_true""];\n	""76"" -> ""61""[label=""cfg_false""];\n	""77"" -> ""3""[label=""cfg_true""];\n	""77"" -> ""49""[label=""cfg_false""];\n	""78"" -> ""106""[label=""cfg_true""];\n	""78"" -> ""48""[label=""cfg_false""];\n	""79"" -> ""133""[label=""cfg_false""];\n	""79"" -> ""138""[label=""cfg_true""];\n	""8"" -> ""98""[label=""cfg_next""];\n	""80"" -> ""137""[label=""cfg_false""];\n	""80"" -> ""38""[label=""cfg_true""];\n	""81"" -> ""134""[label=""cfg_false""];\n	""81"" -> ""39""[label=""cfg_true""];\n	""82"" -> ""135""[label=""cfg_true""];\n	""82"" -> ""139""[label=""cfg_false""];\n	""83"" -> ""41""[label=""cfg_true""];\n	""83"" -> ""42""[label=""cfg_false""];\n	""84"" -> ""3""[label=""cfg_true""];\n	""84"" -> ""56""[label=""cfg_false""];\n	""85"" -> ""21""[label=""cfg_true""];\n	""85"" -> ""63""[label=""cfg_false""];\n	""86"" -> ""116""[label=""cfg_true""];\n	""86"" -> ""43""[label=""cfg_false""];\n	""87"" -> ""18""[label=""cfg_true""];\n	""87"" -> ""40""[label=""cfg_false""];\n	""88"" -> ""105""[label=""cfg_false""];\n	""88"" -> ""120""[label=""cfg_true""];\n	""89"" -> ""68""[label=""cfg_next""];\n	""9"" -> ""78""[label=""cfg_next""];\n	""90"" -> ""70""[label=""cfg_next""];\n	""91"" -> ""86""[label=""cfg_next""];\n	""92"" -> ""93""[label=""cfg_next""];\n	""93"" -> ""87""[label=""cfg_next""];\n	""94"" -> ""104""[label=""cfg_next""];\n	""95"" -> ""88""[label=""cfg_next""];\n	""96"" -> ""144""[label=""cfg_next""];\n	""97"" -> ""9""[label=""cfg_next""];\n	""98"" -> ""97""[label=""cfg_next""];\n	""99"" -> ""96""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Md5Crypt.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic Md5Crypt() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.Md5Crypt""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.Crypt.crypt(byte[]),Method,"* Encrypts a password in a crypt(3) compatible way.\n     * <p>\n     * A random salt and the default algorithm (currently SHA-512) are used. See {@link #crypt(String, String)} for\n     * details.\n     * </p>\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext password\n     * @return hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String crypt(final byte[] keyBytes) {\n    return crypt(keyBytes, null);\n}",java.lang.String crypt(byte[]),"digraph cfg_crypt {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.Crypt: java.lang.String crypt(byte[],java.lang.String)>(keyBytes, null)""];\n	""2"" [label=""keyBytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Crypt.crypt(byte[],String)",Method,"* Encrypts a password in a crypt(3) compatible way.\n     * <p>\n     * If no salt is provided, a random salt and the default algorithm (currently SHA-512) will be used. See\n     * {@link #crypt(String, String)} for details.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext password\n     * @param salt\n     *            the salt, which is used to select the algorithm, see {@link #crypt(String, String)}\n     *            The salt may be null,\n     *            in which case the method delegates to {@link Sha2Crypt#sha512Crypt(byte[])}\n     *\n     * @return hash value\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String crypt(final byte[] keyBytes, final String salt) {\n    if (salt == null) {\n        return Sha2Crypt.sha512Crypt(keyBytes);\n    }\n    if (salt.startsWith(Sha2Crypt.SHA512_PREFIX)) {\n        return Sha2Crypt.sha512Crypt(keyBytes, salt);\n    }\n    if (salt.startsWith(Sha2Crypt.SHA256_PREFIX)) {\n        return Sha2Crypt.sha256Crypt(keyBytes, salt);\n    }\n    if (salt.startsWith(Md5Crypt.MD5_PREFIX)) {\n        return Md5Crypt.md5Crypt(keyBytes, salt);\n    }\n    return UnixCrypt.crypt(keyBytes, salt);\n}","java.lang.String crypt(byte[],java.lang.String)","digraph cfg_crypt {\n	""1"" [label=""$stack2 = virtualinvoke salt.<java.lang.String: boolean startsWith(java.lang.String)>(\""$6$\"")""];\n	""2"" [label=""$stack3 = virtualinvoke salt.<java.lang.String: boolean startsWith(java.lang.String)>(\""$5$\"")""];\n	""3"" [label=""$stack4 = virtualinvoke salt.<java.lang.String: boolean startsWith(java.lang.String)>(\""$1$\"")""];\n	""4"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>(keyBytes, salt)""];\n	""5"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String)>(keyBytes, salt)""];\n	""6"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha256Crypt(byte[],java.lang.String)>(keyBytes, salt)""];\n	""7"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha512Crypt(byte[],java.lang.String)>(keyBytes, salt)""];\n	""8"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha512Crypt(byte[])>(keyBytes)""];\n	""9"" [label=""if $stack2 == 0""];\n	""10"" [label=""if $stack3 == 0""];\n	""11"" [label=""if $stack4 == 0""];\n	""12"" [label=""if salt != null""];\n	""13"" [label=""keyBytes := @parameter0: byte[]""];\n	""14"" [label=""return $stack5""];\n	""15"" [label=""return $stack6""];\n	""16"" [label=""return $stack7""];\n	""17"" [label=""return $stack8""];\n	""18"" [label=""return $stack9""];\n	""19"" [label=""salt := @parameter1: java.lang.String""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_true""];\n	""10"" -> ""6""[label=""cfg_false""];\n	""11"" -> ""4""[label=""cfg_true""];\n	""11"" -> ""5""[label=""cfg_false""];\n	""12"" -> ""1""[label=""cfg_true""];\n	""12"" -> ""8""[label=""cfg_false""];\n	""13"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""7"" -> ""17""[label=""cfg_next""];\n	""8"" -> ""18""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_true""];\n	""9"" -> ""7""[label=""cfg_false""];\n}\n","public , static "
org.apache.commons.codec.digest.Crypt.crypt(String),Method,"* Calculates the digest using the strongest crypt(3) algorithm.\n     * <p>\n     * A random salt and the default algorithm (currently SHA-512) are used.\n     * </p>\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @see #crypt(String, String)\n     * @param key\n     *            plaintext password\n     * @return hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String crypt(final String key) {\n    return crypt(key, null);\n}",java.lang.String crypt(java.lang.String),"digraph cfg_crypt {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.Crypt: java.lang.String crypt(java.lang.String,java.lang.String)>(key, null)""];\n	""2"" [label=""key := @parameter0: java.lang.String""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Crypt.crypt(String,String)",Method,"* Encrypts a password in a crypt(3) compatible way.\n     * <p>\n     * The exact algorithm depends on the format of the salt string:\n     * </p>\n     * <ul>\n     * <li>SHA-512 salts start with {@code $6$} and are up to 16 chars long.\n     * <li>SHA-256 salts start with {@code $5$} and are up to 16 chars long\n     * <li>MD5 salts start with {@code $1$} and are up to 8 chars long\n     * <li>DES, the traditional UnixCrypt algorithm is used with only 2 chars\n     * <li>Only the first 8 chars of the passwords are used in the DES algorithm!\n     * </ul>\n     * <p>\n     * The magic strings {@code ""$apr1$""} and {@code ""$2a$""} are not recognized by this method as its output should be\n     * identical with that of the libc implementation.\n     * </p>\n     * <p>\n     * The rest of the salt string is drawn from the set {@code [a-zA-Z0-9./]} and is cut at the maximum length or if a\n     * {@code ""$""} sign is encountered. It is therefore valid to enter a complete hash value as salt to for example verify a\n     * password with:\n     * </p>\n     * <pre>\n     * storedPwd.equals(crypt(enteredPwd, storedPwd))\n     * </pre>\n     * <p>\n     * The resulting string starts with the marker string ({@code $n$}), where n is the same as the input salt.\n     * The salt is then appended, followed by a {@code ""$""} sign.\n     * This is followed by the actual hash value.\n     * For DES the string only contains the salt and actual hash.\n     * The total length is dependent on the algorithm used:\n     * </p>\n     * <ul>\n     * <li>SHA-512: 106 chars\n     * <li>SHA-256: 63 chars\n     * <li>MD5: 34 chars\n     * <li>DES: 13 chars\n     * </ul>\n     * <p>\n     * Example:\n     * </p>\n     * <pre>\n     *      crypt(""secret"", ""$1$xxxx"") =&gt; ""$1$xxxx$aMkevjfEIpa35Bh3G4bAc.""\n     *      crypt(""secret"", ""xx"") =&gt; ""xxWAum7tHdIUw""\n     * </pre>\n     * <p>\n     * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in\n     * UTF-8 but for example in ISO-8859-1 where equal characters result in different byte values.\n     * </p>\n     *\n     * @see ""The man page of the libc crypt (3) function.""\n     * @param key\n     *            plaintext password as entered by the used\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a\n     *            salt is generated for you using {@link SecureRandom}\n     * @return hash value, i.e. encrypted password including the salt string\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *","public static String crypt(final String key, final String salt) {\n    return crypt(key.getBytes(StandardCharsets.UTF_8), salt);\n}","java.lang.String crypt(java.lang.String,java.lang.String)","digraph cfg_crypt {\n	""1"" [label=""$stack2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack3 = virtualinvoke key.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack2)""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.Crypt: java.lang.String crypt(byte[],java.lang.String)>($stack3, salt)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""salt := @parameter1: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Crypt.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic Crypt() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.Crypt""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder)",Method,* Base64 like conversion of bytes to ASCII chars.\n     *\n     * @param b2\n     *            A byte from the result.\n     * @param b1\n     *            A byte from the result.\n     * @param b0\n     *            A byte from the result.\n     * @param outLen\n     *            The number of expected output chars.\n     * @param buffer\n     *            Where the output chars is appended to.,"static void b64from24bit(final byte b2, final byte b1, final byte b0, final int outLen, final StringBuilder buffer) {\n    // The bit masking is necessary because the JVM byte type is signed!\n    int w = b2 << 16 & 0x00ffffff | b1 << 8 & 0x00ffff | b0 & 0xff;\n    // It's effectively a ""for"" loop but kept to resemble the original C code.\n    int n = outLen;\n    while (n-- > 0) {\n        buffer.append(B64T_ARRAY[w & 0x3f]);\n        w >>= 6;\n    }\n}","void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)","digraph cfg_b64from24bit {\n	""1"" [label=""$stack10 = $stack8 & 65535""];\n	""2"" [label=""$stack11 = $stack9 | $stack10""];\n	""3"" [label=""$stack12 = b0 & 255""];\n	""4"" [label=""$stack13 = n""];\n	""5"" [label=""$stack14 = <org.apache.commons.codec.digest.B64: char[] B64T_ARRAY>""];\n	""6"" [label=""$stack15 = w & 63""];\n	""7"" [label=""$stack16 = $stack14[$stack15]""];\n	""8"" [label=""$stack7 = b2 << 16""];\n	""9"" [label=""$stack8 = b1 << 8""];\n	""10"" [label=""$stack9 = $stack7 & 16777215""];\n	""11"" [label=""b0 := @parameter2: byte""];\n	""12"" [label=""b1 := @parameter1: byte""];\n	""13"" [label=""b2 := @parameter0: byte""];\n	""14"" [label=""buffer := @parameter4: java.lang.StringBuilder""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack13 <= 0""];\n	""17"" [label=""n = n + -1""];\n	""18"" [label=""n = outLen""];\n	""19"" [label=""outLen := @parameter3: int""];\n	""20"" [label=""return""];\n	""21"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack16)""];\n	""22"" [label=""w = $stack11 | $stack12""];\n	""23"" [label=""w = w >> 6""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""19""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""15"" -> ""4""[label=""cfg_goto""];\n	""16"" -> ""20""[label=""cfg_true""];\n	""16"" -> ""5""[label=""cfg_false""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""4""[label=""cfg_next""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""18""[label=""cfg_next""];\n	""23"" -> ""15""[label=""cfg_next""];\n	""3"" -> ""22""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",static 
org.apache.commons.codec.digest.B64.getRandomSalt(int),Method,* Generates a string of random chars from the B64T set.\n     * <p>\n     * The salt is generated with {@link SecureRandom}.\n     * </p>\n     *\n     * @param num Number of chars to generate.\n     * @return a random salt {@link String}.,"static String getRandomSalt(final int num) {\n    return getRandomSalt(num, new SecureRandom());\n}",java.lang.String getRandomSalt(int),"digraph cfg_getRandomSalt {\n	""1"" [label=""$stack1 = new java.security.SecureRandom""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(num, $stack1)""];\n	""3"" [label=""num := @parameter0: int""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack1.<java.security.SecureRandom: void <init>()>()""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",static 
"org.apache.commons.codec.digest.B64.getRandomSalt(int,Random)",Method,* Generates a string of random chars from the B64T set.\n     * <p>\n     * The salt is generated with the {@link Random} provided.\n     * </p>\n     *\n     * @param num Number of chars to generate.\n     * @param random an instance of {@link Random}.\n     * @return a random salt {@link String}.,"static String getRandomSalt(final int num, final Random random) {\n    final StringBuilder saltString = new StringBuilder(num);\n    for (int i = 1; i <= num; i++) {\n        saltString.append(B64T_STRING.charAt(random.nextInt(B64T_STRING.length())));\n    }\n    return saltString.toString();\n}","java.lang.String getRandomSalt(int,java.util.Random)","digraph cfg_getRandomSalt {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.String: char charAt(int)>($stack8)""];\n	""2"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack5 = virtualinvoke saltString.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""4"" [label=""$stack6 = \""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\""""];\n	""5"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.String: int length()>()""];\n	""6"" [label=""$stack8 = virtualinvoke random.<java.util.Random: int nextInt(int)>($stack7)""];\n	""7"" [label=""$stack9 = \""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\""""];\n	""8"" [label=""goto""];\n	""9"" [label=""i = 1""];\n	""10"" [label=""i = i + 1""];\n	""11"" [label=""if i > num""];\n	""12"" [label=""num := @parameter0: int""];\n	""13"" [label=""random := @parameter1: java.util.Random""];\n	""14"" [label=""return $stack5""];\n	""15"" [label=""saltString = $stack4""];\n	""16"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>(int)>(num)""];\n	""17"" [label=""virtualinvoke saltString.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack10)""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_true""];\n	""11"" -> ""7""[label=""cfg_false""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""15"" -> ""9""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""17"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_goto""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",static 
org.apache.commons.codec.digest.PureJavaCrc32.getValue(),Method,No Comment,@Override\npublic long getValue() {\n    return ~crc & 0xffffffffL;\n},long getValue(),"digraph cfg_getValue {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc>""];\n	""2"" [label=""$stack2 = $stack1 ^ -1""];\n	""3"" [label=""$stack3 = (long) $stack2""];\n	""4"" [label=""$stack4 = $stack3 & 4294967295L""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.PureJavaCrc32.reset(),Method,No Comment,@Override\npublic void reset() {\n    resetCrc();\n},void reset(),"digraph cfg_reset {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.digest.PureJavaCrc32: void resetCrc()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.PureJavaCrc32.resetCrc(),Method,"called by ctor, so must not be overrideable",private void resetCrc() {\n    crc = 0xffffffff;\n},void resetCrc(),"digraph cfg_resetCrc {\n	""1"" [label=""return""];\n	""2"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""3"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc> = -1""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.PureJavaCrc32.update(byte[],int,int)",Method,No Comment,"@Override\npublic void update(final byte[] b, final int offset, final int len) {\n    int localCrc = crc;\n    final int remainder = len & 0x7;\n    int i = offset;\n    for (final int end = offset + len - remainder; i < end; i += 8) {\n        final int x = localCrc ^ (b[i] << 24 >>> 24) + (b[i + 1] << 24 >>> 16) + (b[i + 2] << 24 >>> 8) + (b[i + 3] << 24);\n        localCrc = T[(x << 24 >>> 24) + 0x700] ^ T[(x << 16 >>> 24) + 0x600] ^ T[(x << 8 >>> 24) + 0x500] ^ T[(x >>> 24) + 0x400] ^ T[(b[i + 4] << 24 >>> 24) + 0x300] ^ T[(b[i + 5] << 24 >>> 24) + 0x200] ^ T[(b[i + 6] << 24 >>> 24) + 0x100] ^ T[b[i + 7] << 24 >>> 24];\n    }\n    // loop unroll - duff's device style\n    switch(remainder) {\n        case 7:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 6:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 5:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 4:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 3:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 2:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        case 1:\n            localCrc = localCrc >>> 8 ^ T[(localCrc ^ b[i++]) << 24 >>> 24];\n        // falls-through\n        default:\n    }\n    // Publish crc out to object\n    crc = localCrc;\n}","void update(byte[],int,int)","digraph cfg_update {\n	""1"" [label=""$stack10 = i""];\n	""2"" [label=""$stack100 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""3"" [label=""$stack101 = $stack99 + 1024""];\n	""4"" [label=""$stack102 = $stack97 ^ $stack98""];\n	""5"" [label=""$stack103 = $stack100[$stack101]""];\n	""6"" [label=""$stack104 = i + 4""];\n	""7"" [label=""$stack105 = b[$stack104]""];\n	""8"" [label=""$stack106 = $stack105 << 24""];\n	""9"" [label=""$stack107 = $stack106 >>> 24""];\n	""10"" [label=""$stack108 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""11"" [label=""$stack109 = $stack107 + 768""];\n	""12"" [label=""$stack11 = b[$stack10]""];\n	""13"" [label=""$stack110 = $stack102 ^ $stack103""];\n	""14"" [label=""$stack111 = $stack108[$stack109]""];\n	""15"" [label=""$stack112 = i + 5""];\n	""16"" [label=""$stack113 = b[$stack112]""];\n	""17"" [label=""$stack114 = $stack113 << 24""];\n	""18"" [label=""$stack115 = $stack114 >>> 24""];\n	""19"" [label=""$stack116 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""20"" [label=""$stack117 = $stack115 + 512""];\n	""21"" [label=""$stack118 = $stack110 ^ $stack111""];\n	""22"" [label=""$stack119 = $stack116[$stack117]""];\n	""23"" [label=""$stack12 = localCrc ^ $stack11""];\n	""24"" [label=""$stack120 = i + 6""];\n	""25"" [label=""$stack121 = b[$stack120]""];\n	""26"" [label=""$stack122 = $stack121 << 24""];\n	""27"" [label=""$stack123 = $stack122 >>> 24""];\n	""28"" [label=""$stack124 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""29"" [label=""$stack125 = $stack123 + 256""];\n	""30"" [label=""$stack126 = $stack118 ^ $stack119""];\n	""31"" [label=""$stack127 = $stack124[$stack125]""];\n	""32"" [label=""$stack128 = i + 7""];\n	""33"" [label=""$stack129 = b[$stack128]""];\n	""34"" [label=""$stack13 = $stack12 << 24""];\n	""35"" [label=""$stack130 = $stack129 << 24""];\n	""36"" [label=""$stack131 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""37"" [label=""$stack132 = $stack130 >>> 24""];\n	""38"" [label=""$stack133 = $stack126 ^ $stack127""];\n	""39"" [label=""$stack134 = $stack131[$stack132]""];\n	""40"" [label=""$stack14 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""41"" [label=""$stack15 = $stack13 >>> 24""];\n	""42"" [label=""$stack16 = localCrc >>> 8""];\n	""43"" [label=""$stack17 = $stack14[$stack15]""];\n	""44"" [label=""$stack18 = i""];\n	""45"" [label=""$stack19 = b[$stack18]""];\n	""46"" [label=""$stack20 = localCrc ^ $stack19""];\n	""47"" [label=""$stack21 = $stack20 << 24""];\n	""48"" [label=""$stack22 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""49"" [label=""$stack23 = $stack21 >>> 24""];\n	""50"" [label=""$stack24 = localCrc >>> 8""];\n	""51"" [label=""$stack25 = $stack22[$stack23]""];\n	""52"" [label=""$stack26 = i""];\n	""53"" [label=""$stack27 = b[$stack26]""];\n	""54"" [label=""$stack28 = localCrc ^ $stack27""];\n	""55"" [label=""$stack29 = $stack28 << 24""];\n	""56"" [label=""$stack30 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""57"" [label=""$stack31 = $stack29 >>> 24""];\n	""58"" [label=""$stack32 = localCrc >>> 8""];\n	""59"" [label=""$stack33 = $stack30[$stack31]""];\n	""60"" [label=""$stack34 = i""];\n	""61"" [label=""$stack35 = b[$stack34]""];\n	""62"" [label=""$stack36 = localCrc ^ $stack35""];\n	""63"" [label=""$stack37 = $stack36 << 24""];\n	""64"" [label=""$stack38 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""65"" [label=""$stack39 = $stack37 >>> 24""];\n	""66"" [label=""$stack40 = localCrc >>> 8""];\n	""67"" [label=""$stack41 = $stack38[$stack39]""];\n	""68"" [label=""$stack42 = i""];\n	""69"" [label=""$stack43 = b[$stack42]""];\n	""70"" [label=""$stack44 = localCrc ^ $stack43""];\n	""71"" [label=""$stack45 = $stack44 << 24""];\n	""72"" [label=""$stack46 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""73"" [label=""$stack47 = $stack45 >>> 24""];\n	""74"" [label=""$stack48 = localCrc >>> 8""];\n	""75"" [label=""$stack49 = $stack46[$stack47]""];\n	""76"" [label=""$stack50 = i""];\n	""77"" [label=""$stack51 = b[$stack50]""];\n	""78"" [label=""$stack52 = localCrc ^ $stack51""];\n	""79"" [label=""$stack53 = $stack52 << 24""];\n	""80"" [label=""$stack54 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""81"" [label=""$stack55 = $stack53 >>> 24""];\n	""82"" [label=""$stack56 = localCrc >>> 8""];\n	""83"" [label=""$stack57 = $stack54[$stack55]""];\n	""84"" [label=""$stack58 = i""];\n	""85"" [label=""$stack59 = b[$stack58]""];\n	""86"" [label=""$stack60 = localCrc ^ $stack59""];\n	""87"" [label=""$stack61 = $stack60 << 24""];\n	""88"" [label=""$stack62 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""89"" [label=""$stack63 = $stack61 >>> 24""];\n	""90"" [label=""$stack64 = localCrc >>> 8""];\n	""91"" [label=""$stack65 = $stack62[$stack63]""];\n	""92"" [label=""$stack66 = b[i]""];\n	""93"" [label=""$stack67 = $stack66 << 24""];\n	""94"" [label=""$stack68 = i + 1""];\n	""95"" [label=""$stack69 = b[$stack68]""];\n	""96"" [label=""$stack70 = $stack69 << 24""];\n	""97"" [label=""$stack71 = $stack67 >>> 24""];\n	""98"" [label=""$stack72 = $stack70 >>> 16""];\n	""99"" [label=""$stack73 = i + 2""];\n	""100"" [label=""$stack74 = b[$stack73]""];\n	""101"" [label=""$stack75 = $stack74 << 24""];\n	""102"" [label=""$stack76 = $stack71 + $stack72""];\n	""103"" [label=""$stack77 = $stack75 >>> 8""];\n	""104"" [label=""$stack78 = i + 3""];\n	""105"" [label=""$stack79 = b[$stack78]""];\n	""106"" [label=""$stack80 = $stack76 + $stack77""];\n	""107"" [label=""$stack81 = $stack79 << 24""];\n	""108"" [label=""$stack82 = $stack80 + $stack81""];\n	""109"" [label=""$stack83 = x << 24""];\n	""110"" [label=""$stack84 = $stack83 >>> 24""];\n	""111"" [label=""$stack85 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""112"" [label=""$stack86 = $stack84 + 1792""];\n	""113"" [label=""$stack87 = x << 16""];\n	""114"" [label=""$stack88 = $stack87 >>> 24""];\n	""115"" [label=""$stack89 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""116"" [label=""$stack9 = offset + len""];\n	""117"" [label=""$stack90 = $stack88 + 1536""];\n	""118"" [label=""$stack91 = $stack85[$stack86]""];\n	""119"" [label=""$stack92 = $stack89[$stack90]""];\n	""120"" [label=""$stack93 = x << 8""];\n	""121"" [label=""$stack94 = $stack93 >>> 24""];\n	""122"" [label=""$stack95 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""123"" [label=""$stack96 = $stack94 + 1280""];\n	""124"" [label=""$stack97 = $stack91 ^ $stack92""];\n	""125"" [label=""$stack98 = $stack95[$stack96]""];\n	""126"" [label=""$stack99 = x >>> 24""];\n	""127"" [label=""b := @parameter0: byte[]""];\n	""128"" [label=""end = $stack9 - remainder""];\n	""129"" [label=""goto""];\n	""130"" [label=""i = i + 1""];\n	""131"" [label=""i = i + 1""];\n	""132"" [label=""i = i + 1""];\n	""133"" [label=""i = i + 1""];\n	""134"" [label=""i = i + 1""];\n	""135"" [label=""i = i + 1""];\n	""136"" [label=""i = i + 1""];\n	""137"" [label=""i = i + 8""];\n	""138"" [label=""i = offset""];\n	""139"" [label=""if i >= end""];\n	""140"" [label=""len := @parameter2: int""];\n	""141"" [label=""localCrc = $stack133 ^ $stack134""];\n	""142"" [label=""localCrc = $stack16 ^ $stack17""];\n	""143"" [label=""localCrc = $stack24 ^ $stack25""];\n	""144"" [label=""localCrc = $stack32 ^ $stack33""];\n	""145"" [label=""localCrc = $stack40 ^ $stack41""];\n	""146"" [label=""localCrc = $stack48 ^ $stack49""];\n	""147"" [label=""localCrc = $stack56 ^ $stack57""];\n	""148"" [label=""localCrc = $stack64 ^ $stack65""];\n	""149"" [label=""localCrc = this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc>""];\n	""150"" [label=""offset := @parameter1: int""];\n	""151"" [label=""remainder = len & 7""];\n	""152"" [label=""return""];\n	""153"" [label=""switch(remainder) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     default:  \}""];\n	""154"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""155"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc> = localCrc""];\n	""156"" [label=""x = localCrc ^ $stack82""];\n	""1"" -> ""130""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""100"" -> ""101""[label=""cfg_next""];\n	""101"" -> ""103""[label=""cfg_next""];\n	""102"" -> ""99""[label=""cfg_next""];\n	""103"" -> ""106""[label=""cfg_next""];\n	""104"" -> ""105""[label=""cfg_next""];\n	""105"" -> ""107""[label=""cfg_next""];\n	""106"" -> ""104""[label=""cfg_next""];\n	""107"" -> ""108""[label=""cfg_next""];\n	""108"" -> ""156""[label=""cfg_next""];\n	""109"" -> ""110""[label=""cfg_next""];\n	""11"" -> ""14""[label=""cfg_next""];\n	""110"" -> ""112""[label=""cfg_next""];\n	""111"" -> ""109""[label=""cfg_next""];\n	""112"" -> ""118""[label=""cfg_next""];\n	""113"" -> ""114""[label=""cfg_next""];\n	""114"" -> ""117""[label=""cfg_next""];\n	""115"" -> ""113""[label=""cfg_next""];\n	""116"" -> ""128""[label=""cfg_next""];\n	""117"" -> ""119""[label=""cfg_next""];\n	""118"" -> ""115""[label=""cfg_next""];\n	""119"" -> ""124""[label=""cfg_next""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""120"" -> ""121""[label=""cfg_next""];\n	""121"" -> ""123""[label=""cfg_next""];\n	""122"" -> ""120""[label=""cfg_next""];\n	""123"" -> ""125""[label=""cfg_next""];\n	""124"" -> ""122""[label=""cfg_next""];\n	""125"" -> ""4""[label=""cfg_next""];\n	""126"" -> ""3""[label=""cfg_next""];\n	""127"" -> ""150""[label=""cfg_next""];\n	""128"" -> ""139""[label=""cfg_next""];\n	""129"" -> ""139""[label=""cfg_goto""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""130"" -> ""12""[label=""cfg_next""];\n	""131"" -> ""45""[label=""cfg_next""];\n	""132"" -> ""53""[label=""cfg_next""];\n	""133"" -> ""61""[label=""cfg_next""];\n	""134"" -> ""69""[label=""cfg_next""];\n	""135"" -> ""77""[label=""cfg_next""];\n	""136"" -> ""85""[label=""cfg_next""];\n	""137"" -> ""129""[label=""cfg_next""];\n	""138"" -> ""116""[label=""cfg_next""];\n	""139"" -> ""153""[label=""cfg_true""];\n	""139"" -> ""92""[label=""cfg_false""];\n	""14"" -> ""21""[label=""cfg_next""];\n	""140"" -> ""149""[label=""cfg_next""];\n	""141"" -> ""137""[label=""cfg_next""];\n	""142"" -> ""50""[label=""cfg_next""];\n	""143"" -> ""58""[label=""cfg_next""];\n	""144"" -> ""66""[label=""cfg_next""];\n	""145"" -> ""74""[label=""cfg_next""];\n	""146"" -> ""82""[label=""cfg_next""];\n	""147"" -> ""90""[label=""cfg_next""];\n	""148"" -> ""155""[label=""cfg_next""];\n	""149"" -> ""151""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""150"" -> ""140""[label=""cfg_next""];\n	""151"" -> ""138""[label=""cfg_next""];\n	""153"" -> ""155""[label=""cfg_switch""];\n	""153"" -> ""42""[label=""cfg_switch""];\n	""153"" -> ""50""[label=""cfg_switch""];\n	""153"" -> ""58""[label=""cfg_switch""];\n	""153"" -> ""66""[label=""cfg_switch""];\n	""153"" -> ""74""[label=""cfg_switch""];\n	""153"" -> ""82""[label=""cfg_switch""];\n	""153"" -> ""90""[label=""cfg_switch""];\n	""154"" -> ""127""[label=""cfg_next""];\n	""155"" -> ""152""[label=""cfg_next""];\n	""156"" -> ""111""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""126""[label=""cfg_next""];\n	""20"" -> ""22""[label=""cfg_next""];\n	""21"" -> ""19""[label=""cfg_next""];\n	""22"" -> ""30""[label=""cfg_next""];\n	""23"" -> ""34""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""29""[label=""cfg_next""];\n	""28"" -> ""24""[label=""cfg_next""];\n	""29"" -> ""31""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""30"" -> ""28""[label=""cfg_next""];\n	""31"" -> ""38""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""35""[label=""cfg_next""];\n	""34"" -> ""41""[label=""cfg_next""];\n	""35"" -> ""37""[label=""cfg_next""];\n	""36"" -> ""32""[label=""cfg_next""];\n	""37"" -> ""39""[label=""cfg_next""];\n	""38"" -> ""36""[label=""cfg_next""];\n	""39"" -> ""141""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""40"" -> ""1""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""40""[label=""cfg_next""];\n	""43"" -> ""142""[label=""cfg_next""];\n	""44"" -> ""131""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""49""[label=""cfg_next""];\n	""48"" -> ""44""[label=""cfg_next""];\n	""49"" -> ""51""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""50"" -> ""48""[label=""cfg_next""];\n	""51"" -> ""143""[label=""cfg_next""];\n	""52"" -> ""132""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""57""[label=""cfg_next""];\n	""56"" -> ""52""[label=""cfg_next""];\n	""57"" -> ""59""[label=""cfg_next""];\n	""58"" -> ""56""[label=""cfg_next""];\n	""59"" -> ""144""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""133""[label=""cfg_next""];\n	""61"" -> ""62""[label=""cfg_next""];\n	""62"" -> ""63""[label=""cfg_next""];\n	""63"" -> ""65""[label=""cfg_next""];\n	""64"" -> ""60""[label=""cfg_next""];\n	""65"" -> ""67""[label=""cfg_next""];\n	""66"" -> ""64""[label=""cfg_next""];\n	""67"" -> ""145""[label=""cfg_next""];\n	""68"" -> ""134""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""71""[label=""cfg_next""];\n	""71"" -> ""73""[label=""cfg_next""];\n	""72"" -> ""68""[label=""cfg_next""];\n	""73"" -> ""75""[label=""cfg_next""];\n	""74"" -> ""72""[label=""cfg_next""];\n	""75"" -> ""146""[label=""cfg_next""];\n	""76"" -> ""135""[label=""cfg_next""];\n	""77"" -> ""78""[label=""cfg_next""];\n	""78"" -> ""79""[label=""cfg_next""];\n	""79"" -> ""81""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""76""[label=""cfg_next""];\n	""81"" -> ""83""[label=""cfg_next""];\n	""82"" -> ""80""[label=""cfg_next""];\n	""83"" -> ""147""[label=""cfg_next""];\n	""84"" -> ""136""[label=""cfg_next""];\n	""85"" -> ""86""[label=""cfg_next""];\n	""86"" -> ""87""[label=""cfg_next""];\n	""87"" -> ""89""[label=""cfg_next""];\n	""88"" -> ""84""[label=""cfg_next""];\n	""89"" -> ""91""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n	""90"" -> ""88""[label=""cfg_next""];\n	""91"" -> ""148""[label=""cfg_next""];\n	""92"" -> ""93""[label=""cfg_next""];\n	""93"" -> ""97""[label=""cfg_next""];\n	""94"" -> ""95""[label=""cfg_next""];\n	""95"" -> ""96""[label=""cfg_next""];\n	""96"" -> ""98""[label=""cfg_next""];\n	""97"" -> ""94""[label=""cfg_next""];\n	""98"" -> ""102""[label=""cfg_next""];\n	""99"" -> ""100""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.PureJavaCrc32.update(int),Method,No Comment,@Override\npublic final void update(final int b) {\n    crc = crc >>> 8 ^ T[(crc ^ b) << 24 >>> 24];\n},void update(int),"digraph cfg_update {\n	""1"" [label=""$stack10 = $stack8 ^ $stack9""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc>""];\n	""4"" [label=""$stack4 = $stack3 ^ b""];\n	""5"" [label=""$stack5 = $stack4 << 24""];\n	""6"" [label=""$stack6 = <org.apache.commons.codec.digest.PureJavaCrc32: int[] T>""];\n	""7"" [label=""$stack7 = $stack5 >>> 24""];\n	""8"" [label=""$stack8 = $stack2 >>> 8""];\n	""9"" [label=""$stack9 = $stack6[$stack7]""];\n	""10"" [label=""b := @parameter0: int""];\n	""11"" [label=""return""];\n	""12"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""13"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32: int crc> = $stack10""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.digest.PureJavaCrc32.<init>(),Constructor,Constructs a new PureJavaCrc32 object.,public PureJavaCrc32() {\n    resetCrc();\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.digest.PureJavaCrc32: void resetCrc()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]),Method,"* Returns an initialized {@code Mac} for the HmacMD5 algorithm.\n     * <p>\n     * Every implementation of the Java platform is required to support this standard Mac algorithm.\n     * </p>\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code getInitializedMac(HmacAlgorithms.HMAC_MD5, byte[])}","@Deprecated\npublic static Mac getHmacMd5(final byte[] key) {\n    return getInitializedMac(HmacAlgorithms.HMAC_MD5, key);\n}",javax.crypto.Mac getHmacMd5(byte[]),"digraph cfg_getHmacMd5 {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack1, key)""];\n	""3"" [label=""key := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]),Method,"* Returns an initialized {@code Mac} for the HmacSHA1 algorithm.\n     * <p>\n     * Every implementation of the Java platform is required to support this standard Mac algorithm.\n     * </p>\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code getInitializedMac(HmacAlgorithms.HMAC_SHA_1, byte[])}","@Deprecated\npublic static Mac getHmacSha1(final byte[] key) {\n    return getInitializedMac(HmacAlgorithms.HMAC_SHA_1, key);\n}",javax.crypto.Mac getHmacSha1(byte[]),"digraph cfg_getHmacSha1 {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack1, key)""];\n	""3"" [label=""key := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]),Method,"* Returns an initialized {@code Mac} for the HmacSHA256 algorithm.\n     * <p>\n     * Every implementation of the Java platform is required to support this standard Mac algorithm.\n     * </p>\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code getInitializedMac(HmacAlgorithms.HMAC_SHA_256, byte[])}","@Deprecated\npublic static Mac getHmacSha256(final byte[] key) {\n    return getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);\n}",javax.crypto.Mac getHmacSha256(byte[]),"digraph cfg_getHmacSha256 {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack1, key)""];\n	""3"" [label=""key := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[]),Method,"* Returns an initialized {@code Mac} for the HmacSHA384 algorithm.\n     * <p>\n     * Every implementation of the Java platform is <em>not</em> required to support this Mac algorithm.\n     * </p>\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code getInitializedMac(HmacAlgorithms.HMAC_SHA_384, byte[])}","@Deprecated\npublic static Mac getHmacSha384(final byte[] key) {\n    return getInitializedMac(HmacAlgorithms.HMAC_SHA_384, key);\n}",javax.crypto.Mac getHmacSha384(byte[]),"digraph cfg_getHmacSha384 {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack1, key)""];\n	""3"" [label=""key := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]),Method,"* Returns an initialized {@code Mac} for the HmacSHA512 algorithm.\n     * <p>\n     * Every implementation of the Java platform is <em>not</em> required to support this Mac algorithm.\n     * </p>\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code getInitializedMac(HmacAlgorithms.HMAC_SHA_512, byte[])}","@Deprecated\npublic static Mac getHmacSha512(final byte[] key) {\n    return getInitializedMac(HmacAlgorithms.HMAC_SHA_512, key);\n}",javax.crypto.Mac getHmacSha512(byte[]),"digraph cfg_getHmacSha512 {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack1, key)""];\n	""3"" [label=""key := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(HmacAlgorithms,byte[])",Method,"* Returns an initialized {@code Mac} for the given {@code algorithm}.\n     *\n     * @param algorithm\n     *            the name of the algorithm requested. See\n     *            <a href= ""https://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA""\n     *            >Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard\n     *            algorithm names.\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.","public static Mac getInitializedMac(final HmacAlgorithms algorithm, final byte[] key) {\n    return getInitializedMac(algorithm.getName(), key);\n}","javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[])","digraph cfg_getInitializedMac {\n	""1"" [label=""$stack2 = virtualinvoke algorithm.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String getName()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(java.lang.String,byte[])>($stack2, key)""];\n	""3"" [label=""algorithm := @parameter0: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""4"" [label=""key := @parameter1: byte[]""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(String,byte[])",Method,"* Returns an initialized {@code Mac} for the given {@code algorithm}.\n     *\n     * @param algorithm\n     *            the name of the algorithm requested. See\n     *            <a href= ""https://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA""\n     *            >Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard\n     *            algorithm names.\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @return A Mac instance initialized with the given key.\n     * @see Mac#getInstance(String)\n     * @see Mac#init(Key)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.","public static Mac getInitializedMac(final String algorithm, final byte[] key) {\n    if (key == null) {\n        throw new IllegalArgumentException(""Null key"");\n    }\n    try {\n        final SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);\n        final Mac mac = Mac.getInstance(algorithm);\n        mac.init(keySpec);\n        return mac;\n    } catch (final NoSuchAlgorithmException | InvalidKeyException e) {\n        throw new IllegalArgumentException(e);\n    }\n}","javax.crypto.Mac getInitializedMac(java.lang.String,byte[])","digraph cfg_getInitializedMac {\n	""1"" [label=""$stack4 = new javax.crypto.spec.SecretKeySpec""];\n	""2"" [label=""$stack5 = mac""];\n	""3"" [label=""$stack6 = new java.lang.IllegalArgumentException""];\n	""4"" [label=""$stack7 := @caughtexception""];\n	""5"" [label=""$stack8 = new java.lang.IllegalArgumentException""];\n	""6"" [label=""algorithm := @parameter0: java.lang.String""];\n	""7"" [label=""if key != null""];\n	""8"" [label=""key := @parameter1: byte[]""];\n	""9"" [label=""keySpec = $stack4""];\n	""10"" [label=""keySpec = $stack7""];\n	""11"" [label=""mac = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(algorithm)""];\n	""12"" [label=""return $stack5""];\n	""13"" [label=""specialinvoke $stack4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(key, algorithm)""];\n	""14"" [label=""specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Null key\"")""];\n	""15"" [label=""specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(keySpec)""];\n	""16"" [label=""throw $stack6""];\n	""17"" [label=""throw $stack8""];\n	""18"" [label=""virtualinvoke mac.<javax.crypto.Mac: void init(java.security.Key)>(keySpec)""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""1"" -> ""4""[label=""cfg_except""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""11"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_except""];\n	""13"" -> ""4""[label=""cfg_except""];\n	""13"" -> ""9""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""18"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""4""[label=""cfg_except""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_except""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""3""[label=""cfg_false""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_except""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacMD5 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, byte[]).hmac(byte[])}","@Deprecated\npublic static byte[] hmacMd5(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmac(valueToDigest);\n}","byte[] hmacMd5(byte[],byte[])","digraph cfg_hmacMd5 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],InputStream)",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacMD5 MAC for the given key and value\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, byte[]).hmac(InputStream)}","@Deprecated\npublic static byte[] hmacMd5(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmac(valueToDigest);\n}","byte[] hmacMd5(byte[],java.io.InputStream)","digraph cfg_hmacMd5 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(String,String)",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacMD5 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, String).hmac(String)}","@Deprecated\npublic static byte[] hmacMd5(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmac(valueToDigest);\n}","byte[] hmacMd5(java.lang.String,java.lang.String)","digraph cfg_hmacMd5 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) as a hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacMD5 MAC for the given key and value as a hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, byte[]).hmacHex(byte[])}","@Deprecated\npublic static String hmacMd5Hex(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);\n}","java.lang.String hmacMd5Hex(byte[],byte[])","digraph cfg_hmacMd5Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],InputStream)",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) as a hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacMD5 MAC for the given key and value as a hexadecimal string (lowercase)\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, byte[]).hmacHex(InputStream)}","@Deprecated\npublic static String hmacMd5Hex(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);\n}","java.lang.String hmacMd5Hex(byte[],java.io.InputStream)","digraph cfg_hmacMd5Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(String,String)",Method,"* Returns a HmacMD5 Message Authentication Code (MAC) as a hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacMD5 MAC for the given key and value as a hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_MD5, String).hmacHex(String)}","@Deprecated\npublic static String hmacMd5Hex(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);\n}","java.lang.String hmacMd5Hex(java.lang.String,java.lang.String)","digraph cfg_hmacMd5Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA1 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, byte[]).hmac(byte[])}","@Deprecated\npublic static byte[] hmacSha1(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmac(valueToDigest);\n}","byte[] hmacSha1(byte[],byte[])","digraph cfg_hmacSha1 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],InputStream)",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA1 MAC for the given key and value\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, byte[]).hmac(InputStream)}","@Deprecated\npublic static byte[] hmacSha1(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmac(valueToDigest);\n}","byte[] hmacSha1(byte[],java.io.InputStream)","digraph cfg_hmacSha1 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(String,String)",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA1 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, String).hmac(String)}","@Deprecated\npublic static byte[] hmacSha1(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmac(valueToDigest);\n}","byte[] hmacSha1(java.lang.String,java.lang.String)","digraph cfg_hmacSha1 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA1 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, byte[]).hmacHex(byte[])}","@Deprecated\npublic static String hmacSha1Hex(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha1Hex(byte[],byte[])","digraph cfg_hmacSha1Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],InputStream)",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA1 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, byte[]).hmacHex(InputStream)}","@Deprecated\npublic static String hmacSha1Hex(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha1Hex(byte[],java.io.InputStream)","digraph cfg_hmacSha1Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(String,String)",Method,"* Returns a HmacSHA1 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA1 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_1, String).hmacHex(String)}","@Deprecated\npublic static String hmacSha1Hex(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha1Hex(java.lang.String,java.lang.String)","digraph cfg_hmacSha1Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA256 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, byte[]).hmac(byte[])}","@Deprecated\npublic static byte[] hmacSha256(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);\n}","byte[] hmacSha256(byte[],byte[])","digraph cfg_hmacSha256 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],InputStream)",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA256 MAC for the given key and value\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, byte[]).hmac(InputStream)}","@Deprecated\npublic static byte[] hmacSha256(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);\n}","byte[] hmacSha256(byte[],java.io.InputStream)","digraph cfg_hmacSha256 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(String,String)",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA256 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, String).hmac(String)}","@Deprecated\npublic static byte[] hmacSha256(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);\n}","byte[] hmacSha256(java.lang.String,java.lang.String)","digraph cfg_hmacSha256 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA256 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, byte[]).hmacHex(byte[])}","@Deprecated\npublic static String hmacSha256Hex(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha256Hex(byte[],byte[])","digraph cfg_hmacSha256Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],InputStream)",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA256 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, byte[]).hmacHex(InputStream)}","@Deprecated\npublic static String hmacSha256Hex(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha256Hex(byte[],java.io.InputStream)","digraph cfg_hmacSha256Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(String,String)",Method,"* Returns a HmacSHA256 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA256 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_256, String).hmacHex(String)}","@Deprecated\npublic static String hmacSha256Hex(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha256Hex(java.lang.String,java.lang.String)","digraph cfg_hmacSha256Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA384 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, byte[]).hmac(byte[])}","@Deprecated\npublic static byte[] hmacSha384(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);\n}","byte[] hmacSha384(byte[],byte[])","digraph cfg_hmacSha384 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],InputStream)",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA384 MAC for the given key and value\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, byte[]).hmac(InputStream)}","@Deprecated\npublic static byte[] hmacSha384(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);\n}","byte[] hmacSha384(byte[],java.io.InputStream)","digraph cfg_hmacSha384 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(String,String)",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA384 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, String).hmac(String)}","@Deprecated\npublic static byte[] hmacSha384(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);\n}","byte[] hmacSha384(java.lang.String,java.lang.String)","digraph cfg_hmacSha384 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA384 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, byte[]).hmacHex(byte[])}","@Deprecated\npublic static String hmacSha384Hex(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha384Hex(byte[],byte[])","digraph cfg_hmacSha384Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],InputStream)",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA384 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, byte[]).hmacHex(InputStream)}","@Deprecated\npublic static String hmacSha384Hex(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha384Hex(byte[],java.io.InputStream)","digraph cfg_hmacSha384Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(String,String)",Method,"* Returns a HmacSHA384 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA384 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_384, String).hmacHex(String)}","@Deprecated\npublic static String hmacSha384Hex(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha384Hex(java.lang.String,java.lang.String)","digraph cfg_hmacSha384Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA512 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, byte[]).hmac(byte[])}","@Deprecated\npublic static byte[] hmacSha512(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);\n}","byte[] hmacSha512(byte[],byte[])","digraph cfg_hmacSha512 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],InputStream)",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA512 MAC for the given key and value\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, byte[]).hmac(InputStream)}","@Deprecated\npublic static byte[] hmacSha512(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);\n}","byte[] hmacSha512(byte[],java.io.InputStream)","digraph cfg_hmacSha512 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(String,String)",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA512 MAC for the given key and value\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, String).hmac(String)}","@Deprecated\npublic static byte[] hmacSha512(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmac(valueToDigest);\n}","byte[] hmacSha512(java.lang.String,java.lang.String)","digraph cfg_hmacSha512 {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA512 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, byte[]).hmacHex(byte[])}","@Deprecated\npublic static String hmacSha512Hex(final byte[] key, final byte[] valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha512Hex(byte[],byte[])","digraph cfg_hmacSha512Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(byte[])>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: byte[]""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],InputStream)",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return HmacSHA512 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, byte[]).hmacHex(InputStream)}","@Deprecated\npublic static String hmacSha512Hex(final byte[] key, final InputStream valueToDigest) throws IOException {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha512Hex(byte[],java.io.InputStream)","digraph cfg_hmacSha512Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.io.InputStream)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(String,String)",Method,"* Returns a HmacSHA512 Message Authentication Code (MAC) as hexadecimal string (lowercase) for the given key and value.\n     *\n     * @param key\n     *            The key for the keyed digest (must not be null)\n     * @param valueToDigest\n     *            The value (data) which should to digest (maybe empty or null)\n     * @return HmacSHA512 MAC for the given key and value as hexadecimal string (lowercase)\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @deprecated (1.11) Use {@code new HmacUtils(HmacAlgorithms.HMAC_SHA_512, String).hmacHex(String)}","@Deprecated\npublic static String hmacSha512Hex(final String key, final String valueToDigest) {\n    return new HmacUtils(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);\n}","java.lang.String hmacSha512Hex(java.lang.String,java.lang.String)","digraph cfg_hmacSha512Hex {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.digest.HmacAlgorithms: org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512>""];\n	""2"" [label=""$stack3 = new org.apache.commons.codec.digest.HmacUtils""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: java.lang.String hmacHex(java.lang.String)>(valueToDigest)""];\n	""4"" [label=""key := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.HmacUtils: void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)>($stack2, key)""];\n	""7"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.isAvailable(HmacAlgorithms),Method,* Returns whether this algorithm is available\n     *\n     * @param name the name to check\n     * @return whether this algorithm is available\n     * @since 1.11,public static boolean isAvailable(final HmacAlgorithms name) {\n    try {\n        Mac.getInstance(name.getName());\n        return true;\n    } catch (final NoSuchAlgorithmException e) {\n        return false;\n    }\n},boolean isAvailable(org.apache.commons.codec.digest.HmacAlgorithms),"digraph cfg_isAvailable {\n	""1"" [label=""$stack2 = virtualinvoke name.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String getName()>()""];\n	""2"" [label=""$stack3 = 1""];\n	""3"" [label=""$stack4 := @caughtexception""];\n	""4"" [label=""e = $stack4""];\n	""5"" [label=""name := @parameter0: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""return 0""];\n	""8"" [label=""staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($stack2)""];\n	""1"" -> ""3""[label=""cfg_except""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_except""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_except""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.isAvailable(String),Method,* Returns whether this algorithm is available\n     *\n     * @param name the name to check\n     * @return whether this algorithm is available\n     * @since 1.11,public static boolean isAvailable(final String name) {\n    try {\n        Mac.getInstance(name);\n        return true;\n    } catch (final NoSuchAlgorithmException e) {\n        return false;\n    }\n},boolean isAvailable(java.lang.String),"digraph cfg_isAvailable {\n	""1"" [label=""$stack2 = 1""];\n	""2"" [label=""$stack3 := @caughtexception""];\n	""3"" [label=""e = $stack3""];\n	""4"" [label=""name := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack2""];\n	""6"" [label=""return 0""];\n	""7"" [label=""staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(name)""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_except""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,byte[])",Method,* Resets and then updates the given {@link Mac} with the value.\n     *\n     * @param mac\n     *            the initialized {@link Mac} to update\n     * @param valueToDigest\n     *            the value to update the {@link Mac} with (maybe null or empty)\n     * @return the updated {@link Mac}\n     * @throws IllegalStateException\n     *             if the Mac was not initialized,"public static Mac updateHmac(final Mac mac, final byte[] valueToDigest) {\n    mac.reset();\n    mac.update(valueToDigest);\n    return mac;\n}","javax.crypto.Mac updateHmac(javax.crypto.Mac,byte[])","digraph cfg_updateHmac {\n	""1"" [label=""mac := @parameter0: javax.crypto.Mac""];\n	""2"" [label=""return mac""];\n	""3"" [label=""valueToDigest := @parameter1: byte[]""];\n	""4"" [label=""virtualinvoke mac.<javax.crypto.Mac: void reset()>()""];\n	""5"" [label=""virtualinvoke mac.<javax.crypto.Mac: void update(byte[])>(valueToDigest)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,InputStream)",Method,* Resets and then updates the given {@link Mac} with the value.\n     *\n     * @param mac\n     *            the initialized {@link Mac} to update\n     * @param valueToDigest\n     *            the value to update the {@link Mac} with\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return the updated {@link Mac}\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @throws IllegalStateException\n     *             If the Mac was not initialized,"public static Mac updateHmac(final Mac mac, final InputStream valueToDigest) throws IOException {\n    mac.reset();\n    final byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n    int read = valueToDigest.read(buffer, 0, STREAM_BUFFER_LENGTH);\n    while (read > -1) {\n        mac.update(buffer, 0, read);\n        read = valueToDigest.read(buffer, 0, STREAM_BUFFER_LENGTH);\n    }\n    return mac;\n}","javax.crypto.Mac updateHmac(javax.crypto.Mac,java.io.InputStream)","digraph cfg_updateHmac {\n	""1"" [label=""buffer = newarray (byte)[1024]""];\n	""2"" [label=""goto""];\n	""3"" [label=""if read <= -1""];\n	""4"" [label=""mac := @parameter0: javax.crypto.Mac""];\n	""5"" [label=""read = virtualinvoke valueToDigest.<java.io.InputStream: int read(byte[],int,int)>(buffer, 0, 1024)""];\n	""6"" [label=""read = virtualinvoke valueToDigest.<java.io.InputStream: int read(byte[],int,int)>(buffer, 0, 1024)""];\n	""7"" [label=""return mac""];\n	""8"" [label=""valueToDigest := @parameter1: java.io.InputStream""];\n	""9"" [label=""virtualinvoke mac.<javax.crypto.Mac: void reset()>()""];\n	""10"" [label=""virtualinvoke mac.<javax.crypto.Mac: void update(byte[],int,int)>(buffer, 0, read)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_goto""];\n	""3"" -> ""10""[label=""cfg_false""];\n	""3"" -> ""7""[label=""cfg_true""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,String)",Method,* Resets and then updates the given {@link Mac} with the value.\n     *\n     * @param mac\n     *            the initialized {@link Mac} to update\n     * @param valueToDigest\n     *            the value to update the {@link Mac} with (maybe null or empty)\n     * @return the updated {@link Mac}\n     * @throws IllegalStateException\n     *             if the Mac was not initialized,"public static Mac updateHmac(final Mac mac, final String valueToDigest) {\n    mac.reset();\n    mac.update(StringUtils.getBytesUtf8(valueToDigest));\n    return mac;\n}","javax.crypto.Mac updateHmac(javax.crypto.Mac,java.lang.String)","digraph cfg_updateHmac {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(valueToDigest)""];\n	""2"" [label=""mac := @parameter0: javax.crypto.Mac""];\n	""3"" [label=""return mac""];\n	""4"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""5"" [label=""virtualinvoke mac.<javax.crypto.Mac: void reset()>()""];\n	""6"" [label=""virtualinvoke mac.<javax.crypto.Mac: void update(byte[])>($stack2)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.HmacUtils.hmac(byte[]),Method,* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use\n     * @return the digest as a byte[]\n     * @since 1.11,public byte[] hmac(final byte[] valueToDigest) {\n    return mac.doFinal(valueToDigest);\n},byte[] hmac(byte[]),"digraph cfg_hmac {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<javax.crypto.Mac: byte[] doFinal(byte[])>(valueToDigest)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: byte[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmac(ByteBuffer),Method,* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use\n     * @return the digest as a byte[]\n     * @since 1.11,public byte[] hmac(final ByteBuffer valueToDigest) {\n    mac.update(valueToDigest);\n    return mac.doFinal();\n},byte[] hmac(java.nio.ByteBuffer),"digraph cfg_hmac {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<javax.crypto.Mac: byte[] doFinal()>()""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""6"" [label=""valueToDigest := @parameter0: java.nio.ByteBuffer""];\n	""7"" [label=""virtualinvoke $stack2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>(valueToDigest)""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmac(File),Method,* Returns the digest for the file.\n     *\n     * @param valueToDigest the file to use\n     * @return the digest\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @since 1.11,public byte[] hmac(final File valueToDigest) throws IOException {\n    try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(valueToDigest))) {\n        return hmac(stream);\n    }\n},byte[] hmac(java.io.File),"digraph cfg_hmac {\n	""1"" [label=""$stack5 = new java.io.FileInputStream""];\n	""2"" [label=""$stack6 = new java.io.BufferedInputStream""];\n	""3"" [label=""$stack7 := @caughtexception""];\n	""4"" [label=""$stack8 := @caughtexception""];\n	""5"" [label=""goto""];\n	""6"" [label=""l3 = $stack8""];\n	""7"" [label=""l3 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(stream)""];\n	""8"" [label=""l4 = $stack7""];\n	""9"" [label=""return l3""];\n	""10"" [label=""specialinvoke $stack5.<java.io.FileInputStream: void <init>(java.io.File)>(valueToDigest)""];\n	""11"" [label=""specialinvoke $stack6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($stack5)""];\n	""12"" [label=""stream = $stack6""];\n	""13"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""14"" [label=""throw l3""];\n	""15"" [label=""valueToDigest := @parameter0: java.io.File""];\n	""16"" [label=""virtualinvoke l3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l4)""];\n	""17"" [label=""virtualinvoke stream.<java.io.BufferedInputStream: void close()>()""];\n	""18"" [label=""virtualinvoke stream.<java.io.BufferedInputStream: void close()>()""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""9""[label=""cfg_next""];\n	""18"" -> ""3""[label=""cfg_except""];\n	""18"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""14""[label=""cfg_goto""];\n	""6"" -> ""18""[label=""cfg_next""];\n	""7"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_except""];\n	""8"" -> ""16""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmac(InputStream),Method,* Returns the digest for the stream.\n     *\n     * @param valueToDigest\n     *            the data to use\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return the digest\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @since 1.11,"public byte[] hmac(final InputStream valueToDigest) throws IOException {\n    final byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n    int read;\n    while ((read = valueToDigest.read(buffer, 0, STREAM_BUFFER_LENGTH)) > -1) {\n        mac.update(buffer, 0, read);\n    }\n    return mac.doFinal();\n}",byte[] hmac(java.io.InputStream),"digraph cfg_hmac {\n	""1"" [label=""$stack4 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""2"" [label=""$stack5 = virtualinvoke $stack4.<javax.crypto.Mac: byte[] doFinal()>()""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""4"" [label=""buffer = newarray (byte)[1024]""];\n	""5"" [label=""goto""];\n	""6"" [label=""if read <= -1""];\n	""7"" [label=""read = virtualinvoke valueToDigest.<java.io.InputStream: int read(byte[],int,int)>(buffer, 0, 1024)""];\n	""8"" [label=""return $stack5""];\n	""9"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""10"" [label=""valueToDigest := @parameter0: java.io.InputStream""];\n	""11"" [label=""virtualinvoke $stack6.<javax.crypto.Mac: void update(byte[],int,int)>(buffer, 0, read)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmac(String),Method,"* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use, treated as UTF-8\n     * @return the digest as a byte[]\n     * @since 1.11",public byte[] hmac(final String valueToDigest) {\n    return mac.doFinal(StringUtils.getBytesUtf8(valueToDigest));\n},byte[] hmac(java.lang.String),"digraph cfg_hmac {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(valueToDigest)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack2.<javax.crypto.Mac: byte[] doFinal(byte[])>($stack3)""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""6"" [label=""valueToDigest := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmacHex(byte[]),Method,* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use\n     * @return the digest as a hexadecimal String\n     * @since 1.11,public String hmacHex(final byte[] valueToDigest) {\n    return Hex.encodeHexString(hmac(valueToDigest));\n},java.lang.String hmacHex(byte[]),"digraph cfg_hmacHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(byte[])>(valueToDigest)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: byte[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmacHex(ByteBuffer),Method,* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use\n     * @return the digest as a hexadecimal String\n     * @since 1.11,public String hmacHex(final ByteBuffer valueToDigest) {\n    return Hex.encodeHexString(hmac(valueToDigest));\n},java.lang.String hmacHex(java.nio.ByteBuffer),"digraph cfg_hmacHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.nio.ByteBuffer)>(valueToDigest)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: java.nio.ByteBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmacHex(File),Method,* Returns the digest for the file.\n     *\n     * @param valueToDigest the file to use\n     * @return the digest as a hexadecimal String\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @since 1.11,public String hmacHex(final File valueToDigest) throws IOException {\n    return Hex.encodeHexString(hmac(valueToDigest));\n},java.lang.String hmacHex(java.io.File),"digraph cfg_hmacHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.File)>(valueToDigest)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: java.io.File""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmacHex(InputStream),Method,* Returns the digest for the stream.\n     *\n     * @param valueToDigest\n     *            the data to use\n     *            <p>\n     *            The InputStream must not be null and will not be closed\n     *            </p>\n     * @return the digest as a hexadecimal String\n     * @throws IOException\n     *             If an I/O error occurs.\n     * @since 1.11,public String hmacHex(final InputStream valueToDigest) throws IOException {\n    return Hex.encodeHexString(hmac(valueToDigest));\n},java.lang.String hmacHex(java.io.InputStream),"digraph cfg_hmacHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>(valueToDigest)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: java.io.InputStream""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.hmacHex(String),Method,"* Returns the digest for the input data.\n     *\n     * @param valueToDigest the input to use, treated as UTF-8\n     * @return the digest as a hexadecimal String\n     * @since 1.11",public String hmacHex(final String valueToDigest) {\n    return Hex.encodeHexString(hmac(valueToDigest));\n},java.lang.String hmacHex(java.lang.String),"digraph cfg_hmacHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.lang.String)>(valueToDigest)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""valueToDigest := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.<init>(),Constructor,* Preserves binary compatibility only.\n     * As for previous versions does not provide useful behavior\n     * @deprecated since 1.11; only useful to preserve binary compatibility,@Deprecated\npublic HmacUtils() {\n    this(null);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.digest.HmacUtils: void <init>(javax.crypto.Mac)>(null)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,byte[])",Constructor,* Creates an instance using the provided algorithm type.\n     *\n     * @param algorithm to use.\n     * @param key the key to use\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @since 1.11,"public HmacUtils(final HmacAlgorithms algorithm, final byte[] key) {\n    this(algorithm.getName(), key);\n}","void <init>(org.apache.commons.codec.digest.HmacAlgorithms,byte[])","digraph cfg_init {\n	""1"" [label=""$stack3 = virtualinvoke algorithm.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String getName()>()""];\n	""2"" [label=""algorithm := @parameter0: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""3"" [label=""key := @parameter1: byte[]""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.digest.HmacUtils: void <init>(java.lang.String,byte[])>($stack3, key)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,String)",Constructor,* Creates an instance using the provided algorithm type.\n     *\n     * @param algorithm to use\n     * @param  key the key to use\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @since 1.11,"public HmacUtils(final HmacAlgorithms algorithm, final String key) {\n    this(algorithm.getName(), StringUtils.getBytesUtf8(key));\n}","void <init>(org.apache.commons.codec.digest.HmacAlgorithms,java.lang.String)","digraph cfg_init {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(key)""];\n	""2"" [label=""$stack4 = virtualinvoke algorithm.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String getName()>()""];\n	""3"" [label=""algorithm := @parameter0: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""4"" [label=""key := @parameter1: java.lang.String""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.digest.HmacUtils: void <init>(java.lang.String,byte[])>($stack4, $stack3)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacUtils.<init>(Mac),Constructor,No Comment,private HmacUtils(final Mac mac) {\n    this.mac = mac;\n},void <init>(javax.crypto.Mac),"digraph cfg_init {\n	""1"" [label=""mac := @parameter0: javax.crypto.Mac""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""5"" [label=""this.<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac mac> = mac""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.HmacUtils.<init>(String,byte[])",Constructor,* Creates an instance using the provided algorithm type.\n     *\n     * @param algorithm to use\n     * @param  key the key to use\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @since 1.11,"public HmacUtils(final String algorithm, final byte[] key) {\n    this(getInitializedMac(algorithm, key));\n}","void <init>(java.lang.String,byte[])","digraph cfg_init {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac getInitializedMac(java.lang.String,byte[])>(algorithm, key)""];\n	""2"" [label=""algorithm := @parameter0: java.lang.String""];\n	""3"" [label=""key := @parameter1: byte[]""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.digest.HmacUtils: void <init>(javax.crypto.Mac)>($stack3)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.HmacUtils.<init>(String,String)",Constructor,* Creates an instance using the provided algorithm type.\n     *\n     * @param algorithm to use\n     * @param  key the key to use\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n     * @since 1.11,"public HmacUtils(final String algorithm, final String key) {\n    this(algorithm, StringUtils.getBytesUtf8(key));\n}","void <init>(java.lang.String,java.lang.String)","digraph cfg_init {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(key)""];\n	""2"" [label=""algorithm := @parameter0: java.lang.String""];\n	""3"" [label=""key := @parameter1: java.lang.String""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.digest.HmacUtils: void <init>(java.lang.String,byte[])>(algorithm, $stack3)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.HmacUtils""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)",Method,No Comment,"private static int[] body(final int[] schedule, final int eSwap0, final int eSwap1) {\n    int left = 0;\n    int right = 0;\n    int t = 0;\n    for (int j = 0; j < 25; j++) {\n        for (int i = 0; i < 32; i += 4) {\n            left = dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n            right = dEncrypt(right, left, i + 2, eSwap0, eSwap1, schedule);\n        }\n        t = left;\n        left = right;\n        right = t;\n    }\n    t = right;\n    right = left >>> 1 | left << 31;\n    left = t >>> 1 | t << 31;\n    final int[] results = new int[2];\n    permOp(right, left, 1, 0x55555555, results);\n    right = results[0];\n    left = results[1];\n    permOp(left, right, 8, 0xff00ff, results);\n    left = results[0];\n    right = results[1];\n    permOp(right, left, 2, 0x33333333, results);\n    right = results[0];\n    left = results[1];\n    permOp(left, right, 16, 65535, results);\n    left = results[0];\n    right = results[1];\n    permOp(right, left, 4, 0xf0f0f0f, results);\n    right = results[0];\n    left = results[1];\n    final int[] out = new int[2];\n    out[0] = left;\n    out[1] = right;\n    return out;\n}","int[] body(int[],int,int)","digraph cfg_body {\n	""1"" [label=""$stack10 = t >>> 1""];\n	""2"" [label=""$stack11 = t << 31""];\n	""3"" [label=""$stack12 = i + 2""];\n	""4"" [label=""$stack8 = left >>> 1""];\n	""5"" [label=""$stack9 = left << 31""];\n	""6"" [label=""eSwap0 := @parameter1: int""];\n	""7"" [label=""eSwap1 := @parameter2: int""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""i = 0""];\n	""11"" [label=""i = i + 4""];\n	""12"" [label=""i = newarray (int)[2]""];\n	""13"" [label=""i[0] = left""];\n	""14"" [label=""i[1] = right""];\n	""15"" [label=""if i >= 32""];\n	""16"" [label=""if j >= 25""];\n	""17"" [label=""j = 0""];\n	""18"" [label=""j = j + 1""];\n	""19"" [label=""j = newarray (int)[2]""];\n	""20"" [label=""left = $stack10 | $stack11""];\n	""21"" [label=""left = 0""];\n	""22"" [label=""left = j[0]""];\n	""23"" [label=""left = j[0]""];\n	""24"" [label=""left = j[1]""];\n	""25"" [label=""left = j[1]""];\n	""26"" [label=""left = j[1]""];\n	""27"" [label=""left = right""];\n	""28"" [label=""left = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int dEncrypt(int,int,int,int,int,int[])>(left, right, i, eSwap0, eSwap1, schedule)""];\n	""29"" [label=""return i""];\n	""30"" [label=""right = $stack8 | $stack9""];\n	""31"" [label=""right = 0""];\n	""32"" [label=""right = j[0]""];\n	""33"" [label=""right = j[0]""];\n	""34"" [label=""right = j[0]""];\n	""35"" [label=""right = j[1]""];\n	""36"" [label=""right = j[1]""];\n	""37"" [label=""right = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int dEncrypt(int,int,int,int,int,int[])>(right, left, $stack12, eSwap0, eSwap1, schedule)""];\n	""38"" [label=""right = t""];\n	""39"" [label=""schedule := @parameter0: int[]""];\n	""40"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(left, right, 16, 65535, j)""];\n	""41"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(left, right, 8, 16711935, j)""];\n	""42"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(right, left, 1, 1431655765, j)""];\n	""43"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(right, left, 2, 858993459, j)""];\n	""44"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(right, left, 4, 252645135, j)""];\n	""45"" [label=""t = 0""];\n	""46"" [label=""t = left""];\n	""47"" [label=""t = right""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""29""[label=""cfg_next""];\n	""15"" -> ""28""[label=""cfg_false""];\n	""15"" -> ""46""[label=""cfg_true""];\n	""16"" -> ""10""[label=""cfg_false""];\n	""16"" -> ""47""[label=""cfg_true""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""9""[label=""cfg_next""];\n	""19"" -> ""42""[label=""cfg_next""];\n	""2"" -> ""20""[label=""cfg_next""];\n	""20"" -> ""19""[label=""cfg_next""];\n	""21"" -> ""31""[label=""cfg_next""];\n	""22"" -> ""35""[label=""cfg_next""];\n	""23"" -> ""36""[label=""cfg_next""];\n	""24"" -> ""41""[label=""cfg_next""];\n	""25"" -> ""40""[label=""cfg_next""];\n	""26"" -> ""12""[label=""cfg_next""];\n	""27"" -> ""38""[label=""cfg_next""];\n	""28"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""37""[label=""cfg_next""];\n	""30"" -> ""1""[label=""cfg_next""];\n	""31"" -> ""45""[label=""cfg_next""];\n	""32"" -> ""24""[label=""cfg_next""];\n	""33"" -> ""25""[label=""cfg_next""];\n	""34"" -> ""26""[label=""cfg_next""];\n	""35"" -> ""43""[label=""cfg_next""];\n	""36"" -> ""44""[label=""cfg_next""];\n	""37"" -> ""11""[label=""cfg_next""];\n	""38"" -> ""18""[label=""cfg_next""];\n	""39"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""23""[label=""cfg_next""];\n	""41"" -> ""22""[label=""cfg_next""];\n	""42"" -> ""32""[label=""cfg_next""];\n	""43"" -> ""33""[label=""cfg_next""];\n	""44"" -> ""34""[label=""cfg_next""];\n	""45"" -> ""17""[label=""cfg_next""];\n	""46"" -> ""27""[label=""cfg_next""];\n	""47"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""30""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""15""[label=""cfg_goto""];\n	""9"" -> ""16""[label=""cfg_goto""];\n}\n","private , static "
org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte),Method,No Comment,private static int byteToUnsigned(final byte b) {\n    return b & 0xff;\n},int byteToUnsigned(byte),"digraph cfg_byteToUnsigned {\n	""1"" [label=""$stack1 = b & 255""];\n	""2"" [label=""b := @parameter0: byte""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.UnixCrypt.crypt(byte[]),Method,* Generates a crypt(3) compatible hash using the DES algorithm.\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @param original\n     *            plaintext password\n     * @return a 13 character string starting with the salt string,"public static String crypt(final byte[] original) {\n    return crypt(original, null);\n}",java.lang.String crypt(byte[]),"digraph cfg_crypt {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>(original, null)""];\n	""2"" [label=""original := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],String)",Method,"* Generates a crypt(3) compatible hash using the DES algorithm.\n     * <p>\n     * Using unspecified characters as salt results incompatible hash values.\n     * </p>\n     *\n     * @param original\n     *            plaintext password\n     * @param salt\n     *            a two character string drawn from [a-zA-Z0-9./]. The salt may be null, in which case a salt is\n     *            generated for you using {@link B64#getRandomSalt(int)}.\n     * @return a 13 character string starting with the salt string\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern","public static String crypt(final byte[] original, String salt) {\n    if (salt == null) {\n        salt = B64.getRandomSalt(2);\n    } else if (!CRYPT_SALT_PATTERN.matcher(salt).matches()) {\n        throw new IllegalArgumentException(""Invalid salt value: "" + salt);\n    }\n    final StringBuilder buffer = new StringBuilder(""             "");\n    final char charZero = salt.charAt(0);\n    final char charOne = salt.charAt(1);\n    buffer.setCharAt(0, charZero);\n    buffer.setCharAt(1, charOne);\n    final int eSwap0 = CON_SALT[charZero];\n    final int eSwap1 = CON_SALT[charOne] << 4;\n    final byte[] key = new byte[8];\n    Arrays.fill(key, (byte) 0);\n    final int originalLength = original.length;\n    for (int i = 0; i < key.length && i < originalLength; i++) {\n        final int iChar = original[i];\n        key[i] = (byte) (iChar << 1);\n    }\n    final int[] schedule = desSetKey(key);\n    final int[] out = body(schedule, eSwap0, eSwap1);\n    final byte[] b = new byte[9];\n    intToFourBytes(out[0], b, 0);\n    intToFourBytes(out[1], b, 4);\n    b[8] = 0;\n    int i = 2;\n    int y = 0;\n    int u = 128;\n    for (; i < 13; i++) {\n        int j = 0;\n        int c = 0;\n        for (; j < 6; j++) {\n            c <<= 1;\n            if ((b[y] & u) != 0) {\n                c |= 0x1;\n            }\n            u >>>= 1;\n            if (u == 0) {\n                y++;\n                u = 128;\n            }\n            buffer.setCharAt(i, (char) COV2CHAR[c]);\n        }\n    }\n    return buffer.toString();\n}","java.lang.String crypt(byte[],java.lang.String)","digraph cfg_crypt {\n	""1"" [label=""$stack17 = <org.apache.commons.codec.digest.UnixCrypt: java.util.regex.Pattern CRYPT_SALT_PATTERN>""];\n	""2"" [label=""$stack18 = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(salt)""];\n	""3"" [label=""$stack19 = virtualinvoke $stack18.<java.util.regex.Matcher: boolean matches()>()""];\n	""4"" [label=""$stack20 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack21 = <org.apache.commons.codec.digest.UnixCrypt: int[] CON_SALT>""];\n	""6"" [label=""$stack22 = <org.apache.commons.codec.digest.UnixCrypt: int[] CON_SALT>""];\n	""7"" [label=""$stack23 = $stack22[charOne]""];\n	""8"" [label=""$stack24 = lengthof key""];\n	""9"" [label=""$stack25 = iChar[0]""];\n	""10"" [label=""$stack26 = iChar[1]""];\n	""11"" [label=""$stack27 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""$stack28 = b[y]""];\n	""13"" [label=""$stack29 = $stack28 & u""];\n	""14"" [label=""$stack30 = <org.apache.commons.codec.digest.UnixCrypt: int[] COV2CHAR>""];\n	""15"" [label=""$stack31 = $stack30[c]""];\n	""16"" [label=""$stack32 = (char) $stack31""];\n	""17"" [label=""$stack33 = iChar << 1""];\n	""18"" [label=""$stack34 = (byte) $stack33""];\n	""19"" [label=""$stack35 = new java.lang.StringBuilder""];\n	""20"" [label=""$stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid salt value: \"")""];\n	""21"" [label=""$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(salt)""];\n	""22"" [label=""$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""23"" [label=""$stack39 = new java.lang.IllegalArgumentException""];\n	""24"" [label=""b = newarray (byte)[9]""];\n	""25"" [label=""b[8] = 0""];\n	""26"" [label=""buffer = $stack20""];\n	""27"" [label=""c = 0""];\n	""28"" [label=""c = c << 1""];\n	""29"" [label=""c = c | 1""];\n	""30"" [label=""charOne = virtualinvoke salt.<java.lang.String: char charAt(int)>(1)""];\n	""31"" [label=""charZero = virtualinvoke salt.<java.lang.String: char charAt(int)>(0)""];\n	""32"" [label=""eSwap0 = $stack21[charZero]""];\n	""33"" [label=""eSwap1 = $stack23 << 4""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""i = 0""];\n	""39"" [label=""i = i + 1""];\n	""40"" [label=""i = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int[] desSetKey(byte[])>(key)""];\n	""41"" [label=""iChar = original[i]""];\n	""42"" [label=""iChar = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int[] body(int[],int,int)>(i, eSwap0, eSwap1)""];\n	""43"" [label=""i_1 = 2""];\n	""44"" [label=""i_1 = i_1 + 1""];\n	""45"" [label=""if $stack19 != 0""];\n	""46"" [label=""if $stack29 == 0""];\n	""47"" [label=""if i >= $stack24""];\n	""48"" [label=""if i >= originalLength""];\n	""49"" [label=""if i_1 >= 13""];\n	""50"" [label=""if j >= 6""];\n	""51"" [label=""if salt != null""];\n	""52"" [label=""if u != 0""];\n	""53"" [label=""j = 0""];\n	""54"" [label=""j = j + 1""];\n	""55"" [label=""key = newarray (byte)[8]""];\n	""56"" [label=""key[i] = $stack34""];\n	""57"" [label=""original := @parameter0: byte[]""];\n	""58"" [label=""originalLength = lengthof original""];\n	""59"" [label=""return $stack27""];\n	""60"" [label=""salt := @parameter1: java.lang.String""];\n	""61"" [label=""salt = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(2)""];\n	""62"" [label=""specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>(\""             \"")""];\n	""63"" [label=""specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>()""];\n	""64"" [label=""specialinvoke $stack39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack38)""];\n	""65"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(key, 0)""];\n	""66"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void intToFourBytes(int,byte[],int)>($stack25, b, 0)""];\n	""67"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void intToFourBytes(int,byte[],int)>($stack26, b, 4)""];\n	""68"" [label=""throw $stack39""];\n	""69"" [label=""u = 128""];\n	""70"" [label=""u = 128""];\n	""71"" [label=""u = u >>> 1""];\n	""72"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(0, charZero)""];\n	""73"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(1, charOne)""];\n	""74"" [label=""virtualinvoke buffer.<java.lang.StringBuilder: void setCharAt(int,char)>(i_1, $stack32)""];\n	""75"" [label=""y = 0""];\n	""76"" [label=""y = y + 1""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""67""[label=""cfg_next""];\n	""11"" -> ""59""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""46""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""74""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""56""[label=""cfg_next""];\n	""19"" -> ""63""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""64""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""24"" -> ""9""[label=""cfg_next""];\n	""25"" -> ""43""[label=""cfg_next""];\n	""26"" -> ""31""[label=""cfg_next""];\n	""27"" -> ""50""[label=""cfg_next""];\n	""28"" -> ""12""[label=""cfg_next""];\n	""29"" -> ""71""[label=""cfg_next""];\n	""3"" -> ""45""[label=""cfg_next""];\n	""30"" -> ""72""[label=""cfg_next""];\n	""31"" -> ""30""[label=""cfg_next""];\n	""32"" -> ""6""[label=""cfg_next""];\n	""33"" -> ""55""[label=""cfg_next""];\n	""34"" -> ""4""[label=""cfg_goto""];\n	""35"" -> ""8""[label=""cfg_goto""];\n	""36"" -> ""50""[label=""cfg_goto""];\n	""37"" -> ""49""[label=""cfg_goto""];\n	""38"" -> ""8""[label=""cfg_next""];\n	""39"" -> ""35""[label=""cfg_next""];\n	""4"" -> ""62""[label=""cfg_next""];\n	""40"" -> ""42""[label=""cfg_next""];\n	""41"" -> ""17""[label=""cfg_next""];\n	""42"" -> ""24""[label=""cfg_next""];\n	""43"" -> ""75""[label=""cfg_next""];\n	""44"" -> ""37""[label=""cfg_next""];\n	""45"" -> ""23""[label=""cfg_false""];\n	""45"" -> ""4""[label=""cfg_true""];\n	""46"" -> ""29""[label=""cfg_false""];\n	""46"" -> ""71""[label=""cfg_true""];\n	""47"" -> ""40""[label=""cfg_true""];\n	""47"" -> ""48""[label=""cfg_false""];\n	""48"" -> ""40""[label=""cfg_true""];\n	""48"" -> ""41""[label=""cfg_false""];\n	""49"" -> ""11""[label=""cfg_true""];\n	""49"" -> ""53""[label=""cfg_false""];\n	""5"" -> ""32""[label=""cfg_next""];\n	""50"" -> ""28""[label=""cfg_false""];\n	""50"" -> ""44""[label=""cfg_true""];\n	""51"" -> ""1""[label=""cfg_true""];\n	""51"" -> ""61""[label=""cfg_false""];\n	""52"" -> ""14""[label=""cfg_true""];\n	""52"" -> ""76""[label=""cfg_false""];\n	""53"" -> ""27""[label=""cfg_next""];\n	""54"" -> ""36""[label=""cfg_next""];\n	""55"" -> ""65""[label=""cfg_next""];\n	""56"" -> ""39""[label=""cfg_next""];\n	""57"" -> ""60""[label=""cfg_next""];\n	""58"" -> ""38""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""51""[label=""cfg_next""];\n	""61"" -> ""34""[label=""cfg_next""];\n	""62"" -> ""26""[label=""cfg_next""];\n	""63"" -> ""20""[label=""cfg_next""];\n	""64"" -> ""68""[label=""cfg_next""];\n	""65"" -> ""58""[label=""cfg_next""];\n	""66"" -> ""10""[label=""cfg_next""];\n	""67"" -> ""25""[label=""cfg_next""];\n	""69"" -> ""49""[label=""cfg_next""];\n	""7"" -> ""33""[label=""cfg_next""];\n	""70"" -> ""14""[label=""cfg_next""];\n	""71"" -> ""52""[label=""cfg_next""];\n	""72"" -> ""73""[label=""cfg_next""];\n	""73"" -> ""5""[label=""cfg_next""];\n	""74"" -> ""54""[label=""cfg_next""];\n	""75"" -> ""69""[label=""cfg_next""];\n	""76"" -> ""70""[label=""cfg_next""];\n	""8"" -> ""47""[label=""cfg_next""];\n	""9"" -> ""66""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.UnixCrypt.crypt(String),Method,* Generates a crypt(3) compatible hash using the DES algorithm.\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @param original\n     *            plaintext password\n     * @return a 13 character string starting with the salt string,public static String crypt(final String original) {\n    return crypt(original.getBytes(StandardCharsets.UTF_8));\n},java.lang.String crypt(java.lang.String),"digraph cfg_crypt {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack2 = virtualinvoke original.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack1)""];\n	""3"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[])>($stack2)""];\n	""4"" [label=""original := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.UnixCrypt.crypt(String,String)",Method,"* Generates a crypt(3) compatible hash using the DES algorithm.\n     *\n     * @param original\n     *            plaintext password\n     * @param salt\n     *            a two character string drawn from [a-zA-Z0-9./]. The salt may be null, in which case a salt is\n     *            generated for you using {@link SecureRandom}.\n     * @return a 13 character string starting with the salt string\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern","public static String crypt(final String original, final String salt) {\n    return crypt(original.getBytes(StandardCharsets.UTF_8), salt);\n}","java.lang.String crypt(java.lang.String,java.lang.String)","digraph cfg_crypt {\n	""1"" [label=""$stack2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack3 = virtualinvoke original.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack2)""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>($stack3, salt)""];\n	""4"" [label=""original := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""salt := @parameter1: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[])",Method,No Comment,"private static int dEncrypt(int el, final int r, final int s, final int e0, final int e1, final int[] sArr) {\n    int v = r ^ r >>> 16;\n    int u = v & e0;\n    v &= e1;\n    u = u ^ u << 16 ^ r ^ sArr[s];\n    int t = v ^ v << 16 ^ r ^ sArr[s + 1];\n    t = t >>> 4 | t << 28;\n    el ^= SPTRANS[1][t & 0x3f] | SPTRANS[3][t >>> 8 & 0x3f] | SPTRANS[5][t >>> 16 & 0x3f] | SPTRANS[7][t >>> 24 & 0x3f] | SPTRANS[0][u & 0x3f] | SPTRANS[2][u >>> 8 & 0x3f] | SPTRANS[4][u >>> 16 & 0x3f] | SPTRANS[6][u >>> 24 & 0x3f];\n    return el;\n}","int dEncrypt(int,int,int,int,int,int[])","digraph cfg_dEncrypt {\n	""1"" [label=""$stack10 = u << 16""];\n	""2"" [label=""$stack11 = u ^ $stack10""];\n	""3"" [label=""$stack12 = $stack11 ^ r""];\n	""4"" [label=""$stack13 = sArr[s]""];\n	""5"" [label=""$stack14 = v << 16""];\n	""6"" [label=""$stack15 = v ^ $stack14""];\n	""7"" [label=""$stack16 = s + 1""];\n	""8"" [label=""$stack17 = $stack15 ^ r""];\n	""9"" [label=""$stack18 = sArr[$stack16]""];\n	""10"" [label=""$stack19 = t >>> 4""];\n	""11"" [label=""$stack20 = t << 28""];\n	""12"" [label=""$stack21 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""13"" [label=""$stack22 = $stack21[1]""];\n	""14"" [label=""$stack23 = t & 63""];\n	""15"" [label=""$stack24 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""16"" [label=""$stack25 = t >>> 8""];\n	""17"" [label=""$stack26 = $stack24[3]""];\n	""18"" [label=""$stack27 = $stack25 & 63""];\n	""19"" [label=""$stack28 = $stack22[$stack23]""];\n	""20"" [label=""$stack29 = $stack26[$stack27]""];\n	""21"" [label=""$stack30 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""22"" [label=""$stack31 = t >>> 16""];\n	""23"" [label=""$stack32 = $stack30[5]""];\n	""24"" [label=""$stack33 = $stack31 & 63""];\n	""25"" [label=""$stack34 = $stack28 | $stack29""];\n	""26"" [label=""$stack35 = $stack32[$stack33]""];\n	""27"" [label=""$stack36 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""28"" [label=""$stack37 = t >>> 24""];\n	""29"" [label=""$stack38 = $stack36[7]""];\n	""30"" [label=""$stack39 = $stack37 & 63""];\n	""31"" [label=""$stack40 = $stack34 | $stack35""];\n	""32"" [label=""$stack41 = $stack38[$stack39]""];\n	""33"" [label=""$stack42 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""34"" [label=""$stack43 = $stack42[0]""];\n	""35"" [label=""$stack44 = u & 63""];\n	""36"" [label=""$stack45 = $stack40 | $stack41""];\n	""37"" [label=""$stack46 = $stack43[$stack44]""];\n	""38"" [label=""$stack47 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""39"" [label=""$stack48 = u >>> 8""];\n	""40"" [label=""$stack49 = $stack47[2]""];\n	""41"" [label=""$stack50 = $stack48 & 63""];\n	""42"" [label=""$stack51 = $stack45 | $stack46""];\n	""43"" [label=""$stack52 = $stack49[$stack50]""];\n	""44"" [label=""$stack53 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""45"" [label=""$stack54 = u >>> 16""];\n	""46"" [label=""$stack55 = $stack53[4]""];\n	""47"" [label=""$stack56 = $stack54 & 63""];\n	""48"" [label=""$stack57 = $stack51 | $stack52""];\n	""49"" [label=""$stack58 = $stack55[$stack56]""];\n	""50"" [label=""$stack59 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SPTRANS>""];\n	""51"" [label=""$stack60 = u >>> 24""];\n	""52"" [label=""$stack61 = $stack59[6]""];\n	""53"" [label=""$stack62 = $stack60 & 63""];\n	""54"" [label=""$stack63 = $stack57 | $stack58""];\n	""55"" [label=""$stack64 = $stack61[$stack62]""];\n	""56"" [label=""$stack65 = $stack63 | $stack64""];\n	""57"" [label=""$stack9 = r >>> 16""];\n	""58"" [label=""e0 := @parameter3: int""];\n	""59"" [label=""e1 := @parameter4: int""];\n	""60"" [label=""el := @parameter0: int""];\n	""61"" [label=""el = el ^ $stack65""];\n	""62"" [label=""r := @parameter1: int""];\n	""63"" [label=""return el""];\n	""64"" [label=""s := @parameter2: int""];\n	""65"" [label=""sArr := @parameter5: int[]""];\n	""66"" [label=""t = $stack17 ^ $stack18""];\n	""67"" [label=""t = $stack19 | $stack20""];\n	""68"" [label=""u = $stack12 ^ $stack13""];\n	""69"" [label=""u = v & e0""];\n	""70"" [label=""v = r ^ $stack9""];\n	""71"" [label=""v = v & e1""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""67""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""19""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""18""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""25""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""21""[label=""cfg_next""];\n	""26"" -> ""31""[label=""cfg_next""];\n	""27"" -> ""29""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""27""[label=""cfg_next""];\n	""32"" -> ""36""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""37""[label=""cfg_next""];\n	""36"" -> ""33""[label=""cfg_next""];\n	""37"" -> ""42""[label=""cfg_next""];\n	""38"" -> ""40""[label=""cfg_next""];\n	""39"" -> ""41""[label=""cfg_next""];\n	""4"" -> ""68""[label=""cfg_next""];\n	""40"" -> ""39""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""38""[label=""cfg_next""];\n	""43"" -> ""48""[label=""cfg_next""];\n	""44"" -> ""46""[label=""cfg_next""];\n	""45"" -> ""47""[label=""cfg_next""];\n	""46"" -> ""45""[label=""cfg_next""];\n	""47"" -> ""49""[label=""cfg_next""];\n	""48"" -> ""44""[label=""cfg_next""];\n	""49"" -> ""54""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""52""[label=""cfg_next""];\n	""51"" -> ""53""[label=""cfg_next""];\n	""52"" -> ""51""[label=""cfg_next""];\n	""53"" -> ""55""[label=""cfg_next""];\n	""54"" -> ""50""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""61""[label=""cfg_next""];\n	""57"" -> ""70""[label=""cfg_next""];\n	""58"" -> ""59""[label=""cfg_next""];\n	""59"" -> ""65""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""60"" -> ""62""[label=""cfg_next""];\n	""61"" -> ""63""[label=""cfg_next""];\n	""62"" -> ""64""[label=""cfg_next""];\n	""64"" -> ""58""[label=""cfg_next""];\n	""65"" -> ""57""[label=""cfg_next""];\n	""66"" -> ""10""[label=""cfg_next""];\n	""67"" -> ""12""[label=""cfg_next""];\n	""68"" -> ""5""[label=""cfg_next""];\n	""69"" -> ""71""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""70"" -> ""69""[label=""cfg_next""];\n	""71"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""66""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[]),Method,No Comment,"private static int[] desSetKey(final byte[] key) {\n    final int[] schedule = new int[32];\n    int c = fourBytesToInt(key, 0);\n    int d = fourBytesToInt(key, 4);\n    final int[] results = new int[2];\n    permOp(d, c, 4, 0xf0f0f0f, results);\n    d = results[0];\n    c = results[1];\n    c = hPermOp(c, -2, 0xcccc0000);\n    d = hPermOp(d, -2, 0xcccc0000);\n    permOp(d, c, 1, 0x55555555, results);\n    d = results[0];\n    c = results[1];\n    permOp(c, d, 8, 0xff00ff, results);\n    c = results[0];\n    d = results[1];\n    permOp(d, c, 1, 0x55555555, results);\n    d = results[0];\n    c = results[1];\n    d = (d & 0xff) << 16 | d & 0xff00 | (d & 0xff0000) >>> 16 | (c & 0xf0000000) >>> 4;\n    c &= 0xfffffff;\n    int j = 0;\n    for (int i = 0; i < 16; i++) {\n        if (SHIFT2[i]) {\n            c = c >>> 2 | c << 26;\n            d = d >>> 2 | d << 26;\n        } else {\n            c = c >>> 1 | c << 27;\n            d = d >>> 1 | d << 27;\n        }\n        c &= 0xfffffff;\n        d &= 0xfffffff;\n        int s = SKB[0][c & 0x3f] | SKB[1][c >>> 6 & 0x3 | c >>> 7 & 0x3c] | SKB[2][c >>> 13 & 0xf | c >>> 14 & 0x30] | SKB[3][c >>> 20 & 0x1 | c >>> 21 & 0x6 | c >>> 22 & 0x38];\n        final int t = SKB[4][d & 0x3f] | SKB[5][d >>> 7 & 0x3 | d >>> 8 & 0x3c] | SKB[6][d >>> 15 & 0x3f] | SKB[7][d >>> 21 & 0xf | d >>> 22 & 0x30];\n        schedule[j++] = t << 16 | s & 0xffff;\n        s = s >>> 16 | t & 0xffff0000;\n        s = s << 4 | s >>> 28;\n        schedule[j++] = s;\n    }\n    return schedule;\n}",int[] desSetKey(byte[]),"digraph cfg_desSetKey {\n	""1"" [label=""$stack10 = $stack9 << 16""];\n	""2"" [label=""$stack11 = d & 65280""];\n	""3"" [label=""$stack12 = d & 16711680""];\n	""4"" [label=""$stack13 = $stack10 | $stack11""];\n	""5"" [label=""$stack14 = $stack12 >>> 16""];\n	""6"" [label=""$stack15 = c & -268435456""];\n	""7"" [label=""$stack16 = $stack13 | $stack14""];\n	""8"" [label=""$stack17 = $stack15 >>> 4""];\n	""9"" [label=""$stack18 = <org.apache.commons.codec.digest.UnixCrypt: boolean[] SHIFT2>""];\n	""10"" [label=""$stack19 = $stack18[i]""];\n	""11"" [label=""$stack20 = c >>> 1""];\n	""12"" [label=""$stack21 = c << 27""];\n	""13"" [label=""$stack22 = d >>> 1""];\n	""14"" [label=""$stack23 = d << 27""];\n	""15"" [label=""$stack24 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""16"" [label=""$stack25 = $stack24[0]""];\n	""17"" [label=""$stack26 = c & 63""];\n	""18"" [label=""$stack27 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""19"" [label=""$stack28 = c >>> 6""];\n	""20"" [label=""$stack29 = c >>> 7""];\n	""21"" [label=""$stack30 = $stack28 & 3""];\n	""22"" [label=""$stack31 = $stack29 & 60""];\n	""23"" [label=""$stack32 = $stack27[1]""];\n	""24"" [label=""$stack33 = $stack30 | $stack31""];\n	""25"" [label=""$stack34 = $stack25[$stack26]""];\n	""26"" [label=""$stack35 = $stack32[$stack33]""];\n	""27"" [label=""$stack36 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""28"" [label=""$stack37 = c >>> 13""];\n	""29"" [label=""$stack38 = c >>> 14""];\n	""30"" [label=""$stack39 = $stack37 & 15""];\n	""31"" [label=""$stack40 = $stack38 & 48""];\n	""32"" [label=""$stack41 = $stack36[2]""];\n	""33"" [label=""$stack42 = $stack39 | $stack40""];\n	""34"" [label=""$stack43 = $stack34 | $stack35""];\n	""35"" [label=""$stack44 = $stack41[$stack42]""];\n	""36"" [label=""$stack45 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""37"" [label=""$stack46 = c >>> 20""];\n	""38"" [label=""$stack47 = c >>> 21""];\n	""39"" [label=""$stack48 = $stack46 & 1""];\n	""40"" [label=""$stack49 = $stack47 & 6""];\n	""41"" [label=""$stack50 = c >>> 22""];\n	""42"" [label=""$stack51 = $stack48 | $stack49""];\n	""43"" [label=""$stack52 = $stack50 & 56""];\n	""44"" [label=""$stack53 = $stack45[3]""];\n	""45"" [label=""$stack54 = $stack51 | $stack52""];\n	""46"" [label=""$stack55 = $stack43 | $stack44""];\n	""47"" [label=""$stack56 = $stack53[$stack54]""];\n	""48"" [label=""$stack57 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""49"" [label=""$stack58 = $stack57[4]""];\n	""50"" [label=""$stack59 = d & 63""];\n	""51"" [label=""$stack60 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""52"" [label=""$stack61 = d >>> 7""];\n	""53"" [label=""$stack62 = d >>> 8""];\n	""54"" [label=""$stack63 = $stack61 & 3""];\n	""55"" [label=""$stack64 = $stack62 & 60""];\n	""56"" [label=""$stack65 = $stack60[5]""];\n	""57"" [label=""$stack66 = $stack63 | $stack64""];\n	""58"" [label=""$stack67 = $stack58[$stack59]""];\n	""59"" [label=""$stack68 = $stack65[$stack66]""];\n	""60"" [label=""$stack69 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""61"" [label=""$stack70 = d >>> 15""];\n	""62"" [label=""$stack71 = $stack69[6]""];\n	""63"" [label=""$stack72 = $stack70 & 63""];\n	""64"" [label=""$stack73 = $stack67 | $stack68""];\n	""65"" [label=""$stack74 = $stack71[$stack72]""];\n	""66"" [label=""$stack75 = <org.apache.commons.codec.digest.UnixCrypt: int[][] SKB>""];\n	""67"" [label=""$stack76 = d >>> 21""];\n	""68"" [label=""$stack77 = d >>> 22""];\n	""69"" [label=""$stack78 = $stack76 & 15""];\n	""70"" [label=""$stack79 = $stack77 & 48""];\n	""71"" [label=""$stack80 = $stack75[7]""];\n	""72"" [label=""$stack81 = $stack78 | $stack79""];\n	""73"" [label=""$stack82 = $stack73 | $stack74""];\n	""74"" [label=""$stack83 = $stack80[$stack81]""];\n	""75"" [label=""$stack84 = j""];\n	""76"" [label=""$stack85 = t << 16""];\n	""77"" [label=""$stack86 = s & 65535""];\n	""78"" [label=""$stack87 = $stack85 | $stack86""];\n	""79"" [label=""$stack88 = s >>> 16""];\n	""80"" [label=""$stack89 = t & -65536""];\n	""81"" [label=""$stack9 = d & 255""];\n	""82"" [label=""$stack90 = s << 4""];\n	""83"" [label=""$stack91 = s >>> 28""];\n	""84"" [label=""$stack92 = j""];\n	""85"" [label=""$stack93 = c >>> 2""];\n	""86"" [label=""$stack94 = c << 26""];\n	""87"" [label=""$stack95 = d >>> 2""];\n	""88"" [label=""$stack96 = d << 26""];\n	""89"" [label=""c = $stack20 | $stack21""];\n	""90"" [label=""c = $stack93 | $stack94""];\n	""91"" [label=""c = c & 268435455""];\n	""92"" [label=""c = c & 268435455""];\n	""93"" [label=""c = results[0]""];\n	""94"" [label=""c = results[1]""];\n	""95"" [label=""c = results[1]""];\n	""96"" [label=""c = results[1]""];\n	""97"" [label=""c = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int fourBytesToInt(byte[],int)>(key, 0)""];\n	""98"" [label=""c = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int hPermOp(int,int,int)>(c, -2, -859045888)""];\n	""99"" [label=""d = $stack16 | $stack17""];\n	""100"" [label=""d = $stack22 | $stack23""];\n	""101"" [label=""d = $stack95 | $stack96""];\n	""102"" [label=""d = d & 268435455""];\n	""103"" [label=""d = results[0]""];\n	""104"" [label=""d = results[0]""];\n	""105"" [label=""d = results[0]""];\n	""106"" [label=""d = results[1]""];\n	""107"" [label=""d = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int fourBytesToInt(byte[],int)>(key, 4)""];\n	""108"" [label=""d = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int hPermOp(int,int,int)>(d, -2, -859045888)""];\n	""109"" [label=""goto""];\n	""110"" [label=""goto""];\n	""111"" [label=""i = 0""];\n	""112"" [label=""i = i + 1""];\n	""113"" [label=""if $stack19 == 0""];\n	""114"" [label=""if i >= 16""];\n	""115"" [label=""j = 0""];\n	""116"" [label=""j = j + 1""];\n	""117"" [label=""j = j + 1""];\n	""118"" [label=""key := @parameter0: byte[]""];\n	""119"" [label=""results = newarray (int)[2]""];\n	""120"" [label=""return schedule""];\n	""121"" [label=""s = $stack55 | $stack56""];\n	""122"" [label=""s = $stack88 | $stack89""];\n	""123"" [label=""s = $stack90 | $stack91""];\n	""124"" [label=""schedule = newarray (int)[32]""];\n	""125"" [label=""schedule[$stack84] = $stack87""];\n	""126"" [label=""schedule[$stack92] = s""];\n	""127"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(c, d, 8, 16711935, results)""];\n	""128"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(d, c, 1, 1431655765, results)""];\n	""129"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(d, c, 1, 1431655765, results)""];\n	""130"" [label=""staticinvoke <org.apache.commons.codec.digest.UnixCrypt: void permOp(int,int,int,int,int[])>(d, c, 4, 252645135, results)""];\n	""131"" [label=""t = $stack82 | $stack83""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""113""[label=""cfg_next""];\n	""100"" -> ""92""[label=""cfg_next""];\n	""101"" -> ""109""[label=""cfg_next""];\n	""102"" -> ""15""[label=""cfg_next""];\n	""103"" -> ""94""[label=""cfg_next""];\n	""104"" -> ""95""[label=""cfg_next""];\n	""105"" -> ""96""[label=""cfg_next""];\n	""106"" -> ""129""[label=""cfg_next""];\n	""107"" -> ""119""[label=""cfg_next""];\n	""108"" -> ""128""[label=""cfg_next""];\n	""109"" -> ""92""[label=""cfg_goto""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""110"" -> ""114""[label=""cfg_goto""];\n	""111"" -> ""114""[label=""cfg_next""];\n	""112"" -> ""110""[label=""cfg_next""];\n	""113"" -> ""11""[label=""cfg_true""];\n	""113"" -> ""85""[label=""cfg_false""];\n	""114"" -> ""120""[label=""cfg_true""];\n	""114"" -> ""9""[label=""cfg_false""];\n	""115"" -> ""111""[label=""cfg_next""];\n	""116"" -> ""76""[label=""cfg_next""];\n	""117"" -> ""126""[label=""cfg_next""];\n	""118"" -> ""124""[label=""cfg_next""];\n	""119"" -> ""130""[label=""cfg_next""];\n	""12"" -> ""89""[label=""cfg_next""];\n	""121"" -> ""48""[label=""cfg_next""];\n	""122"" -> ""82""[label=""cfg_next""];\n	""123"" -> ""84""[label=""cfg_next""];\n	""124"" -> ""97""[label=""cfg_next""];\n	""125"" -> ""79""[label=""cfg_next""];\n	""126"" -> ""112""[label=""cfg_next""];\n	""127"" -> ""93""[label=""cfg_next""];\n	""128"" -> ""104""[label=""cfg_next""];\n	""129"" -> ""105""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""130"" -> ""103""[label=""cfg_next""];\n	""131"" -> ""75""[label=""cfg_next""];\n	""14"" -> ""100""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""25""[label=""cfg_next""];\n	""18"" -> ""23""[label=""cfg_next""];\n	""19"" -> ""21""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""22""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""18""[label=""cfg_next""];\n	""26"" -> ""34""[label=""cfg_next""];\n	""27"" -> ""32""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""31""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""30"" -> ""29""[label=""cfg_next""];\n	""31"" -> ""33""[label=""cfg_next""];\n	""32"" -> ""28""[label=""cfg_next""];\n	""33"" -> ""35""[label=""cfg_next""];\n	""34"" -> ""27""[label=""cfg_next""];\n	""35"" -> ""46""[label=""cfg_next""];\n	""36"" -> ""44""[label=""cfg_next""];\n	""37"" -> ""39""[label=""cfg_next""];\n	""38"" -> ""40""[label=""cfg_next""];\n	""39"" -> ""38""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""40"" -> ""42""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""41""[label=""cfg_next""];\n	""43"" -> ""45""[label=""cfg_next""];\n	""44"" -> ""37""[label=""cfg_next""];\n	""45"" -> ""47""[label=""cfg_next""];\n	""46"" -> ""36""[label=""cfg_next""];\n	""47"" -> ""121""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""50"" -> ""58""[label=""cfg_next""];\n	""51"" -> ""56""[label=""cfg_next""];\n	""52"" -> ""54""[label=""cfg_next""];\n	""53"" -> ""55""[label=""cfg_next""];\n	""54"" -> ""53""[label=""cfg_next""];\n	""55"" -> ""57""[label=""cfg_next""];\n	""56"" -> ""52""[label=""cfg_next""];\n	""57"" -> ""59""[label=""cfg_next""];\n	""58"" -> ""51""[label=""cfg_next""];\n	""59"" -> ""64""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""60"" -> ""62""[label=""cfg_next""];\n	""61"" -> ""63""[label=""cfg_next""];\n	""62"" -> ""61""[label=""cfg_next""];\n	""63"" -> ""65""[label=""cfg_next""];\n	""64"" -> ""60""[label=""cfg_next""];\n	""65"" -> ""73""[label=""cfg_next""];\n	""66"" -> ""71""[label=""cfg_next""];\n	""67"" -> ""69""[label=""cfg_next""];\n	""68"" -> ""70""[label=""cfg_next""];\n	""69"" -> ""68""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""70"" -> ""72""[label=""cfg_next""];\n	""71"" -> ""67""[label=""cfg_next""];\n	""72"" -> ""74""[label=""cfg_next""];\n	""73"" -> ""66""[label=""cfg_next""];\n	""74"" -> ""131""[label=""cfg_next""];\n	""75"" -> ""116""[label=""cfg_next""];\n	""76"" -> ""77""[label=""cfg_next""];\n	""77"" -> ""78""[label=""cfg_next""];\n	""78"" -> ""125""[label=""cfg_next""];\n	""79"" -> ""80""[label=""cfg_next""];\n	""8"" -> ""99""[label=""cfg_next""];\n	""80"" -> ""122""[label=""cfg_next""];\n	""81"" -> ""1""[label=""cfg_next""];\n	""82"" -> ""83""[label=""cfg_next""];\n	""83"" -> ""123""[label=""cfg_next""];\n	""84"" -> ""117""[label=""cfg_next""];\n	""85"" -> ""86""[label=""cfg_next""];\n	""86"" -> ""90""[label=""cfg_next""];\n	""87"" -> ""88""[label=""cfg_next""];\n	""88"" -> ""101""[label=""cfg_next""];\n	""89"" -> ""13""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""87""[label=""cfg_next""];\n	""91"" -> ""115""[label=""cfg_next""];\n	""92"" -> ""102""[label=""cfg_next""];\n	""93"" -> ""106""[label=""cfg_next""];\n	""94"" -> ""98""[label=""cfg_next""];\n	""95"" -> ""127""[label=""cfg_next""];\n	""96"" -> ""81""[label=""cfg_next""];\n	""97"" -> ""107""[label=""cfg_next""];\n	""98"" -> ""108""[label=""cfg_next""];\n	""99"" -> ""91""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int)",Method,No Comment,"private static int fourBytesToInt(final byte[] b, int offset) {\n    int value = byteToUnsigned(b[offset++]);\n    value |= byteToUnsigned(b[offset++]) << 8;\n    value |= byteToUnsigned(b[offset++]) << 16;\n    value |= byteToUnsigned(b[offset++]) << 24;\n    return value;\n}","int fourBytesToInt(byte[],int)","digraph cfg_fourBytesToInt {\n	""1"" [label=""$stack10 = b[$stack9]""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int byteToUnsigned(byte)>($stack10)""];\n	""3"" [label=""$stack12 = $stack11 << 16""];\n	""4"" [label=""$stack13 = offset""];\n	""5"" [label=""$stack14 = b[$stack13]""];\n	""6"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int byteToUnsigned(byte)>($stack14)""];\n	""7"" [label=""$stack16 = $stack15 << 24""];\n	""8"" [label=""$stack3 = offset""];\n	""9"" [label=""$stack4 = b[$stack3]""];\n	""10"" [label=""$stack5 = offset""];\n	""11"" [label=""$stack6 = b[$stack5]""];\n	""12"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int byteToUnsigned(byte)>($stack6)""];\n	""13"" [label=""$stack8 = $stack7 << 8""];\n	""14"" [label=""$stack9 = offset""];\n	""15"" [label=""b := @parameter0: byte[]""];\n	""16"" [label=""offset := @parameter1: int""];\n	""17"" [label=""offset = offset + 1""];\n	""18"" [label=""offset = offset + 1""];\n	""19"" [label=""offset = offset + 1""];\n	""20"" [label=""offset = offset + 1""];\n	""21"" [label=""return value""];\n	""22"" [label=""value = staticinvoke <org.apache.commons.codec.digest.UnixCrypt: int byteToUnsigned(byte)>($stack4)""];\n	""23"" [label=""value = value | $stack12""];\n	""24"" [label=""value = value | $stack16""];\n	""25"" [label=""value = value | $stack8""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""25""[label=""cfg_next""];\n	""14"" -> ""19""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""8""[label=""cfg_next""];\n	""17"" -> ""9""[label=""cfg_next""];\n	""18"" -> ""11""[label=""cfg_next""];\n	""19"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""5""[label=""cfg_next""];\n	""22"" -> ""10""[label=""cfg_next""];\n	""23"" -> ""4""[label=""cfg_next""];\n	""24"" -> ""21""[label=""cfg_next""];\n	""25"" -> ""14""[label=""cfg_next""];\n	""3"" -> ""23""[label=""cfg_next""];\n	""4"" -> ""20""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""24""[label=""cfg_next""];\n	""8"" -> ""17""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int)",Method,No Comment,"private static int hPermOp(final int a, final int n, final int m) {\n    final int t = (a << 16 - n ^ a) & m;\n    return a ^ t ^ t >>> 16 - n;\n}","int hPermOp(int,int,int)","digraph cfg_hPermOp {\n	""1"" [label=""$stack10 = $stack8 ^ $stack9""];\n	""2"" [label=""$stack4 = 16 - n""];\n	""3"" [label=""$stack5 = a << $stack4""];\n	""4"" [label=""$stack6 = $stack5 ^ a""];\n	""5"" [label=""$stack7 = 16 - n""];\n	""6"" [label=""$stack8 = a ^ t""];\n	""7"" [label=""$stack9 = t >>> $stack7""];\n	""8"" [label=""a := @parameter0: int""];\n	""9"" [label=""m := @parameter2: int""];\n	""10"" [label=""n := @parameter1: int""];\n	""11"" [label=""return $stack10""];\n	""12"" [label=""t = $stack6 & m""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int)",Method,No Comment,"private static void intToFourBytes(final int iValue, final byte[] b, int offset) {\n    b[offset++] = (byte) (iValue & 0xff);\n    b[offset++] = (byte) (iValue >>> 8 & 0xff);\n    b[offset++] = (byte) (iValue >>> 16 & 0xff);\n    b[offset++] = (byte) (iValue >>> 24 & 0xff);\n}","void intToFourBytes(int,byte[],int)","digraph cfg_intToFourBytes {\n	""1"" [label=""$stack10 = offset""];\n	""2"" [label=""$stack11 = iValue >>> 16""];\n	""3"" [label=""$stack12 = $stack11 & 255""];\n	""4"" [label=""$stack13 = (byte) $stack12""];\n	""5"" [label=""$stack14 = offset""];\n	""6"" [label=""$stack15 = iValue >>> 24""];\n	""7"" [label=""$stack16 = $stack15 & 255""];\n	""8"" [label=""$stack17 = (byte) $stack16""];\n	""9"" [label=""$stack3 = offset""];\n	""10"" [label=""$stack4 = iValue & 255""];\n	""11"" [label=""$stack5 = (byte) $stack4""];\n	""12"" [label=""$stack6 = offset""];\n	""13"" [label=""$stack7 = iValue >>> 8""];\n	""14"" [label=""$stack8 = $stack7 & 255""];\n	""15"" [label=""$stack9 = (byte) $stack8""];\n	""16"" [label=""b := @parameter1: byte[]""];\n	""17"" [label=""b[$stack10] = $stack13""];\n	""18"" [label=""b[$stack14] = $stack17""];\n	""19"" [label=""b[$stack3] = $stack5""];\n	""20"" [label=""b[$stack6] = $stack9""];\n	""21"" [label=""iValue := @parameter0: int""];\n	""22"" [label=""offset := @parameter2: int""];\n	""23"" [label=""offset = offset + 1""];\n	""24"" [label=""offset = offset + 1""];\n	""25"" [label=""offset = offset + 1""];\n	""26"" [label=""offset = offset + 1""];\n	""27"" [label=""return""];\n	""1"" -> ""25""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""19""[label=""cfg_next""];\n	""12"" -> ""24""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""20""[label=""cfg_next""];\n	""16"" -> ""22""[label=""cfg_next""];\n	""17"" -> ""5""[label=""cfg_next""];\n	""18"" -> ""27""[label=""cfg_next""];\n	""19"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""1""[label=""cfg_next""];\n	""21"" -> ""16""[label=""cfg_next""];\n	""22"" -> ""9""[label=""cfg_next""];\n	""23"" -> ""10""[label=""cfg_next""];\n	""24"" -> ""13""[label=""cfg_next""];\n	""25"" -> ""2""[label=""cfg_next""];\n	""26"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""26""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""18""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[])",Method,No Comment,"private static void permOp(int a, int b, final int n, final int m, final int[] results) {\n    final int t = (a >>> n ^ b) & m;\n    a ^= t << n;\n    b ^= t;\n    results[0] = a;\n    results[1] = b;\n}","void permOp(int,int,int,int,int[])","digraph cfg_permOp {\n	""1"" [label=""$stack6 = a >>> n""];\n	""2"" [label=""$stack7 = $stack6 ^ b""];\n	""3"" [label=""$stack8 = t << n""];\n	""4"" [label=""a := @parameter0: int""];\n	""5"" [label=""a = a ^ $stack8""];\n	""6"" [label=""b := @parameter1: int""];\n	""7"" [label=""b = b ^ t""];\n	""8"" [label=""m := @parameter3: int""];\n	""9"" [label=""n := @parameter2: int""];\n	""10"" [label=""results := @parameter4: int[]""];\n	""11"" [label=""results[0] = a""];\n	""12"" [label=""results[1] = b""];\n	""13"" [label=""return""];\n	""14"" [label=""t = $stack7 & m""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""14"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""14""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.UnixCrypt.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic UnixCrypt() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.UnixCrypt""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.Blake3.checkBufferArgs(byte[],int,int)",Method,No Comment,"private static void checkBufferArgs(final byte[] buffer, final int offset, final int length) {\n    Objects.requireNonNull(buffer);\n    if (offset < 0) {\n        throw new IndexOutOfBoundsException(""Offset must be non-negative"");\n    }\n    if (length < 0) {\n        throw new IndexOutOfBoundsException(""Length must be non-negative"");\n    }\n    final int bufferLength = buffer.length;\n    if (offset > bufferLength - length) {\n        throw new IndexOutOfBoundsException(""Offset "" + offset + "" and length "" + length + "" out of bounds with buffer length "" + bufferLength);\n    }\n}","void checkBufferArgs(byte[],int,int)","digraph cfg_checkBufferArgs {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" out of bounds with buffer length \"")""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(bufferLength)""];\n	""3"" [label=""$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""4"" [label=""$stack13 = new java.lang.IndexOutOfBoundsException""];\n	""5"" [label=""$stack14 = new java.lang.IndexOutOfBoundsException""];\n	""6"" [label=""$stack15 = new java.lang.IndexOutOfBoundsException""];\n	""7"" [label=""$stack4 = bufferLength - length""];\n	""8"" [label=""$stack5 = new java.lang.StringBuilder""];\n	""9"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Offset \"")""];\n	""10"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(offset)""];\n	""11"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" and length \"")""];\n	""12"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length)""];\n	""13"" [label=""buffer := @parameter0: byte[]""];\n	""14"" [label=""bufferLength = lengthof buffer""];\n	""15"" [label=""if length >= 0""];\n	""16"" [label=""if offset <= $stack4""];\n	""17"" [label=""if offset >= 0""];\n	""18"" [label=""length := @parameter2: int""];\n	""19"" [label=""offset := @parameter1: int""];\n	""20"" [label=""return""];\n	""21"" [label=""specialinvoke $stack13.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($stack12)""];\n	""22"" [label=""specialinvoke $stack14.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\""Length must be non-negative\"")""];\n	""23"" [label=""specialinvoke $stack15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\""Offset must be non-negative\"")""];\n	""24"" [label=""specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()""];\n	""25"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(buffer)""];\n	""26"" [label=""throw $stack13""];\n	""27"" [label=""throw $stack14""];\n	""28"" [label=""throw $stack15""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""19""[label=""cfg_next""];\n	""14"" -> ""7""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_true""];\n	""15"" -> ""5""[label=""cfg_false""];\n	""16"" -> ""20""[label=""cfg_true""];\n	""16"" -> ""4""[label=""cfg_false""];\n	""17"" -> ""15""[label=""cfg_true""];\n	""17"" -> ""6""[label=""cfg_false""];\n	""18"" -> ""25""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""21"" -> ""26""[label=""cfg_next""];\n	""22"" -> ""27""[label=""cfg_next""];\n	""23"" -> ""28""[label=""cfg_next""];\n	""24"" -> ""9""[label=""cfg_next""];\n	""25"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""21""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""22""[label=""cfg_next""];\n	""6"" -> ""23""[label=""cfg_next""];\n	""7"" -> ""16""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int)",Method,No Comment,"private static int[] compress(final int[] chainingValue, final int[] blockWords, final int blockLength, final long counter, final int flags) {\n    final int[] state = Arrays.copyOf(chainingValue, BLOCK_INTS);\n    System.arraycopy(IV, 0, state, 8, 4);\n    state[12] = (int) counter;\n    state[13] = (int) (counter >> Integer.SIZE);\n    state[14] = blockLength;\n    state[15] = flags;\n    for (int i = 0; i < 7; i++) {\n        final byte[] schedule = MSG_SCHEDULE[i];\n        round(state, blockWords, schedule);\n    }\n    for (int i = 0; i < state.length / 2; i++) {\n        state[i] ^= state[i + 8];\n        state[i + 8] ^= chainingValue[i];\n    }\n    return state;\n}","int[] compress(int[],int[],int,long,int)","digraph cfg_compress {\n	""1"" [label=""$stack10 = (int) counter""];\n	""2"" [label=""$stack11 = counter >> 32""];\n	""3"" [label=""$stack12 = (int) $stack11""];\n	""4"" [label=""$stack13 = lengthof state""];\n	""5"" [label=""$stack14 = $stack13 / 2""];\n	""6"" [label=""$stack15 = i + 8""];\n	""7"" [label=""$stack16 = state[i]""];\n	""8"" [label=""$stack17 = state[$stack15]""];\n	""9"" [label=""$stack18 = $stack16 ^ $stack17""];\n	""10"" [label=""$stack19 = i + 8""];\n	""11"" [label=""$stack20 = state[$stack19]""];\n	""12"" [label=""$stack21 = chainingValue[i]""];\n	""13"" [label=""$stack22 = $stack20 ^ $stack21""];\n	""14"" [label=""$stack23 = <org.apache.commons.codec.digest.Blake3: byte[][] MSG_SCHEDULE>""];\n	""15"" [label=""$stack9 = <org.apache.commons.codec.digest.Blake3: int[] IV>""];\n	""16"" [label=""blockLength := @parameter2: int""];\n	""17"" [label=""blockWords := @parameter1: int[]""];\n	""18"" [label=""chainingValue := @parameter0: int[]""];\n	""19"" [label=""counter := @parameter3: long""];\n	""20"" [label=""flags := @parameter4: int""];\n	""21"" [label=""goto""];\n	""22"" [label=""goto""];\n	""23"" [label=""i = 0""];\n	""24"" [label=""i = 0""];\n	""25"" [label=""i = i + 1""];\n	""26"" [label=""i = i + 1""];\n	""27"" [label=""if i >= $stack14""];\n	""28"" [label=""if i >= 7""];\n	""29"" [label=""return state""];\n	""30"" [label=""schedule = $stack23[i]""];\n	""31"" [label=""state = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(chainingValue, 16)""];\n	""32"" [label=""state[$stack19] = $stack22""];\n	""33"" [label=""state[12] = $stack10""];\n	""34"" [label=""state[13] = $stack12""];\n	""35"" [label=""state[14] = blockLength""];\n	""36"" [label=""state[15] = flags""];\n	""37"" [label=""state[i] = $stack18""];\n	""38"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack9, 0, state, 8, 4)""];\n	""39"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void round(int[],int[],byte[])>(state, blockWords, schedule)""];\n	""1"" -> ""33""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""32""[label=""cfg_next""];\n	""14"" -> ""30""[label=""cfg_next""];\n	""15"" -> ""38""[label=""cfg_next""];\n	""16"" -> ""19""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""31""[label=""cfg_next""];\n	""21"" -> ""28""[label=""cfg_goto""];\n	""22"" -> ""4""[label=""cfg_goto""];\n	""23"" -> ""28""[label=""cfg_next""];\n	""24"" -> ""4""[label=""cfg_next""];\n	""25"" -> ""21""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""29""[label=""cfg_true""];\n	""27"" -> ""7""[label=""cfg_false""];\n	""28"" -> ""14""[label=""cfg_false""];\n	""28"" -> ""24""[label=""cfg_true""];\n	""3"" -> ""34""[label=""cfg_next""];\n	""30"" -> ""39""[label=""cfg_next""];\n	""31"" -> ""15""[label=""cfg_next""];\n	""32"" -> ""26""[label=""cfg_next""];\n	""33"" -> ""2""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""23""[label=""cfg_next""];\n	""37"" -> ""10""[label=""cfg_next""];\n	""38"" -> ""1""[label=""cfg_next""];\n	""39"" -> ""25""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""27""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""37""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int)",Method,"* The mixing function, G, which mixes either a column or a diagonal.","private static void g(final int[] state, final int a, final int b, final int c, final int d, final int mx, final int my) {\n    state[a] += state[b] + mx;\n    state[d] = Integer.rotateRight(state[d] ^ state[a], 16);\n    state[c] += state[d];\n    state[b] = Integer.rotateRight(state[b] ^ state[c], 12);\n    state[a] += state[b] + my;\n    state[d] = Integer.rotateRight(state[d] ^ state[a], 8);\n    state[c] += state[d];\n    state[b] = Integer.rotateRight(state[b] ^ state[c], 7);\n}","void g(int[],int,int,int,int,int,int)","digraph cfg_g {\n	""1"" [label=""$stack10 = $stack8 + $stack9""];\n	""2"" [label=""$stack11 = state[d]""];\n	""3"" [label=""$stack12 = state[a]""];\n	""4"" [label=""$stack13 = $stack11 ^ $stack12""];\n	""5"" [label=""$stack14 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>($stack13, 16)""];\n	""6"" [label=""$stack15 = state[c]""];\n	""7"" [label=""$stack16 = state[d]""];\n	""8"" [label=""$stack17 = $stack15 + $stack16""];\n	""9"" [label=""$stack18 = state[b]""];\n	""10"" [label=""$stack19 = state[c]""];\n	""11"" [label=""$stack20 = $stack18 ^ $stack19""];\n	""12"" [label=""$stack21 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>($stack20, 12)""];\n	""13"" [label=""$stack22 = state[b]""];\n	""14"" [label=""$stack23 = state[a]""];\n	""15"" [label=""$stack24 = $stack22 + my""];\n	""16"" [label=""$stack25 = $stack23 + $stack24""];\n	""17"" [label=""$stack26 = state[d]""];\n	""18"" [label=""$stack27 = state[a]""];\n	""19"" [label=""$stack28 = $stack26 ^ $stack27""];\n	""20"" [label=""$stack29 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>($stack28, 8)""];\n	""21"" [label=""$stack30 = state[c]""];\n	""22"" [label=""$stack31 = state[d]""];\n	""23"" [label=""$stack32 = $stack30 + $stack31""];\n	""24"" [label=""$stack33 = state[b]""];\n	""25"" [label=""$stack34 = state[c]""];\n	""26"" [label=""$stack35 = $stack33 ^ $stack34""];\n	""27"" [label=""$stack36 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>($stack35, 7)""];\n	""28"" [label=""$stack7 = state[b]""];\n	""29"" [label=""$stack8 = state[a]""];\n	""30"" [label=""$stack9 = $stack7 + mx""];\n	""31"" [label=""a := @parameter1: int""];\n	""32"" [label=""b := @parameter2: int""];\n	""33"" [label=""c := @parameter3: int""];\n	""34"" [label=""d := @parameter4: int""];\n	""35"" [label=""mx := @parameter5: int""];\n	""36"" [label=""my := @parameter6: int""];\n	""37"" [label=""return""];\n	""38"" [label=""state := @parameter0: int[]""];\n	""39"" [label=""state[a] = $stack10""];\n	""40"" [label=""state[a] = $stack25""];\n	""41"" [label=""state[b] = $stack21""];\n	""42"" [label=""state[b] = $stack36""];\n	""43"" [label=""state[c] = $stack17""];\n	""44"" [label=""state[c] = $stack32""];\n	""45"" [label=""state[d] = $stack14""];\n	""46"" [label=""state[d] = $stack29""];\n	""1"" -> ""39""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""41""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""40""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""46""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""44""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""42""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""1""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""29""[label=""cfg_next""];\n	""38"" -> ""31""[label=""cfg_next""];\n	""39"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""17""[label=""cfg_next""];\n	""41"" -> ""14""[label=""cfg_next""];\n	""42"" -> ""37""[label=""cfg_next""];\n	""43"" -> ""9""[label=""cfg_next""];\n	""44"" -> ""24""[label=""cfg_next""];\n	""45"" -> ""6""[label=""cfg_next""];\n	""46"" -> ""21""[label=""cfg_next""];\n	""5"" -> ""45""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""43""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.Blake3.hash(byte[]),Method,* Calculates the Blake3 hash of the provided data.\n     *\n     * @param data source array to absorb data from\n     * @return 32-byte hash squeezed from the provided data\n     * @throws NullPointerException if data is null,public static byte[] hash(final byte[] data) {\n    return Blake3.initHash().update(data).doFinalize(OUT_LEN);\n},byte[] hash(byte[]),"digraph cfg_hash {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 initHash()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 update(byte[])>(data)""];\n	""3"" [label=""$stack3 = virtualinvoke $stack2.<org.apache.commons.codec.digest.Blake3: byte[] doFinalize(int)>(32)""];\n	""4"" [label=""data := @parameter0: byte[]""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Blake3.initHash(),Method,* Constructs a fresh Blake3 hash function. The instance returned functions as an arbitrary length message digest.\n     *\n     * @return fresh Blake3 instance in hashed mode,"public static Blake3 initHash() {\n    return new Blake3(IV, 0);\n}",org.apache.commons.codec.digest.Blake3 initHash(),"digraph cfg_initHash {\n	""1"" [label=""$stack0 = <org.apache.commons.codec.digest.Blake3: int[] IV>""];\n	""2"" [label=""$stack1 = new org.apache.commons.codec.digest.Blake3""];\n	""3"" [label=""return $stack1""];\n	""4"" [label=""specialinvoke $stack1.<org.apache.commons.codec.digest.Blake3: void <init>(int[],int)>($stack0, 0)""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byte[]),Method,* Constructs a fresh Blake3 key derivation function using the provided key derivation context byte string.\n     * The instance returned functions as a key-derivation function which can further absorb additional context data\n     * before squeezing derived key data.\n     *\n     * @param kdfContext a globally unique key-derivation context byte string to separate key derivation contexts from each other\n     * @return fresh Blake3 instance in key derivation mode\n     * @throws NullPointerException if kdfContext is null,"public static Blake3 initKeyDerivationFunction(final byte[] kdfContext) {\n    Objects.requireNonNull(kdfContext);\n    final EngineState kdf = new EngineState(IV, DERIVE_KEY_CONTEXT);\n    kdf.inputData(kdfContext, 0, kdfContext.length);\n    final byte[] key = new byte[KEY_LEN];\n    kdf.outputHash(key, 0, key.length);\n    return new Blake3(unpackInts(key, KEY_INTS), DERIVE_KEY_MATERIAL);\n}",org.apache.commons.codec.digest.Blake3 initKeyDerivationFunction(byte[]),"digraph cfg_initKeyDerivationFunction {\n	""1"" [label=""$stack3 = <org.apache.commons.codec.digest.Blake3: int[] IV>""];\n	""2"" [label=""$stack4 = new org.apache.commons.codec.digest.Blake3$EngineState""];\n	""3"" [label=""$stack5 = lengthof kdfContext""];\n	""4"" [label=""$stack6 = lengthof key""];\n	""5"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] unpackInts(byte[],int)>(key, 8)""];\n	""6"" [label=""$stack8 = new org.apache.commons.codec.digest.Blake3""];\n	""7"" [label=""kdf = $stack4""];\n	""8"" [label=""kdfContext := @parameter0: byte[]""];\n	""9"" [label=""key = newarray (byte)[32]""];\n	""10"" [label=""return $stack8""];\n	""11"" [label=""specialinvoke $stack4.<org.apache.commons.codec.digest.Blake3$EngineState: void <init>(int[],int,org.apache.commons.codec.digest.Blake3$1)>($stack3, 32, null)""];\n	""12"" [label=""specialinvoke $stack8.<org.apache.commons.codec.digest.Blake3: void <init>(int[],int)>($stack7, 64)""];\n	""13"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(kdfContext)""];\n	""14"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$EngineState: void access$1400(org.apache.commons.codec.digest.Blake3$EngineState,byte[],int,int)>(kdf, kdfContext, 0, $stack5)""];\n	""15"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$EngineState: void access$1500(org.apache.commons.codec.digest.Blake3$EngineState,byte[],int,int)>(kdf, key, 0, $stack6)""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""14"" -> ""9""[label=""cfg_next""];\n	""15"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""15""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""13""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Blake3.initKeyedHash(byte[]),Method,* Constructs a fresh Blake3 keyed hash function. The instance returned functions as a pseudorandom function (PRF) or as a\n     * message authentication code (MAC).\n     *\n     * @param key 32-byte secret key\n     * @return fresh Blake3 instance in keyed mode using the provided key\n     * @throws NullPointerException     if key is null\n     * @throws IllegalArgumentException if key is not 32 bytes,"public static Blake3 initKeyedHash(final byte[] key) {\n    Objects.requireNonNull(key);\n    if (key.length != KEY_LEN) {\n        throw new IllegalArgumentException(""Blake3 keys must be 32 bytes"");\n    }\n    return new Blake3(unpackInts(key, KEY_INTS), KEYED_HASH);\n}",org.apache.commons.codec.digest.Blake3 initKeyedHash(byte[]),"digraph cfg_initKeyedHash {\n	""1"" [label=""$stack1 = lengthof key""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] unpackInts(byte[],int)>(key, 8)""];\n	""3"" [label=""$stack3 = new org.apache.commons.codec.digest.Blake3""];\n	""4"" [label=""$stack4 = new java.lang.IllegalArgumentException""];\n	""5"" [label=""if $stack1 == 32""];\n	""6"" [label=""key := @parameter0: byte[]""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.Blake3: void <init>(int[],int)>($stack2, 16)""];\n	""9"" [label=""specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Blake3 keys must be 32 bytes\"")""];\n	""10"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(key)""];\n	""11"" [label=""throw $stack4""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Blake3.keyedHash(byte[],byte[])",Method,* Calculates the Blake3 keyed hash (MAC) of the provided data.\n     *\n     * @param key  32-byte secret key\n     * @param data source array to absorb data from\n     * @return 32-byte mac squeezed from the provided data\n     * @throws NullPointerException if key or data are null,"public static byte[] keyedHash(final byte[] key, final byte[] data) {\n    return Blake3.initKeyedHash(key).update(data).doFinalize(OUT_LEN);\n}","byte[] keyedHash(byte[],byte[])","digraph cfg_keyedHash {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 initKeyedHash(byte[])>(key)""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 update(byte[])>(data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.digest.Blake3: byte[] doFinalize(int)>(32)""];\n	""4"" [label=""data := @parameter1: byte[]""];\n	""5"" [label=""key := @parameter0: byte[]""];\n	""6"" [label=""return $stack4""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int)",Method,No Comment,"private static void packInt(final int value, final byte[] dst, final int off, final int len) {\n    for (int i = 0; i < len; i++) {\n        dst[off + i] = (byte) (value >>> i * Byte.SIZE);\n    }\n}","void packInt(int,byte[],int,int)","digraph cfg_packInt {\n	""1"" [label=""$stack5 = i * 8""];\n	""2"" [label=""$stack6 = value >>> $stack5""];\n	""3"" [label=""$stack7 = off + i""];\n	""4"" [label=""$stack8 = (byte) $stack6""];\n	""5"" [label=""dst := @parameter1: byte[]""];\n	""6"" [label=""dst[$stack7] = $stack8""];\n	""7"" [label=""goto""];\n	""8"" [label=""i = 0""];\n	""9"" [label=""i = i + 1""];\n	""10"" [label=""if i >= len""];\n	""11"" [label=""len := @parameter3: int""];\n	""12"" [label=""off := @parameter2: int""];\n	""13"" [label=""return""];\n	""14"" [label=""value := @parameter0: int""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_true""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_goto""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int)",Method,No Comment,"private static int[] parentChainingValue(final int[] leftChildCV, final int[] rightChildCV, final int[] key, final int flags) {\n    return parentOutput(leftChildCV, rightChildCV, key, flags).chainingValue();\n}","int[] parentChainingValue(int[],int[],int[],int)","digraph cfg_parentChainingValue {\n	""1"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$Output parentOutput(int[],int[],int[],int)>(leftChildCV, rightChildCV, key, flags)""];\n	""2"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.Blake3$Output: int[] access$700(org.apache.commons.codec.digest.Blake3$Output)>($stack4)""];\n	""3"" [label=""flags := @parameter3: int""];\n	""4"" [label=""key := @parameter2: int[]""];\n	""5"" [label=""leftChildCV := @parameter0: int[]""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""rightChildCV := @parameter1: int[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int)",Method,No Comment,"private static Output parentOutput(final int[] leftChildCV, final int[] rightChildCV, final int[] key, final int flags) {\n    final int[] blockWords = Arrays.copyOf(leftChildCV, BLOCK_INTS);\n    System.arraycopy(rightChildCV, 0, blockWords, 8, CHAINING_VALUE_INTS);\n    return new Output(key.clone(), blockWords, 0, BLOCK_LEN, flags | PARENT);\n}","org.apache.commons.codec.digest.Blake3$Output parentOutput(int[],int[],int[],int)","digraph cfg_parentOutput {\n	""1"" [label=""$stack5 = virtualinvoke key.<java.lang.Object: java.lang.Object clone()>()""];\n	""2"" [label=""$stack6 = flags | 4""];\n	""3"" [label=""$stack7 = (int[]) $stack5""];\n	""4"" [label=""$stack8 = new org.apache.commons.codec.digest.Blake3$Output""];\n	""5"" [label=""blockWords = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(leftChildCV, 16)""];\n	""6"" [label=""flags := @parameter3: int""];\n	""7"" [label=""key := @parameter2: int[]""];\n	""8"" [label=""leftChildCV := @parameter0: int[]""];\n	""9"" [label=""return $stack8""];\n	""10"" [label=""rightChildCV := @parameter1: int[]""];\n	""11"" [label=""specialinvoke $stack8.<org.apache.commons.codec.digest.Blake3$Output: void <init>(int[],int[],long,int,int,org.apache.commons.codec.digest.Blake3$1)>($stack7, blockWords, 0L, 64, $stack6, null)""];\n	""12"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(rightChildCV, 0, blockWords, 8, 8)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.round(int[],int[],byte[])",Method,No Comment,"private static void round(final int[] state, final int[] msg, final byte[] schedule) {\n    // Mix the columns.\n    g(state, 0, 4, 8, 12, msg[schedule[0]], msg[schedule[1]]);\n    g(state, 1, 5, 9, 13, msg[schedule[2]], msg[schedule[3]]);\n    g(state, 2, 6, 10, 14, msg[schedule[4]], msg[schedule[5]]);\n    g(state, 3, 7, 11, 15, msg[schedule[6]], msg[schedule[7]]);\n    // Mix the diagonals.\n    g(state, 0, 5, 10, 15, msg[schedule[8]], msg[schedule[9]]);\n    g(state, 1, 6, 11, 12, msg[schedule[10]], msg[schedule[11]]);\n    g(state, 2, 7, 8, 13, msg[schedule[12]], msg[schedule[13]]);\n    g(state, 3, 4, 9, 14, msg[schedule[14]], msg[schedule[15]]);\n}","void round(int[],int[],byte[])","digraph cfg_round {\n	""1"" [label=""$stack10 = msg[$stack7]""];\n	""2"" [label=""$stack11 = schedule[4]""];\n	""3"" [label=""$stack12 = schedule[5]""];\n	""4"" [label=""$stack13 = msg[$stack12]""];\n	""5"" [label=""$stack14 = msg[$stack11]""];\n	""6"" [label=""$stack15 = schedule[6]""];\n	""7"" [label=""$stack16 = schedule[7]""];\n	""8"" [label=""$stack17 = msg[$stack16]""];\n	""9"" [label=""$stack18 = msg[$stack15]""];\n	""10"" [label=""$stack19 = schedule[8]""];\n	""11"" [label=""$stack20 = schedule[9]""];\n	""12"" [label=""$stack21 = msg[$stack20]""];\n	""13"" [label=""$stack22 = msg[$stack19]""];\n	""14"" [label=""$stack23 = schedule[10]""];\n	""15"" [label=""$stack24 = schedule[11]""];\n	""16"" [label=""$stack25 = msg[$stack24]""];\n	""17"" [label=""$stack26 = msg[$stack23]""];\n	""18"" [label=""$stack27 = schedule[12]""];\n	""19"" [label=""$stack28 = schedule[13]""];\n	""20"" [label=""$stack29 = msg[$stack28]""];\n	""21"" [label=""$stack3 = schedule[0]""];\n	""22"" [label=""$stack30 = msg[$stack27]""];\n	""23"" [label=""$stack31 = schedule[14]""];\n	""24"" [label=""$stack32 = schedule[15]""];\n	""25"" [label=""$stack33 = msg[$stack32]""];\n	""26"" [label=""$stack34 = msg[$stack31]""];\n	""27"" [label=""$stack4 = schedule[1]""];\n	""28"" [label=""$stack5 = msg[$stack4]""];\n	""29"" [label=""$stack6 = msg[$stack3]""];\n	""30"" [label=""$stack7 = schedule[2]""];\n	""31"" [label=""$stack8 = schedule[3]""];\n	""32"" [label=""$stack9 = msg[$stack8]""];\n	""33"" [label=""msg := @parameter1: int[]""];\n	""34"" [label=""return""];\n	""35"" [label=""schedule := @parameter2: byte[]""];\n	""36"" [label=""state := @parameter0: int[]""];\n	""37"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 0, 4, 8, 12, $stack6, $stack5)""];\n	""38"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 0, 5, 10, 15, $stack22, $stack21)""];\n	""39"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 1, 5, 9, 13, $stack10, $stack9)""];\n	""40"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 1, 6, 11, 12, $stack26, $stack25)""];\n	""41"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 2, 6, 10, 14, $stack14, $stack13)""];\n	""42"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 2, 7, 8, 13, $stack30, $stack29)""];\n	""43"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 3, 4, 9, 14, $stack34, $stack33)""];\n	""44"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void g(int[],int,int,int,int,int,int)>(state, 3, 7, 11, 15, $stack18, $stack17)""];\n	""1"" -> ""31""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""38""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""14"" -> ""17""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""40""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""22""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""20"" -> ""42""[label=""cfg_next""];\n	""21"" -> ""29""[label=""cfg_next""];\n	""22"" -> ""19""[label=""cfg_next""];\n	""23"" -> ""26""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""43""[label=""cfg_next""];\n	""26"" -> ""24""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""37""[label=""cfg_next""];\n	""29"" -> ""27""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""1""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""39""[label=""cfg_next""];\n	""33"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""21""[label=""cfg_next""];\n	""36"" -> ""33""[label=""cfg_next""];\n	""37"" -> ""30""[label=""cfg_next""];\n	""38"" -> ""14""[label=""cfg_next""];\n	""39"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""41""[label=""cfg_next""];\n	""40"" -> ""18""[label=""cfg_next""];\n	""41"" -> ""6""[label=""cfg_next""];\n	""42"" -> ""23""[label=""cfg_next""];\n	""43"" -> ""34""[label=""cfg_next""];\n	""44"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""44""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.unpackInt(byte[],int)",Method,No Comment,"private static int unpackInt(final byte[] buf, final int off) {\n    return buf[off] & 0xFF | (buf[off + 1] & 0xFF) << 8 | (buf[off + 2] & 0xFF) << 16 | (buf[off + 3] & 0xFF) << 24;\n}","int unpackInt(byte[],int)","digraph cfg_unpackInt {\n	""1"" [label=""$stack10 = $stack9 & 255""];\n	""2"" [label=""$stack11 = $stack6 | $stack7""];\n	""3"" [label=""$stack12 = $stack10 << 16""];\n	""4"" [label=""$stack13 = off + 3""];\n	""5"" [label=""$stack14 = buf[$stack13]""];\n	""6"" [label=""$stack15 = $stack14 & 255""];\n	""7"" [label=""$stack16 = $stack11 | $stack12""];\n	""8"" [label=""$stack17 = $stack15 << 24""];\n	""9"" [label=""$stack18 = $stack16 | $stack17""];\n	""10"" [label=""$stack2 = buf[off]""];\n	""11"" [label=""$stack3 = off + 1""];\n	""12"" [label=""$stack4 = buf[$stack3]""];\n	""13"" [label=""$stack5 = $stack4 & 255""];\n	""14"" [label=""$stack6 = $stack2 & 255""];\n	""15"" [label=""$stack7 = $stack5 << 8""];\n	""16"" [label=""$stack8 = off + 2""];\n	""17"" [label=""$stack9 = buf[$stack8]""];\n	""18"" [label=""buf := @parameter0: byte[]""];\n	""19"" [label=""off := @parameter1: int""];\n	""20"" [label=""return $stack18""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""20""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.Blake3.unpackInts(byte[],int)",Method,No Comment,"private static int[] unpackInts(final byte[] buf, final int nrInts) {\n    final int[] values = new int[nrInts];\n    for (int i = 0, off = 0; i < nrInts; i++, off += Integer.BYTES) {\n        values[i] = unpackInt(buf, off);\n    }\n    return values;\n}","int[] unpackInts(byte[],int)","digraph cfg_unpackInts {\n	""1"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.Blake3: int unpackInt(byte[],int)>(buf, off)""];\n	""2"" [label=""buf := @parameter0: byte[]""];\n	""3"" [label=""goto""];\n	""4"" [label=""i = 0""];\n	""5"" [label=""i = i + 1""];\n	""6"" [label=""if i >= nrInts""];\n	""7"" [label=""nrInts := @parameter1: int""];\n	""8"" [label=""off = 0""];\n	""9"" [label=""off = off + 4""];\n	""10"" [label=""return values""];\n	""11"" [label=""values = newarray (int)[nrInts]""];\n	""12"" [label=""values[i] = $stack5""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_goto""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_false""];\n	""6"" -> ""10""[label=""cfg_true""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.Blake3.doFinalize(byte[]),Method,* Finalizes hash output data that depends on the sequence of updated bytes preceding this invocation and any\n     * previously finalized bytes. Note that this can finalize up to 2<sup>64</sup> bytes per instance.\n     *\n     * @param out destination array to finalize bytes into\n     * @return {@code this} instance.\n     * @throws NullPointerException if out is null,"public Blake3 doFinalize(final byte[] out) {\n    return doFinalize(out, 0, out.length);\n}",org.apache.commons.codec.digest.Blake3 doFinalize(byte[]),"digraph cfg_doFinalize {\n	""1"" [label=""$stack2 = lengthof out""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 doFinalize(byte[],int,int)>(out, 0, $stack2)""];\n	""3"" [label=""out := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.Blake3.doFinalize(byte[],int,int)",Method,* Finalizes an arbitrary number of bytes into the provided output array that depends on the sequence of previously\n     * updated and finalized bytes. Note that this can finalize up to 2<sup>64</sup> bytes per instance.\n     *\n     * @param out    destination array to finalize bytes into\n     * @param offset where in the array to begin writing bytes to\n     * @param length number of bytes to finalize\n     * @return {@code this} instance.\n     * @throws NullPointerException      if out is null\n     * @throws IndexOutOfBoundsException if offset or length are negative or if offset + length is greater than the\n     *                                   length of the provided array,"public Blake3 doFinalize(final byte[] out, final int offset, final int length) {\n    checkBufferArgs(out, offset, length);\n    engineState.outputHash(out, offset, length);\n    return this;\n}","org.apache.commons.codec.digest.Blake3 doFinalize(byte[],int,int)","digraph cfg_doFinalize {\n	""1"" [label=""$stack4 = this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$EngineState engineState>""];\n	""2"" [label=""length := @parameter2: int""];\n	""3"" [label=""offset := @parameter1: int""];\n	""4"" [label=""out := @parameter0: byte[]""];\n	""5"" [label=""return this""];\n	""6"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$EngineState: void access$1500(org.apache.commons.codec.digest.Blake3$EngineState,byte[],int,int)>($stack4, out, offset, length)""];\n	""7"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void checkBufferArgs(byte[],int,int)>(out, offset, length)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.Blake3.doFinalize(int),Method,* Squeezes and returns an arbitrary number of bytes dependent on the sequence of previously absorbed and squeezed bytes.\n     *\n     * @param nrBytes number of bytes to finalize\n     * @return requested number of finalized bytes\n     * @throws IllegalArgumentException if nrBytes is negative,"public byte[] doFinalize(final int nrBytes) {\n    if (nrBytes < 0) {\n        throw new IllegalArgumentException(""Requested bytes must be non-negative"");\n    }\n    final byte[] hash = new byte[nrBytes];\n    doFinalize(hash);\n    return hash;\n}",byte[] doFinalize(int),"digraph cfg_doFinalize {\n	""1"" [label=""$stack3 = new java.lang.IllegalArgumentException""];\n	""2"" [label=""hash = newarray (byte)[nrBytes]""];\n	""3"" [label=""if nrBytes >= 0""];\n	""4"" [label=""nrBytes := @parameter0: int""];\n	""5"" [label=""return hash""];\n	""6"" [label=""specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Requested bytes must be non-negative\"")""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""8"" [label=""throw $stack3""];\n	""9"" [label=""virtualinvoke this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 doFinalize(byte[])>(hash)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_false""];\n	""3"" -> ""2""[label=""cfg_true""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.Blake3.reset(),Method,* Resets this instance back to its initial state when it was first constructed.\n     * @return {@code this} instance.,public Blake3 reset() {\n    engineState.reset();\n    return this;\n},org.apache.commons.codec.digest.Blake3 reset(),"digraph cfg_reset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$EngineState engineState>""];\n	""2"" [label=""return this""];\n	""3"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$EngineState: void access$1600(org.apache.commons.codec.digest.Blake3$EngineState)>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.Blake3.update(byte[]),Method,* Updates this hash state using the provided bytes.\n     *\n     * @param in source array to update data from\n     * @return {@code this} instance.\n     * @throws NullPointerException if in is null,"public Blake3 update(final byte[] in) {\n    return update(in, 0, in.length);\n}",org.apache.commons.codec.digest.Blake3 update(byte[]),"digraph cfg_update {\n	""1"" [label=""$stack2 = lengthof in""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3 update(byte[],int,int)>(in, 0, $stack2)""];\n	""3"" [label=""in := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.Blake3.update(byte[],int,int)",Method,* Updates this hash state using the provided bytes at an offset.\n     *\n     * @param in     source array to update data from\n     * @param offset where in the array to begin reading bytes\n     * @param length number of bytes to update\n     * @return {@code this} instance.\n     * @throws NullPointerException      if in is null\n     * @throws IndexOutOfBoundsException if offset or length are negative or if offset + length is greater than the\n     *                                   length of the provided array,"public Blake3 update(final byte[] in, final int offset, final int length) {\n    checkBufferArgs(in, offset, length);\n    engineState.inputData(in, offset, length);\n    return this;\n}","org.apache.commons.codec.digest.Blake3 update(byte[],int,int)","digraph cfg_update {\n	""1"" [label=""$stack4 = this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$EngineState engineState>""];\n	""2"" [label=""in := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter2: int""];\n	""4"" [label=""offset := @parameter1: int""];\n	""5"" [label=""return this""];\n	""6"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$EngineState: void access$1400(org.apache.commons.codec.digest.Blake3$EngineState,byte[],int,int)>($stack4, in, offset, length)""];\n	""7"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void checkBufferArgs(byte[],int,int)>(in, offset, length)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.Blake3.<init>(int[],int)",Constructor,No Comment,"private Blake3(final int[] key, final int flags) {\n    engineState = new EngineState(key, flags);\n}","void <init>(int[],int)","digraph cfg_init {\n	""1"" [label=""$stack3 = new org.apache.commons.codec.digest.Blake3$EngineState""];\n	""2"" [label=""flags := @parameter1: int""];\n	""3"" [label=""key := @parameter0: int[]""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.digest.Blake3$EngineState: void <init>(int[],int,org.apache.commons.codec.digest.Blake3$1)>(key, flags, null)""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.Blake3""];\n	""8"" [label=""this.<org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$EngineState engineState> = $stack3""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$ChunkState.length(),Method,No Comment,private int length() {\n    return BLOCK_LEN * blocksCompressed + blockLength;\n},int length(),"digraph cfg_length {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blocksCompressed>""];\n	""2"" [label=""$stack2 = 64 * $stack1""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""4"" [label=""$stack4 = $stack2 + $stack3""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$ChunkState.output(),Method,No Comment,"private Output output() {\n    final int[] blockWords = unpackInts(block, BLOCK_INTS);\n    final int outputFlags = flags | startFlag() | CHUNK_END;\n    return new Output(chainingValue, blockWords, chunkCounter, blockLength, outputFlags);\n}",org.apache.commons.codec.digest.Blake3$Output output(),"digraph cfg_output {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.digest.Blake3$Output""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: byte[] block>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int flags>""];\n	""4"" [label=""$stack5 = specialinvoke this.<org.apache.commons.codec.digest.Blake3$ChunkState: int startFlag()>()""];\n	""5"" [label=""$stack6 = $stack4 | $stack5""];\n	""6"" [label=""$stack7 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""7"" [label=""$stack8 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: long chunkCounter>""];\n	""8"" [label=""$stack9 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int[] chainingValue>""];\n	""9"" [label=""blockWords = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$000(byte[],int)>($stack3, 16)""];\n	""10"" [label=""outputFlags = $stack6 | 2""];\n	""11"" [label=""return $stack10""];\n	""12"" [label=""specialinvoke $stack10.<org.apache.commons.codec.digest.Blake3$Output: void <init>(int[],int[],long,int,int,org.apache.commons.codec.digest.Blake3$1)>($stack9, blockWords, $stack8, $stack7, outputFlags, null)""];\n	""13"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$ChunkState.startFlag(),Method,No Comment,private int startFlag() {\n    return blocksCompressed == 0 ? CHUNK_START : 0;\n},int startFlag(),"digraph cfg_startFlag {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blocksCompressed>""];\n	""2"" [label=""$stack2 = 0""];\n	""3"" [label=""$stack2 = 1""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack1 != 0""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$ChunkState.update(byte[],int,int)",Method,No Comment,"private void update(final byte[] input, int offset, int length) {\n    while (length > 0) {\n        if (blockLength == BLOCK_LEN) {\n            // If the block buffer is full, compress it and clear it. More\n            // input is coming, so this compression is not CHUNK_END.\n            final int[] blockWords = unpackInts(block, BLOCK_INTS);\n            chainingValue = Arrays.copyOf(compress(chainingValue, blockWords, BLOCK_LEN, chunkCounter, flags | startFlag()), CHAINING_VALUE_INTS);\n            blocksCompressed++;\n            blockLength = 0;\n            Arrays.fill(block, (byte) 0);\n        }\n        final int want = BLOCK_LEN - blockLength;\n        final int take = Math.min(want, length);\n        System.arraycopy(input, offset, block, blockLength, take);\n        blockLength += take;\n        offset += take;\n        length -= take;\n    }\n}","void update(byte[],int,int)","digraph cfg_update {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""2"" [label=""$stack11 = $stack10 + take""];\n	""3"" [label=""$stack12 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: byte[] block>""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int[] chainingValue>""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: long chunkCounter>""];\n	""6"" [label=""$stack15 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int flags>""];\n	""7"" [label=""$stack16 = specialinvoke this.<org.apache.commons.codec.digest.Blake3$ChunkState: int startFlag()>()""];\n	""8"" [label=""$stack17 = $stack15 | $stack16""];\n	""9"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$200(int[],int[],int,long,int)>($stack13, blockWords, 64, $stack14, $stack17)""];\n	""10"" [label=""$stack19 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($stack18, 8)""];\n	""11"" [label=""$stack20 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blocksCompressed>""];\n	""12"" [label=""$stack21 = $stack20 + 1""];\n	""13"" [label=""$stack22 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: byte[] block>""];\n	""14"" [label=""$stack6 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""15"" [label=""$stack7 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""16"" [label=""$stack8 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength>""];\n	""17"" [label=""$stack9 = this.<org.apache.commons.codec.digest.Blake3$ChunkState: byte[] block>""];\n	""18"" [label=""blockWords = 64 - $stack7""];\n	""19"" [label=""blockWords = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$000(byte[],int)>($stack12, 16)""];\n	""20"" [label=""goto""];\n	""21"" [label=""if $stack6 != 64""];\n	""22"" [label=""if length <= 0""];\n	""23"" [label=""input := @parameter0: byte[]""];\n	""24"" [label=""length := @parameter2: int""];\n	""25"" [label=""length = length - take""];\n	""26"" [label=""offset := @parameter1: int""];\n	""27"" [label=""offset = offset + take""];\n	""28"" [label=""return""];\n	""29"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(input, offset, $stack9, $stack8, take)""];\n	""30"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>($stack22, 0)""];\n	""31"" [label=""take = staticinvoke <java.lang.Math: int min(int,int)>(blockWords, length)""];\n	""32"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""33"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength> = $stack11""];\n	""34"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blockLength> = 0""];\n	""35"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int blocksCompressed> = $stack21""];\n	""36"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int[] chainingValue> = $stack19""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""36""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""35""[label=""cfg_next""];\n	""13"" -> ""30""[label=""cfg_next""];\n	""14"" -> ""21""[label=""cfg_next""];\n	""15"" -> ""18""[label=""cfg_next""];\n	""16"" -> ""29""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""31""[label=""cfg_next""];\n	""19"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""33""[label=""cfg_next""];\n	""20"" -> ""22""[label=""cfg_goto""];\n	""21"" -> ""15""[label=""cfg_true""];\n	""21"" -> ""3""[label=""cfg_false""];\n	""22"" -> ""14""[label=""cfg_false""];\n	""22"" -> ""28""[label=""cfg_true""];\n	""23"" -> ""26""[label=""cfg_next""];\n	""24"" -> ""22""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""24""[label=""cfg_next""];\n	""27"" -> ""25""[label=""cfg_next""];\n	""29"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""19""[label=""cfg_next""];\n	""30"" -> ""15""[label=""cfg_next""];\n	""31"" -> ""17""[label=""cfg_next""];\n	""32"" -> ""23""[label=""cfg_next""];\n	""33"" -> ""27""[label=""cfg_next""];\n	""34"" -> ""13""[label=""cfg_next""];\n	""35"" -> ""34""[label=""cfg_next""];\n	""36"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$ChunkState.<init>(int[],long,int)",Constructor,No Comment,"private ChunkState(final int[] key, final long chunkCounter, final int flags) {\n    chainingValue = key;\n    this.chunkCounter = chunkCounter;\n    this.flags = flags;\n}","void <init>(int[],long,int)","digraph cfg_init {\n	""1"" [label=""$stack5 = newarray (byte)[64]""];\n	""2"" [label=""chunkCounter := @parameter1: long""];\n	""3"" [label=""flags := @parameter2: int""];\n	""4"" [label=""key := @parameter0: int[]""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""8"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: byte[] block> = $stack5""];\n	""9"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int flags> = flags""];\n	""10"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: int[] chainingValue> = key""];\n	""11"" [label=""this.<org.apache.commons.codec.digest.Blake3$ChunkState: long chunkCounter> = chunkCounter""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$EngineState.addChunkCV(int[],long)",Method,Section 5.1.2 of the BLAKE3 spec explains this algorithm in more detail.,"private void addChunkCV(final int[] firstCV, final long totalChunks) {\n    // This chunk might complete some subtrees. For each completed subtree,\n    // its left child will be the current top entry in the CV stack, and\n    // its right child will be the current value of `newCV`. Pop each left\n    // child off the stack, merge it with `newCV`, and overwrite `newCV`\n    // with the result. After all these merges, push the final value of\n    // `newCV` onto the stack. The number of completed subtrees is given\n    // by the number of trailing 0-bits in the new total number of chunks.\n    int[] newCV = firstCV;\n    long chunkCounter = totalChunks;\n    while ((chunkCounter & 1) == 0) {\n        newCV = parentChainingValue(popCV(), newCV, key, flags);\n        chunkCounter >>= 1;\n    }\n    pushCV(newCV);\n}","void addChunkCV(int[],long)","digraph cfg_addChunkCV {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] key>""];\n	""2"" [label=""$stack11 = specialinvoke this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] popCV()>()""];\n	""3"" [label=""$stack7 = chunkCounter & 1L""];\n	""4"" [label=""$stack8 = $stack7 cmp 0L""];\n	""5"" [label=""$stack9 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int flags>""];\n	""6"" [label=""chunkCounter = chunkCounter >> 1""];\n	""7"" [label=""chunkCounter = totalChunks""];\n	""8"" [label=""firstCV := @parameter0: int[]""];\n	""9"" [label=""goto""];\n	""10"" [label=""if $stack8 != 0""];\n	""11"" [label=""newCV = firstCV""];\n	""12"" [label=""newCV = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$400(int[],int[],int[],int)>($stack11, newCV, $stack10, $stack9)""];\n	""13"" [label=""return""];\n	""14"" [label=""specialinvoke this.<org.apache.commons.codec.digest.Blake3$EngineState: void pushCV(int[])>(newCV)""];\n	""15"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""16"" [label=""totalChunks := @parameter1: long""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_true""];\n	""10"" -> ""2""[label=""cfg_false""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_goto""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$EngineState.inputData(byte[],int,int)",Method,No Comment,"private void inputData(final byte[] in, int offset, int length) {\n    while (length > 0) {\n        // If the current chunk is complete, finalize it and reset the\n        // chunk state. More input is coming, so this chunk is not ROOT.\n        if (state.length() == CHUNK_LEN) {\n            final int[] chunkCV = state.output().chainingValue();\n            final long totalChunks = state.chunkCounter + 1;\n            addChunkCV(chunkCV, totalChunks);\n            state = new ChunkState(key, totalChunks, flags);\n        }\n        // Compress input bytes into the current chunk state.\n        final int want = CHUNK_LEN - state.length();\n        final int take = Math.min(want, length);\n        state.update(in, offset, take);\n        offset += take;\n        length -= take;\n    }\n}","void inputData(byte[],int,int)","digraph cfg_inputData {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: int access$500(org.apache.commons.codec.digest.Blake3$ChunkState)>($stack9)""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""3"" [label=""$stack12 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""4"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: org.apache.commons.codec.digest.Blake3$Output access$600(org.apache.commons.codec.digest.Blake3$ChunkState)>($stack12)""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""6"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: long access$800(org.apache.commons.codec.digest.Blake3$ChunkState)>($stack14)""];\n	""7"" [label=""$stack16 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int flags>""];\n	""8"" [label=""$stack17 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] key>""];\n	""9"" [label=""$stack18 = new org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""10"" [label=""$stack7 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""11"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: int access$500(org.apache.commons.codec.digest.Blake3$ChunkState)>($stack7)""];\n	""12"" [label=""$stack9 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""13"" [label=""chunkCV = 1024 - $stack10""];\n	""14"" [label=""chunkCV = staticinvoke <org.apache.commons.codec.digest.Blake3$Output: int[] access$700(org.apache.commons.codec.digest.Blake3$Output)>($stack13)""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack8 != 1024""];\n	""17"" [label=""if length <= 0""];\n	""18"" [label=""in := @parameter0: byte[]""];\n	""19"" [label=""length := @parameter2: int""];\n	""20"" [label=""length = length - totalChunks""];\n	""21"" [label=""offset := @parameter1: int""];\n	""22"" [label=""offset = offset + totalChunks""];\n	""23"" [label=""return""];\n	""24"" [label=""specialinvoke $stack18.<org.apache.commons.codec.digest.Blake3$ChunkState: void <init>(int[],long,int,org.apache.commons.codec.digest.Blake3$1)>($stack17, totalChunks, $stack16, null)""];\n	""25"" [label=""specialinvoke this.<org.apache.commons.codec.digest.Blake3$EngineState: void addChunkCV(int[],long)>(chunkCV, totalChunks)""];\n	""26"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: void access$900(org.apache.commons.codec.digest.Blake3$ChunkState,byte[],int,int)>($stack11, in, offset, totalChunks)""];\n	""27"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""28"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state> = $stack18""];\n	""29"" [label=""totalChunks = $stack15 + 1L""];\n	""30"" [label=""totalChunks = staticinvoke <java.lang.Math: int min(int,int)>(chunkCV, length)""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""30""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_goto""];\n	""16"" -> ""12""[label=""cfg_true""];\n	""16"" -> ""3""[label=""cfg_false""];\n	""17"" -> ""10""[label=""cfg_false""];\n	""17"" -> ""23""[label=""cfg_true""];\n	""18"" -> ""21""[label=""cfg_next""];\n	""19"" -> ""17""[label=""cfg_next""];\n	""2"" -> ""26""[label=""cfg_next""];\n	""20"" -> ""15""[label=""cfg_next""];\n	""21"" -> ""19""[label=""cfg_next""];\n	""22"" -> ""20""[label=""cfg_next""];\n	""24"" -> ""28""[label=""cfg_next""];\n	""25"" -> ""9""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""18""[label=""cfg_next""];\n	""28"" -> ""12""[label=""cfg_next""];\n	""29"" -> ""25""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""29""[label=""cfg_next""];\n	""7"" -> ""24""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$EngineState.outputHash(byte[],int,int)",Method,No Comment,"private void outputHash(final byte[] out, final int offset, final int length) {\n    // Starting with the Output from the current chunk, compute all the\n    // parent chaining values along the right edge of the tree, until we\n    // have the root Output.\n    Output output = state.output();\n    int parentNodesRemaining = stackLen;\n    while (parentNodesRemaining-- > 0) {\n        final int[] parentCV = cvStack[parentNodesRemaining];\n        output = parentOutput(parentCV, output.chainingValue(), key, flags);\n    }\n    output.rootOutputBytes(out, offset, length);\n}","void outputHash(byte[],int,int)","digraph cfg_outputHash {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int flags>""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] key>""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.digest.Blake3$Output: int[] access$700(org.apache.commons.codec.digest.Blake3$Output)>(output)""];\n	""4"" [label=""$stack7 = this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state>""];\n	""5"" [label=""$stack8 = parentNodesRemaining""];\n	""6"" [label=""$stack9 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[][] cvStack>""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack8 <= 0""];\n	""9"" [label=""length := @parameter2: int""];\n	""10"" [label=""offset := @parameter1: int""];\n	""11"" [label=""out := @parameter0: byte[]""];\n	""12"" [label=""output = staticinvoke <org.apache.commons.codec.digest.Blake3$ChunkState: org.apache.commons.codec.digest.Blake3$Output access$600(org.apache.commons.codec.digest.Blake3$ChunkState)>($stack7)""];\n	""13"" [label=""output = staticinvoke <org.apache.commons.codec.digest.Blake3: org.apache.commons.codec.digest.Blake3$Output access$1000(int[],int[],int[],int)>(parentCV, $stack12, $stack11, $stack10)""];\n	""14"" [label=""parentCV = $stack9[parentNodesRemaining]""];\n	""15"" [label=""parentNodesRemaining = parentNodesRemaining + -1""];\n	""16"" [label=""parentNodesRemaining = this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen>""];\n	""17"" [label=""return""];\n	""18"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3$Output: void access$1100(org.apache.commons.codec.digest.Blake3$Output,byte[],int,int)>(output, out, offset, length)""];\n	""19"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""16""[label=""cfg_next""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""14"" -> ""3""[label=""cfg_next""];\n	""15"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""5""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_goto""];\n	""8"" -> ""18""[label=""cfg_true""];\n	""8"" -> ""6""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$EngineState.popCV(),Method,No Comment,private int[] popCV() {\n    return cvStack[--stackLen];\n},int[] popCV(),"digraph cfg_popCV {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen>""];\n	""2"" [label=""$stack2 = $stack1 - 1""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[][] cvStack>""];\n	""4"" [label=""$stack4 = $stack3[$stack2]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""7"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen> = $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$EngineState.pushCV(int[]),Method,No Comment,private void pushCV(final int[] cv) {\n    cvStack[stackLen++] = cv;\n},void pushCV(int[]),"digraph cfg_pushCV {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen>""];\n	""2"" [label=""$stack3 = $stack2 + 1""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[][] cvStack>""];\n	""4"" [label=""$stack4[$stack2] = cv""];\n	""5"" [label=""cv := @parameter0: int[]""];\n	""6"" [label=""return""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""8"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen> = $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$EngineState.reset(),Method,No Comment,"private void reset() {\n    stackLen = 0;\n    Arrays.fill(cvStack, null);\n    state = new ChunkState(key, 0, flags);\n}",void reset(),"digraph cfg_reset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[][] cvStack>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int flags>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] key>""];\n	""4"" [label=""$stack4 = new org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke $stack4.<org.apache.commons.codec.digest.Blake3$ChunkState: void <init>(int[],long,int,org.apache.commons.codec.digest.Blake3$1)>($stack3, 0L, $stack2, null)""];\n	""7"" [label=""staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($stack1, null)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""9"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int stackLen> = 0""];\n	""10"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state> = $stack4""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$EngineState.<init>(int[],int)",Constructor,No Comment,"private EngineState(final int[] key, final int flags) {\n    this.key = key;\n    this.flags = flags;\n    state = new ChunkState(key, 0, flags);\n}","void <init>(int[],int)","digraph cfg_init {\n	""1"" [label=""$stack3 = newarray (int[])[54]""];\n	""2"" [label=""$stack4 = new org.apache.commons.codec.digest.Blake3$ChunkState""];\n	""3"" [label=""flags := @parameter1: int""];\n	""4"" [label=""key := @parameter0: int[]""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke $stack4.<org.apache.commons.codec.digest.Blake3$ChunkState: void <init>(int[],long,int,org.apache.commons.codec.digest.Blake3$1)>(key, 0L, flags, null)""];\n	""7"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$EngineState""];\n	""9"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int flags> = flags""];\n	""10"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int[] key> = key""];\n	""11"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: int[][] cvStack> = $stack3""];\n	""12"" [label=""this.<org.apache.commons.codec.digest.Blake3$EngineState: org.apache.commons.codec.digest.Blake3$ChunkState state> = $stack4""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.Blake3$Output.chainingValue(),Method,No Comment,"private int[] chainingValue() {\n    return Arrays.copyOf(compress(inputChainingValue, blockWords, blockLength, counter, flags), CHAINING_VALUE_INTS);\n}",int[] chainingValue(),"digraph cfg_chainingValue {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.Blake3$Output: int flags>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.digest.Blake3$Output: long counter>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.Blake3$Output: int blockLength>""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.digest.Blake3$Output: int[] blockWords>""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.digest.Blake3$Output: int[] inputChainingValue>""];\n	""6"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$200(int[],int[],int,long,int)>($stack5, $stack4, $stack3, $stack2, $stack1)""];\n	""7"" [label=""$stack7 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($stack6, 8)""];\n	""8"" [label=""return $stack7""];\n	""9"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$Output""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$Output.rootOutputBytes(byte[],int,int)",Method,No Comment,"private void rootOutputBytes(final byte[] out, int offset, int length) {\n    int outputBlockCounter = 0;\n    while (length > 0) {\n        int chunkLength = Math.min(OUT_LEN * 2, length);\n        length -= chunkLength;\n        final int[] words = compress(inputChainingValue, blockWords, blockLength, outputBlockCounter++, flags | ROOT);\n        int wordCounter = 0;\n        while (chunkLength > 0) {\n            final int wordLength = Math.min(Integer.BYTES, chunkLength);\n            packInt(words[wordCounter++], out, offset, wordLength);\n            offset += wordLength;\n            chunkLength -= wordLength;\n        }\n    }\n}","void rootOutputBytes(byte[],int,int)","digraph cfg_rootOutputBytes {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.Blake3$Output: int flags>""];\n	""2"" [label=""$stack11 = $stack10 | 8""];\n	""3"" [label=""$stack12 = (long) $stack9""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.digest.Blake3$Output: int blockLength>""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.digest.Blake3$Output: int[] blockWords>""];\n	""6"" [label=""$stack15 = this.<org.apache.commons.codec.digest.Blake3$Output: int[] inputChainingValue>""];\n	""7"" [label=""$stack16 = wordCounter""];\n	""8"" [label=""$stack17 = words[$stack16]""];\n	""9"" [label=""$stack9 = outputBlockCounter""];\n	""10"" [label=""chunkLength = chunkLength - wordLength""];\n	""11"" [label=""chunkLength = staticinvoke <java.lang.Math: int min(int,int)>(64, length)""];\n	""12"" [label=""goto""];\n	""13"" [label=""goto""];\n	""14"" [label=""if chunkLength <= 0""];\n	""15"" [label=""if length <= 0""];\n	""16"" [label=""length := @parameter2: int""];\n	""17"" [label=""length = length - chunkLength""];\n	""18"" [label=""offset := @parameter1: int""];\n	""19"" [label=""offset = offset + wordLength""];\n	""20"" [label=""out := @parameter0: byte[]""];\n	""21"" [label=""outputBlockCounter = 0""];\n	""22"" [label=""outputBlockCounter = outputBlockCounter + 1""];\n	""23"" [label=""return""];\n	""24"" [label=""staticinvoke <org.apache.commons.codec.digest.Blake3: void access$1200(int,byte[],int,int)>($stack17, out, offset, wordLength)""];\n	""25"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$Output""];\n	""26"" [label=""wordCounter = 0""];\n	""27"" [label=""wordCounter = wordCounter + 1""];\n	""28"" [label=""wordLength = staticinvoke <java.lang.Math: int min(int,int)>(4, chunkLength)""];\n	""29"" [label=""words = staticinvoke <org.apache.commons.codec.digest.Blake3: int[] access$200(int[],int[],int,long,int)>($stack15, $stack14, $stack13, $stack12, $stack11)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""15""[label=""cfg_goto""];\n	""13"" -> ""14""[label=""cfg_goto""];\n	""14"" -> ""12""[label=""cfg_true""];\n	""14"" -> ""28""[label=""cfg_false""];\n	""15"" -> ""11""[label=""cfg_false""];\n	""15"" -> ""23""[label=""cfg_true""];\n	""16"" -> ""21""[label=""cfg_next""];\n	""17"" -> ""6""[label=""cfg_next""];\n	""18"" -> ""16""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""29""[label=""cfg_next""];\n	""20"" -> ""18""[label=""cfg_next""];\n	""21"" -> ""15""[label=""cfg_next""];\n	""22"" -> ""3""[label=""cfg_next""];\n	""24"" -> ""19""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""14""[label=""cfg_next""];\n	""27"" -> ""8""[label=""cfg_next""];\n	""28"" -> ""7""[label=""cfg_next""];\n	""29"" -> ""26""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""27""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int)",Constructor,No Comment,"private Output(final int[] inputChainingValue, final int[] blockWords, final long counter, final int blockLength, final int flags) {\n    this.inputChainingValue = inputChainingValue;\n    this.blockWords = blockWords;\n    this.counter = counter;\n    this.blockLength = blockLength;\n    this.flags = flags;\n}","void <init>(int[],int[],long,int,int)","digraph cfg_init {\n	""1"" [label=""blockLength := @parameter3: int""];\n	""2"" [label=""blockWords := @parameter1: int[]""];\n	""3"" [label=""counter := @parameter2: long""];\n	""4"" [label=""flags := @parameter4: int""];\n	""5"" [label=""inputChainingValue := @parameter0: int[]""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.Blake3$Output""];\n	""9"" [label=""this.<org.apache.commons.codec.digest.Blake3$Output: int blockLength> = blockLength""];\n	""10"" [label=""this.<org.apache.commons.codec.digest.Blake3$Output: int flags> = flags""];\n	""11"" [label=""this.<org.apache.commons.codec.digest.Blake3$Output: int[] blockWords> = blockWords""];\n	""12"" [label=""this.<org.apache.commons.codec.digest.Blake3$Output: int[] inputChainingValue> = inputChainingValue""];\n	""13"" [label=""this.<org.apache.commons.codec.digest.Blake3$Output: long counter> = counter""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.MessageDigestAlgorithms.values(),Method,* Gets all constant values defined in this class.\n     *\n     * @return all constant values defined in this class.\n     * @since 1.11,"public static String[] values() {\n    // Do not use a constant array here as that can be changed externally by accident or design\n    return new String[] { MD2, MD5, SHA_1, SHA_224, SHA_256, SHA_384, SHA_512, SHA_512_224, SHA_512_256, SHA3_224, SHA3_256, SHA3_384, SHA3_512 };\n}",java.lang.String[] values(),"digraph cfg_values {\n	""1"" [label=""$stack0 = newarray (java.lang.String)[13]""];\n	""2"" [label=""$stack0[0] = \""MD2\""""];\n	""3"" [label=""$stack0[10] = \""SHA3-256\""""];\n	""4"" [label=""$stack0[11] = \""SHA3-384\""""];\n	""5"" [label=""$stack0[12] = \""SHA3-512\""""];\n	""6"" [label=""$stack0[1] = \""MD5\""""];\n	""7"" [label=""$stack0[2] = \""SHA-1\""""];\n	""8"" [label=""$stack0[3] = \""SHA-224\""""];\n	""9"" [label=""$stack0[4] = \""SHA-256\""""];\n	""10"" [label=""$stack0[5] = \""SHA-384\""""];\n	""11"" [label=""$stack0[6] = \""SHA-512\""""];\n	""12"" [label=""$stack0[7] = \""SHA-512/224\""""];\n	""13"" [label=""$stack0[8] = \""SHA-512/256\""""];\n	""14"" [label=""$stack0[9] = \""SHA3-224\""""];\n	""15"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MessageDigestAlgorithms.<init>(),Constructor,No Comment,private MessageDigestAlgorithms() {\n    // cannot be instantiated.\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.MessageDigestAlgorithms""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.MurmurHash3.fmix32(int),Method,* Performs the final avalanche mix step of the 32-bit hash function {@code MurmurHash3_x86_32}.\n     *\n     * @param hash The current hash\n     * @return The final hash,private static int fmix32(int hash) {\n    hash ^= hash >>> 16;\n    hash *= 0x85ebca6b;\n    hash ^= hash >>> 13;\n    hash *= 0xc2b2ae35;\n    hash ^= hash >>> 16;\n    return hash;\n},int fmix32(int),"digraph cfg_fmix32 {\n	""1"" [label=""$stack1 = hash >>> 16""];\n	""2"" [label=""$stack2 = hash >>> 13""];\n	""3"" [label=""$stack3 = hash >>> 16""];\n	""4"" [label=""hash := @parameter0: int""];\n	""5"" [label=""hash = hash * -1028477387""];\n	""6"" [label=""hash = hash * -2048144789""];\n	""7"" [label=""hash = hash ^ $stack1""];\n	""8"" [label=""hash = hash ^ $stack2""];\n	""9"" [label=""hash = hash ^ $stack3""];\n	""10"" [label=""return hash""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.MurmurHash3.fmix64(long),Method,* Performs the final avalanche mix step of the 64-bit hash function {@code MurmurHash3_x64_128}.\n     *\n     * @param hash The current hash\n     * @return The final hash,private static long fmix64(long hash) {\n    hash ^= hash >>> 33;\n    hash *= 0xff51afd7ed558ccdL;\n    hash ^= hash >>> 33;\n    hash *= 0xc4ceb9fe1a85ec53L;\n    hash ^= hash >>> 33;\n    return hash;\n},long fmix64(long),"digraph cfg_fmix64 {\n	""1"" [label=""$stack2 = hash >>> 33""];\n	""2"" [label=""$stack3 = hash >>> 33""];\n	""3"" [label=""$stack4 = hash >>> 33""];\n	""4"" [label=""hash := @parameter0: long""];\n	""5"" [label=""hash = hash * -4265267296055464877L""];\n	""6"" [label=""hash = hash * -49064778989728563L""];\n	""7"" [label=""hash = hash ^ $stack2""];\n	""8"" [label=""hash = hash ^ $stack3""];\n	""9"" [label=""hash = hash ^ $stack4""];\n	""10"" [label=""return hash""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianInt(byte[],int)",Method,* Gets the little-endian int from 4 bytes starting at the specified index.\n     *\n     * @param data The data\n     * @param index The index\n     * @return The little-endian int,"private static int getLittleEndianInt(final byte[] data, final int index) {\n    return data[index] & 0xff | (data[index + 1] & 0xff) << 8 | (data[index + 2] & 0xff) << 16 | (data[index + 3] & 0xff) << 24;\n}","int getLittleEndianInt(byte[],int)","digraph cfg_getLittleEndianInt {\n	""1"" [label=""$stack10 = $stack9 & 255""];\n	""2"" [label=""$stack11 = $stack6 | $stack7""];\n	""3"" [label=""$stack12 = $stack10 << 16""];\n	""4"" [label=""$stack13 = index + 3""];\n	""5"" [label=""$stack14 = data[$stack13]""];\n	""6"" [label=""$stack15 = $stack14 & 255""];\n	""7"" [label=""$stack16 = $stack11 | $stack12""];\n	""8"" [label=""$stack17 = $stack15 << 24""];\n	""9"" [label=""$stack18 = $stack16 | $stack17""];\n	""10"" [label=""$stack2 = data[index]""];\n	""11"" [label=""$stack3 = index + 1""];\n	""12"" [label=""$stack4 = data[$stack3]""];\n	""13"" [label=""$stack5 = $stack4 & 255""];\n	""14"" [label=""$stack6 = $stack2 & 255""];\n	""15"" [label=""$stack7 = $stack5 << 8""];\n	""16"" [label=""$stack8 = index + 2""];\n	""17"" [label=""$stack9 = data[$stack8]""];\n	""18"" [label=""data := @parameter0: byte[]""];\n	""19"" [label=""index := @parameter1: int""];\n	""20"" [label=""return $stack18""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""20""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianLong(byte[],int)",Method,* Gets the little-endian long from 8 bytes starting at the specified index.\n     *\n     * @param data The data\n     * @param index The index\n     * @return The little-endian long,"private static long getLittleEndianLong(final byte[] data, final int index) {\n    return (long) data[index] & 0xff | ((long) data[index + 1] & 0xff) << 8 | ((long) data[index + 2] & 0xff) << 16 | ((long) data[index + 3] & 0xff) << 24 | ((long) data[index + 4] & 0xff) << 32 | ((long) data[index + 5] & 0xff) << 40 | ((long) data[index + 6] & 0xff) << 48 | ((long) data[index + 7] & 0xff) << 56;\n}","long getLittleEndianLong(byte[],int)","digraph cfg_getLittleEndianLong {\n	""1"" [label=""$stack10 = index + 2""];\n	""2"" [label=""$stack11 = data[$stack10]""];\n	""3"" [label=""$stack12 = (long) $stack11""];\n	""4"" [label=""$stack13 = $stack12 & 255L""];\n	""5"" [label=""$stack14 = $stack8 | $stack9""];\n	""6"" [label=""$stack15 = $stack13 << 16""];\n	""7"" [label=""$stack16 = index + 3""];\n	""8"" [label=""$stack17 = data[$stack16]""];\n	""9"" [label=""$stack18 = (long) $stack17""];\n	""10"" [label=""$stack19 = $stack18 & 255L""];\n	""11"" [label=""$stack2 = data[index]""];\n	""12"" [label=""$stack20 = $stack14 | $stack15""];\n	""13"" [label=""$stack21 = $stack19 << 24""];\n	""14"" [label=""$stack22 = index + 4""];\n	""15"" [label=""$stack23 = data[$stack22]""];\n	""16"" [label=""$stack24 = (long) $stack23""];\n	""17"" [label=""$stack25 = $stack24 & 255L""];\n	""18"" [label=""$stack26 = $stack20 | $stack21""];\n	""19"" [label=""$stack27 = $stack25 << 32""];\n	""20"" [label=""$stack28 = index + 5""];\n	""21"" [label=""$stack29 = data[$stack28]""];\n	""22"" [label=""$stack3 = (long) $stack2""];\n	""23"" [label=""$stack30 = (long) $stack29""];\n	""24"" [label=""$stack31 = $stack30 & 255L""];\n	""25"" [label=""$stack32 = $stack26 | $stack27""];\n	""26"" [label=""$stack33 = $stack31 << 40""];\n	""27"" [label=""$stack34 = index + 6""];\n	""28"" [label=""$stack35 = data[$stack34]""];\n	""29"" [label=""$stack36 = (long) $stack35""];\n	""30"" [label=""$stack37 = $stack36 & 255L""];\n	""31"" [label=""$stack38 = $stack32 | $stack33""];\n	""32"" [label=""$stack39 = $stack37 << 48""];\n	""33"" [label=""$stack4 = index + 1""];\n	""34"" [label=""$stack40 = index + 7""];\n	""35"" [label=""$stack41 = data[$stack40]""];\n	""36"" [label=""$stack42 = (long) $stack41""];\n	""37"" [label=""$stack43 = $stack42 & 255L""];\n	""38"" [label=""$stack44 = $stack38 | $stack39""];\n	""39"" [label=""$stack45 = $stack43 << 56""];\n	""40"" [label=""$stack46 = $stack44 | $stack45""];\n	""41"" [label=""$stack5 = data[$stack4]""];\n	""42"" [label=""$stack6 = (long) $stack5""];\n	""43"" [label=""$stack7 = $stack6 & 255L""];\n	""44"" [label=""$stack8 = $stack3 & 255L""];\n	""45"" [label=""$stack9 = $stack7 << 8""];\n	""46"" [label=""data := @parameter0: byte[]""];\n	""47"" [label=""index := @parameter1: int""];\n	""48"" [label=""return $stack46""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""18""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""19""[label=""cfg_next""];\n	""18"" -> ""14""[label=""cfg_next""];\n	""19"" -> ""25""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""44""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""31""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""27""[label=""cfg_next""];\n	""32"" -> ""38""[label=""cfg_next""];\n	""33"" -> ""41""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""39""[label=""cfg_next""];\n	""38"" -> ""34""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""48""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""43""[label=""cfg_next""];\n	""43"" -> ""45""[label=""cfg_next""];\n	""44"" -> ""33""[label=""cfg_next""];\n	""45"" -> ""5""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.MurmurHash3.hash128(byte[]),Method,"* Generates 128-bit hash from the byte array with a default seed.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * int hash = MurmurHash3.hash128(data, offset, data.length, seed);\n     * </pre>\n     *\n     * <p>Note: The sign extension bug in {@link #hash128(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * @param data The input byte array\n     * @return The 128-bit hash (2 longs)\n     * @see #hash128(byte[], int, int, int)","public static long[] hash128(final byte[] data) {\n    return hash128(data, 0, data.length, DEFAULT_SEED);\n}",long[] hash128(byte[]),"digraph cfg_hash128 {\n	""1"" [label=""$stack1 = lengthof data""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long[] hash128(byte[],int,int,int)>(data, 0, $stack1, 104729)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int)",Method,"* Generates 128-bit hash from the byte array with the given offset, length and seed.\n     *\n     * <p>This is an implementation of the 128-bit hash function {@code MurmurHash3_x64_128}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * <p>This implementation contains a sign-extension bug in the seed initialization.\n     * This manifests if the seed is negative.</p>\n     *\n     * @param data The input byte array\n     * @param offset The first element of array\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 128-bit hash (2 longs)\n     * @deprecated Use {@link #hash128x64(byte[], int, int, int)}. This corrects the seed initialization.","@Deprecated\npublic static long[] hash128(final byte[] data, final int offset, final int length, final int seed) {\n    // ************\n    // Note: This deliberately fails to apply masking using 0xffffffffL to the seed\n    // to maintain behavioral compatibility with the original version.\n    // The implicit conversion to a long will extend a negative sign\n    // bit through the upper 32-bits of the long seed. These should be zero.\n    // ************\n    return hash128x64Internal(data, offset, length, seed);\n}","long[] hash128(byte[],int,int,int)","digraph cfg_hash128 {\n	""1"" [label=""$stack4 = (long) seed""];\n	""2"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long[] hash128x64Internal(byte[],int,int,long)>(data, offset, length, $stack4)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""length := @parameter2: int""];\n	""5"" [label=""offset := @parameter1: int""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""seed := @parameter3: int""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash128(String),Method,"* Generates 128-bit hash from a string with a default seed.\n     * <p>\n     * Before 1.14 the string was converted using default encoding.\n     * Since 1.14 the string is converted to bytes using UTF-8 encoding.\n     * </p>\n     * <p>\n     * This is a helper method that will produce the same result as:\n     * </p>\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * byte[] bytes = data.getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash3.hash128(bytes, offset, bytes.length, seed);\n     * </pre>\n     *\n     * <p>Note: The sign extension bug in {@link #hash128(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * @param data The input String\n     * @return The 128-bit hash (2 longs)\n     * @see #hash128(byte[], int, int, int)\n     * @deprecated Use {@link #hash128x64(byte[])} using the bytes returned from\n     * {@link String#getBytes(java.nio.charset.Charset)}.","@Deprecated\npublic static long[] hash128(final String data) {\n    final byte[] bytes = StringUtils.getBytesUtf8(data);\n    return hash128(bytes, 0, bytes.length, DEFAULT_SEED);\n}",long[] hash128(java.lang.String),"digraph cfg_hash128 {\n	""1"" [label=""$stack2 = lengthof bytes""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long[] hash128(byte[],int,int,int)>(bytes, 0, $stack2, 104729)""];\n	""3"" [label=""bytes = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""4"" [label=""data := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[]),Method,"* Generates 128-bit hash from the byte array with a seed of zero.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 0;\n     * int hash = MurmurHash3.hash128x64(data, offset, data.length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @return The 128-bit hash (2 longs)\n     * @see #hash128x64(byte[], int, int, int)\n     * @since 1.14","public static long[] hash128x64(final byte[] data) {\n    return hash128x64(data, 0, data.length, 0);\n}",long[] hash128x64(byte[]),"digraph cfg_hash128x64 {\n	""1"" [label=""$stack1 = lengthof data""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long[] hash128x64(byte[],int,int,int)>(data, 0, $stack1, 0)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int)",Method,"* Generates 128-bit hash from the byte array with the given offset, length and seed.\n     *\n     * <p>This is an implementation of the 128-bit hash function {@code MurmurHash3_x64_128}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * @param data The input byte array\n     * @param offset The first element of array\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 128-bit hash (2 longs)\n     * @since 1.14","public static long[] hash128x64(final byte[] data, final int offset, final int length, final int seed) {\n    // Use an unsigned 32-bit integer as the seed\n    return hash128x64Internal(data, offset, length, seed & 0xffffffffL);\n}","long[] hash128x64(byte[],int,int,int)","digraph cfg_hash128x64 {\n	""1"" [label=""$stack4 = (long) seed""];\n	""2"" [label=""$stack5 = $stack4 & 4294967295L""];\n	""3"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long[] hash128x64Internal(byte[],int,int,long)>(data, offset, length, $stack5)""];\n	""4"" [label=""data := @parameter0: byte[]""];\n	""5"" [label=""length := @parameter2: int""];\n	""6"" [label=""offset := @parameter1: int""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""seed := @parameter3: int""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long)",Method,"* Generates 128-bit hash from the byte array with the given offset, length and seed.\n     *\n     * <p>This is an implementation of the 128-bit hash function {@code MurmurHash3_x64_128}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * @param data The input byte array\n     * @param offset The first element of array\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 128-bit hash (2 longs)","private static long[] hash128x64Internal(final byte[] data, final int offset, final int length, final long seed) {\n    long h1 = seed;\n    long h2 = seed;\n    final int nblocks = length >> 4;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = offset + (i << 4);\n        long k1 = getLittleEndianLong(data, index);\n        long k2 = getLittleEndianLong(data, index + 8);\n        // mix functions for k1\n        k1 *= C1;\n        k1 = Long.rotateLeft(k1, R1);\n        k1 *= C2;\n        h1 ^= k1;\n        h1 = Long.rotateLeft(h1, R2);\n        h1 += h2;\n        h1 = h1 * M + N1;\n        // mix functions for k2\n        k2 *= C2;\n        k2 = Long.rotateLeft(k2, R3);\n        k2 *= C1;\n        h2 ^= k2;\n        h2 = Long.rotateLeft(h2, R1);\n        h2 += h1;\n        h2 = h2 * M + N2;\n    }\n    // tail\n    long k1 = 0;\n    long k2 = 0;\n    final int index = offset + (nblocks << 4);\n    switch(offset + length - index) {\n        case 15:\n            k2 ^= ((long) data[index + 14] & 0xff) << 48;\n        // falls-through\n        case 14:\n            k2 ^= ((long) data[index + 13] & 0xff) << 40;\n        // falls-through\n        case 13:\n            k2 ^= ((long) data[index + 12] & 0xff) << 32;\n        // falls-through\n        case 12:\n            k2 ^= ((long) data[index + 11] & 0xff) << 24;\n        // falls-through\n        case 11:\n            k2 ^= ((long) data[index + 10] & 0xff) << 16;\n        // falls-through\n        case 10:\n            k2 ^= ((long) data[index + 9] & 0xff) << 8;\n        // falls-through\n        case 9:\n            k2 ^= data[index + 8] & 0xff;\n            k2 *= C2;\n            k2 = Long.rotateLeft(k2, R3);\n            k2 *= C1;\n            h2 ^= k2;\n        // falls-through\n        case 8:\n            k1 ^= ((long) data[index + 7] & 0xff) << 56;\n        // falls-through\n        case 7:\n            k1 ^= ((long) data[index + 6] & 0xff) << 48;\n        // falls-through\n        case 6:\n            k1 ^= ((long) data[index + 5] & 0xff) << 40;\n        // falls-through\n        case 5:\n            k1 ^= ((long) data[index + 4] & 0xff) << 32;\n        // falls-through\n        case 4:\n            k1 ^= ((long) data[index + 3] & 0xff) << 24;\n        // falls-through\n        case 3:\n            k1 ^= ((long) data[index + 2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            k1 ^= ((long) data[index + 1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            k1 ^= data[index] & 0xff;\n            k1 *= C1;\n            k1 = Long.rotateLeft(k1, R1);\n            k1 *= C2;\n            h1 ^= k1;\n    }\n    // finalization\n    h1 ^= length;\n    h2 ^= length;\n    h1 += h2;\n    h2 += h1;\n    h1 = fmix64(h1);\n    h2 = fmix64(h2);\n    h1 += h2;\n    h2 += h1;\n    return new long[] { h1, h2 };\n}","long[] hash128x64Internal(byte[],int,int,long)","digraph cfg_hash128x64Internal {\n	""1"" [label=""$stack16 = nblocks << 4""];\n	""2"" [label=""$stack17 = offset + length""];\n	""3"" [label=""$stack18 = $stack17 - k2""];\n	""4"" [label=""$stack19 = k2 + 14""];\n	""5"" [label=""$stack20 = data[$stack19]""];\n	""6"" [label=""$stack21 = (long) $stack20""];\n	""7"" [label=""$stack22 = $stack21 & 255L""];\n	""8"" [label=""$stack23 = $stack22 << 48""];\n	""9"" [label=""$stack24 = k2 + 13""];\n	""10"" [label=""$stack25 = data[$stack24]""];\n	""11"" [label=""$stack26 = (long) $stack25""];\n	""12"" [label=""$stack27 = $stack26 & 255L""];\n	""13"" [label=""$stack28 = $stack27 << 40""];\n	""14"" [label=""$stack29 = k2 + 12""];\n	""15"" [label=""$stack30 = data[$stack29]""];\n	""16"" [label=""$stack31 = (long) $stack30""];\n	""17"" [label=""$stack32 = $stack31 & 255L""];\n	""18"" [label=""$stack33 = $stack32 << 32""];\n	""19"" [label=""$stack34 = k2 + 11""];\n	""20"" [label=""$stack35 = data[$stack34]""];\n	""21"" [label=""$stack36 = (long) $stack35""];\n	""22"" [label=""$stack37 = $stack36 & 255L""];\n	""23"" [label=""$stack38 = $stack37 << 24""];\n	""24"" [label=""$stack39 = k2 + 10""];\n	""25"" [label=""$stack40 = data[$stack39]""];\n	""26"" [label=""$stack41 = (long) $stack40""];\n	""27"" [label=""$stack42 = $stack41 & 255L""];\n	""28"" [label=""$stack43 = $stack42 << 16""];\n	""29"" [label=""$stack44 = k2 + 9""];\n	""30"" [label=""$stack45 = data[$stack44]""];\n	""31"" [label=""$stack46 = (long) $stack45""];\n	""32"" [label=""$stack47 = $stack46 & 255L""];\n	""33"" [label=""$stack48 = $stack47 << 8""];\n	""34"" [label=""$stack49 = k2 + 8""];\n	""35"" [label=""$stack50 = data[$stack49]""];\n	""36"" [label=""$stack51 = $stack50 & 255""];\n	""37"" [label=""$stack52 = (long) $stack51""];\n	""38"" [label=""$stack53 = k2 + 7""];\n	""39"" [label=""$stack54 = data[$stack53]""];\n	""40"" [label=""$stack55 = (long) $stack54""];\n	""41"" [label=""$stack56 = $stack55 & 255L""];\n	""42"" [label=""$stack57 = $stack56 << 56""];\n	""43"" [label=""$stack58 = k2 + 6""];\n	""44"" [label=""$stack59 = data[$stack58]""];\n	""45"" [label=""$stack60 = (long) $stack59""];\n	""46"" [label=""$stack61 = $stack60 & 255L""];\n	""47"" [label=""$stack62 = $stack61 << 48""];\n	""48"" [label=""$stack63 = k2 + 5""];\n	""49"" [label=""$stack64 = data[$stack63]""];\n	""50"" [label=""$stack65 = (long) $stack64""];\n	""51"" [label=""$stack66 = $stack65 & 255L""];\n	""52"" [label=""$stack67 = $stack66 << 40""];\n	""53"" [label=""$stack68 = k2 + 4""];\n	""54"" [label=""$stack69 = data[$stack68]""];\n	""55"" [label=""$stack70 = (long) $stack69""];\n	""56"" [label=""$stack71 = $stack70 & 255L""];\n	""57"" [label=""$stack72 = $stack71 << 32""];\n	""58"" [label=""$stack73 = k2 + 3""];\n	""59"" [label=""$stack74 = data[$stack73]""];\n	""60"" [label=""$stack75 = (long) $stack74""];\n	""61"" [label=""$stack76 = $stack75 & 255L""];\n	""62"" [label=""$stack77 = $stack76 << 24""];\n	""63"" [label=""$stack78 = k2 + 2""];\n	""64"" [label=""$stack79 = data[$stack78]""];\n	""65"" [label=""$stack80 = (long) $stack79""];\n	""66"" [label=""$stack81 = $stack80 & 255L""];\n	""67"" [label=""$stack82 = $stack81 << 16""];\n	""68"" [label=""$stack83 = k2 + 1""];\n	""69"" [label=""$stack84 = data[$stack83]""];\n	""70"" [label=""$stack85 = (long) $stack84""];\n	""71"" [label=""$stack86 = $stack85 & 255L""];\n	""72"" [label=""$stack87 = $stack86 << 8""];\n	""73"" [label=""$stack88 = data[k2]""];\n	""74"" [label=""$stack89 = $stack88 & 255""];\n	""75"" [label=""$stack90 = (long) $stack89""];\n	""76"" [label=""$stack91 = (long) length""];\n	""77"" [label=""$stack92 = (long) length""];\n	""78"" [label=""$stack93 = newarray (long)[2]""];\n	""79"" [label=""$stack93[0] = h1""];\n	""80"" [label=""$stack93[1] = h2""];\n	""81"" [label=""$stack94 = i << 4""];\n	""82"" [label=""$stack95 = index + 8""];\n	""83"" [label=""$stack96 = h1 * 5L""];\n	""84"" [label=""$stack97 = h2 * 5L""];\n	""85"" [label=""data := @parameter0: byte[]""];\n	""86"" [label=""goto""];\n	""87"" [label=""h1 = $stack96 + 1390208809L""];\n	""88"" [label=""h1 = h1 + h2""];\n	""89"" [label=""h1 = h1 + h2""];\n	""90"" [label=""h1 = h1 + h2""];\n	""91"" [label=""h1 = h1 ^ $stack91""];\n	""92"" [label=""h1 = h1 ^ i""];\n	""93"" [label=""h1 = h1 ^ k1""];\n	""94"" [label=""h1 = seed""];\n	""95"" [label=""h1 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(h1, 27)""];\n	""96"" [label=""h1 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(h1)""];\n	""97"" [label=""h2 = $stack97 + 944331445L""];\n	""98"" [label=""h2 = h2 + h1""];\n	""99"" [label=""h2 = h2 + h1""];\n	""100"" [label=""h2 = h2 + h1""];\n	""101"" [label=""h2 = h2 ^ $stack92""];\n	""102"" [label=""h2 = h2 ^ k1""];\n	""103"" [label=""h2 = h2 ^ k2""];\n	""104"" [label=""h2 = seed""];\n	""105"" [label=""h2 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(h2, 31)""];\n	""106"" [label=""h2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(h2)""];\n	""107"" [label=""i = 0""];\n	""108"" [label=""i = 0L""];\n	""109"" [label=""i = i * -8663945395140668459L""];\n	""110"" [label=""i = i * 5545529020109919103L""];\n	""111"" [label=""i = i + 1""];\n	""112"" [label=""i = i ^ $stack57""];\n	""113"" [label=""i = i ^ $stack62""];\n	""114"" [label=""i = i ^ $stack67""];\n	""115"" [label=""i = i ^ $stack72""];\n	""116"" [label=""i = i ^ $stack77""];\n	""117"" [label=""i = i ^ $stack82""];\n	""118"" [label=""i = i ^ $stack87""];\n	""119"" [label=""i = i ^ $stack90""];\n	""120"" [label=""i = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(i, 31)""];\n	""121"" [label=""if i >= nblocks""];\n	""122"" [label=""index = offset + $stack94""];\n	""123"" [label=""k1 = 0L""];\n	""124"" [label=""k1 = k1 * -8663945395140668459L""];\n	""125"" [label=""k1 = k1 * -8663945395140668459L""];\n	""126"" [label=""k1 = k1 * 5545529020109919103L""];\n	""127"" [label=""k1 = k1 * 5545529020109919103L""];\n	""128"" [label=""k1 = k1 ^ $stack23""];\n	""129"" [label=""k1 = k1 ^ $stack28""];\n	""130"" [label=""k1 = k1 ^ $stack33""];\n	""131"" [label=""k1 = k1 ^ $stack38""];\n	""132"" [label=""k1 = k1 ^ $stack43""];\n	""133"" [label=""k1 = k1 ^ $stack48""];\n	""134"" [label=""k1 = k1 ^ $stack52""];\n	""135"" [label=""k1 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k1, 31)""];\n	""136"" [label=""k1 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k1, 33)""];\n	""137"" [label=""k1 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long getLittleEndianLong(byte[],int)>(data, index)""];\n	""138"" [label=""k2 = k2 * -8663945395140668459L""];\n	""139"" [label=""k2 = k2 * 5545529020109919103L""];\n	""140"" [label=""k2 = offset + $stack16""];\n	""141"" [label=""k2 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k2, 33)""];\n	""142"" [label=""k2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long getLittleEndianLong(byte[],int)>(data, $stack95)""];\n	""143"" [label=""length := @parameter2: int""];\n	""144"" [label=""nblocks = length >> 4""];\n	""145"" [label=""offset := @parameter1: int""];\n	""146"" [label=""return $stack93""];\n	""147"" [label=""seed := @parameter3: long""];\n	""148"" [label=""switch($stack18) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     case 8:     case 9:     case 10:     case 11:     case 12:     case 13:     case 14:     case 15:     default:  \}""];\n	""1"" -> ""140""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""78""[label=""cfg_next""];\n	""101"" -> ""89""[label=""cfg_next""];\n	""102"" -> ""38""[label=""cfg_next""];\n	""103"" -> ""105""[label=""cfg_next""];\n	""104"" -> ""144""[label=""cfg_next""];\n	""105"" -> ""98""[label=""cfg_next""];\n	""106"" -> ""90""[label=""cfg_next""];\n	""107"" -> ""121""[label=""cfg_next""];\n	""108"" -> ""123""[label=""cfg_next""];\n	""109"" -> ""120""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""110"" -> ""92""[label=""cfg_next""];\n	""111"" -> ""86""[label=""cfg_next""];\n	""112"" -> ""43""[label=""cfg_next""];\n	""113"" -> ""48""[label=""cfg_next""];\n	""114"" -> ""53""[label=""cfg_next""];\n	""115"" -> ""58""[label=""cfg_next""];\n	""116"" -> ""63""[label=""cfg_next""];\n	""117"" -> ""68""[label=""cfg_next""];\n	""118"" -> ""73""[label=""cfg_next""];\n	""119"" -> ""109""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""120"" -> ""110""[label=""cfg_next""];\n	""121"" -> ""108""[label=""cfg_true""];\n	""121"" -> ""81""[label=""cfg_false""];\n	""122"" -> ""137""[label=""cfg_next""];\n	""123"" -> ""1""[label=""cfg_next""];\n	""124"" -> ""135""[label=""cfg_next""];\n	""125"" -> ""102""[label=""cfg_next""];\n	""126"" -> ""93""[label=""cfg_next""];\n	""127"" -> ""136""[label=""cfg_next""];\n	""128"" -> ""9""[label=""cfg_next""];\n	""129"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""129""[label=""cfg_next""];\n	""130"" -> ""19""[label=""cfg_next""];\n	""131"" -> ""24""[label=""cfg_next""];\n	""132"" -> ""29""[label=""cfg_next""];\n	""133"" -> ""34""[label=""cfg_next""];\n	""134"" -> ""127""[label=""cfg_next""];\n	""135"" -> ""126""[label=""cfg_next""];\n	""136"" -> ""125""[label=""cfg_next""];\n	""137"" -> ""82""[label=""cfg_next""];\n	""138"" -> ""103""[label=""cfg_next""];\n	""139"" -> ""141""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""140"" -> ""2""[label=""cfg_next""];\n	""141"" -> ""138""[label=""cfg_next""];\n	""142"" -> ""124""[label=""cfg_next""];\n	""143"" -> ""147""[label=""cfg_next""];\n	""144"" -> ""107""[label=""cfg_next""];\n	""145"" -> ""143""[label=""cfg_next""];\n	""147"" -> ""94""[label=""cfg_next""];\n	""148"" -> ""14""[label=""cfg_switch""];\n	""148"" -> ""19""[label=""cfg_switch""];\n	""148"" -> ""24""[label=""cfg_switch""];\n	""148"" -> ""29""[label=""cfg_switch""];\n	""148"" -> ""34""[label=""cfg_switch""];\n	""148"" -> ""38""[label=""cfg_switch""];\n	""148"" -> ""4""[label=""cfg_switch""];\n	""148"" -> ""43""[label=""cfg_switch""];\n	""148"" -> ""48""[label=""cfg_switch""];\n	""148"" -> ""53""[label=""cfg_switch""];\n	""148"" -> ""58""[label=""cfg_switch""];\n	""148"" -> ""63""[label=""cfg_switch""];\n	""148"" -> ""68""[label=""cfg_switch""];\n	""148"" -> ""73""[label=""cfg_switch""];\n	""148"" -> ""76""[label=""cfg_switch""];\n	""148"" -> ""9""[label=""cfg_switch""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""130""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""131""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""132""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""148""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""133""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""134""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""112""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""113""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""114""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""57""[label=""cfg_next""];\n	""57"" -> ""115""[label=""cfg_next""];\n	""58"" -> ""59""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""62""[label=""cfg_next""];\n	""62"" -> ""116""[label=""cfg_next""];\n	""63"" -> ""64""[label=""cfg_next""];\n	""64"" -> ""65""[label=""cfg_next""];\n	""65"" -> ""66""[label=""cfg_next""];\n	""66"" -> ""67""[label=""cfg_next""];\n	""67"" -> ""117""[label=""cfg_next""];\n	""68"" -> ""69""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""71""[label=""cfg_next""];\n	""71"" -> ""72""[label=""cfg_next""];\n	""72"" -> ""118""[label=""cfg_next""];\n	""73"" -> ""74""[label=""cfg_next""];\n	""74"" -> ""75""[label=""cfg_next""];\n	""75"" -> ""119""[label=""cfg_next""];\n	""76"" -> ""91""[label=""cfg_next""];\n	""77"" -> ""101""[label=""cfg_next""];\n	""78"" -> ""79""[label=""cfg_next""];\n	""79"" -> ""80""[label=""cfg_next""];\n	""8"" -> ""128""[label=""cfg_next""];\n	""80"" -> ""146""[label=""cfg_next""];\n	""81"" -> ""122""[label=""cfg_next""];\n	""82"" -> ""142""[label=""cfg_next""];\n	""83"" -> ""87""[label=""cfg_next""];\n	""84"" -> ""97""[label=""cfg_next""];\n	""85"" -> ""145""[label=""cfg_next""];\n	""86"" -> ""121""[label=""cfg_goto""];\n	""87"" -> ""139""[label=""cfg_next""];\n	""88"" -> ""83""[label=""cfg_next""];\n	""89"" -> ""99""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""100""[label=""cfg_next""];\n	""91"" -> ""77""[label=""cfg_next""];\n	""92"" -> ""76""[label=""cfg_next""];\n	""93"" -> ""95""[label=""cfg_next""];\n	""94"" -> ""104""[label=""cfg_next""];\n	""95"" -> ""88""[label=""cfg_next""];\n	""96"" -> ""106""[label=""cfg_next""];\n	""97"" -> ""111""[label=""cfg_next""];\n	""98"" -> ""84""[label=""cfg_next""];\n	""99"" -> ""96""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.MurmurHash3.hash32(byte[]),Method,"* Generates 32-bit hash from the byte array with a default seed.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * int hash = MurmurHash3.hash32(data, offset, data.length, seed);\n     * </pre>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @param data The input byte array\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int, int)\n     * @deprecated Use {@link #hash32x86(byte[], int, int, int)}. This corrects the processing of trailing bytes.","@Deprecated\npublic static int hash32(final byte[] data) {\n    return hash32(data, 0, data.length, DEFAULT_SEED);\n}",int hash32(byte[]),"digraph cfg_hash32 {\n	""1"" [label=""$stack1 = lengthof data""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(byte[],int,int,int)>(data, 0, $stack1, 104729)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int)",Method,"* Generates 32-bit hash from the byte array with the given length and a default seed.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * int hash = MurmurHash3.hash32(data, offset, length, seed);\n     * </pre>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @param data The input byte array\n     * @param length The length of array\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int, int)\n     * @deprecated Use {@link #hash32x86(byte[], int, int, int)}. This corrects the processing of trailing bytes.","@Deprecated\npublic static int hash32(final byte[] data, final int length) {\n    return hash32(data, length, DEFAULT_SEED);\n}","int hash32(byte[],int)","digraph cfg_hash32 {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(byte[],int,int)>(data, length, 104729)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter1: int""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int)",Method,"* Generates 32-bit hash from the byte array with the given length and seed. This is a\n     * helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int hash = MurmurHash3.hash32(data, offset, length, seed);\n     * </pre>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @param data The input byte array\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int, int)\n     * @deprecated Use {@link #hash32x86(byte[], int, int, int)}. This corrects the processing of trailing bytes.","@Deprecated\npublic static int hash32(final byte[] data, final int length, final int seed) {\n    return hash32(data, 0, length, seed);\n}","int hash32(byte[],int,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(byte[],int,int,int)>(data, 0, length, seed)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter1: int""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""seed := @parameter2: int""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int)",Method,"* Generates 32-bit hash from the byte array with the given offset, length and seed.\n     *\n     * <p>This is an implementation of the 32-bit hash function {@code MurmurHash3_x86_32}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @param data The input byte array\n     * @param offset The offset of data\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 32-bit hash\n     * @deprecated Use {@link #hash32x86(byte[], int, int, int)}. This corrects the processing of trailing bytes.","@Deprecated\npublic static int hash32(final byte[] data, final int offset, final int length, final int seed) {\n    int hash = seed;\n    final int nblocks = length >> 2;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = offset + (i << 2);\n        final int k = getLittleEndianInt(data, index);\n        hash = mix32(k, hash);\n    }\n    // tail\n    // Note: This fails to apply masking using 0xff to the 3 remaining bytes.\n    final int index = offset + (nblocks << 2);\n    int k1 = 0;\n    switch(offset + length - index) {\n        case 3:\n            k1 ^= data[index + 2] << 16;\n        // falls-through\n        case 2:\n            k1 ^= data[index + 1] << 8;\n        // falls-through\n        case 1:\n            k1 ^= data[index];\n            // mix functions\n            k1 *= C1_32;\n            k1 = Integer.rotateLeft(k1, R1_32);\n            k1 *= C2_32;\n            hash ^= k1;\n    }\n    hash ^= length;\n    return fmix32(hash);\n}","int hash32(byte[],int,int,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack10 = offset + length""];\n	""2"" [label=""$stack11 = $stack10 - i""];\n	""3"" [label=""$stack12 = i + 2""];\n	""4"" [label=""$stack13 = data[$stack12]""];\n	""5"" [label=""$stack14 = $stack13 << 16""];\n	""6"" [label=""$stack15 = i + 1""];\n	""7"" [label=""$stack16 = data[$stack15]""];\n	""8"" [label=""$stack17 = $stack16 << 8""];\n	""9"" [label=""$stack18 = data[i]""];\n	""10"" [label=""$stack19 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int fmix32(int)>(hash)""];\n	""11"" [label=""$stack20 = i << 2""];\n	""12"" [label=""$stack9 = nblocks << 2""];\n	""13"" [label=""data := @parameter0: byte[]""];\n	""14"" [label=""goto""];\n	""15"" [label=""hash = hash ^ index""];\n	""16"" [label=""hash = hash ^ length""];\n	""17"" [label=""hash = seed""];\n	""18"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>(k, hash)""];\n	""19"" [label=""i = 0""];\n	""20"" [label=""i = i + 1""];\n	""21"" [label=""i = offset + $stack9""];\n	""22"" [label=""if i >= nblocks""];\n	""23"" [label=""index = 0""];\n	""24"" [label=""index = index * -862048943""];\n	""25"" [label=""index = index * 461845907""];\n	""26"" [label=""index = index ^ $stack14""];\n	""27"" [label=""index = index ^ $stack17""];\n	""28"" [label=""index = index ^ $stack18""];\n	""29"" [label=""index = offset + $stack20""];\n	""30"" [label=""index = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(index, 15)""];\n	""31"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int getLittleEndianInt(byte[],int)>(data, index)""];\n	""32"" [label=""length := @parameter2: int""];\n	""33"" [label=""nblocks = length >> 2""];\n	""34"" [label=""offset := @parameter1: int""];\n	""35"" [label=""return $stack19""];\n	""36"" [label=""seed := @parameter3: int""];\n	""37"" [label=""switch($stack11) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""35""[label=""cfg_next""];\n	""11"" -> ""29""[label=""cfg_next""];\n	""12"" -> ""21""[label=""cfg_next""];\n	""13"" -> ""34""[label=""cfg_next""];\n	""14"" -> ""22""[label=""cfg_goto""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""10""[label=""cfg_next""];\n	""17"" -> ""33""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""22""[label=""cfg_next""];\n	""2"" -> ""37""[label=""cfg_next""];\n	""20"" -> ""14""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""11""[label=""cfg_false""];\n	""22"" -> ""12""[label=""cfg_true""];\n	""23"" -> ""1""[label=""cfg_next""];\n	""24"" -> ""30""[label=""cfg_next""];\n	""25"" -> ""15""[label=""cfg_next""];\n	""26"" -> ""6""[label=""cfg_next""];\n	""27"" -> ""9""[label=""cfg_next""];\n	""28"" -> ""24""[label=""cfg_next""];\n	""29"" -> ""31""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""25""[label=""cfg_next""];\n	""31"" -> ""18""[label=""cfg_next""];\n	""32"" -> ""36""[label=""cfg_next""];\n	""33"" -> ""19""[label=""cfg_next""];\n	""34"" -> ""32""[label=""cfg_next""];\n	""36"" -> ""17""[label=""cfg_next""];\n	""37"" -> ""16""[label=""cfg_switch""];\n	""37"" -> ""3""[label=""cfg_switch""];\n	""37"" -> ""6""[label=""cfg_switch""];\n	""37"" -> ""9""[label=""cfg_switch""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""26""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""27""[label=""cfg_next""];\n	""9"" -> ""28""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash32(long),Method,"* Generates 32-bit hash from a long with a default seed value.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * int hash = MurmurHash3.hash32x86(ByteBuffer.allocate(8)\n     *                                            .putLong(data)\n     *                                            .array(), offset, 8, seed);\n     * </pre>\n     *\n     * @param data The long to hash\n     * @return The 32-bit hash\n     * @see #hash32x86(byte[], int, int, int)","public static int hash32(final long data) {\n    return hash32(data, DEFAULT_SEED);\n}",int hash32(long),"digraph cfg_hash32 {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(long,int)>(data, 104729)""];\n	""2"" [label=""data := @parameter0: long""];\n	""3"" [label=""return $stack2""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,int)",Method,"* Generates 32-bit hash from a long with the given seed.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int hash = MurmurHash3.hash32x86(ByteBuffer.allocate(8)\n     *                                            .putLong(data)\n     *                                            .array(), offset, 8, seed);\n     * </pre>\n     *\n     * @param data The long to hash\n     * @param seed The initial seed value\n     * @return The 32-bit hash\n     * @see #hash32x86(byte[], int, int, int)","public static int hash32(final long data, final int seed) {\n    int hash = seed;\n    final long r0 = Long.reverseBytes(data);\n    hash = mix32((int) r0, hash);\n    hash = mix32((int) (r0 >>> 32), hash);\n    hash ^= Long.BYTES;\n    return fmix32(hash);\n}","int hash32(long,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack6 = (int) r0""];\n	""2"" [label=""$stack7 = r0 >>> 32""];\n	""3"" [label=""$stack8 = (int) $stack7""];\n	""4"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int fmix32(int)>(hash)""];\n	""5"" [label=""data := @parameter0: long""];\n	""6"" [label=""hash = hash ^ 8""];\n	""7"" [label=""hash = seed""];\n	""8"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack6, hash)""];\n	""9"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack8, hash)""];\n	""10"" [label=""r0 = staticinvoke <java.lang.Long: long reverseBytes(long)>(data)""];\n	""11"" [label=""return $stack9""];\n	""12"" [label=""seed := @parameter1: int""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long)",Method,"* Generates 32-bit hash from two longs with a default seed value.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * int hash = MurmurHash3.hash32x86(ByteBuffer.allocate(16)\n     *                                            .putLong(data1)\n     *                                            .putLong(data2)\n     *                                            .array(), offset, 16, seed);\n     * </pre>\n     *\n     * @param data1 The first long to hash\n     * @param data2 The second long to hash\n     * @return The 32-bit hash\n     * @see #hash32x86(byte[], int, int, int)","public static int hash32(final long data1, final long data2) {\n    return hash32(data1, data2, DEFAULT_SEED);\n}","int hash32(long,long)","digraph cfg_hash32 {\n	""1"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(long,long,int)>(data1, data2, 104729)""];\n	""2"" [label=""data1 := @parameter0: long""];\n	""3"" [label=""data2 := @parameter1: long""];\n	""4"" [label=""return $stack4""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int)",Method,"* Generates 32-bit hash from two longs with the given seed.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int hash = MurmurHash3.hash32x86(ByteBuffer.allocate(16)\n     *                                            .putLong(data1)\n     *                                            .putLong(data2)\n     *                                            .array(), offset, 16, seed);\n     * </pre>\n     *\n     * @param data1 The first long to hash\n     * @param data2 The second long to hash\n     * @param seed The initial seed value\n     * @return The 32-bit hash\n     * @see #hash32x86(byte[], int, int, int)","public static int hash32(final long data1, final long data2, final int seed) {\n    int hash = seed;\n    final long r0 = Long.reverseBytes(data1);\n    final long r1 = Long.reverseBytes(data2);\n    hash = mix32((int) r0, hash);\n    hash = mix32((int) (r0 >>> 32), hash);\n    hash = mix32((int) r1, hash);\n    hash = mix32((int) (r1 >>> 32), hash);\n    hash ^= Long.BYTES * 2;\n    return fmix32(hash);\n}","int hash32(long,long,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack10 = (int) r0""];\n	""2"" [label=""$stack11 = r0 >>> 32""];\n	""3"" [label=""$stack12 = (int) $stack11""];\n	""4"" [label=""$stack13 = (int) r1""];\n	""5"" [label=""$stack14 = r1 >>> 32""];\n	""6"" [label=""$stack15 = (int) $stack14""];\n	""7"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int fmix32(int)>(hash)""];\n	""8"" [label=""data1 := @parameter0: long""];\n	""9"" [label=""data2 := @parameter1: long""];\n	""10"" [label=""hash = hash ^ 16""];\n	""11"" [label=""hash = seed""];\n	""12"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack10, hash)""];\n	""13"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack12, hash)""];\n	""14"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack13, hash)""];\n	""15"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>($stack15, hash)""];\n	""16"" [label=""r0 = staticinvoke <java.lang.Long: long reverseBytes(long)>(data1)""];\n	""17"" [label=""r1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(data2)""];\n	""18"" [label=""return $stack16""];\n	""19"" [label=""seed := @parameter2: int""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""13"" -> ""4""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""19"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""18""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""19""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash32(String),Method,"* Generates 32-bit hash from a string with a default seed.\n     * <p>\n     * Before 1.14 the string was converted using default encoding.\n     * Since 1.14 the string is converted to bytes using UTF-8 encoding.\n     * </p>\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * byte[] bytes = data.getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash3.hash32(bytes, offset, bytes.length, seed);\n     * </pre>\n     *\n     * <p>This implementation contains a sign-extension bug in the finalization step of\n     * any bytes left over from dividing the length by 4. This manifests if any of these\n     * bytes are negative.</p>\n     *\n     * @param data The input string\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int, int)\n     * @deprecated Use {@link #hash32x86(byte[], int, int, int)} with the bytes returned from\n     * {@link String#getBytes(java.nio.charset.Charset)}. This corrects the processing of trailing bytes.","@Deprecated\npublic static int hash32(final String data) {\n    final byte[] bytes = StringUtils.getBytesUtf8(data);\n    return hash32(bytes, 0, bytes.length, DEFAULT_SEED);\n}",int hash32(java.lang.String),"digraph cfg_hash32 {\n	""1"" [label=""$stack2 = lengthof bytes""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32(byte[],int,int,int)>(bytes, 0, $stack2, 104729)""];\n	""3"" [label=""bytes = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""4"" [label=""data := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[]),Method,"* Generates 32-bit hash from the byte array with a seed of zero.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 0;\n     * int hash = MurmurHash3.hash32x86(data, offset, data.length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @return The 32-bit hash\n     * @see #hash32x86(byte[], int, int, int)\n     * @since 1.14","public static int hash32x86(final byte[] data) {\n    return hash32x86(data, 0, data.length, 0);\n}",int hash32x86(byte[]),"digraph cfg_hash32x86 {\n	""1"" [label=""$stack1 = lengthof data""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int hash32x86(byte[],int,int,int)>(data, 0, $stack1, 0)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int)",Method,"* Generates 32-bit hash from the byte array with the given offset, length and seed.\n     *\n     * <p>This is an implementation of the 32-bit hash function {@code MurmurHash3_x86_32}\n     * from Austin Appleby's original MurmurHash3 {@code c++} code in SMHasher.</p>\n     *\n     * @param data The input byte array\n     * @param offset The offset of data\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 32-bit hash\n     * @since 1.14","public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {\n    int hash = seed;\n    final int nblocks = length >> 2;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = offset + (i << 2);\n        final int k = getLittleEndianInt(data, index);\n        hash = mix32(k, hash);\n    }\n    // tail\n    final int index = offset + (nblocks << 2);\n    int k1 = 0;\n    switch(offset + length - index) {\n        case 3:\n            k1 ^= (data[index + 2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            // falls-through\n            k1 ^= (data[index + 1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            k1 ^= data[index] & 0xff;\n            // mix functions\n            k1 *= C1_32;\n            k1 = Integer.rotateLeft(k1, R1_32);\n            k1 *= C2_32;\n            hash ^= k1;\n    }\n    hash ^= length;\n    return fmix32(hash);\n}","int hash32x86(byte[],int,int,int)","digraph cfg_hash32x86 {\n	""1"" [label=""$stack10 = offset + length""];\n	""2"" [label=""$stack11 = $stack10 - i""];\n	""3"" [label=""$stack12 = i + 2""];\n	""4"" [label=""$stack13 = data[$stack12]""];\n	""5"" [label=""$stack14 = $stack13 & 255""];\n	""6"" [label=""$stack15 = $stack14 << 16""];\n	""7"" [label=""$stack16 = i + 1""];\n	""8"" [label=""$stack17 = data[$stack16]""];\n	""9"" [label=""$stack18 = $stack17 & 255""];\n	""10"" [label=""$stack19 = $stack18 << 8""];\n	""11"" [label=""$stack20 = data[i]""];\n	""12"" [label=""$stack21 = $stack20 & 255""];\n	""13"" [label=""$stack22 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int fmix32(int)>(hash)""];\n	""14"" [label=""$stack23 = i << 2""];\n	""15"" [label=""$stack9 = nblocks << 2""];\n	""16"" [label=""data := @parameter0: byte[]""];\n	""17"" [label=""goto""];\n	""18"" [label=""hash = hash ^ index""];\n	""19"" [label=""hash = hash ^ length""];\n	""20"" [label=""hash = seed""];\n	""21"" [label=""hash = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int mix32(int,int)>(k, hash)""];\n	""22"" [label=""i = 0""];\n	""23"" [label=""i = i + 1""];\n	""24"" [label=""i = offset + $stack9""];\n	""25"" [label=""if i >= nblocks""];\n	""26"" [label=""index = 0""];\n	""27"" [label=""index = index * -862048943""];\n	""28"" [label=""index = index * 461845907""];\n	""29"" [label=""index = index ^ $stack15""];\n	""30"" [label=""index = index ^ $stack19""];\n	""31"" [label=""index = index ^ $stack21""];\n	""32"" [label=""index = offset + $stack23""];\n	""33"" [label=""index = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(index, 15)""];\n	""34"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int getLittleEndianInt(byte[],int)>(data, index)""];\n	""35"" [label=""length := @parameter2: int""];\n	""36"" [label=""nblocks = length >> 2""];\n	""37"" [label=""offset := @parameter1: int""];\n	""38"" [label=""return $stack22""];\n	""39"" [label=""seed := @parameter3: int""];\n	""40"" [label=""switch($stack11) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""30""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""31""[label=""cfg_next""];\n	""13"" -> ""38""[label=""cfg_next""];\n	""14"" -> ""32""[label=""cfg_next""];\n	""15"" -> ""24""[label=""cfg_next""];\n	""16"" -> ""37""[label=""cfg_next""];\n	""17"" -> ""25""[label=""cfg_goto""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""40""[label=""cfg_next""];\n	""20"" -> ""36""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""17""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""14""[label=""cfg_false""];\n	""25"" -> ""15""[label=""cfg_true""];\n	""26"" -> ""1""[label=""cfg_next""];\n	""27"" -> ""33""[label=""cfg_next""];\n	""28"" -> ""18""[label=""cfg_next""];\n	""29"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""11""[label=""cfg_next""];\n	""31"" -> ""27""[label=""cfg_next""];\n	""32"" -> ""34""[label=""cfg_next""];\n	""33"" -> ""28""[label=""cfg_next""];\n	""34"" -> ""21""[label=""cfg_next""];\n	""35"" -> ""39""[label=""cfg_next""];\n	""36"" -> ""22""[label=""cfg_next""];\n	""37"" -> ""35""[label=""cfg_next""];\n	""39"" -> ""20""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""11""[label=""cfg_switch""];\n	""40"" -> ""19""[label=""cfg_switch""];\n	""40"" -> ""3""[label=""cfg_switch""];\n	""40"" -> ""7""[label=""cfg_switch""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""29""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash64(byte[]),Method,"* Generates 64-bit hash from a byte array with a default seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * The method does not produce the same result as either half of the hash bytes from\n     * {@linkplain #hash128x64(byte[])} with the same byte data.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>Note: The sign extension bug in {@link #hash64(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * <p>This is a helper method that will produce the same result as:</p>\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * long hash = MurmurHash3.hash64(data, offset, data.length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int, int)\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[])}.","@Deprecated\npublic static long hash64(final byte[] data) {\n    return hash64(data, 0, data.length, DEFAULT_SEED);\n}",long hash64(byte[]),"digraph cfg_hash64 {\n	""1"" [label=""$stack1 = lengthof data""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long hash64(byte[],int,int,int)>(data, 0, $stack1, 104729)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int)",Method,"* Generates 64-bit hash from a byte array with the given offset and length and a default seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * The method does not produce the same result as either half of the hash bytes from\n     * {@linkplain #hash128x64(byte[])} with the same byte data.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>Note: The sign extension bug in {@link #hash64(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * <p>This is a helper method that will produce the same result as:</p>\n     *\n     * <pre>\n     * int seed = 104729;\n     * long hash = MurmurHash3.hash64(data, offset, length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @param offset The offset of data\n     * @param length The length of array\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int, int)\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[], int, int, int)}.","@Deprecated\npublic static long hash64(final byte[] data, final int offset, final int length) {\n    return hash64(data, offset, length, DEFAULT_SEED);\n}","long hash64(byte[],int,int)","digraph cfg_hash64 {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long hash64(byte[],int,int,int)>(data, offset, length, 104729)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter2: int""];\n	""4"" [label=""offset := @parameter1: int""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int)",Method,"* Generates 64-bit hash from a byte array with the given offset, length and seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>This implementation contains a sign-extension bug in the seed initialization.\n     * This manifests if the seed is negative.</p>\n     *\n     * <p>This algorithm processes 8 bytes chunks of data in a manner similar to the 16 byte chunks\n     * of data processed in the MurmurHash3 {@code MurmurHash3_x64_128} method. However the hash\n     * is not mixed with a hash chunk from the next 8 bytes of data. The method will not return\n     * the same value as the first or second 64-bits of the function\n     * {@link #hash128(byte[], int, int, int)}.</p>\n     *\n     * <p>Use of this method is not advised. Use the first long returned from\n     * {@link #hash128x64(byte[], int, int, int)}.</p>\n     *\n     * @param data The input byte array\n     * @param offset The offset of data\n     * @param length The length of array\n     * @param seed The initial seed value\n     * @return The 64-bit hash\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[], int, int, int)}.","@Deprecated\npublic static long hash64(final byte[] data, final int offset, final int length, final int seed) {\n    // Note: This fails to apply masking using 0xffffffffL to the seed.\n    long hash = seed;\n    final int nblocks = length >> 3;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = offset + (i << 3);\n        long k = getLittleEndianLong(data, index);\n        // mix functions\n        k *= C1;\n        k = Long.rotateLeft(k, R1);\n        k *= C2;\n        hash ^= k;\n        hash = Long.rotateLeft(hash, R2) * M + N1;\n    }\n    // tail\n    long k1 = 0;\n    final int index = offset + (nblocks << 3);\n    switch(offset + length - index) {\n        case 7:\n            k1 ^= ((long) data[index + 6] & 0xff) << 48;\n        // falls-through\n        case 6:\n            k1 ^= ((long) data[index + 5] & 0xff) << 40;\n        // falls-through\n        case 5:\n            k1 ^= ((long) data[index + 4] & 0xff) << 32;\n        // falls-through\n        case 4:\n            k1 ^= ((long) data[index + 3] & 0xff) << 24;\n        // falls-through\n        case 3:\n            k1 ^= ((long) data[index + 2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            k1 ^= ((long) data[index + 1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            k1 ^= (long) data[index] & 0xff;\n            k1 *= C1;\n            k1 = Long.rotateLeft(k1, R1);\n            k1 *= C2;\n            hash ^= k1;\n    }\n    // finalization\n    hash ^= length;\n    return fmix64(hash);\n}","long hash64(byte[],int,int,int)","digraph cfg_hash64 {\n	""1"" [label=""$stack11 = nblocks << 3""];\n	""2"" [label=""$stack12 = offset + length""];\n	""3"" [label=""$stack13 = $stack12 - k""];\n	""4"" [label=""$stack14 = k + 6""];\n	""5"" [label=""$stack15 = data[$stack14]""];\n	""6"" [label=""$stack16 = (long) $stack15""];\n	""7"" [label=""$stack17 = $stack16 & 255L""];\n	""8"" [label=""$stack18 = $stack17 << 48""];\n	""9"" [label=""$stack19 = k + 5""];\n	""10"" [label=""$stack20 = data[$stack19]""];\n	""11"" [label=""$stack21 = (long) $stack20""];\n	""12"" [label=""$stack22 = $stack21 & 255L""];\n	""13"" [label=""$stack23 = $stack22 << 40""];\n	""14"" [label=""$stack24 = k + 4""];\n	""15"" [label=""$stack25 = data[$stack24]""];\n	""16"" [label=""$stack26 = (long) $stack25""];\n	""17"" [label=""$stack27 = $stack26 & 255L""];\n	""18"" [label=""$stack28 = $stack27 << 32""];\n	""19"" [label=""$stack29 = k + 3""];\n	""20"" [label=""$stack30 = data[$stack29]""];\n	""21"" [label=""$stack31 = (long) $stack30""];\n	""22"" [label=""$stack32 = $stack31 & 255L""];\n	""23"" [label=""$stack33 = $stack32 << 24""];\n	""24"" [label=""$stack34 = k + 2""];\n	""25"" [label=""$stack35 = data[$stack34]""];\n	""26"" [label=""$stack36 = (long) $stack35""];\n	""27"" [label=""$stack37 = $stack36 & 255L""];\n	""28"" [label=""$stack38 = $stack37 << 16""];\n	""29"" [label=""$stack39 = k + 1""];\n	""30"" [label=""$stack40 = data[$stack39]""];\n	""31"" [label=""$stack41 = (long) $stack40""];\n	""32"" [label=""$stack42 = $stack41 & 255L""];\n	""33"" [label=""$stack43 = $stack42 << 8""];\n	""34"" [label=""$stack44 = data[k]""];\n	""35"" [label=""$stack45 = (long) $stack44""];\n	""36"" [label=""$stack46 = $stack45 & 255L""];\n	""37"" [label=""$stack47 = (long) length""];\n	""38"" [label=""$stack48 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(hash)""];\n	""39"" [label=""$stack49 = i << 3""];\n	""40"" [label=""$stack50 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(hash, 27)""];\n	""41"" [label=""$stack51 = $stack50 * 5L""];\n	""42"" [label=""data := @parameter0: byte[]""];\n	""43"" [label=""goto""];\n	""44"" [label=""hash = $stack51 + 1390208809L""];\n	""45"" [label=""hash = (long) seed""];\n	""46"" [label=""hash = hash ^ $stack47""];\n	""47"" [label=""hash = hash ^ i""];\n	""48"" [label=""hash = hash ^ k""];\n	""49"" [label=""i = 0""];\n	""50"" [label=""i = 0L""];\n	""51"" [label=""i = i * -8663945395140668459L""];\n	""52"" [label=""i = i * 5545529020109919103L""];\n	""53"" [label=""i = i + 1""];\n	""54"" [label=""i = i ^ $stack18""];\n	""55"" [label=""i = i ^ $stack23""];\n	""56"" [label=""i = i ^ $stack28""];\n	""57"" [label=""i = i ^ $stack33""];\n	""58"" [label=""i = i ^ $stack38""];\n	""59"" [label=""i = i ^ $stack43""];\n	""60"" [label=""i = i ^ $stack46""];\n	""61"" [label=""i = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(i, 31)""];\n	""62"" [label=""if i >= nblocks""];\n	""63"" [label=""index = offset + $stack49""];\n	""64"" [label=""k = k * -8663945395140668459L""];\n	""65"" [label=""k = k * 5545529020109919103L""];\n	""66"" [label=""k = offset + $stack11""];\n	""67"" [label=""k = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k, 31)""];\n	""68"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long getLittleEndianLong(byte[],int)>(data, index)""];\n	""69"" [label=""length := @parameter2: int""];\n	""70"" [label=""nblocks = length >> 3""];\n	""71"" [label=""offset := @parameter1: int""];\n	""72"" [label=""return $stack48""];\n	""73"" [label=""seed := @parameter3: int""];\n	""74"" [label=""switch($stack13) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     default:  \}""];\n	""1"" -> ""66""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""55""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""56""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""57""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""58""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""74""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""59""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""60""[label=""cfg_next""];\n	""37"" -> ""46""[label=""cfg_next""];\n	""38"" -> ""72""[label=""cfg_next""];\n	""39"" -> ""63""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""44""[label=""cfg_next""];\n	""42"" -> ""71""[label=""cfg_next""];\n	""43"" -> ""62""[label=""cfg_goto""];\n	""44"" -> ""53""[label=""cfg_next""];\n	""45"" -> ""70""[label=""cfg_next""];\n	""46"" -> ""38""[label=""cfg_next""];\n	""47"" -> ""37""[label=""cfg_next""];\n	""48"" -> ""40""[label=""cfg_next""];\n	""49"" -> ""62""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""1""[label=""cfg_next""];\n	""51"" -> ""61""[label=""cfg_next""];\n	""52"" -> ""47""[label=""cfg_next""];\n	""53"" -> ""43""[label=""cfg_next""];\n	""54"" -> ""9""[label=""cfg_next""];\n	""55"" -> ""14""[label=""cfg_next""];\n	""56"" -> ""19""[label=""cfg_next""];\n	""57"" -> ""24""[label=""cfg_next""];\n	""58"" -> ""29""[label=""cfg_next""];\n	""59"" -> ""34""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""51""[label=""cfg_next""];\n	""61"" -> ""52""[label=""cfg_next""];\n	""62"" -> ""39""[label=""cfg_false""];\n	""62"" -> ""50""[label=""cfg_true""];\n	""63"" -> ""68""[label=""cfg_next""];\n	""64"" -> ""67""[label=""cfg_next""];\n	""65"" -> ""48""[label=""cfg_next""];\n	""66"" -> ""2""[label=""cfg_next""];\n	""67"" -> ""65""[label=""cfg_next""];\n	""68"" -> ""64""[label=""cfg_next""];\n	""69"" -> ""73""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""49""[label=""cfg_next""];\n	""71"" -> ""69""[label=""cfg_next""];\n	""73"" -> ""45""[label=""cfg_next""];\n	""74"" -> ""14""[label=""cfg_switch""];\n	""74"" -> ""19""[label=""cfg_switch""];\n	""74"" -> ""24""[label=""cfg_switch""];\n	""74"" -> ""29""[label=""cfg_switch""];\n	""74"" -> ""34""[label=""cfg_switch""];\n	""74"" -> ""37""[label=""cfg_switch""];\n	""74"" -> ""4""[label=""cfg_switch""];\n	""74"" -> ""9""[label=""cfg_switch""];\n	""8"" -> ""54""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash64(int),Method,"* Generates 64-bit hash from an int with a default seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * The method does not produce the same result as either half of the hash bytes from\n     * {@linkplain #hash128x64(byte[])} with the same byte data from the {@code int}.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>Note: The sign extension bug in {@link #hash64(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * <p>This is a helper method that will produce the same result as:</p>\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * long hash = MurmurHash3.hash64(ByteBuffer.allocate(4)\n     *                                          .putInt(data)\n     *                                          .array(), offset, 4, seed);\n     * </pre>\n     *\n     * @param data The int to hash\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int, int)\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[])} with the bytes from the {@code int}.","@Deprecated\npublic static long hash64(final int data) {\n    long k1 = Integer.reverseBytes(data) & -1L >>> 32;\n    long hash = DEFAULT_SEED;\n    k1 *= C1;\n    k1 = Long.rotateLeft(k1, R1);\n    k1 *= C2;\n    hash ^= k1;\n    // finalization\n    hash ^= Integer.BYTES;\n    return fmix64(hash);\n}",long hash64(int),"digraph cfg_hash64 {\n	""1"" [label=""$stack5 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(data)""];\n	""2"" [label=""$stack6 = (long) $stack5""];\n	""3"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(hash)""];\n	""4"" [label=""data := @parameter0: int""];\n	""5"" [label=""hash = 104729L""];\n	""6"" [label=""hash = hash ^ 4L""];\n	""7"" [label=""hash = hash ^ k1""];\n	""8"" [label=""k1 = $stack6 & 4294967295L""];\n	""9"" [label=""k1 = k1 * -8663945395140668459L""];\n	""10"" [label=""k1 = k1 * 5545529020109919103L""];\n	""11"" [label=""k1 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k1, 31)""];\n	""12"" [label=""return $stack7""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash64(long),Method,"* Generates 64-bit hash from a long with a default seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * The method does not produce the same result as either half of the hash bytes from\n     * {@linkplain #hash128x64(byte[])} with the same byte data from the {@code long}.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>Note: The sign extension bug in {@link #hash64(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * <p>This is a helper method that will produce the same result as:</p>\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * long hash = MurmurHash3.hash64(ByteBuffer.allocate(8)\n     *                                          .putLong(data)\n     *                                          .array(), offset, 8, seed);\n     * </pre>\n     *\n     * @param data The long to hash\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int, int)\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[])} with the bytes from the {@code long}.","@Deprecated\npublic static long hash64(final long data) {\n    long hash = DEFAULT_SEED;\n    long k = Long.reverseBytes(data);\n    // mix functions\n    k *= C1;\n    k = Long.rotateLeft(k, R1);\n    k *= C2;\n    hash ^= k;\n    hash = Long.rotateLeft(hash, R2) * M + N1;\n    // finalization\n    hash ^= Long.BYTES;\n    return fmix64(hash);\n}",long hash64(long),"digraph cfg_hash64 {\n	""1"" [label=""$stack6 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(hash, 27)""];\n	""2"" [label=""$stack7 = $stack6 * 5L""];\n	""3"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(hash)""];\n	""4"" [label=""data := @parameter0: long""];\n	""5"" [label=""hash = $stack7 + 1390208809L""];\n	""6"" [label=""hash = 104729L""];\n	""7"" [label=""hash = hash ^ 8L""];\n	""8"" [label=""hash = hash ^ k""];\n	""9"" [label=""k = k * -8663945395140668459L""];\n	""10"" [label=""k = k * 5545529020109919103L""];\n	""11"" [label=""k = staticinvoke <java.lang.Long: long reverseBytes(long)>(data)""];\n	""12"" [label=""k = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k, 31)""];\n	""13"" [label=""return $stack8""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""11""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash3.hash64(short),Method,"* Generates 64-bit hash from a short with a default seed.\n     *\n     * <p><strong>This is not part of the original MurmurHash3 {@code c++} implementation.</strong></p>\n     *\n     * <p>This is a Murmur3-like 64-bit variant.\n     * The method does not produce the same result as either half of the hash bytes from\n     * {@linkplain #hash128x64(byte[])} with the same byte data from the {@code short}.\n     * This method will be removed in a future release.</p>\n     *\n     * <p>Note: The sign extension bug in {@link #hash64(byte[], int, int, int)} does not effect\n     * this result as the default seed is positive.</p>\n     *\n     * <p>This is a helper method that will produce the same result as:</p>\n     *\n     * <pre>\n     * int offset = 0;\n     * int seed = 104729;\n     * long hash = MurmurHash3.hash64(ByteBuffer.allocate(2)\n     *                                          .putShort(data)\n     *                                          .array(), offset, 2, seed);\n     * </pre>\n     *\n     * @param data The short to hash\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int, int)\n     * @deprecated Not part of the MurmurHash3 implementation.\n     * Use half of the hash bytes from {@link #hash128x64(byte[])} with the bytes from the {@code short}.","@Deprecated\npublic static long hash64(final short data) {\n    long hash = DEFAULT_SEED;\n    long k1 = 0;\n    k1 ^= ((long) data & 0xff) << 8;\n    k1 ^= (long) ((data & 0xFF00) >> 8) & 0xff;\n    k1 *= C1;\n    k1 = Long.rotateLeft(k1, R1);\n    k1 *= C2;\n    hash ^= k1;\n    // finalization\n    hash ^= Short.BYTES;\n    return fmix64(hash);\n}",long hash64(short),"digraph cfg_hash64 {\n	""1"" [label=""$stack10 = (long) $stack9""];\n	""2"" [label=""$stack11 = $stack10 & 255L""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: long fmix64(long)>(hash)""];\n	""4"" [label=""$stack5 = (long) data""];\n	""5"" [label=""$stack6 = $stack5 & 255L""];\n	""6"" [label=""$stack7 = $stack6 << 8""];\n	""7"" [label=""$stack8 = data & 65280""];\n	""8"" [label=""$stack9 = $stack8 >> 8""];\n	""9"" [label=""data := @parameter0: short""];\n	""10"" [label=""hash = 104729L""];\n	""11"" [label=""hash = hash ^ 2L""];\n	""12"" [label=""hash = hash ^ k1""];\n	""13"" [label=""k1 = 0L""];\n	""14"" [label=""k1 = k1 * -8663945395140668459L""];\n	""15"" [label=""k1 = k1 * 5545529020109919103L""];\n	""16"" [label=""k1 = k1 ^ $stack11""];\n	""17"" [label=""k1 = k1 ^ $stack7""];\n	""18"" [label=""k1 = staticinvoke <java.lang.Long: long rotateLeft(long,int)>(k1, 31)""];\n	""19"" [label=""return $stack12""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""4""[label=""cfg_next""];\n	""14"" -> ""18""[label=""cfg_next""];\n	""15"" -> ""12""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""19""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash3.mix32(int,int)",Method,* Performs the intermediate mix step of the 32-bit hash function {@code MurmurHash3_x86_32}.\n     *\n     * @param k The data to add to the hash\n     * @param hash The current hash\n     * @return The new hash,"private static int mix32(int k, int hash) {\n    k *= C1_32;\n    k = Integer.rotateLeft(k, R1_32);\n    k *= C2_32;\n    hash ^= k;\n    return Integer.rotateLeft(hash, R2_32) * M_32 + N_32;\n}","int mix32(int,int)","digraph cfg_mix32 {\n	""1"" [label=""$stack2 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(hash, 13)""];\n	""2"" [label=""$stack3 = $stack2 * 5""];\n	""3"" [label=""$stack4 = $stack3 + -430675100""];\n	""4"" [label=""hash := @parameter1: int""];\n	""5"" [label=""hash = hash ^ k""];\n	""6"" [label=""k := @parameter0: int""];\n	""7"" [label=""k = k * -862048943""];\n	""8"" [label=""k = k * 461845907""];\n	""9"" [label=""k = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(k, 15)""];\n	""10"" [label=""return $stack4""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.MurmurHash3.<init>(),Constructor,No instance methods.,private MurmurHash3() {\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int)",Method,* {@inheritDoc}\n         *\n         * <p>This implementation contains a sign-extension bug in the finalization step of\n         * any bytes left over from dividing the length by 4. This manifests if any of these\n         * bytes are negative.<p>\n         *\n         * @deprecated Use IncrementalHash32x86. This corrects the processing of trailing bytes.,"@Override\n@Deprecated\nint finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {\n    int result = hash;\n    // Note: This fails to apply masking using 0xff to the 3 remaining bytes.\n    int k1 = 0;\n    switch(unprocessedLength) {\n        case 3:\n            k1 ^= unprocessed[2] << 16;\n        // falls-through\n        case 2:\n            k1 ^= unprocessed[1] << 8;\n        // falls-through\n        case 1:\n            k1 ^= unprocessed[0];\n            // mix functions\n            k1 *= C1_32;\n            k1 = Integer.rotateLeft(k1, R1_32);\n            k1 *= C2_32;\n            result ^= k1;\n    }\n    // finalization\n    result ^= totalLen;\n    return fmix32(result);\n}","int finalise(int,int,byte[],int)","digraph cfg_finalise {\n	""1"" [label=""$stack10 = $stack9 << 8""];\n	""2"" [label=""$stack11 = unprocessed[0]""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int access$000(int)>(result)""];\n	""4"" [label=""$stack7 = unprocessed[2]""];\n	""5"" [label=""$stack8 = $stack7 << 16""];\n	""6"" [label=""$stack9 = unprocessed[1]""];\n	""7"" [label=""hash := @parameter0: int""];\n	""8"" [label=""k1 = 0""];\n	""9"" [label=""k1 = k1 * -862048943""];\n	""10"" [label=""k1 = k1 * 461845907""];\n	""11"" [label=""k1 = k1 ^ $stack10""];\n	""12"" [label=""k1 = k1 ^ $stack11""];\n	""13"" [label=""k1 = k1 ^ $stack8""];\n	""14"" [label=""k1 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(k1, 15)""];\n	""15"" [label=""result = hash""];\n	""16"" [label=""result = result ^ k1""];\n	""17"" [label=""result = result ^ totalLen""];\n	""18"" [label=""return $stack12""];\n	""19"" [label=""switch(unprocessedLength) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""20"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32""];\n	""21"" [label=""totalLen := @parameter3: int""];\n	""22"" [label=""unprocessed := @parameter2: byte[]""];\n	""23"" [label=""unprocessedLength := @parameter1: int""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""16""[label=""cfg_next""];\n	""11"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""6""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""3""[label=""cfg_next""];\n	""19"" -> ""17""[label=""cfg_switch""];\n	""19"" -> ""2""[label=""cfg_switch""];\n	""19"" -> ""4""[label=""cfg_switch""];\n	""19"" -> ""6""[label=""cfg_switch""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""20"" -> ""7""[label=""cfg_next""];\n	""21"" -> ""15""[label=""cfg_next""];\n	""22"" -> ""21""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""3"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""23""[label=""cfg_next""];\n	""8"" -> ""19""[label=""cfg_next""];\n	""9"" -> ""14""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.<init>(),Constructor,* Constructs a new instance.,public IncrementalHash32() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte)",Method,"* Combines the bytes using an Or operation ({@code | } in a little-endian representation\n         * of a 32-bit integer; byte 1 will be the least significant byte, byte 4 the most\n         * significant.\n         *\n         * @param b1 The first byte\n         * @param b2 The second byte\n         * @param b3 The third byte\n         * @param b4 The fourth byte\n         * @return The 32-bit integer","private static int orBytes(final byte b1, final byte b2, final byte b3, final byte b4) {\n    return b1 & 0xff | (b2 & 0xff) << 8 | (b3 & 0xff) << 16 | (b4 & 0xff) << 24;\n}","int orBytes(byte,byte,byte,byte)","digraph cfg_orBytes {\n	""1"" [label=""$stack10 = b4 & 255""];\n	""2"" [label=""$stack11 = $stack8 | $stack9""];\n	""3"" [label=""$stack12 = $stack10 << 24""];\n	""4"" [label=""$stack13 = $stack11 | $stack12""];\n	""5"" [label=""$stack4 = b2 & 255""];\n	""6"" [label=""$stack5 = b1 & 255""];\n	""7"" [label=""$stack6 = $stack4 << 8""];\n	""8"" [label=""$stack7 = b3 & 255""];\n	""9"" [label=""$stack8 = $stack5 | $stack6""];\n	""10"" [label=""$stack9 = $stack7 << 16""];\n	""11"" [label=""b1 := @parameter0: byte""];\n	""12"" [label=""b2 := @parameter1: byte""];\n	""13"" [label=""b3 := @parameter2: byte""];\n	""14"" [label=""b4 := @parameter3: byte""];\n	""15"" [label=""return $stack13""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""15""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.add(byte[],int,int)",Method,* Adds the byte array to the current incremental hash.\n         *\n         * @param data The input byte array\n         * @param offset The offset of data\n         * @param length The length of array,"public final void add(final byte[] data, final int offset, final int length) {\n    if (length <= 0) {\n        // Nothing to add\n        return;\n    }\n    totalLen += length;\n    // Process the bytes in blocks of 4.\n    // New bytes must be added to any current unprocessed bytes,\n    // then processed in blocks of 4 and the remaining bytes saved:\n    //\n    //    |--|---------------------------|--|\n    // unprocessed\n    //                main block\n    //                                remaining\n    // Check if the unprocessed bytes and new bytes can fill a block of 4.\n    // Make this overflow safe in the event that length is Integer.MAX_VALUE.\n    // Equivalent to: (unprocessedLength + length < BLOCK_SIZE)\n    if (unprocessedLength + length - BLOCK_SIZE < 0) {\n        // Not enough so add to the unprocessed bytes\n        System.arraycopy(data, offset, unprocessed, unprocessedLength, length);\n        unprocessedLength += length;\n        return;\n    }\n    // Combine unprocessed bytes with new bytes.\n    final int newOffset;\n    final int newLength;\n    if (unprocessedLength > 0) {\n        int k = -1;\n        switch(unprocessedLength) {\n            case 1:\n                k = orBytes(unprocessed[0], data[offset], data[offset + 1], data[offset + 2]);\n                break;\n            case 2:\n                k = orBytes(unprocessed[0], unprocessed[1], data[offset], data[offset + 1]);\n                break;\n            case 3:\n                k = orBytes(unprocessed[0], unprocessed[1], unprocessed[2], data[offset]);\n                break;\n            default:\n                throw new IllegalStateException(""Unprocessed length should be 1, 2, or 3: "" + unprocessedLength);\n        }\n        hash = mix32(k, hash);\n        // Update the offset and length\n        final int consumed = BLOCK_SIZE - unprocessedLength;\n        newOffset = offset + consumed;\n        newLength = length - consumed;\n    } else {\n        newOffset = offset;\n        newLength = length;\n    }\n    // Main processing of blocks of 4 bytes\n    final int nblocks = newLength >> 2;\n    for (int i = 0; i < nblocks; i++) {\n        final int index = newOffset + (i << 2);\n        final int k = getLittleEndianInt(data, index);\n        hash = mix32(k, hash);\n    }\n    // Save left-over unprocessed bytes\n    final int consumed = nblocks << 2;\n    unprocessedLength = newLength - consumed;\n    if (unprocessedLength != 0) {\n        System.arraycopy(data, newOffset + consumed, unprocessed, 0, unprocessedLength);\n    }\n}","void add(byte[],int,int)","digraph cfg_add {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int totalLen>""];\n	""2"" [label=""$stack11 = $stack10 + length""];\n	""3"" [label=""$stack12 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""4"" [label=""$stack13 = $stack12 + length""];\n	""5"" [label=""$stack14 = $stack13 - 4""];\n	""6"" [label=""$stack15 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""7"" [label=""$stack16 = newLength - consumed""];\n	""8"" [label=""$stack17 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""9"" [label=""$stack18 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""10"" [label=""$stack19 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""11"" [label=""$stack20 = newOffset + consumed""];\n	""12"" [label=""$stack21 = consumed << 2""];\n	""13"" [label=""$stack22 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash>""];\n	""14"" [label=""$stack23 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int access$100(int,int)>(k_1, $stack22)""];\n	""15"" [label=""$stack24 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""16"" [label=""$stack25 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""17"" [label=""$stack26 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""18"" [label=""$stack27 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""19"" [label=""$stack28 = data[offset]""];\n	""20"" [label=""$stack29 = $stack27[2]""];\n	""21"" [label=""$stack30 = $stack26[1]""];\n	""22"" [label=""$stack31 = $stack25[0]""];\n	""23"" [label=""$stack32 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash>""];\n	""24"" [label=""$stack33 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int access$100(int,int)>(k, $stack32)""];\n	""25"" [label=""$stack34 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""26"" [label=""$stack35 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""27"" [label=""$stack36 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""28"" [label=""$stack37 = offset + 1""];\n	""29"" [label=""$stack38 = data[$stack37]""];\n	""30"" [label=""$stack39 = data[offset]""];\n	""31"" [label=""$stack40 = $stack36[1]""];\n	""32"" [label=""$stack41 = $stack35[0]""];\n	""33"" [label=""$stack42 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""34"" [label=""$stack43 = offset + 1""];\n	""35"" [label=""$stack44 = offset + 2""];\n	""36"" [label=""$stack45 = data[$stack44]""];\n	""37"" [label=""$stack46 = data[$stack43]""];\n	""38"" [label=""$stack47 = data[offset]""];\n	""39"" [label=""$stack48 = $stack42[0]""];\n	""40"" [label=""$stack49 = new java.lang.StringBuilder""];\n	""41"" [label=""$stack50 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""42"" [label=""$stack51 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Unprocessed length should be 1, 2, or 3: \"")""];\n	""43"" [label=""$stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack50)""];\n	""44"" [label=""$stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""45"" [label=""$stack54 = new java.lang.IllegalStateException""];\n	""46"" [label=""$stack55 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""47"" [label=""$stack56 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""48"" [label=""$stack57 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""49"" [label=""$stack58 = $stack57 + length""];\n	""50"" [label=""consumed = 0""];\n	""51"" [label=""consumed = 4 - $stack34""];\n	""52"" [label=""consumed = consumed + 1""];\n	""53"" [label=""consumed = k << 2""];\n	""54"" [label=""data := @parameter0: byte[]""];\n	""55"" [label=""goto""];\n	""56"" [label=""goto""];\n	""57"" [label=""goto""];\n	""58"" [label=""goto""];\n	""59"" [label=""goto""];\n	""60"" [label=""if $stack14 >= 0""];\n	""61"" [label=""if $stack15 <= 0""];\n	""62"" [label=""if $stack17 == 0""];\n	""63"" [label=""if consumed >= k""];\n	""64"" [label=""if length > 0""];\n	""65"" [label=""index = newOffset + $stack21""];\n	""66"" [label=""k = -1""];\n	""67"" [label=""k = newLength >> 2""];\n	""68"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int orBytes(byte,byte,byte,byte)>($stack31, $stack30, $stack29, $stack28)""];\n	""69"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int orBytes(byte,byte,byte,byte)>($stack41, $stack40, $stack39, $stack38)""];\n	""70"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int orBytes(byte,byte,byte,byte)>($stack48, $stack47, $stack46, $stack45)""];\n	""71"" [label=""k_1 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int access$200(byte[],int)>(data, index)""];\n	""72"" [label=""length := @parameter2: int""];\n	""73"" [label=""newLength = length""];\n	""74"" [label=""newLength = length - consumed""];\n	""75"" [label=""newOffset = offset""];\n	""76"" [label=""newOffset = offset + consumed""];\n	""77"" [label=""offset := @parameter1: int""];\n	""78"" [label=""return""];\n	""79"" [label=""return""];\n	""80"" [label=""return""];\n	""81"" [label=""specialinvoke $stack49.<java.lang.StringBuilder: void <init>()>()""];\n	""82"" [label=""specialinvoke $stack54.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack53)""];\n	""83"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, $stack20, $stack19, 0, $stack18)""];\n	""84"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, offset, $stack56, $stack55, length)""];\n	""85"" [label=""switch($stack24) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""86"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86""];\n	""87"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash> = $stack23""];\n	""88"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash> = $stack33""];\n	""89"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int totalLen> = $stack11""];\n	""90"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength> = $stack16""];\n	""91"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength> = $stack58""];\n	""92"" [label=""throw $stack54""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""65""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""87""[label=""cfg_next""];\n	""15"" -> ""85""[label=""cfg_next""];\n	""16"" -> ""22""[label=""cfg_next""];\n	""17"" -> ""21""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""68""[label=""cfg_next""];\n	""2"" -> ""89""[label=""cfg_next""];\n	""20"" -> ""19""[label=""cfg_next""];\n	""21"" -> ""18""[label=""cfg_next""];\n	""22"" -> ""17""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""88""[label=""cfg_next""];\n	""25"" -> ""51""[label=""cfg_next""];\n	""26"" -> ""32""[label=""cfg_next""];\n	""27"" -> ""31""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""69""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""28""[label=""cfg_next""];\n	""31"" -> ""30""[label=""cfg_next""];\n	""32"" -> ""27""[label=""cfg_next""];\n	""33"" -> ""39""[label=""cfg_next""];\n	""34"" -> ""37""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""70""[label=""cfg_next""];\n	""37"" -> ""35""[label=""cfg_next""];\n	""38"" -> ""34""[label=""cfg_next""];\n	""39"" -> ""38""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""81""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""41""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""82""[label=""cfg_next""];\n	""45"" -> ""40""[label=""cfg_next""];\n	""46"" -> ""84""[label=""cfg_next""];\n	""47"" -> ""46""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""91""[label=""cfg_next""];\n	""5"" -> ""60""[label=""cfg_next""];\n	""50"" -> ""63""[label=""cfg_next""];\n	""51"" -> ""76""[label=""cfg_next""];\n	""52"" -> ""58""[label=""cfg_next""];\n	""53"" -> ""7""[label=""cfg_next""];\n	""54"" -> ""77""[label=""cfg_next""];\n	""55"" -> ""23""[label=""cfg_goto""];\n	""56"" -> ""23""[label=""cfg_goto""];\n	""57"" -> ""23""[label=""cfg_goto""];\n	""58"" -> ""63""[label=""cfg_goto""];\n	""59"" -> ""67""[label=""cfg_goto""];\n	""6"" -> ""61""[label=""cfg_next""];\n	""60"" -> ""47""[label=""cfg_false""];\n	""60"" -> ""6""[label=""cfg_true""];\n	""61"" -> ""66""[label=""cfg_false""];\n	""61"" -> ""75""[label=""cfg_true""];\n	""62"" -> ""11""[label=""cfg_false""];\n	""62"" -> ""80""[label=""cfg_true""];\n	""63"" -> ""12""[label=""cfg_false""];\n	""63"" -> ""53""[label=""cfg_true""];\n	""64"" -> ""1""[label=""cfg_true""];\n	""64"" -> ""78""[label=""cfg_false""];\n	""65"" -> ""71""[label=""cfg_next""];\n	""66"" -> ""15""[label=""cfg_next""];\n	""67"" -> ""50""[label=""cfg_next""];\n	""68"" -> ""57""[label=""cfg_next""];\n	""69"" -> ""56""[label=""cfg_next""];\n	""7"" -> ""90""[label=""cfg_next""];\n	""70"" -> ""55""[label=""cfg_next""];\n	""71"" -> ""13""[label=""cfg_next""];\n	""72"" -> ""64""[label=""cfg_next""];\n	""73"" -> ""67""[label=""cfg_next""];\n	""74"" -> ""59""[label=""cfg_next""];\n	""75"" -> ""73""[label=""cfg_next""];\n	""76"" -> ""74""[label=""cfg_next""];\n	""77"" -> ""72""[label=""cfg_next""];\n	""8"" -> ""62""[label=""cfg_next""];\n	""81"" -> ""42""[label=""cfg_next""];\n	""82"" -> ""92""[label=""cfg_next""];\n	""83"" -> ""80""[label=""cfg_next""];\n	""84"" -> ""48""[label=""cfg_next""];\n	""85"" -> ""16""[label=""cfg_switch""];\n	""85"" -> ""26""[label=""cfg_switch""];\n	""85"" -> ""33""[label=""cfg_switch""];\n	""85"" -> ""45""[label=""cfg_switch""];\n	""86"" -> ""54""[label=""cfg_next""];\n	""87"" -> ""52""[label=""cfg_next""];\n	""88"" -> ""25""[label=""cfg_next""];\n	""89"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""83""[label=""cfg_next""];\n	""90"" -> ""8""[label=""cfg_next""];\n	""91"" -> ""79""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.end(),Method,* Generates the 32-bit hash value. Repeat calls to this method with no additional data\n         * will generate the same hash value.\n         *\n         * @return The 32-bit hash,"public final int end() {\n    // Allow calling end() again after adding no data to return the same result.\n    return finalise(hash, unprocessedLength, unprocessed, totalLen);\n}",int end(),"digraph cfg_end {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int totalLen>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength>""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash>""];\n	""5"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int finalise(int,int,byte[],int)>($stack4, $stack3, $stack2, $stack1)""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n","public , final "
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int)",Method,* Finalizes the running hash to the output 32-bit hash by processing remaining bytes\n         * and performing final mixing.\n         *\n         * @param hash The running hash\n         * @param unprocessedLength The number of unprocessed bytes in the tail data.\n         * @param unprocessed Up to 3 unprocessed bytes from input data.\n         * @param totalLen The total number of input bytes added since the start.\n         * @return The 32-bit hash,"int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {\n    int result = hash;\n    int k1 = 0;\n    switch(unprocessedLength) {\n        case 3:\n            k1 ^= (unprocessed[2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            k1 ^= (unprocessed[1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            k1 ^= unprocessed[0] & 0xff;\n            // mix functions\n            k1 *= C1_32;\n            k1 = Integer.rotateLeft(k1, R1_32);\n            k1 *= C2_32;\n            result ^= k1;\n    }\n    // finalization\n    result ^= totalLen;\n    return fmix32(result);\n}","int finalise(int,int,byte[],int)","digraph cfg_finalise {\n	""1"" [label=""$stack10 = unprocessed[1]""];\n	""2"" [label=""$stack11 = $stack10 & 255""];\n	""3"" [label=""$stack12 = $stack11 << 8""];\n	""4"" [label=""$stack13 = unprocessed[0]""];\n	""5"" [label=""$stack14 = $stack13 & 255""];\n	""6"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.digest.MurmurHash3: int access$000(int)>(result)""];\n	""7"" [label=""$stack7 = unprocessed[2]""];\n	""8"" [label=""$stack8 = $stack7 & 255""];\n	""9"" [label=""$stack9 = $stack8 << 16""];\n	""10"" [label=""hash := @parameter0: int""];\n	""11"" [label=""k1 = 0""];\n	""12"" [label=""k1 = k1 * -862048943""];\n	""13"" [label=""k1 = k1 * 461845907""];\n	""14"" [label=""k1 = k1 ^ $stack12""];\n	""15"" [label=""k1 = k1 ^ $stack14""];\n	""16"" [label=""k1 = k1 ^ $stack9""];\n	""17"" [label=""k1 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(k1, 15)""];\n	""18"" [label=""result = hash""];\n	""19"" [label=""result = result ^ k1""];\n	""20"" [label=""result = result ^ totalLen""];\n	""21"" [label=""return $stack15""];\n	""22"" [label=""switch(unprocessedLength) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""23"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86""];\n	""24"" [label=""totalLen := @parameter3: int""];\n	""25"" [label=""unprocessed := @parameter2: byte[]""];\n	""26"" [label=""unprocessedLength := @parameter1: int""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""26""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""12"" -> ""17""[label=""cfg_next""];\n	""13"" -> ""19""[label=""cfg_next""];\n	""14"" -> ""4""[label=""cfg_next""];\n	""15"" -> ""12""[label=""cfg_next""];\n	""16"" -> ""1""[label=""cfg_next""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""18"" -> ""11""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""6""[label=""cfg_next""];\n	""22"" -> ""1""[label=""cfg_switch""];\n	""22"" -> ""20""[label=""cfg_switch""];\n	""22"" -> ""4""[label=""cfg_switch""];\n	""22"" -> ""7""[label=""cfg_switch""];\n	""23"" -> ""10""[label=""cfg_next""];\n	""24"" -> ""18""[label=""cfg_next""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""26"" -> ""25""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""21""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.start(int),Method,* Starts a new incremental hash.\n         *\n         * @param seed The initial seed value,public final void start(final int seed) {\n    // Reset\n    unprocessedLength = totalLen = 0;\n    this.hash = seed;\n},void start(int),"digraph cfg_start {\n	""1"" [label=""return""];\n	""2"" [label=""seed := @parameter0: int""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86""];\n	""4"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int hash> = seed""];\n	""5"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int totalLen> = 0""];\n	""6"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: int unprocessedLength> = 0""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.<init>(),Constructor,* Constructs a new instance.,public IncrementalHash32x86() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = newarray (byte)[3]""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86""];\n	""5"" [label=""this.<org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86: byte[] unprocessed> = $stack1""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,byte[])",Method,* Reads through a byte array and returns the digest for the data. Provided for symmetry with other methods.\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @return the digest\n     * @since 1.11,"public static byte[] digest(final MessageDigest messageDigest, final byte[] data) {\n    return messageDigest.digest(data);\n}","byte[] digest(java.security.MessageDigest,byte[])","digraph cfg_digest {\n	""1"" [label=""$stack2 = virtualinvoke messageDigest.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""2"" [label=""data := @parameter1: byte[]""];\n	""3"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,ByteBuffer)",Method,* Reads through a ByteBuffer and returns the digest for the data\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @return the digest\n     * @since 1.11,"public static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n    messageDigest.update(data);\n    return messageDigest.digest();\n}","byte[] digest(java.security.MessageDigest,java.nio.ByteBuffer)","digraph cfg_digest {\n	""1"" [label=""$stack2 = virtualinvoke messageDigest.<java.security.MessageDigest: byte[] digest()>()""];\n	""2"" [label=""data := @parameter1: java.nio.ByteBuffer""];\n	""3"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""virtualinvoke messageDigest.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(data)""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,File)",Method,* Reads through a File and returns the digest for the data\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.11,"public static byte[] digest(final MessageDigest messageDigest, final File data) throws IOException {\n    return updateDigest(messageDigest, data).digest();\n}","byte[] digest(java.security.MessageDigest,java.io.File)","digraph cfg_digest {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.File)>(messageDigest, data)""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.security.MessageDigest: byte[] digest()>()""];\n	""3"" [label=""data := @parameter1: java.io.File""];\n	""4"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,InputStream)",Method,* Reads through an InputStream and returns the digest for the data\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.11 (was private),"public static byte[] digest(final MessageDigest messageDigest, final InputStream data) throws IOException {\n    return updateDigest(messageDigest, data).digest();\n}","byte[] digest(java.security.MessageDigest,java.io.InputStream)","digraph cfg_digest {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)>(messageDigest, data)""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.security.MessageDigest: byte[] digest()>()""];\n	""3"" [label=""data := @parameter1: java.io.InputStream""];\n	""4"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,Path,OpenOption[])",Method,* Reads through a File and returns the digest for the data\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @param options       options How to open the file\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public static byte[] digest(final MessageDigest messageDigest, final Path data, final OpenOption... options) throws IOException {\n    return updateDigest(messageDigest, data, options).digest();\n}","byte[] digest(java.security.MessageDigest,java.nio.file.Path,java.nio.file.OpenOption[])","digraph cfg_digest {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.file.Path,java.nio.file.OpenOption[])>(messageDigest, data, options)""];\n	""2"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""3"" [label=""data := @parameter1: java.nio.file.Path""];\n	""4"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""options := @parameter2: java.nio.file.OpenOption[]""];\n	""6"" [label=""return $stack4""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,RandomAccessFile)",Method,* Reads through a RandomAccessFile using non-blocking-io (NIO) and returns the digest for the data\n     *\n     * @param messageDigest The MessageDigest to use (for example MD5)\n     * @param data          Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public static byte[] digest(final MessageDigest messageDigest, final RandomAccessFile data) throws IOException {\n    return updateDigest(messageDigest, data).digest();\n}","byte[] digest(java.security.MessageDigest,java.io.RandomAccessFile)","digraph cfg_digest {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.RandomAccessFile)>(messageDigest, data)""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.security.MessageDigest: byte[] digest()>()""];\n	""3"" [label=""data := @parameter1: java.io.RandomAccessFile""];\n	""4"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getDigest(String),Method,"* Gets a {@code MessageDigest} for the given {@code algorithm}.\n     *\n     * @param algorithm the name of the algorithm requested. See\n     *                  <a href=""https://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA"">Appendix A in the Java\n     *                  Cryptography Architecture Reference Guide</a> for information about standard algorithm names.\n     * @return A digest instance.\n     * @see MessageDigest#getInstance(String)\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught.",public static MessageDigest getDigest(final String algorithm) {\n    try {\n        return getMessageDigest(algorithm);\n    } catch (final NoSuchAlgorithmException e) {\n        throw new IllegalArgumentException(e);\n    }\n},java.security.MessageDigest getDigest(java.lang.String),"digraph cfg_getDigest {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMessageDigest(java.lang.String)>(algorithm)""];\n	""2"" [label=""$stack3 := @caughtexception""];\n	""3"" [label=""$stack4 = new java.lang.IllegalArgumentException""];\n	""4"" [label=""algorithm := @parameter0: java.lang.String""];\n	""5"" [label=""e = $stack3""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(e)""];\n	""8"" [label=""throw $stack4""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.getDigest(String,MessageDigest)",Method,"* Gets a {@code MessageDigest} for the given {@code algorithm} or a default if there is a problem getting the algorithm.\n     *\n     * @param algorithm            the name of the algorithm requested. See\n     *                             <a href=""https://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA""> Appendix A in the Java\n     *                             Cryptography Architecture Reference Guide</a> for information about standard algorithm names.\n     * @param defaultMessageDigest The default MessageDigest.\n     * @return A digest instance.\n     * @see MessageDigest#getInstance(String)\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught.\n     * @since 1.11","public static MessageDigest getDigest(final String algorithm, final MessageDigest defaultMessageDigest) {\n    try {\n        return getMessageDigest(algorithm);\n    } catch (final Exception e) {\n        return defaultMessageDigest;\n    }\n}","java.security.MessageDigest getDigest(java.lang.String,java.security.MessageDigest)","digraph cfg_getDigest {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMessageDigest(java.lang.String)>(algorithm)""];\n	""2"" [label=""$stack4 := @caughtexception""];\n	""3"" [label=""algorithm := @parameter0: java.lang.String""];\n	""4"" [label=""defaultMessageDigest := @parameter1: java.security.MessageDigest""];\n	""5"" [label=""e = $stack4""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""return defaultMessageDigest""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getMd2Digest(),Method,"* Gets an MD2 MessageDigest.\n     *\n     * @return An MD2 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD2 is a built-in algorithm\n     * @see MessageDigestAlgorithms#MD2\n     * @since 1.7",public static MessageDigest getMd2Digest() {\n    return getDigest(MessageDigestAlgorithms.MD2);\n},java.security.MessageDigest getMd2Digest(),"digraph cfg_getMd2Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""MD2\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getMd5Digest(),Method,"* Gets an MD5 MessageDigest.\n     *\n     * @return An MD5 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD5 is a built-in algorithm\n     * @see MessageDigestAlgorithms#MD5",public static MessageDigest getMd5Digest() {\n    return getDigest(MessageDigestAlgorithms.MD5);\n},java.security.MessageDigest getMd5Digest(),"digraph cfg_getMd5Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""MD5\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getMessageDigest(String),Method,"* Gets a {@code MessageDigest} for the given {@code algorithm}.\n     *\n     * @param algorithm the name of the algorithm requested. See\n     *                  <a href=""https://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA""> Appendix A in the Java\n     *                  Cryptography Architecture Reference Guide</a> for information about standard algorithm names.\n     * @return A digest instance.\n     * @see MessageDigest#getInstance(String)\n     * @throws NoSuchAlgorithmException if no Provider supports a MessageDigestSpi implementation for the specified algorithm.",private static MessageDigest getMessageDigest(final String algorithm) throws NoSuchAlgorithmException {\n    return MessageDigest.getInstance(algorithm);\n},java.security.MessageDigest getMessageDigest(java.lang.String),"digraph cfg_getMessageDigest {\n	""1"" [label=""$stack1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(algorithm)""];\n	""2"" [label=""algorithm := @parameter0: java.lang.String""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.DigestUtils.getSha1Digest(),Method,"* Gets an SHA-1 digest.\n     *\n     * @return An SHA-1 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-1 is a built-in algorithm\n     * @see MessageDigestAlgorithms#SHA_1\n     * @since 1.7",public static MessageDigest getSha1Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_1);\n},java.security.MessageDigest getSha1Digest(),"digraph cfg_getSha1Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-1\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha256Digest(),Method,"* Gets an SHA-256 digest.\n     *\n     * @return An SHA-256 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-256 is a built-in algorithm\n     * @see MessageDigestAlgorithms#SHA_256",public static MessageDigest getSha256Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_256);\n},java.security.MessageDigest getSha256Digest(),"digraph cfg_getSha256Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-256\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha3_224Digest(),Method,"* Gets an SHA3-224 digest.\n     *\n     * @return An SHA3-224 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should not happen on Oracle Java 9 and greater.\n     * @see MessageDigestAlgorithms#SHA3_224\n     * @since 1.12",public static MessageDigest getSha3_224Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA3_224);\n},java.security.MessageDigest getSha3_224Digest(),"digraph cfg_getSha3_224Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA3-224\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha3_256Digest(),Method,"* Returns an SHA3-256 digest.\n     *\n     * @return An SHA3-256 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should not happen on Oracle Java 9 and greater.\n     * @see MessageDigestAlgorithms#SHA3_256\n     * @since 1.12",public static MessageDigest getSha3_256Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA3_256);\n},java.security.MessageDigest getSha3_256Digest(),"digraph cfg_getSha3_256Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA3-256\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest(),Method,"* Gets an SHA3-384 digest.\n     *\n     * @return An SHA3-384 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should not happen on Oracle Java 9 and greater.\n     * @see MessageDigestAlgorithms#SHA3_384\n     * @since 1.12",public static MessageDigest getSha3_384Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA3_384);\n},java.security.MessageDigest getSha3_384Digest(),"digraph cfg_getSha3_384Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA3-384\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha3_512Digest(),Method,"* Gets an SHA3-512 digest.\n     *\n     * @return An SHA3-512 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should not happen on Oracle Java 9 and greater.\n     * @see MessageDigestAlgorithms#SHA3_512\n     * @since 1.12",public static MessageDigest getSha3_512Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA3_512);\n},java.security.MessageDigest getSha3_512Digest(),"digraph cfg_getSha3_512Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA3-512\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha384Digest(),Method,"* Gets an SHA-384 digest.\n     *\n     * @return An SHA-384 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-384 is a built-in algorithm\n     * @see MessageDigestAlgorithms#SHA_384",public static MessageDigest getSha384Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_384);\n},java.security.MessageDigest getSha384Digest(),"digraph cfg_getSha384Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-384\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest(),Method,* Gets an SHA-512/224 digest.\n     *\n     * @return An SHA-512/224 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught.\n     * @see MessageDigestAlgorithms#SHA_512_224,public static MessageDigest getSha512_224Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_512_224);\n},java.security.MessageDigest getSha512_224Digest(),"digraph cfg_getSha512_224Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-512/224\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest(),Method,* Gets an SHA-512/256 digest.\n     *\n     * @return An SHA-512/256 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught.\n     * @see MessageDigestAlgorithms#SHA_512_224,public static MessageDigest getSha512_256Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_512_256);\n},java.security.MessageDigest getSha512_256Digest(),"digraph cfg_getSha512_256Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-512/256\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getSha512Digest(),Method,"* Gets an SHA-512 digest.\n     *\n     * @return An SHA-512 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-512 is a built-in algorithm\n     * @see MessageDigestAlgorithms#SHA_512",public static MessageDigest getSha512Digest() {\n    return getDigest(MessageDigestAlgorithms.SHA_512);\n},java.security.MessageDigest getSha512Digest(),"digraph cfg_getSha512Digest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(\""SHA-512\"")""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.getShaDigest(),Method,* Gets an SHA-1 digest.\n     *\n     * @return An SHA-1 digest instance.\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught\n     * @deprecated (1.11) Use {@link #getSha1Digest()},@Deprecated\npublic static MessageDigest getShaDigest() {\n    return getSha1Digest();\n},java.security.MessageDigest getShaDigest(),"digraph cfg_getShaDigest {\n	""1"" [label=""$stack0 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>()""];\n	""2"" [label=""return $stack0""];\n	""1"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.isAvailable(String),Method,* Test whether the algorithm is supported.\n     *\n     * @param messageDigestAlgorithm the algorithm name\n     * @return {@code true} if the algorithm can be found\n     * @since 1.11,"public static boolean isAvailable(final String messageDigestAlgorithm) {\n    return getDigest(messageDigestAlgorithm, null) != null;\n}",boolean isAvailable(java.lang.String),"digraph cfg_isAvailable {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String,java.security.MessageDigest)>(messageDigestAlgorithm, null)""];\n	""2"" [label=""$stack2 = 0""];\n	""3"" [label=""$stack2 = 1""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack1 == null""];\n	""6"" [label=""messageDigestAlgorithm := @parameter0: java.lang.String""];\n	""7"" [label=""return $stack2""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2(byte[]),Method,* Calculates the MD2 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return MD2 digest\n     * @since 1.7,public static byte[] md2(final byte[] data) {\n    return getMd2Digest().digest(data);\n},byte[] md2(byte[]),"digraph cfg_md2 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2(InputStream),Method,* Calculates the MD2 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return MD2 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.7,"public static byte[] md2(final InputStream data) throws IOException {\n    return digest(getMd2Digest(), data);\n}",byte[] md2(java.io.InputStream),"digraph cfg_md2 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2(String),Method,* Calculates the MD2 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return MD2 digest\n     * @since 1.7,public static byte[] md2(final String data) {\n    return md2(StringUtils.getBytesUtf8(data));\n},byte[] md2(java.lang.String),"digraph cfg_md2 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md2(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[]),Method,* Calculates the MD2 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD2 digest as a hexadecimal string\n     * @since 1.7,public static String md2Hex(final byte[] data) {\n    return Hex.encodeHexString(md2(data));\n},java.lang.String md2Hex(byte[]),"digraph cfg_md2Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md2(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2Hex(InputStream),Method,* Calculates the MD2 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD2 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.7,public static String md2Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(md2(data));\n},java.lang.String md2Hex(java.io.InputStream),"digraph cfg_md2Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md2(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md2Hex(String),Method,* Calculates the MD2 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD2 digest as a hexadecimal string\n     * @since 1.7,public static String md2Hex(final String data) {\n    return Hex.encodeHexString(md2(data));\n},java.lang.String md2Hex(java.lang.String),"digraph cfg_md2Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md2(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5(byte[]),Method,* Calculates the MD5 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return MD5 digest,public static byte[] md5(final byte[] data) {\n    return getMd5Digest().digest(data);\n},byte[] md5(byte[]),"digraph cfg_md5 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5(InputStream),Method,* Calculates the MD5 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return MD5 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.4,"public static byte[] md5(final InputStream data) throws IOException {\n    return digest(getMd5Digest(), data);\n}",byte[] md5(java.io.InputStream),"digraph cfg_md5 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5(String),Method,* Calculates the MD5 digest and returns the value as a 16 element {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return MD5 digest,public static byte[] md5(final String data) {\n    return md5(StringUtils.getBytesUtf8(data));\n},byte[] md5(java.lang.String),"digraph cfg_md5 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md5(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[]),Method,* Calculates the MD5 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD5 digest as a hexadecimal string,public static String md5Hex(final byte[] data) {\n    return Hex.encodeHexString(md5(data));\n},java.lang.String md5Hex(byte[]),"digraph cfg_md5Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md5(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5Hex(InputStream),Method,* Calculates the MD5 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD5 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.4,public static String md5Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(md5(data));\n},java.lang.String md5Hex(java.io.InputStream),"digraph cfg_md5Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md5(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.md5Hex(String),Method,* Calculates the MD5 digest and returns the value as a 32 character hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return MD5 digest as a hexadecimal string,public static String md5Hex(final String data) {\n    return Hex.encodeHexString(md5(data));\n},java.lang.String md5Hex(java.lang.String),"digraph cfg_md5Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] md5(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha(byte[]),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest\n     * @deprecated (1.11) Use {@link #sha1(byte[])},@Deprecated\npublic static byte[] sha(final byte[] data) {\n    return sha1(data);\n},byte[] sha(byte[]),"digraph cfg_sha {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(byte[])>(data)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha(InputStream),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.4\n     * @deprecated (1.11) Use {@link #sha1(InputStream)},@Deprecated\npublic static byte[] sha(final InputStream data) throws IOException {\n    return sha1(data);\n},byte[] sha(java.io.InputStream),"digraph cfg_sha {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(java.io.InputStream)>(data)""];\n	""2"" [label=""data := @parameter0: java.io.InputStream""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha(String),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest\n     * @deprecated (1.11) Use {@link #sha1(String)},@Deprecated\npublic static byte[] sha(final String data) {\n    return sha1(data);\n},byte[] sha(java.lang.String),"digraph cfg_sha {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(java.lang.String)>(data)""];\n	""2"" [label=""data := @parameter0: java.lang.String""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1(byte[]),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest\n     * @since 1.7,public static byte[] sha1(final byte[] data) {\n    return getSha1Digest().digest(data);\n},byte[] sha1(byte[]),"digraph cfg_sha1 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1(InputStream),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.7,"public static byte[] sha1(final InputStream data) throws IOException {\n    return digest(getSha1Digest(), data);\n}",byte[] sha1(java.io.InputStream),"digraph cfg_sha1 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1(String),Method,* Calculates the SHA-1 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-1 digest,public static byte[] sha1(final String data) {\n    return sha1(StringUtils.getBytesUtf8(data));\n},byte[] sha1(java.lang.String),"digraph cfg_sha1 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[]),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @since 1.7,public static String sha1Hex(final byte[] data) {\n    return Hex.encodeHexString(sha1(data));\n},java.lang.String sha1Hex(byte[]),"digraph cfg_sha1Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1Hex(InputStream),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.7,public static String sha1Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha1(data));\n},java.lang.String sha1Hex(java.io.InputStream),"digraph cfg_sha1Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha1Hex(String),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @since 1.7,public static String sha1Hex(final String data) {\n    return Hex.encodeHexString(sha1(data));\n},java.lang.String sha1Hex(java.lang.String),"digraph cfg_sha1Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha1(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256(byte[]),Method,* Calculates the SHA-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-256 digest\n     * @since 1.4,public static byte[] sha256(final byte[] data) {\n    return getSha256Digest().digest(data);\n},byte[] sha256(byte[]),"digraph cfg_sha256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha256Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256(InputStream),Method,* Calculates the SHA-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-256 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.4,"public static byte[] sha256(final InputStream data) throws IOException {\n    return digest(getSha256Digest(), data);\n}",byte[] sha256(java.io.InputStream),"digraph cfg_sha256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha256Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256(String),Method,* Calculates the SHA-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-256 digest\n     * @since 1.4,public static byte[] sha256(final String data) {\n    return sha256(StringUtils.getBytesUtf8(data));\n},byte[] sha256(java.lang.String),"digraph cfg_sha256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha256(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[]),Method,* Calculates the SHA-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-256 digest as a hexadecimal string\n     * @since 1.4,public static String sha256Hex(final byte[] data) {\n    return Hex.encodeHexString(sha256(data));\n},java.lang.String sha256Hex(byte[]),"digraph cfg_sha256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha256(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256Hex(InputStream),Method,* Calculates the SHA-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-256 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.4,public static String sha256Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha256(data));\n},java.lang.String sha256Hex(java.io.InputStream),"digraph cfg_sha256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha256(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha256Hex(String),Method,* Calculates the SHA-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-256 digest as a hexadecimal string\n     * @since 1.4,public static String sha256Hex(final String data) {\n    return Hex.encodeHexString(sha256(data));\n},java.lang.String sha256Hex(java.lang.String),"digraph cfg_sha256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha256(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224(byte[]),Method,* Calculates the SHA3-224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-224 digest\n     * @since 1.12,public static byte[] sha3_224(final byte[] data) {\n    return getSha3_224Digest().digest(data);\n},byte[] sha3_224(byte[]),"digraph cfg_sha3_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_224Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224(InputStream),Method,* Calculates the SHA3-224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-224 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.12,"public static byte[] sha3_224(final InputStream data) throws IOException {\n    return digest(getSha3_224Digest(), data);\n}",byte[] sha3_224(java.io.InputStream),"digraph cfg_sha3_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_224Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224(String),Method,* Calculates the SHA3-224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA3-224 digest\n     * @since 1.12,public static byte[] sha3_224(final String data) {\n    return sha3_224(StringUtils.getBytesUtf8(data));\n},byte[] sha3_224(java.lang.String),"digraph cfg_sha3_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_224(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byte[]),Method,* Calculates the SHA3-224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-224 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_224Hex(final byte[] data) {\n    return Hex.encodeHexString(sha3_224(data));\n},java.lang.String sha3_224Hex(byte[]),"digraph cfg_sha3_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_224(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(InputStream),Method,* Calculates the SHA3-224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-224 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.12,public static String sha3_224Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha3_224(data));\n},java.lang.String sha3_224Hex(java.io.InputStream),"digraph cfg_sha3_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_224(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(String),Method,* Calculates the SHA3-224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-224 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_224Hex(final String data) {\n    return Hex.encodeHexString(sha3_224(data));\n},java.lang.String sha3_224Hex(java.lang.String),"digraph cfg_sha3_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_224(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256(byte[]),Method,* Calculates the SHA3-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-256 digest\n     * @since 1.12,public static byte[] sha3_256(final byte[] data) {\n    return getSha3_256Digest().digest(data);\n},byte[] sha3_256(byte[]),"digraph cfg_sha3_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_256Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256(InputStream),Method,* Calculates the SHA3-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-256 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.12,"public static byte[] sha3_256(final InputStream data) throws IOException {\n    return digest(getSha3_256Digest(), data);\n}",byte[] sha3_256(java.io.InputStream),"digraph cfg_sha3_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_256Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256(String),Method,* Calculates the SHA3-256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA3-256 digest\n     * @since 1.12,public static byte[] sha3_256(final String data) {\n    return sha3_256(StringUtils.getBytesUtf8(data));\n},byte[] sha3_256(java.lang.String),"digraph cfg_sha3_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_256(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byte[]),Method,* Calculates the SHA3-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-256 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_256Hex(final byte[] data) {\n    return Hex.encodeHexString(sha3_256(data));\n},java.lang.String sha3_256Hex(byte[]),"digraph cfg_sha3_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_256(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(InputStream),Method,* Calculates the SHA3-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-256 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.12,public static String sha3_256Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha3_256(data));\n},java.lang.String sha3_256Hex(java.io.InputStream),"digraph cfg_sha3_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_256(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(String),Method,* Calculates the SHA3-256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-256 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_256Hex(final String data) {\n    return Hex.encodeHexString(sha3_256(data));\n},java.lang.String sha3_256Hex(java.lang.String),"digraph cfg_sha3_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_256(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384(byte[]),Method,* Calculates the SHA3-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-384 digest\n     * @since 1.12,public static byte[] sha3_384(final byte[] data) {\n    return getSha3_384Digest().digest(data);\n},byte[] sha3_384(byte[]),"digraph cfg_sha3_384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_384Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384(InputStream),Method,* Calculates the SHA3-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-384 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.12,"public static byte[] sha3_384(final InputStream data) throws IOException {\n    return digest(getSha3_384Digest(), data);\n}",byte[] sha3_384(java.io.InputStream),"digraph cfg_sha3_384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_384Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384(String),Method,* Calculates the SHA3-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA3-384 digest\n     * @since 1.12,public static byte[] sha3_384(final String data) {\n    return sha3_384(StringUtils.getBytesUtf8(data));\n},byte[] sha3_384(java.lang.String),"digraph cfg_sha3_384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_384(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byte[]),Method,* Calculates the SHA3-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-384 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_384Hex(final byte[] data) {\n    return Hex.encodeHexString(sha3_384(data));\n},java.lang.String sha3_384Hex(byte[]),"digraph cfg_sha3_384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_384(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(InputStream),Method,* Calculates the SHA3-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-384 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.12,public static String sha3_384Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha3_384(data));\n},java.lang.String sha3_384Hex(java.io.InputStream),"digraph cfg_sha3_384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_384(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(String),Method,* Calculates the SHA3-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-384 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_384Hex(final String data) {\n    return Hex.encodeHexString(sha3_384(data));\n},java.lang.String sha3_384Hex(java.lang.String),"digraph cfg_sha3_384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_384(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512(byte[]),Method,* Calculates the SHA3-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-512 digest\n     * @since 1.12,public static byte[] sha3_512(final byte[] data) {\n    return getSha3_512Digest().digest(data);\n},byte[] sha3_512(byte[]),"digraph cfg_sha3_512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_512Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512(InputStream),Method,* Calculates the SHA3-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA3-512 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.12,"public static byte[] sha3_512(final InputStream data) throws IOException {\n    return digest(getSha3_512Digest(), data);\n}",byte[] sha3_512(java.io.InputStream),"digraph cfg_sha3_512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha3_512Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512(String),Method,* Calculates the SHA3-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA3-512 digest\n     * @since 1.12,public static byte[] sha3_512(final String data) {\n    return sha3_512(StringUtils.getBytesUtf8(data));\n},byte[] sha3_512(java.lang.String),"digraph cfg_sha3_512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_512(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byte[]),Method,* Calculates the SHA3-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-512 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_512Hex(final byte[] data) {\n    return Hex.encodeHexString(sha3_512(data));\n},java.lang.String sha3_512Hex(byte[]),"digraph cfg_sha3_512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_512(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(InputStream),Method,* Calculates the SHA3-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-512 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.12,public static String sha3_512Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha3_512(data));\n},java.lang.String sha3_512Hex(java.io.InputStream),"digraph cfg_sha3_512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_512(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(String),Method,* Calculates the SHA3-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA3-512 digest as a hexadecimal string\n     * @since 1.12,public static String sha3_512Hex(final String data) {\n    return Hex.encodeHexString(sha3_512(data));\n},java.lang.String sha3_512Hex(java.lang.String),"digraph cfg_sha3_512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha3_512(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384(byte[]),Method,* Calculates the SHA-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-384 digest\n     * @since 1.4,public static byte[] sha384(final byte[] data) {\n    return getSha384Digest().digest(data);\n},byte[] sha384(byte[]),"digraph cfg_sha384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha384Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384(InputStream),Method,* Calculates the SHA-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-384 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.4,"public static byte[] sha384(final InputStream data) throws IOException {\n    return digest(getSha384Digest(), data);\n}",byte[] sha384(java.io.InputStream),"digraph cfg_sha384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha384Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384(String),Method,* Calculates the SHA-384 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-384 digest\n     * @since 1.4,public static byte[] sha384(final String data) {\n    return sha384(StringUtils.getBytesUtf8(data));\n},byte[] sha384(java.lang.String),"digraph cfg_sha384 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha384(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[]),Method,* Calculates the SHA-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-384 digest as a hexadecimal string\n     * @since 1.4,public static String sha384Hex(final byte[] data) {\n    return Hex.encodeHexString(sha384(data));\n},java.lang.String sha384Hex(byte[]),"digraph cfg_sha384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha384(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384Hex(InputStream),Method,* Calculates the SHA-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-384 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.4,public static String sha384Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha384(data));\n},java.lang.String sha384Hex(java.io.InputStream),"digraph cfg_sha384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha384(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha384Hex(String),Method,* Calculates the SHA-384 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-384 digest as a hexadecimal string\n     * @since 1.4,public static String sha384Hex(final String data) {\n    return Hex.encodeHexString(sha384(data));\n},java.lang.String sha384Hex(java.lang.String),"digraph cfg_sha384Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha384(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512(byte[]),Method,* Calculates the SHA-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512 digest\n     * @since 1.4,public static byte[] sha512(final byte[] data) {\n    return getSha512Digest().digest(data);\n},byte[] sha512(byte[]),"digraph cfg_sha512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512(InputStream),Method,* Calculates the SHA-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.4,"public static byte[] sha512(final InputStream data) throws IOException {\n    return digest(getSha512Digest(), data);\n}",byte[] sha512(java.io.InputStream),"digraph cfg_sha512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512(String),Method,* Calculates the SHA-512 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-512 digest\n     * @since 1.4,public static byte[] sha512(final String data) {\n    return sha512(StringUtils.getBytesUtf8(data));\n},byte[] sha512(java.lang.String),"digraph cfg_sha512 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224(byte[]),Method,* Calculates the SHA-512/224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512/224 digest\n     * @since 1.14,public static byte[] sha512_224(final byte[] data) {\n    return getSha512_224Digest().digest(data);\n},byte[] sha512_224(byte[]),"digraph cfg_sha512_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512_224Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224(InputStream),Method,* Calculates the SHA-512/224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512/224 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public static byte[] sha512_224(final InputStream data) throws IOException {\n    return digest(getSha512_224Digest(), data);\n}",byte[] sha512_224(java.io.InputStream),"digraph cfg_sha512_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512_224Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224(String),Method,* Calculates the SHA-512/224 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-512/224 digest\n     * @since 1.14,public static byte[] sha512_224(final String data) {\n    return sha512_224(StringUtils.getBytesUtf8(data));\n},byte[] sha512_224(java.lang.String),"digraph cfg_sha512_224 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_224(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byte[]),Method,* Calculates the SHA-512/224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/224 digest as a hexadecimal string\n     * @since 1.14,public static String sha512_224Hex(final byte[] data) {\n    return Hex.encodeHexString(sha512_224(data));\n},java.lang.String sha512_224Hex(byte[]),"digraph cfg_sha512_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_224(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(InputStream),Method,* Calculates the SHA-512/224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/224 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.14,public static String sha512_224Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha512_224(data));\n},java.lang.String sha512_224Hex(java.io.InputStream),"digraph cfg_sha512_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_224(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(String),Method,* Calculates the SHA-512/224 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/224 digest as a hexadecimal string\n     * @since 1.14,public static String sha512_224Hex(final String data) {\n    return Hex.encodeHexString(sha512_224(data));\n},java.lang.String sha512_224Hex(java.lang.String),"digraph cfg_sha512_224Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_224(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256(byte[]),Method,* Calculates the SHA-512/256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512/256 digest\n     * @since 1.14,public static byte[] sha512_256(final byte[] data) {\n    return getSha512_256Digest().digest(data);\n},byte[] sha512_256(byte[]),"digraph cfg_sha512_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512_256Digest()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.security.MessageDigest: byte[] digest(byte[])>(data)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256(InputStream),Method,* Calculates the SHA-512/256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest\n     * @return SHA-512/256 digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public static byte[] sha512_256(final InputStream data) throws IOException {\n    return digest(getSha512_256Digest(), data);\n}",byte[] sha512_256(java.io.InputStream),"digraph cfg_sha512_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha512_256Digest()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>($stack1, data)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256(String),Method,* Calculates the SHA-512/256 digest and returns the value as a {@code byte[]}.\n     *\n     * @param data Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return SHA-512/224 digest\n     * @since 1.14,public static byte[] sha512_256(final String data) {\n    return sha512_256(StringUtils.getBytesUtf8(data));\n},byte[] sha512_256(java.lang.String),"digraph cfg_sha512_256 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_256(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byte[]),Method,* Calculates the SHA-512/256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/256 digest as a hexadecimal string\n     * @since 1.14,public static String sha512_256Hex(final byte[] data) {\n    return Hex.encodeHexString(sha512_256(data));\n},java.lang.String sha512_256Hex(byte[]),"digraph cfg_sha512_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_256(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(InputStream),Method,* Calculates the SHA-512/256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/256 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.14,public static String sha512_256Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha512_256(data));\n},java.lang.String sha512_256Hex(java.io.InputStream),"digraph cfg_sha512_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_256(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(String),Method,* Calculates the SHA-512/256 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512/256 digest as a hexadecimal string\n     * @since 1.14,public static String sha512_256Hex(final String data) {\n    return Hex.encodeHexString(sha512_256(data));\n},java.lang.String sha512_256Hex(java.lang.String),"digraph cfg_sha512_256Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512_256(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[]),Method,* Calculates the SHA-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512 digest as a hexadecimal string\n     * @since 1.4,public static String sha512Hex(final byte[] data) {\n    return Hex.encodeHexString(sha512(data));\n},java.lang.String sha512Hex(byte[]),"digraph cfg_sha512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512(byte[])>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512Hex(InputStream),Method,* Calculates the SHA-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.4,public static String sha512Hex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(sha512(data));\n},java.lang.String sha512Hex(java.io.InputStream),"digraph cfg_sha512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.sha512Hex(String),Method,* Calculates the SHA-512 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-512 digest as a hexadecimal string\n     * @since 1.4,public static String sha512Hex(final String data) {\n    return Hex.encodeHexString(sha512(data));\n},java.lang.String sha512Hex(java.lang.String),"digraph cfg_sha512Hex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha512(java.lang.String)>(data)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.shaHex(byte[]),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @deprecated (1.11) Use {@link #sha1Hex(byte[])},@Deprecated\npublic static String shaHex(final byte[] data) {\n    return sha1Hex(data);\n},java.lang.String shaHex(byte[]),"digraph cfg_shaHex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.lang.String sha1Hex(byte[])>(data)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.shaHex(InputStream),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.4\n     * @deprecated (1.11) Use {@link #sha1Hex(InputStream)},@Deprecated\npublic static String shaHex(final InputStream data) throws IOException {\n    return sha1Hex(data);\n},java.lang.String shaHex(java.io.InputStream),"digraph cfg_shaHex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.lang.String sha1Hex(java.io.InputStream)>(data)""];\n	""2"" [label=""data := @parameter0: java.io.InputStream""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.shaHex(String),Method,* Calculates the SHA-1 digest and returns the value as a hexadecimal string.\n     *\n     * @param data Data to digest\n     * @return SHA-1 digest as a hexadecimal string\n     * @deprecated (1.11) Use {@link #sha1Hex(String)},@Deprecated\npublic static String shaHex(final String data) {\n    return sha1Hex(data);\n},java.lang.String shaHex(java.lang.String),"digraph cfg_shaHex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.lang.String sha1Hex(java.lang.String)>(data)""];\n	""2"" [label=""data := @parameter0: java.lang.String""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,byte[])",Method,* Updates the given {@link MessageDigest}.\n     *\n     * @param messageDigest the {@link MessageDigest} to update\n     * @param valueToDigest the value to update the {@link MessageDigest} with\n     * @return the updated {@link MessageDigest}\n     * @since 1.7,"public static MessageDigest updateDigest(final MessageDigest messageDigest, final byte[] valueToDigest) {\n    messageDigest.update(valueToDigest);\n    return messageDigest;\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,byte[])","digraph cfg_updateDigest {\n	""1"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""2"" [label=""return messageDigest""];\n	""3"" [label=""valueToDigest := @parameter1: byte[]""];\n	""4"" [label=""virtualinvoke messageDigest.<java.security.MessageDigest: void update(byte[])>(valueToDigest)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,ByteBuffer)",Method,* Updates the given {@link MessageDigest}.\n     *\n     * @param messageDigest the {@link MessageDigest} to update\n     * @param valueToDigest the value to update the {@link MessageDigest} with\n     * @return the updated {@link MessageDigest}\n     * @since 1.11,"public static MessageDigest updateDigest(final MessageDigest messageDigest, final ByteBuffer valueToDigest) {\n    messageDigest.update(valueToDigest);\n    return messageDigest;\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.ByteBuffer)","digraph cfg_updateDigest {\n	""1"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""2"" [label=""return messageDigest""];\n	""3"" [label=""valueToDigest := @parameter1: java.nio.ByteBuffer""];\n	""4"" [label=""virtualinvoke messageDigest.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(valueToDigest)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,File)",Method,* Reads through a File and updates the digest for the data\n     *\n     * @param digest The MessageDigest to use (for example MD5)\n     * @param data   Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.11,"public static MessageDigest updateDigest(final MessageDigest digest, final File data) throws IOException {\n    try (BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(data))) {\n        return updateDigest(digest, inputStream);\n    }\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.File)","digraph cfg_updateDigest {\n	""1"" [label=""$stack5 = new java.io.FileInputStream""];\n	""2"" [label=""$stack6 = new java.io.BufferedInputStream""];\n	""3"" [label=""$stack7 := @caughtexception""];\n	""4"" [label=""$stack8 := @caughtexception""];\n	""5"" [label=""data := @parameter1: java.io.File""];\n	""6"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""7"" [label=""goto""];\n	""8"" [label=""inputStream = $stack6""];\n	""9"" [label=""l3 = $stack8""];\n	""10"" [label=""l3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)>(digest, inputStream)""];\n	""11"" [label=""l4 = $stack7""];\n	""12"" [label=""return l3""];\n	""13"" [label=""specialinvoke $stack5.<java.io.FileInputStream: void <init>(java.io.File)>(data)""];\n	""14"" [label=""specialinvoke $stack6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($stack5)""];\n	""15"" [label=""throw l3""];\n	""16"" [label=""virtualinvoke inputStream.<java.io.BufferedInputStream: void close()>()""];\n	""17"" [label=""virtualinvoke inputStream.<java.io.BufferedInputStream: void close()>()""];\n	""18"" [label=""virtualinvoke l3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l4)""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""16""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_except""];\n	""11"" -> ""18""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""3""[label=""cfg_except""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_goto""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""17""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,FileChannel)",Method,* Reads through a RandomAccessFile and updates the digest for the data using non-blocking-io (NIO).\n     *\n     * TODO Decide if this should be public.\n     *\n     * @param digest The MessageDigest to use (for example MD5)\n     * @param data   Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"private static MessageDigest updateDigest(final MessageDigest digest, final FileChannel data) throws IOException {\n    final ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);\n    while (data.read(buffer) > 0) {\n        buffer.flip();\n        digest.update(buffer);\n        buffer.clear();\n    }\n    return digest;\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.channels.FileChannel)","digraph cfg_updateDigest {\n	""1"" [label=""$stack3 = virtualinvoke data.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(buffer)""];\n	""2"" [label=""buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1024)""];\n	""3"" [label=""data := @parameter1: java.nio.channels.FileChannel""];\n	""4"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack3 <= 0""];\n	""7"" [label=""return digest""];\n	""8"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>()""];\n	""9"" [label=""virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>()""];\n	""10"" [label=""virtualinvoke digest.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(buffer)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_goto""];\n	""6"" -> ""7""[label=""cfg_true""];\n	""6"" -> ""9""[label=""cfg_false""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,InputStream)",Method,* Reads through an InputStream and updates the digest for the data\n     *\n     * @param digest      The MessageDigest to use (for example MD5)\n     * @param inputStream Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.8,"public static MessageDigest updateDigest(final MessageDigest digest, final InputStream inputStream) throws IOException {\n    final byte[] buffer = new byte[BUFFER_SIZE];\n    int read = inputStream.read(buffer, 0, BUFFER_SIZE);\n    while (read > -1) {\n        digest.update(buffer, 0, read);\n        read = inputStream.read(buffer, 0, BUFFER_SIZE);\n    }\n    return digest;\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)","digraph cfg_updateDigest {\n	""1"" [label=""buffer = newarray (byte)[1024]""];\n	""2"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""3"" [label=""goto""];\n	""4"" [label=""if read <= -1""];\n	""5"" [label=""inputStream := @parameter1: java.io.InputStream""];\n	""6"" [label=""read = virtualinvoke inputStream.<java.io.InputStream: int read(byte[],int,int)>(buffer, 0, 1024)""];\n	""7"" [label=""read = virtualinvoke inputStream.<java.io.InputStream: int read(byte[],int,int)>(buffer, 0, 1024)""];\n	""8"" [label=""return digest""];\n	""9"" [label=""virtualinvoke digest.<java.security.MessageDigest: void update(byte[],int,int)>(buffer, 0, read)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_goto""];\n	""4"" -> ""8""[label=""cfg_true""];\n	""4"" -> ""9""[label=""cfg_false""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,Path,OpenOption[])",Method,* Reads through a Path and updates the digest for the data\n     *\n     * @param digest  The MessageDigest to use (for example MD5)\n     * @param path    Data to digest\n     * @param options options How to open the file\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public static MessageDigest updateDigest(final MessageDigest digest, final Path path, final OpenOption... options) throws IOException {\n    try (BufferedInputStream inputStream = new BufferedInputStream(Files.newInputStream(path, options))) {\n        return updateDigest(digest, inputStream);\n    }\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.file.Path,java.nio.file.OpenOption[])","digraph cfg_updateDigest {\n	""1"" [label=""$stack6 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(path, options)""];\n	""2"" [label=""$stack7 = new java.io.BufferedInputStream""];\n	""3"" [label=""$stack8 := @caughtexception""];\n	""4"" [label=""$stack9 := @caughtexception""];\n	""5"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""6"" [label=""goto""];\n	""7"" [label=""inputStream = $stack7""];\n	""8"" [label=""l4 = $stack9""];\n	""9"" [label=""l4 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)>(digest, inputStream)""];\n	""10"" [label=""l5 = $stack8""];\n	""11"" [label=""options := @parameter2: java.nio.file.OpenOption[]""];\n	""12"" [label=""path := @parameter1: java.nio.file.Path""];\n	""13"" [label=""return l4""];\n	""14"" [label=""specialinvoke $stack7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($stack6)""];\n	""15"" [label=""throw l4""];\n	""16"" [label=""virtualinvoke inputStream.<java.io.BufferedInputStream: void close()>()""];\n	""17"" [label=""virtualinvoke inputStream.<java.io.BufferedInputStream: void close()>()""];\n	""18"" [label=""virtualinvoke l4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l5)""];\n	""1"" -> ""14""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""14"" -> ""7""[label=""cfg_next""];\n	""16"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""3""[label=""cfg_except""];\n	""17"" -> ""6""[label=""cfg_next""];\n	""18"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_goto""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""17""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_except""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,RandomAccessFile)",Method,* Reads through a RandomAccessFile and updates the digest for the data using non-blocking-io (NIO)\n     *\n     * @param digest The MessageDigest to use (for example MD5)\n     * @param data   Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"// Closing RandomAccessFile closes the channel.\n@SuppressWarnings(""resource"")\npublic static MessageDigest updateDigest(final MessageDigest digest, final RandomAccessFile data) throws IOException {\n    return updateDigest(digest, data.getChannel());\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.RandomAccessFile)","digraph cfg_updateDigest {\n	""1"" [label=""$stack2 = virtualinvoke data.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.channels.FileChannel)>(digest, $stack2)""];\n	""3"" [label=""data := @parameter1: java.io.RandomAccessFile""];\n	""4"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,String)",Method,"* Updates the given {@link MessageDigest} from a String (converted to bytes using UTF-8).\n     * <p>\n     * To update the digest using a different charset for the conversion, convert the String to a byte array using\n     * {@link String#getBytes(java.nio.charset.Charset)} and pass that to the {@link DigestUtils#updateDigest(MessageDigest, byte[])} method\n     *\n     * @param messageDigest the {@link MessageDigest} to update\n     * @param valueToDigest the value to update the {@link MessageDigest} with; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n     * @return the updated {@link MessageDigest}\n     * @since 1.7","public static MessageDigest updateDigest(final MessageDigest messageDigest, final String valueToDigest) {\n    messageDigest.update(StringUtils.getBytesUtf8(valueToDigest));\n    return messageDigest;\n}","java.security.MessageDigest updateDigest(java.security.MessageDigest,java.lang.String)","digraph cfg_updateDigest {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(valueToDigest)""];\n	""2"" [label=""messageDigest := @parameter0: java.security.MessageDigest""];\n	""3"" [label=""return messageDigest""];\n	""4"" [label=""valueToDigest := @parameter1: java.lang.String""];\n	""5"" [label=""virtualinvoke messageDigest.<java.security.MessageDigest: void update(byte[])>($stack2)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.DigestUtils.digest(byte[]),Method,* Reads through a byte array and returns the digest for the data.\n     *\n     * @param data Data to digest\n     * @return the digest\n     * @since 1.11,"public byte[] digest(final byte[] data) {\n    return updateDigest(messageDigest, data).digest();\n}",byte[] digest(byte[]),"digraph cfg_digest {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,byte[])>($stack2, data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digest(ByteBuffer),Method,* Reads through a ByteBuffer and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest\n     * @since 1.11,"public byte[] digest(final ByteBuffer data) {\n    return updateDigest(messageDigest, data).digest();\n}",byte[] digest(java.nio.ByteBuffer),"digraph cfg_digest {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.ByteBuffer)>($stack2, data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digest(File),Method,* Reads through a File and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.11,"public byte[] digest(final File data) throws IOException {\n    return updateDigest(messageDigest, data).digest();\n}",byte[] digest(java.io.File),"digraph cfg_digest {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.File)>($stack2, data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: java.io.File""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digest(InputStream),Method,* Reads through an InputStream and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.11,"public byte[] digest(final InputStream data) throws IOException {\n    return updateDigest(messageDigest, data).digest();\n}",byte[] digest(java.io.InputStream),"digraph cfg_digest {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)>($stack2, data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: java.io.InputStream""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.DigestUtils.digest(Path,OpenOption[])",Method,* Reads through a File and returns the digest for the data\n     *\n     * @param data    Data to digest\n     * @param options options How to open the file\n     * @return the digest\n     * @throws IOException On error reading from the stream\n     * @since 1.14,"public byte[] digest(final Path data, final OpenOption... options) throws IOException {\n    return updateDigest(messageDigest, data, options).digest();\n}","byte[] digest(java.nio.file.Path,java.nio.file.OpenOption[])","digraph cfg_digest {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.nio.file.Path,java.nio.file.OpenOption[])>($stack3, data, options)""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: java.nio.file.Path""];\n	""5"" [label=""options := @parameter1: java.nio.file.OpenOption[]""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digest(String),Method,* Reads through a byte array and returns the digest for the data.\n     *\n     * @param data Data to digest treated as UTF-8 string\n     * @return the digest\n     * @since 1.11,"public byte[] digest(final String data) {\n    return updateDigest(messageDigest, data).digest();\n}",byte[] digest(java.lang.String),"digraph cfg_digest {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.lang.String)>($stack2, data)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.security.MessageDigest: byte[] digest()>()""];\n	""4"" [label=""data := @parameter0: java.lang.String""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digestAsHex(byte[]),Method,* Reads through a byte array and returns the digest for the data.\n     *\n     * @param data Data to digest\n     * @return the digest as a hexadecimal string\n     * @since 1.11,public String digestAsHex(final byte[] data) {\n    return Hex.encodeHexString(digest(data));\n},java.lang.String digestAsHex(byte[]),"digraph cfg_digestAsHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(byte[])>(data)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digestAsHex(ByteBuffer),Method,* Reads through a ByteBuffer and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest as a hexadecimal string\n     * @since 1.11,public String digestAsHex(final ByteBuffer data) {\n    return Hex.encodeHexString(digest(data));\n},java.lang.String digestAsHex(java.nio.ByteBuffer),"digraph cfg_digestAsHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.nio.ByteBuffer)>(data)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digestAsHex(File),Method,* Reads through a File and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.11,public String digestAsHex(final File data) throws IOException {\n    return Hex.encodeHexString(digest(data));\n},java.lang.String digestAsHex(java.io.File),"digraph cfg_digestAsHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.io.File)>(data)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""data := @parameter0: java.io.File""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digestAsHex(InputStream),Method,* Reads through an InputStream and returns the digest for the data\n     *\n     * @param data Data to digest\n     * @return the digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.11,public String digestAsHex(final InputStream data) throws IOException {\n    return Hex.encodeHexString(digest(data));\n},java.lang.String digestAsHex(java.io.InputStream),"digraph cfg_digestAsHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.io.InputStream)>(data)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""data := @parameter0: java.io.InputStream""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.DigestUtils.digestAsHex(Path,OpenOption[])",Method,* Reads through a File and returns the digest for the data\n     *\n     * @param data    Data to digest\n     * @param options options How to open the file\n     * @return the digest as a hexadecimal string\n     * @throws IOException On error reading from the stream\n     * @since 1.11,"public String digestAsHex(final Path data, final OpenOption... options) throws IOException {\n    return Hex.encodeHexString(digest(data, options));\n}","java.lang.String digestAsHex(java.nio.file.Path,java.nio.file.OpenOption[])","digraph cfg_digestAsHex {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.nio.file.Path,java.nio.file.OpenOption[])>(data, options)""];\n	""2"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack3)""];\n	""3"" [label=""data := @parameter0: java.nio.file.Path""];\n	""4"" [label=""options := @parameter1: java.nio.file.OpenOption[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.digestAsHex(String),Method,* Reads through a byte array and returns the digest for the data.\n     *\n     * @param data Data to digest treated as UTF-8 string\n     * @return the digest as a hexadecimal string\n     * @since 1.11,public String digestAsHex(final String data) {\n    return Hex.encodeHexString(digest(data));\n},java.lang.String digestAsHex(java.lang.String),"digraph cfg_digestAsHex {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.lang.String)>(data)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($stack2)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.getMessageDigest(),Method,* Returns the message digest instance.\n     *\n     * @return the message digest instance\n     * @since 1.11,public MessageDigest getMessageDigest() {\n    return messageDigest;\n},java.security.MessageDigest getMessageDigest(),"digraph cfg_getMessageDigest {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.<init>(),Constructor,* Preserves binary compatibility only. As for previous versions does not provide useful behavior\n     *\n     * @deprecated since 1.11; only useful to preserve binary compatibility,@Deprecated\npublic DigestUtils() {\n    this.messageDigest = null;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""4"" [label=""this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest> = null""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.<init>(MessageDigest),Constructor,* Creates an instance using the provided {@link MessageDigest} parameter.\n     *\n     * This can then be used to create digests using methods such as {@link #digest(byte[])} and {@link #digestAsHex(File)}.\n     *\n     * @param digest the {@link MessageDigest} to use\n     * @since 1.11,public DigestUtils(final MessageDigest digest) {\n    this.messageDigest = digest;\n},void <init>(java.security.MessageDigest),"digraph cfg_init {\n	""1"" [label=""digest := @parameter0: java.security.MessageDigest""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""5"" [label=""this.<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest messageDigest> = digest""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.DigestUtils.<init>(String),Constructor,* Creates an instance using the provided {@link MessageDigest} parameter.\n     *\n     * This can then be used to create digests using methods such as {@link #digest(byte[])} and {@link #digestAsHex(File)}.\n     *\n     * @param name the name of the {@link MessageDigest} to use\n     * @see #getDigest(String)\n     * @throws IllegalArgumentException when a {@link NoSuchAlgorithmException} is caught.\n     * @since 1.11,public DigestUtils(final String name) {\n    this(getDigest(name));\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(name)""];\n	""2"" [label=""name := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.digest.DigestUtils: void <init>(java.security.MessageDigest)>($stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.digest.DigestUtils""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianInt(byte[],int)",Method,* Gets the little-endian int from 4 bytes starting at the specified index.\n     *\n     * @param data The data\n     * @param index The index\n     * @return The little-endian int,"private static int getLittleEndianInt(final byte[] data, final int index) {\n    return data[index] & 0xff | (data[index + 1] & 0xff) << 8 | (data[index + 2] & 0xff) << 16 | (data[index + 3] & 0xff) << 24;\n}","int getLittleEndianInt(byte[],int)","digraph cfg_getLittleEndianInt {\n	""1"" [label=""$stack10 = $stack9 & 255""];\n	""2"" [label=""$stack11 = $stack6 | $stack7""];\n	""3"" [label=""$stack12 = $stack10 << 16""];\n	""4"" [label=""$stack13 = index + 3""];\n	""5"" [label=""$stack14 = data[$stack13]""];\n	""6"" [label=""$stack15 = $stack14 & 255""];\n	""7"" [label=""$stack16 = $stack11 | $stack12""];\n	""8"" [label=""$stack17 = $stack15 << 24""];\n	""9"" [label=""$stack18 = $stack16 | $stack17""];\n	""10"" [label=""$stack2 = data[index]""];\n	""11"" [label=""$stack3 = index + 1""];\n	""12"" [label=""$stack4 = data[$stack3]""];\n	""13"" [label=""$stack5 = $stack4 & 255""];\n	""14"" [label=""$stack6 = $stack2 & 255""];\n	""15"" [label=""$stack7 = $stack5 << 8""];\n	""16"" [label=""$stack8 = index + 2""];\n	""17"" [label=""$stack9 = data[$stack8]""];\n	""18"" [label=""data := @parameter0: byte[]""];\n	""19"" [label=""index := @parameter1: int""];\n	""20"" [label=""return $stack18""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""20""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianLong(byte[],int)",Method,* Gets the little-endian long from 8 bytes starting at the specified index.\n     *\n     * @param data The data\n     * @param index The index\n     * @return The little-endian long,"private static long getLittleEndianLong(final byte[] data, final int index) {\n    return (long) data[index] & 0xff | ((long) data[index + 1] & 0xff) << 8 | ((long) data[index + 2] & 0xff) << 16 | ((long) data[index + 3] & 0xff) << 24 | ((long) data[index + 4] & 0xff) << 32 | ((long) data[index + 5] & 0xff) << 40 | ((long) data[index + 6] & 0xff) << 48 | ((long) data[index + 7] & 0xff) << 56;\n}","long getLittleEndianLong(byte[],int)","digraph cfg_getLittleEndianLong {\n	""1"" [label=""$stack10 = index + 2""];\n	""2"" [label=""$stack11 = data[$stack10]""];\n	""3"" [label=""$stack12 = (long) $stack11""];\n	""4"" [label=""$stack13 = $stack12 & 255L""];\n	""5"" [label=""$stack14 = $stack8 | $stack9""];\n	""6"" [label=""$stack15 = $stack13 << 16""];\n	""7"" [label=""$stack16 = index + 3""];\n	""8"" [label=""$stack17 = data[$stack16]""];\n	""9"" [label=""$stack18 = (long) $stack17""];\n	""10"" [label=""$stack19 = $stack18 & 255L""];\n	""11"" [label=""$stack2 = data[index]""];\n	""12"" [label=""$stack20 = $stack14 | $stack15""];\n	""13"" [label=""$stack21 = $stack19 << 24""];\n	""14"" [label=""$stack22 = index + 4""];\n	""15"" [label=""$stack23 = data[$stack22]""];\n	""16"" [label=""$stack24 = (long) $stack23""];\n	""17"" [label=""$stack25 = $stack24 & 255L""];\n	""18"" [label=""$stack26 = $stack20 | $stack21""];\n	""19"" [label=""$stack27 = $stack25 << 32""];\n	""20"" [label=""$stack28 = index + 5""];\n	""21"" [label=""$stack29 = data[$stack28]""];\n	""22"" [label=""$stack3 = (long) $stack2""];\n	""23"" [label=""$stack30 = (long) $stack29""];\n	""24"" [label=""$stack31 = $stack30 & 255L""];\n	""25"" [label=""$stack32 = $stack26 | $stack27""];\n	""26"" [label=""$stack33 = $stack31 << 40""];\n	""27"" [label=""$stack34 = index + 6""];\n	""28"" [label=""$stack35 = data[$stack34]""];\n	""29"" [label=""$stack36 = (long) $stack35""];\n	""30"" [label=""$stack37 = $stack36 & 255L""];\n	""31"" [label=""$stack38 = $stack32 | $stack33""];\n	""32"" [label=""$stack39 = $stack37 << 48""];\n	""33"" [label=""$stack4 = index + 1""];\n	""34"" [label=""$stack40 = index + 7""];\n	""35"" [label=""$stack41 = data[$stack40]""];\n	""36"" [label=""$stack42 = (long) $stack41""];\n	""37"" [label=""$stack43 = $stack42 & 255L""];\n	""38"" [label=""$stack44 = $stack38 | $stack39""];\n	""39"" [label=""$stack45 = $stack43 << 56""];\n	""40"" [label=""$stack46 = $stack44 | $stack45""];\n	""41"" [label=""$stack5 = data[$stack4]""];\n	""42"" [label=""$stack6 = (long) $stack5""];\n	""43"" [label=""$stack7 = $stack6 & 255L""];\n	""44"" [label=""$stack8 = $stack3 & 255L""];\n	""45"" [label=""$stack9 = $stack7 << 8""];\n	""46"" [label=""data := @parameter0: byte[]""];\n	""47"" [label=""index := @parameter1: int""];\n	""48"" [label=""return $stack46""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""18""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""19""[label=""cfg_next""];\n	""18"" -> ""14""[label=""cfg_next""];\n	""19"" -> ""25""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""44""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""31""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""27""[label=""cfg_next""];\n	""32"" -> ""38""[label=""cfg_next""];\n	""33"" -> ""41""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""39""[label=""cfg_next""];\n	""38"" -> ""34""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""48""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""43""[label=""cfg_next""];\n	""43"" -> ""45""[label=""cfg_next""];\n	""44"" -> ""33""[label=""cfg_next""];\n	""45"" -> ""5""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int)",Method,"* Generates a 32-bit hash from byte array with the given length and a default seed value.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int seed = 0x9747b28c;\n     * int hash = MurmurHash2.hash32(data, length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @param length The length of the array\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int)","public static int hash32(final byte[] data, final int length) {\n    return hash32(data, length, 0x9747b28c);\n}","int hash32(byte[],int)","digraph cfg_hash32 {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: int hash32(byte[],int,int)>(data, length, -1756908916)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter1: int""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int,int)",Method,* Generates a 32-bit hash from byte array with the given length and seed.\n     *\n     * @param data The input byte array\n     * @param length The length of the array\n     * @param seed The initial seed value\n     * @return The 32-bit hash,"public static int hash32(final byte[] data, final int length, final int seed) {\n    // Initialize the hash to a random value\n    int h = seed ^ length;\n    // Mix 4 bytes at a time into the hash\n    final int nblocks = length >> 2;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = i << 2;\n        int k = getLittleEndianInt(data, index);\n        k *= M32;\n        k ^= k >>> R32;\n        k *= M32;\n        h *= M32;\n        h ^= k;\n    }\n    // Handle the last few bytes of the input array\n    final int index = nblocks << 2;\n    switch(length - index) {\n        case 3:\n            h ^= (data[index + 2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            h ^= (data[index + 1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            h ^= data[index] & 0xff;\n            h *= M32;\n    }\n    // Do a few final mixes of the hash to ensure the last few\n    // bytes are well-incorporated.\n    h ^= h >>> 13;\n    h *= M32;\n    h ^= h >>> 15;\n    return h;\n}","int hash32(byte[],int,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack10 = data[$stack9]""];\n	""2"" [label=""$stack11 = $stack10 & 255""];\n	""3"" [label=""$stack12 = $stack11 << 16""];\n	""4"" [label=""$stack13 = i + 1""];\n	""5"" [label=""$stack14 = data[$stack13]""];\n	""6"" [label=""$stack15 = $stack14 & 255""];\n	""7"" [label=""$stack16 = $stack15 << 8""];\n	""8"" [label=""$stack17 = data[i]""];\n	""9"" [label=""$stack18 = $stack17 & 255""];\n	""10"" [label=""$stack19 = h >>> 13""];\n	""11"" [label=""$stack20 = h >>> 15""];\n	""12"" [label=""$stack21 = k >>> 24""];\n	""13"" [label=""$stack8 = length - i""];\n	""14"" [label=""$stack9 = i + 2""];\n	""15"" [label=""data := @parameter0: byte[]""];\n	""16"" [label=""goto""];\n	""17"" [label=""h = h * 1540483477""];\n	""18"" [label=""h = h * 1540483477""];\n	""19"" [label=""h = h * 1540483477""];\n	""20"" [label=""h = h ^ $stack12""];\n	""21"" [label=""h = h ^ $stack16""];\n	""22"" [label=""h = h ^ $stack18""];\n	""23"" [label=""h = h ^ $stack19""];\n	""24"" [label=""h = h ^ $stack20""];\n	""25"" [label=""h = h ^ k""];\n	""26"" [label=""h = seed ^ length""];\n	""27"" [label=""i = 0""];\n	""28"" [label=""i = i + 1""];\n	""29"" [label=""i = nblocks << 2""];\n	""30"" [label=""if i >= nblocks""];\n	""31"" [label=""index = i << 2""];\n	""32"" [label=""k = k * 1540483477""];\n	""33"" [label=""k = k * 1540483477""];\n	""34"" [label=""k = k ^ $stack21""];\n	""35"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: int getLittleEndianInt(byte[],int)>(data, index)""];\n	""36"" [label=""length := @parameter1: int""];\n	""37"" [label=""nblocks = length >> 2""];\n	""38"" [label=""return h""];\n	""39"" [label=""seed := @parameter2: int""];\n	""40"" [label=""switch($stack8) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""23""[label=""cfg_next""];\n	""11"" -> ""24""[label=""cfg_next""];\n	""12"" -> ""34""[label=""cfg_next""];\n	""13"" -> ""40""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""15"" -> ""36""[label=""cfg_next""];\n	""16"" -> ""30""[label=""cfg_goto""];\n	""17"" -> ""25""[label=""cfg_next""];\n	""18"" -> ""10""[label=""cfg_next""];\n	""19"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""4""[label=""cfg_next""];\n	""21"" -> ""8""[label=""cfg_next""];\n	""22"" -> ""18""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""24"" -> ""38""[label=""cfg_next""];\n	""25"" -> ""28""[label=""cfg_next""];\n	""26"" -> ""37""[label=""cfg_next""];\n	""27"" -> ""30""[label=""cfg_next""];\n	""28"" -> ""16""[label=""cfg_next""];\n	""29"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""20""[label=""cfg_next""];\n	""30"" -> ""29""[label=""cfg_true""];\n	""30"" -> ""31""[label=""cfg_false""];\n	""31"" -> ""35""[label=""cfg_next""];\n	""32"" -> ""12""[label=""cfg_next""];\n	""33"" -> ""17""[label=""cfg_next""];\n	""34"" -> ""33""[label=""cfg_next""];\n	""35"" -> ""32""[label=""cfg_next""];\n	""36"" -> ""39""[label=""cfg_next""];\n	""37"" -> ""27""[label=""cfg_next""];\n	""39"" -> ""26""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""10""[label=""cfg_switch""];\n	""40"" -> ""14""[label=""cfg_switch""];\n	""40"" -> ""4""[label=""cfg_switch""];\n	""40"" -> ""8""[label=""cfg_switch""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash2.hash32(String),Method,"* Generates a 32-bit hash from a string with a default seed.\n     * <p>\n     * Before 1.14 the string was converted using default encoding.\n     * Since 1.14 the string is converted to bytes using UTF-8 encoding.\n     * </p>\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int seed = 0x9747b28c;\n     * byte[] bytes = data.getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash2.hash32(bytes, bytes.length, seed);\n     * </pre>\n     *\n     * @param text The input string\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int)","public static int hash32(final String text) {\n    final byte[] bytes = StringUtils.getBytesUtf8(text);\n    return hash32(bytes, bytes.length);\n}",int hash32(java.lang.String),"digraph cfg_hash32 {\n	""1"" [label=""$stack2 = lengthof bytes""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: int hash32(byte[],int)>(bytes, $stack2)""];\n	""3"" [label=""bytes = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(text)""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""text := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash2.hash32(String,int,int)",Method,"* Generates a 32-bit hash from a substring with a default seed value.\n     * The string is converted to bytes using the default encoding.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int seed = 0x9747b28c;\n     * byte[] bytes = text.substring(from, from + length).getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash2.hash32(bytes, bytes.length, seed);\n     * </pre>\n     *\n     * @param text The input string\n     * @param from The starting index\n     * @param length The length of the substring\n     * @return The 32-bit hash\n     * @see #hash32(byte[], int, int)","public static int hash32(final String text, final int from, final int length) {\n    return hash32(text.substring(from, from + length));\n}","int hash32(java.lang.String,int,int)","digraph cfg_hash32 {\n	""1"" [label=""$stack3 = from + length""];\n	""2"" [label=""$stack4 = virtualinvoke text.<java.lang.String: java.lang.String substring(int,int)>(from, $stack3)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: int hash32(java.lang.String)>($stack4)""];\n	""4"" [label=""from := @parameter1: int""];\n	""5"" [label=""length := @parameter2: int""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""text := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int)",Method,"* Generates a 64-bit hash from byte array with given length and a default seed value.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int seed = 0xe17a1465;\n     * int hash = MurmurHash2.hash64(data, length, seed);\n     * </pre>\n     *\n     * @param data The input byte array\n     * @param length The length of the array\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int)","public static long hash64(final byte[] data, final int length) {\n    return hash64(data, length, 0xe17a1465);\n}","long hash64(byte[],int)","digraph cfg_hash64 {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: long hash64(byte[],int,int)>(data, length, -512093083)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""length := @parameter1: int""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int,int)",Method,* Generates a 64-bit hash from byte array of the given length and seed.\n     *\n     * @param data The input byte array\n     * @param length The length of the array\n     * @param seed The initial seed value\n     * @return The 64-bit hash of the given array,"public static long hash64(final byte[] data, final int length, final int seed) {\n    long h = seed & 0xffffffffL ^ length * M64;\n    final int nblocks = length >> 3;\n    // body\n    for (int i = 0; i < nblocks; i++) {\n        final int index = i << 3;\n        long k = getLittleEndianLong(data, index);\n        k *= M64;\n        k ^= k >>> R64;\n        k *= M64;\n        h ^= k;\n        h *= M64;\n    }\n    final int index = nblocks << 3;\n    switch(length - index) {\n        case 7:\n            h ^= ((long) data[index + 6] & 0xff) << 48;\n        // falls-through\n        case 6:\n            h ^= ((long) data[index + 5] & 0xff) << 40;\n        // falls-through\n        case 5:\n            h ^= ((long) data[index + 4] & 0xff) << 32;\n        // falls-through\n        case 4:\n            h ^= ((long) data[index + 3] & 0xff) << 24;\n        // falls-through\n        case 3:\n            h ^= ((long) data[index + 2] & 0xff) << 16;\n        // falls-through\n        case 2:\n            h ^= ((long) data[index + 1] & 0xff) << 8;\n        // falls-through\n        case 1:\n            h ^= (long) data[index] & 0xff;\n            h *= M64;\n    }\n    h ^= h >>> R64;\n    h *= M64;\n    h ^= h >>> R64;\n    return h;\n}","long hash64(byte[],int,int)","digraph cfg_hash64 {\n	""1"" [label=""$stack10 = (long) seed""];\n	""2"" [label=""$stack11 = (long) length""];\n	""3"" [label=""$stack12 = $stack10 & 4294967295L""];\n	""4"" [label=""$stack13 = $stack11 * -4132994306676758123L""];\n	""5"" [label=""$stack14 = length - i""];\n	""6"" [label=""$stack15 = i + 6""];\n	""7"" [label=""$stack16 = data[$stack15]""];\n	""8"" [label=""$stack17 = (long) $stack16""];\n	""9"" [label=""$stack18 = $stack17 & 255L""];\n	""10"" [label=""$stack19 = $stack18 << 48""];\n	""11"" [label=""$stack20 = i + 5""];\n	""12"" [label=""$stack21 = data[$stack20]""];\n	""13"" [label=""$stack22 = (long) $stack21""];\n	""14"" [label=""$stack23 = $stack22 & 255L""];\n	""15"" [label=""$stack24 = $stack23 << 40""];\n	""16"" [label=""$stack25 = i + 4""];\n	""17"" [label=""$stack26 = data[$stack25]""];\n	""18"" [label=""$stack27 = (long) $stack26""];\n	""19"" [label=""$stack28 = $stack27 & 255L""];\n	""20"" [label=""$stack29 = $stack28 << 32""];\n	""21"" [label=""$stack30 = i + 3""];\n	""22"" [label=""$stack31 = data[$stack30]""];\n	""23"" [label=""$stack32 = (long) $stack31""];\n	""24"" [label=""$stack33 = $stack32 & 255L""];\n	""25"" [label=""$stack34 = $stack33 << 24""];\n	""26"" [label=""$stack35 = i + 2""];\n	""27"" [label=""$stack36 = data[$stack35]""];\n	""28"" [label=""$stack37 = (long) $stack36""];\n	""29"" [label=""$stack38 = $stack37 & 255L""];\n	""30"" [label=""$stack39 = $stack38 << 16""];\n	""31"" [label=""$stack40 = i + 1""];\n	""32"" [label=""$stack41 = data[$stack40]""];\n	""33"" [label=""$stack42 = (long) $stack41""];\n	""34"" [label=""$stack43 = $stack42 & 255L""];\n	""35"" [label=""$stack44 = $stack43 << 8""];\n	""36"" [label=""$stack45 = data[i]""];\n	""37"" [label=""$stack46 = (long) $stack45""];\n	""38"" [label=""$stack47 = $stack46 & 255L""];\n	""39"" [label=""$stack48 = h >>> 47""];\n	""40"" [label=""$stack49 = h >>> 47""];\n	""41"" [label=""$stack50 = k >>> 47""];\n	""42"" [label=""data := @parameter0: byte[]""];\n	""43"" [label=""goto""];\n	""44"" [label=""h = $stack12 ^ $stack13""];\n	""45"" [label=""h = h * -4132994306676758123L""];\n	""46"" [label=""h = h * -4132994306676758123L""];\n	""47"" [label=""h = h * -4132994306676758123L""];\n	""48"" [label=""h = h ^ $stack19""];\n	""49"" [label=""h = h ^ $stack24""];\n	""50"" [label=""h = h ^ $stack29""];\n	""51"" [label=""h = h ^ $stack34""];\n	""52"" [label=""h = h ^ $stack39""];\n	""53"" [label=""h = h ^ $stack44""];\n	""54"" [label=""h = h ^ $stack47""];\n	""55"" [label=""h = h ^ $stack48""];\n	""56"" [label=""h = h ^ $stack49""];\n	""57"" [label=""h = h ^ k""];\n	""58"" [label=""i = 0""];\n	""59"" [label=""i = i + 1""];\n	""60"" [label=""i = nblocks << 3""];\n	""61"" [label=""if i >= nblocks""];\n	""62"" [label=""index = i << 3""];\n	""63"" [label=""k = k * -4132994306676758123L""];\n	""64"" [label=""k = k * -4132994306676758123L""];\n	""65"" [label=""k = k ^ $stack50""];\n	""66"" [label=""k = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: long getLittleEndianLong(byte[],int)>(data, index)""];\n	""67"" [label=""length := @parameter1: int""];\n	""68"" [label=""nblocks = length >> 3""];\n	""69"" [label=""return h""];\n	""70"" [label=""seed := @parameter2: int""];\n	""71"" [label=""switch($stack14) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     default:  \}""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""48""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""49""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""50""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""51""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""30"" -> ""52""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""53""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""54""[label=""cfg_next""];\n	""39"" -> ""55""[label=""cfg_next""];\n	""4"" -> ""44""[label=""cfg_next""];\n	""40"" -> ""56""[label=""cfg_next""];\n	""41"" -> ""65""[label=""cfg_next""];\n	""42"" -> ""67""[label=""cfg_next""];\n	""43"" -> ""61""[label=""cfg_goto""];\n	""44"" -> ""68""[label=""cfg_next""];\n	""45"" -> ""59""[label=""cfg_next""];\n	""46"" -> ""39""[label=""cfg_next""];\n	""47"" -> ""40""[label=""cfg_next""];\n	""48"" -> ""11""[label=""cfg_next""];\n	""49"" -> ""16""[label=""cfg_next""];\n	""5"" -> ""71""[label=""cfg_next""];\n	""50"" -> ""21""[label=""cfg_next""];\n	""51"" -> ""26""[label=""cfg_next""];\n	""52"" -> ""31""[label=""cfg_next""];\n	""53"" -> ""36""[label=""cfg_next""];\n	""54"" -> ""46""[label=""cfg_next""];\n	""55"" -> ""47""[label=""cfg_next""];\n	""56"" -> ""69""[label=""cfg_next""];\n	""57"" -> ""45""[label=""cfg_next""];\n	""58"" -> ""61""[label=""cfg_next""];\n	""59"" -> ""43""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""5""[label=""cfg_next""];\n	""61"" -> ""60""[label=""cfg_true""];\n	""61"" -> ""62""[label=""cfg_false""];\n	""62"" -> ""66""[label=""cfg_next""];\n	""63"" -> ""41""[label=""cfg_next""];\n	""64"" -> ""57""[label=""cfg_next""];\n	""65"" -> ""64""[label=""cfg_next""];\n	""66"" -> ""63""[label=""cfg_next""];\n	""67"" -> ""70""[label=""cfg_next""];\n	""68"" -> ""58""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""1""[label=""cfg_next""];\n	""71"" -> ""11""[label=""cfg_switch""];\n	""71"" -> ""16""[label=""cfg_switch""];\n	""71"" -> ""21""[label=""cfg_switch""];\n	""71"" -> ""26""[label=""cfg_switch""];\n	""71"" -> ""31""[label=""cfg_switch""];\n	""71"" -> ""36""[label=""cfg_switch""];\n	""71"" -> ""39""[label=""cfg_switch""];\n	""71"" -> ""6""[label=""cfg_switch""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash2.hash64(String),Method,"* Generates a 64-bit hash from a string with a default seed.\n     * <p>\n     * Before 1.14 the string was converted using default encoding.\n     * Since 1.14 the string is converted to bytes using UTF-8 encoding.\n     * </p>\n     * <p>\n     * This is a helper method that will produce the same result as:\n     * </p>\n     *\n     * <pre>\n     * int seed = 0xe17a1465;\n     * byte[] bytes = data.getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash2.hash64(bytes, bytes.length, seed);\n     * </pre>\n     *\n     * @param text The input string\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int)","public static long hash64(final String text) {\n    final byte[] bytes = StringUtils.getBytesUtf8(text);\n    return hash64(bytes, bytes.length);\n}",long hash64(java.lang.String),"digraph cfg_hash64 {\n	""1"" [label=""$stack2 = lengthof bytes""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: long hash64(byte[],int)>(bytes, $stack2)""];\n	""3"" [label=""bytes = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(text)""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""text := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.MurmurHash2.hash64(String,int,int)",Method,"* Generates a 64-bit hash from a substring with a default seed value.\n     * The string is converted to bytes using the default encoding.\n     * This is a helper method that will produce the same result as:\n     *\n     * <pre>\n     * int seed = 0xe17a1465;\n     * byte[] bytes = text.substring(from, from + length).getBytes(StandardCharsets.UTF_8);\n     * int hash = MurmurHash2.hash64(bytes, bytes.length, seed);\n     * </pre>\n     *\n     * @param text The input string\n     * @param from The starting index\n     * @param length The length of the substring\n     * @return The 64-bit hash\n     * @see #hash64(byte[], int, int)","public static long hash64(final String text, final int from, final int length) {\n    return hash64(text.substring(from, from + length));\n}","long hash64(java.lang.String,int,int)","digraph cfg_hash64 {\n	""1"" [label=""$stack3 = from + length""];\n	""2"" [label=""$stack4 = virtualinvoke text.<java.lang.String: java.lang.String substring(int,int)>(from, $stack3)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.MurmurHash2: long hash64(java.lang.String)>($stack4)""];\n	""4"" [label=""from := @parameter1: int""];\n	""5"" [label=""length := @parameter2: int""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""text := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.MurmurHash2.<init>(),Constructor,No instance methods.,private MurmurHash2() {\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.MurmurHash2""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.PureJavaCrc32C.getValue(),Method,No Comment,@Override\npublic long getValue() {\n    final long ret = crc;\n    return ~ret & 0xffffffffL;\n},long getValue(),"digraph cfg_getValue {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc>""];\n	""2"" [label=""$stack4 = ret ^ -1L""];\n	""3"" [label=""$stack5 = $stack4 & 4294967295L""];\n	""4"" [label=""ret = (long) $stack3""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32C""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.PureJavaCrc32C.reset(),Method,No Comment,@Override\npublic void reset() {\n    crc = 0xffffffff;\n},void reset(),"digraph cfg_reset {\n	""1"" [label=""return""];\n	""2"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32C""];\n	""3"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc> = -1""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.PureJavaCrc32C.update(byte[],int,int)",Method,No Comment,"@Override\npublic void update(final byte[] b, int off, int len) {\n    int localCrc = crc;\n    while (len > 7) {\n        final int c0 = (b[off + 0] ^ localCrc) & 0xff;\n        final int c1 = (b[off + 1] ^ (localCrc >>>= 8)) & 0xff;\n        final int c2 = (b[off + 2] ^ (localCrc >>>= 8)) & 0xff;\n        final int c3 = (b[off + 3] ^ (localCrc >>>= 8)) & 0xff;\n        localCrc = T[T8_7_START + c0] ^ T[T8_6_START + c1] ^ T[T8_5_START + c2] ^ T[T8_4_START + c3];\n        final int c4 = b[off + 4] & 0xff;\n        final int c5 = b[off + 5] & 0xff;\n        final int c6 = b[off + 6] & 0xff;\n        final int c7 = b[off + 7] & 0xff;\n        localCrc ^= T[T8_3_START + c4] ^ T[T8_2_START + c5] ^ T[T8_1_START + c6] ^ T[T8_0_START + c7];\n        off += 8;\n        len -= 8;\n    }\n    // loop unroll - duff's device style\n    switch(len) {\n        case 7:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 6:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 5:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 4:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 3:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 2:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        case 1:\n            localCrc = localCrc >>> 8 ^ T[T8_0_START + ((localCrc ^ b[off++]) & 0xff)];\n        // falls-through\n        default:\n            // satisfy Findbugs\n            break;\n    }\n    // Publish crc out to object\n    crc = localCrc;\n}","void update(byte[],int,int)","digraph cfg_update {\n	""1"" [label=""$stack100 = b[$stack99]""];\n	""2"" [label=""$stack101 = off + 7""];\n	""3"" [label=""$stack102 = b[$stack101]""];\n	""4"" [label=""$stack103 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""5"" [label=""$stack104 = 768 + c4""];\n	""6"" [label=""$stack105 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""7"" [label=""$stack106 = 512 + c5""];\n	""8"" [label=""$stack107 = $stack103[$stack104]""];\n	""9"" [label=""$stack108 = $stack105[$stack106]""];\n	""10"" [label=""$stack109 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""11"" [label=""$stack110 = 256 + c6""];\n	""12"" [label=""$stack111 = $stack107 ^ $stack108""];\n	""13"" [label=""$stack112 = $stack109[$stack110]""];\n	""14"" [label=""$stack113 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""15"" [label=""$stack114 = 0 + c7""];\n	""16"" [label=""$stack115 = $stack111 ^ $stack112""];\n	""17"" [label=""$stack116 = $stack113[$stack114]""];\n	""18"" [label=""$stack117 = $stack115 ^ $stack116""];\n	""19"" [label=""$stack13 = off""];\n	""20"" [label=""$stack14 = b[$stack13]""];\n	""21"" [label=""$stack15 = localCrc ^ $stack14""];\n	""22"" [label=""$stack16 = $stack15 & 255""];\n	""23"" [label=""$stack17 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""24"" [label=""$stack18 = 0 + $stack16""];\n	""25"" [label=""$stack19 = localCrc >>> 8""];\n	""26"" [label=""$stack20 = $stack17[$stack18]""];\n	""27"" [label=""$stack21 = off""];\n	""28"" [label=""$stack22 = b[$stack21]""];\n	""29"" [label=""$stack23 = localCrc ^ $stack22""];\n	""30"" [label=""$stack24 = $stack23 & 255""];\n	""31"" [label=""$stack25 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""32"" [label=""$stack26 = 0 + $stack24""];\n	""33"" [label=""$stack27 = localCrc >>> 8""];\n	""34"" [label=""$stack28 = $stack25[$stack26]""];\n	""35"" [label=""$stack29 = off""];\n	""36"" [label=""$stack30 = b[$stack29]""];\n	""37"" [label=""$stack31 = localCrc ^ $stack30""];\n	""38"" [label=""$stack32 = $stack31 & 255""];\n	""39"" [label=""$stack33 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""40"" [label=""$stack34 = 0 + $stack32""];\n	""41"" [label=""$stack35 = localCrc >>> 8""];\n	""42"" [label=""$stack36 = $stack33[$stack34]""];\n	""43"" [label=""$stack37 = off""];\n	""44"" [label=""$stack38 = b[$stack37]""];\n	""45"" [label=""$stack39 = localCrc ^ $stack38""];\n	""46"" [label=""$stack40 = $stack39 & 255""];\n	""47"" [label=""$stack41 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""48"" [label=""$stack42 = 0 + $stack40""];\n	""49"" [label=""$stack43 = localCrc >>> 8""];\n	""50"" [label=""$stack44 = $stack41[$stack42]""];\n	""51"" [label=""$stack45 = off""];\n	""52"" [label=""$stack46 = b[$stack45]""];\n	""53"" [label=""$stack47 = localCrc ^ $stack46""];\n	""54"" [label=""$stack48 = $stack47 & 255""];\n	""55"" [label=""$stack49 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""56"" [label=""$stack50 = 0 + $stack48""];\n	""57"" [label=""$stack51 = localCrc >>> 8""];\n	""58"" [label=""$stack52 = $stack49[$stack50]""];\n	""59"" [label=""$stack53 = off""];\n	""60"" [label=""$stack54 = b[$stack53]""];\n	""61"" [label=""$stack55 = localCrc ^ $stack54""];\n	""62"" [label=""$stack56 = $stack55 & 255""];\n	""63"" [label=""$stack57 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""64"" [label=""$stack58 = 0 + $stack56""];\n	""65"" [label=""$stack59 = localCrc >>> 8""];\n	""66"" [label=""$stack60 = $stack57[$stack58]""];\n	""67"" [label=""$stack61 = off""];\n	""68"" [label=""$stack62 = b[$stack61]""];\n	""69"" [label=""$stack63 = localCrc ^ $stack62""];\n	""70"" [label=""$stack64 = $stack63 & 255""];\n	""71"" [label=""$stack65 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""72"" [label=""$stack66 = 0 + $stack64""];\n	""73"" [label=""$stack67 = localCrc >>> 8""];\n	""74"" [label=""$stack68 = $stack65[$stack66]""];\n	""75"" [label=""$stack69 = off + 0""];\n	""76"" [label=""$stack70 = b[$stack69]""];\n	""77"" [label=""$stack71 = $stack70 ^ localCrc""];\n	""78"" [label=""$stack72 = off + 1""];\n	""79"" [label=""$stack73 = b[$stack72]""];\n	""80"" [label=""$stack74 = $stack73 ^ localCrc""];\n	""81"" [label=""$stack75 = off + 2""];\n	""82"" [label=""$stack76 = b[$stack75]""];\n	""83"" [label=""$stack77 = $stack76 ^ localCrc""];\n	""84"" [label=""$stack78 = off + 3""];\n	""85"" [label=""$stack79 = b[$stack78]""];\n	""86"" [label=""$stack80 = $stack79 ^ localCrc""];\n	""87"" [label=""$stack81 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""88"" [label=""$stack82 = 1792 + c0""];\n	""89"" [label=""$stack83 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""90"" [label=""$stack84 = 1536 + c1""];\n	""91"" [label=""$stack85 = $stack81[$stack82]""];\n	""92"" [label=""$stack86 = $stack83[$stack84]""];\n	""93"" [label=""$stack87 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""94"" [label=""$stack88 = 1280 + c2""];\n	""95"" [label=""$stack89 = $stack85 ^ $stack86""];\n	""96"" [label=""$stack90 = $stack87[$stack88]""];\n	""97"" [label=""$stack91 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""98"" [label=""$stack92 = 1024 + c3""];\n	""99"" [label=""$stack93 = $stack89 ^ $stack90""];\n	""100"" [label=""$stack94 = $stack91[$stack92]""];\n	""101"" [label=""$stack95 = off + 4""];\n	""102"" [label=""$stack96 = b[$stack95]""];\n	""103"" [label=""$stack97 = off + 5""];\n	""104"" [label=""$stack98 = b[$stack97]""];\n	""105"" [label=""$stack99 = off + 6""];\n	""106"" [label=""b := @parameter0: byte[]""];\n	""107"" [label=""c0 = $stack71 & 255""];\n	""108"" [label=""c1 = $stack74 & 255""];\n	""109"" [label=""c2 = $stack77 & 255""];\n	""110"" [label=""c3 = $stack80 & 255""];\n	""111"" [label=""c4 = $stack96 & 255""];\n	""112"" [label=""c5 = $stack98 & 255""];\n	""113"" [label=""c6 = $stack100 & 255""];\n	""114"" [label=""c7 = $stack102 & 255""];\n	""115"" [label=""goto""];\n	""116"" [label=""if len <= 7""];\n	""117"" [label=""len := @parameter2: int""];\n	""118"" [label=""len = len + -8""];\n	""119"" [label=""localCrc = $stack19 ^ $stack20""];\n	""120"" [label=""localCrc = $stack27 ^ $stack28""];\n	""121"" [label=""localCrc = $stack35 ^ $stack36""];\n	""122"" [label=""localCrc = $stack43 ^ $stack44""];\n	""123"" [label=""localCrc = $stack51 ^ $stack52""];\n	""124"" [label=""localCrc = $stack59 ^ $stack60""];\n	""125"" [label=""localCrc = $stack67 ^ $stack68""];\n	""126"" [label=""localCrc = $stack93 ^ $stack94""];\n	""127"" [label=""localCrc = localCrc >>> 8""];\n	""128"" [label=""localCrc = localCrc >>> 8""];\n	""129"" [label=""localCrc = localCrc >>> 8""];\n	""130"" [label=""localCrc = localCrc ^ $stack117""];\n	""131"" [label=""localCrc = this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc>""];\n	""132"" [label=""off := @parameter1: int""];\n	""133"" [label=""off = off + 1""];\n	""134"" [label=""off = off + 1""];\n	""135"" [label=""off = off + 1""];\n	""136"" [label=""off = off + 1""];\n	""137"" [label=""off = off + 1""];\n	""138"" [label=""off = off + 1""];\n	""139"" [label=""off = off + 1""];\n	""140"" [label=""off = off + 8""];\n	""141"" [label=""return""];\n	""142"" [label=""switch(len) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     default:  \}""];\n	""143"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32C""];\n	""144"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc> = localCrc""];\n	""1"" -> ""113""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""126""[label=""cfg_next""];\n	""101"" -> ""102""[label=""cfg_next""];\n	""102"" -> ""111""[label=""cfg_next""];\n	""103"" -> ""104""[label=""cfg_next""];\n	""104"" -> ""112""[label=""cfg_next""];\n	""105"" -> ""1""[label=""cfg_next""];\n	""106"" -> ""132""[label=""cfg_next""];\n	""107"" -> ""78""[label=""cfg_next""];\n	""108"" -> ""81""[label=""cfg_next""];\n	""109"" -> ""84""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""110"" -> ""87""[label=""cfg_next""];\n	""111"" -> ""103""[label=""cfg_next""];\n	""112"" -> ""105""[label=""cfg_next""];\n	""113"" -> ""2""[label=""cfg_next""];\n	""114"" -> ""4""[label=""cfg_next""];\n	""115"" -> ""116""[label=""cfg_goto""];\n	""116"" -> ""142""[label=""cfg_true""];\n	""116"" -> ""75""[label=""cfg_false""];\n	""117"" -> ""131""[label=""cfg_next""];\n	""118"" -> ""115""[label=""cfg_next""];\n	""119"" -> ""33""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""120"" -> ""41""[label=""cfg_next""];\n	""121"" -> ""49""[label=""cfg_next""];\n	""122"" -> ""57""[label=""cfg_next""];\n	""123"" -> ""65""[label=""cfg_next""];\n	""124"" -> ""73""[label=""cfg_next""];\n	""125"" -> ""144""[label=""cfg_next""];\n	""126"" -> ""101""[label=""cfg_next""];\n	""127"" -> ""80""[label=""cfg_next""];\n	""128"" -> ""83""[label=""cfg_next""];\n	""129"" -> ""86""[label=""cfg_next""];\n	""13"" -> ""16""[label=""cfg_next""];\n	""130"" -> ""140""[label=""cfg_next""];\n	""131"" -> ""116""[label=""cfg_next""];\n	""132"" -> ""117""[label=""cfg_next""];\n	""133"" -> ""20""[label=""cfg_next""];\n	""134"" -> ""28""[label=""cfg_next""];\n	""135"" -> ""36""[label=""cfg_next""];\n	""136"" -> ""44""[label=""cfg_next""];\n	""137"" -> ""52""[label=""cfg_next""];\n	""138"" -> ""60""[label=""cfg_next""];\n	""139"" -> ""68""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""140"" -> ""118""[label=""cfg_next""];\n	""142"" -> ""144""[label=""cfg_switch""];\n	""142"" -> ""25""[label=""cfg_switch""];\n	""142"" -> ""33""[label=""cfg_switch""];\n	""142"" -> ""41""[label=""cfg_switch""];\n	""142"" -> ""49""[label=""cfg_switch""];\n	""142"" -> ""57""[label=""cfg_switch""];\n	""142"" -> ""65""[label=""cfg_switch""];\n	""142"" -> ""73""[label=""cfg_switch""];\n	""143"" -> ""106""[label=""cfg_next""];\n	""144"" -> ""141""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""130""[label=""cfg_next""];\n	""19"" -> ""133""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""23""[label=""cfg_next""];\n	""26"" -> ""119""[label=""cfg_next""];\n	""27"" -> ""134""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""114""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""27""[label=""cfg_next""];\n	""32"" -> ""34""[label=""cfg_next""];\n	""33"" -> ""31""[label=""cfg_next""];\n	""34"" -> ""120""[label=""cfg_next""];\n	""35"" -> ""135""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""40""[label=""cfg_next""];\n	""39"" -> ""35""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""42""[label=""cfg_next""];\n	""41"" -> ""39""[label=""cfg_next""];\n	""42"" -> ""121""[label=""cfg_next""];\n	""43"" -> ""136""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""48""[label=""cfg_next""];\n	""47"" -> ""43""[label=""cfg_next""];\n	""48"" -> ""50""[label=""cfg_next""];\n	""49"" -> ""47""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""50"" -> ""122""[label=""cfg_next""];\n	""51"" -> ""137""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""56""[label=""cfg_next""];\n	""55"" -> ""51""[label=""cfg_next""];\n	""56"" -> ""58""[label=""cfg_next""];\n	""57"" -> ""55""[label=""cfg_next""];\n	""58"" -> ""123""[label=""cfg_next""];\n	""59"" -> ""138""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""62""[label=""cfg_next""];\n	""62"" -> ""64""[label=""cfg_next""];\n	""63"" -> ""59""[label=""cfg_next""];\n	""64"" -> ""66""[label=""cfg_next""];\n	""65"" -> ""63""[label=""cfg_next""];\n	""66"" -> ""124""[label=""cfg_next""];\n	""67"" -> ""139""[label=""cfg_next""];\n	""68"" -> ""69""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""70"" -> ""72""[label=""cfg_next""];\n	""71"" -> ""67""[label=""cfg_next""];\n	""72"" -> ""74""[label=""cfg_next""];\n	""73"" -> ""71""[label=""cfg_next""];\n	""74"" -> ""125""[label=""cfg_next""];\n	""75"" -> ""76""[label=""cfg_next""];\n	""76"" -> ""77""[label=""cfg_next""];\n	""77"" -> ""107""[label=""cfg_next""];\n	""78"" -> ""79""[label=""cfg_next""];\n	""79"" -> ""127""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""80"" -> ""108""[label=""cfg_next""];\n	""81"" -> ""82""[label=""cfg_next""];\n	""82"" -> ""128""[label=""cfg_next""];\n	""83"" -> ""109""[label=""cfg_next""];\n	""84"" -> ""85""[label=""cfg_next""];\n	""85"" -> ""129""[label=""cfg_next""];\n	""86"" -> ""110""[label=""cfg_next""];\n	""87"" -> ""88""[label=""cfg_next""];\n	""88"" -> ""91""[label=""cfg_next""];\n	""89"" -> ""90""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_next""];\n	""90"" -> ""92""[label=""cfg_next""];\n	""91"" -> ""89""[label=""cfg_next""];\n	""92"" -> ""95""[label=""cfg_next""];\n	""93"" -> ""94""[label=""cfg_next""];\n	""94"" -> ""96""[label=""cfg_next""];\n	""95"" -> ""93""[label=""cfg_next""];\n	""96"" -> ""99""[label=""cfg_next""];\n	""97"" -> ""98""[label=""cfg_next""];\n	""98"" -> ""100""[label=""cfg_next""];\n	""99"" -> ""97""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.PureJavaCrc32C.update(int),Method,No Comment,@Override\npublic final void update(final int b) {\n    crc = crc >>> 8 ^ T[T8_0_START + ((crc ^ b) & 0xff)];\n},void update(int),"digraph cfg_update {\n	""1"" [label=""$stack10 = $stack8 ^ $stack9""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc>""];\n	""4"" [label=""$stack4 = $stack3 ^ b""];\n	""5"" [label=""$stack5 = $stack4 & 255""];\n	""6"" [label=""$stack6 = <org.apache.commons.codec.digest.PureJavaCrc32C: int[] T>""];\n	""7"" [label=""$stack7 = 0 + $stack5""];\n	""8"" [label=""$stack8 = $stack2 >>> 8""];\n	""9"" [label=""$stack9 = $stack6[$stack7]""];\n	""10"" [label=""b := @parameter0: int""];\n	""11"" [label=""return""];\n	""12"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32C""];\n	""13"" [label=""this.<org.apache.commons.codec.digest.PureJavaCrc32C: int crc> = $stack10""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.digest.PureJavaCrc32C.<init>(),Constructor,Create a new PureJavaCrc32 object.,public PureJavaCrc32C() {\n    reset();\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.PureJavaCrc32C""];\n	""4"" [label=""virtualinvoke this.<org.apache.commons.codec.digest.PureJavaCrc32C: void reset()>()""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacAlgorithms.getName(),Method,* Gets the algorithm name.\n     *\n     * @return the algorithm name.\n     * @since 1.11,public String getName() {\n    return name;\n},java.lang.String getName(),"digraph cfg_getName {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String name>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.HmacAlgorithms.toString(),Method,"* The algorithm name.\n     *\n     * @see <a href=""https://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"">\n     *      Java 6 Cryptography Architecture Sun Providers Documentation</a>\n     * @see <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"">\n     *      Java 7 Cryptography Architecture Sun Providers Documentation</a>\n     * @see <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"">\n     *      Java 8 Cryptography Architecture Sun Providers Documentation</a>\n     * @see <a href=\n     *      ""https://docs.oracle.com/javase/9/security/oracleproviders.htm#JSSEC-GUID-A47B1249-593C-4C38-A0D0-68FA7681E0A7"">\n     *      Java 9 Cryptography Architecture Sun Providers Documentation</a>\n     * @return The algorithm name (""HmacSHA512"" for example)",@Override\npublic String toString() {\n    return name;\n},java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.HmacAlgorithms: java.lang.String name>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.HmacAlgorithms""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[]),Method,"* Generates a libc crypt() compatible ""$5$"" hash value with random salt.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @return complete hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String sha256Crypt(final byte[] keyBytes) {\n    return sha256Crypt(keyBytes, null);\n}",java.lang.String sha256Crypt(byte[]),"digraph cfg_sha256Crypt {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha256Crypt(byte[],java.lang.String)>(keyBytes, null)""];\n	""2"" [label=""keyBytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String)",Method,"* Generates a libc6 crypt() compatible ""$5$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a salt\n     *            is generated for you using {@link SecureRandom}. If one does not want to use {@link SecureRandom},\n     *            you can pass your own {@link Random} in {@link #sha256Crypt(byte[], String, Random)}.\n     * @return complete hash value including salt\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String sha256Crypt(final byte[] keyBytes, String salt) {\n    if (salt == null) {\n        salt = SHA256_PREFIX + B64.getRandomSalt(8);\n    }\n    return sha2Crypt(keyBytes, salt, SHA256_PREFIX, SHA256_BLOCKSIZE, MessageDigestAlgorithms.SHA_256);\n}","java.lang.String sha256Crypt(byte[],java.lang.String)","digraph cfg_sha256Crypt {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(keyBytes, salt, \""$5$\"", 32, \""SHA-256\"")""];\n	""2"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8)""];\n	""4"" [label=""$stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$5$\"")""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4)""];\n	""6"" [label=""if salt != null""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""return $stack2""];\n	""9"" [label=""salt := @parameter1: java.lang.String""];\n	""10"" [label=""salt = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""11"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String,Random)",Method,"* Generates a libc6 crypt() compatible ""$5$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="".\n     * @param random\n     *            the instance of {@link Random} to use for generating the salt.\n     *            Consider using {@link SecureRandom} for more secure salts.\n     * @return complete hash value including salt\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @since 1.12","public static String sha256Crypt(final byte[] keyBytes, String salt, final Random random) {\n    if (salt == null) {\n        salt = SHA256_PREFIX + B64.getRandomSalt(8, random);\n    }\n    return sha2Crypt(keyBytes, salt, SHA256_PREFIX, SHA256_BLOCKSIZE, MessageDigestAlgorithms.SHA_256);\n}","java.lang.String sha256Crypt(byte[],java.lang.String,java.util.Random)","digraph cfg_sha256Crypt {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(keyBytes, salt, \""$5$\"", 32, \""SHA-256\"")""];\n	""2"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(8, random)""];\n	""4"" [label=""$stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$5$\"")""];\n	""5"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""6"" [label=""if salt != null""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""random := @parameter2: java.util.Random""];\n	""9"" [label=""return $stack3""];\n	""10"" [label=""salt := @parameter1: java.lang.String""];\n	""11"" [label=""salt = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String)",Method,"* Generates a libc6 crypt() compatible ""$5$"" or ""$6$"" SHA2 based hash value.\n     * <p>\n     * This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm\n     * description, the short C-style ones from the original C code and the ones with ""Remark"" from me.\n     * </p>\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds=""; may not be null\n     * @param saltPrefix\n     *            either $5$ or $6$\n     * @param blocksize\n     *            a value that differs between $5$ and $6$\n     * @param algorithm\n     *            {@link MessageDigest} algorithm identifier string\n     * @return complete hash value including prefix and salt\n     * @throws IllegalArgumentException\n     *             if the given salt is {@code null} or does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link NoSuchAlgorithmException} is caught\n     * @see MessageDigestAlgorithms","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {\n    final int keyLen = keyBytes.length;\n    // Extracts effective salt and the number of rounds from the given salt.\n    int rounds = ROUNDS_DEFAULT;\n    boolean roundsCustom = false;\n    if (salt == null) {\n        throw new IllegalArgumentException(""Salt must not be null"");\n    }\n    final Matcher m = SALT_PATTERN.matcher(salt);\n    if (!m.find()) {\n        throw new IllegalArgumentException(""Invalid salt value: "" + salt);\n    }\n    if (m.group(3) != null) {\n        rounds = Integer.parseInt(m.group(3));\n        rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));\n        roundsCustom = true;\n    }\n    final String saltString = m.group(4);\n    final byte[] saltBytes = saltString.getBytes(StandardCharsets.UTF_8);\n    final int saltLen = saltBytes.length;\n    // 1. start digest A\n    // Prepare for the real work.\n    MessageDigest ctx = DigestUtils.getDigest(algorithm);\n    // 2. the password string is added to digest A\n    /*\n         * Add the key string.\n         */\n    ctx.update(keyBytes);\n    // 3. the salt string is added to digest A. This is just the salt string\n    // itself without the enclosing '$', without the magic salt_prefix $5$ and\n    // $6$ respectively and without the rounds=<N> specification.\n    //\n    // NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed\n    // necessary since it is a constant string and does not add security\n    // and /possibly/ allows a plain text attack. Since the rounds=<N>\n    // specification should never be added this would also create an\n    // inconsistency.\n    /*\n         * The last part is the salt string. This must be at most 16 characters and it ends at the first `$' character\n         * (for compatibility with existing implementations).\n         */\n    ctx.update(saltBytes);\n    // 4. start digest B\n    /*\n         * Compute alternate sha512 sum with input KEY, SALT, and KEY. The final result will be added to the first\n         * context.\n         */\n    MessageDigest altCtx = DigestUtils.getDigest(algorithm);\n    // 5. add the password to digest B\n    /*\n         * Add key.\n         */\n    altCtx.update(keyBytes);\n    // 6. add the salt string to digest B\n    /*\n         * Add salt.\n         */\n    altCtx.update(saltBytes);\n    // 7. add the password again to digest B\n    /*\n         * Add key again.\n         */\n    altCtx.update(keyBytes);\n    // 8. finish digest B\n    /*\n         * Now get result of this (32 bytes) and add it to the other context.\n         */\n    byte[] altResult = altCtx.digest();\n    // 9. For each block of 32 or 64 bytes in the password string (excluding\n    // the terminating NUL in the C representation), add digest B to digest A\n    /*\n         * Add for any character in the key one byte of the alternate sum.\n         */\n    /*\n         * (Remark: the C code comment seems wrong for key length > 32!)\n         */\n    int cnt = keyBytes.length;\n    while (cnt > blocksize) {\n        ctx.update(altResult, 0, blocksize);\n        cnt -= blocksize;\n    }\n    // 10. For the remaining N bytes of the password string add the first\n    // N bytes of digest B to digest A\n    ctx.update(altResult, 0, cnt);\n    // 11. For each bit of the binary representation of the length of the\n    // password string up to and including the highest 1-digit, starting\n    // from to the lowest bit position (numeric value 1):\n    //\n    // a) for a 1-digit add digest B to digest A\n    //\n    // b) for a 0-digit add the password string\n    //\n    // NB: this step differs significantly from the MD5 algorithm. It\n    // adds more randomness.\n    /*\n         * Take the binary representation of the length of the key and for every 1 add the alternate sum, for every 0\n         * the key.\n         */\n    cnt = keyBytes.length;\n    while (cnt > 0) {\n        if ((cnt & 1) != 0) {\n            ctx.update(altResult, 0, blocksize);\n        } else {\n            ctx.update(keyBytes);\n        }\n        cnt >>= 1;\n    }\n    // 12. finish digest A\n    /*\n         * Create intermediate result.\n         */\n    altResult = ctx.digest();\n    // 13. start digest DP\n    /*\n         * Start computation of P byte sequence.\n         */\n    altCtx = DigestUtils.getDigest(algorithm);\n    // 14. for every byte in the password (excluding the terminating NUL byte\n    // in the C representation of the string)\n    //\n    // add the password to digest DP\n    /*\n         * For every character in the password add the entire password.\n         */\n    for (int i = 1; i <= keyLen; i++) {\n        altCtx.update(keyBytes);\n    }\n    // 15. finish digest DP\n    /*\n         * Finish the digest.\n         */\n    byte[] tempResult = altCtx.digest();\n    // 16. produce byte sequence P of the same length as the password where\n    //\n    // a) for each block of 32 or 64 bytes of length of the password string\n    // the entire digest DP is used\n    //\n    // b) for the remaining N (up to 31 or 63) bytes use the first N\n    // bytes of digest DP\n    /*\n         * Create byte sequence P.\n         */\n    final byte[] pBytes = new byte[keyLen];\n    int cp = 0;\n    while (cp < keyLen - blocksize) {\n        System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n        cp += blocksize;\n    }\n    System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);\n    // 17. start digest DS\n    /*\n         * Start computation of S byte sequence.\n         */\n    altCtx = DigestUtils.getDigest(algorithm);\n    // 18. repeat the following 16+A[0] times, where A[0] represents the first\n    // byte in digest A interpreted as an 8-bit unsigned value\n    //\n    // add the salt to digest DS\n    /*\n         * For every character in the password add the entire password.\n         */\n    for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {\n        altCtx.update(saltBytes);\n    }\n    // 19. finish digest DS\n    /*\n         * Finish the digest.\n         */\n    tempResult = altCtx.digest();\n    // 20. produce byte sequence S of the same length as the salt string where\n    //\n    // a) for each block of 32 or 64 bytes of length of the salt string\n    // the entire digest DS is used\n    //\n    // b) for the remaining N (up to 31 or 63) bytes use the first N\n    // bytes of digest DS\n    /*\n         * Create byte sequence S.\n         */\n    // Remark: The salt is limited to 16 chars, how does this make sense?\n    final byte[] sBytes = new byte[saltLen];\n    cp = 0;\n    while (cp < saltLen - blocksize) {\n        System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n        cp += blocksize;\n    }\n    System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);\n    // 21. repeat a loop according to the number specified in the rounds=<N>\n    // specification in the salt (or the default value if none is\n    // present). Each round is numbered, starting with 0 and up to N-1.\n    //\n    // The loop uses a digest as input. In the first round it is the\n    // digest produced in step 12. In the latter steps it is the digest\n    // produced in step 21.h. The following text uses the notation\n    // ""digest A/C"" to describe this behavior.\n    /*\n         * Repeatedly run the collected hash value through sha512 to burn CPU cycles.\n         */\n    for (int i = 0; i <= rounds - 1; i++) {\n        // a) start digest C\n        /*\n             * New context.\n             */\n        ctx = DigestUtils.getDigest(algorithm);\n        // b) for odd round numbers add the byte sequence P to digest C\n        // c) for even round numbers add digest A/C\n        /*\n             * Add key or last result.\n             */\n        if ((i & 1) != 0) {\n            ctx.update(pBytes, 0, keyLen);\n        } else {\n            ctx.update(altResult, 0, blocksize);\n        }\n        // d) for all round numbers not divisible by 3 add the byte sequence S\n        /*\n             * Add salt for numbers not divisible by 3.\n             */\n        if (i % 3 != 0) {\n            ctx.update(sBytes, 0, saltLen);\n        }\n        // e) for all round numbers not divisible by 7 add the byte sequence P\n        /*\n             * Add key for numbers not divisible by 7.\n             */\n        if (i % 7 != 0) {\n            ctx.update(pBytes, 0, keyLen);\n        }\n        // f) for odd round numbers add digest A/C\n        // g) for even round numbers add the byte sequence P\n        /*\n             * Add key or last result.\n             */\n        if ((i & 1) != 0) {\n            ctx.update(altResult, 0, blocksize);\n        } else {\n            ctx.update(pBytes, 0, keyLen);\n        }\n        // h) finish digest C.\n        /*\n             * Create intermediate result.\n             */\n        altResult = ctx.digest();\n    }\n    // 22. Produce the output string. This is an ASCII string of the maximum\n    // size specified above, consisting of multiple pieces:\n    //\n    // a) the salt salt_prefix, $5$ or $6$ respectively\n    //\n    // b) the rounds=<N> specification, if one was present in the input\n    // salt string. A trailing '$' is added in this case to separate\n    // the rounds specification from the following text.\n    //\n    // c) the salt string truncated to 16 characters\n    //\n    // d) a '$' character\n    /*\n         * Now we can construct the result string. It consists of three parts.\n         */\n    final StringBuilder buffer = new StringBuilder(saltPrefix);\n    if (roundsCustom) {\n        buffer.append(ROUNDS_PREFIX);\n        buffer.append(rounds);\n        buffer.append(""$"");\n    }\n    buffer.append(saltString);\n    buffer.append(""$"");\n    // e) the base-64 encoded final C digest. The encoding used is as\n    // follows:\n    // [...]\n    //\n    // Each group of three bytes from the digest produces four\n    // characters as output:\n    //\n    // 1. character: the six low bits of the first byte\n    // 2. character: the two high bits of the first byte and the\n    // four low bytes from the second byte\n    // 3. character: the four high bytes from the second byte and\n    // the two low bits from the third byte\n    // 4. character: the six high bits from the third byte\n    //\n    // The groups of three bytes are as follows (in this sequence).\n    // These are the indices into the byte array containing the\n    // digest, starting with index 0. For the last group there are\n    // not enough bytes left in the digest and the value zero is used\n    // in its place. This group also produces only three or two\n    // characters as output for SHA-512 and SHA-512 respectively.\n    // This was just a safeguard in the C implementation:\n    // int buflen = salt_prefix.length() - 1 + ROUNDS_PREFIX.length() + 9 + 1 + salt_string.length() + 1 + 86 + 1;\n    if (blocksize == 32) {\n        B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n        B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n        B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n        B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n        B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n        B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n        B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n        B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n        B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n        B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n        B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);\n    } else {\n        B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n        B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n        B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n        B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n        B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n        B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n        B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n        B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n        B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n        B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n        B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n        B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n        B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n        B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n        B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n        B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n        B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n        B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n        B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n        B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n        B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n        B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);\n    }\n    /*\n         * Clear the buffer for the intermediate result so that people attaching to processes or reading core dumps\n         * cannot get any information.\n         */\n    // Is there a better way to do this with the JVM?\n    Arrays.fill(tempResult, (byte) 0);\n    Arrays.fill(pBytes, (byte) 0);\n    Arrays.fill(sBytes, (byte) 0);\n    ctx.reset();\n    altCtx.reset();\n    Arrays.fill(keyBytes, (byte) 0);\n    Arrays.fill(saltBytes, (byte) 0);\n    return buffer.toString();\n}","java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)","digraph cfg_sha2Crypt {\n	""1"" [label=""$stack100 = altResult[10]""];\n	""2"" [label=""$stack101 = altResult[0]""];\n	""3"" [label=""$stack102 = altResult[11]""];\n	""4"" [label=""$stack103 = altResult[1]""];\n	""5"" [label=""$stack104 = altResult[21]""];\n	""6"" [label=""$stack105 = altResult[2]""];\n	""7"" [label=""$stack106 = altResult[22]""];\n	""8"" [label=""$stack107 = altResult[12]""];\n	""9"" [label=""$stack108 = altResult[23]""];\n	""10"" [label=""$stack109 = altResult[13]""];\n	""11"" [label=""$stack110 = altResult[3]""];\n	""12"" [label=""$stack111 = altResult[14]""];\n	""13"" [label=""$stack112 = altResult[4]""];\n	""14"" [label=""$stack113 = altResult[24]""];\n	""15"" [label=""$stack114 = altResult[5]""];\n	""16"" [label=""$stack115 = altResult[25]""];\n	""17"" [label=""$stack116 = altResult[15]""];\n	""18"" [label=""$stack117 = altResult[26]""];\n	""19"" [label=""$stack118 = altResult[16]""];\n	""20"" [label=""$stack119 = altResult[6]""];\n	""21"" [label=""$stack120 = altResult[17]""];\n	""22"" [label=""$stack121 = altResult[7]""];\n	""23"" [label=""$stack122 = altResult[27]""];\n	""24"" [label=""$stack123 = altResult[8]""];\n	""25"" [label=""$stack124 = altResult[28]""];\n	""26"" [label=""$stack125 = altResult[18]""];\n	""27"" [label=""$stack126 = altResult[29]""];\n	""28"" [label=""$stack127 = altResult[19]""];\n	""29"" [label=""$stack128 = altResult[9]""];\n	""30"" [label=""$stack129 = altResult[30]""];\n	""31"" [label=""$stack130 = altResult[31]""];\n	""32"" [label=""$stack131 = i_1_2 & 1""];\n	""33"" [label=""$stack132 = i_1_2 % 3""];\n	""34"" [label=""$stack133 = i_1_2 % 7""];\n	""35"" [label=""$stack134 = i_1_2 & 1""];\n	""36"" [label=""$stack135 = cnt & 1""];\n	""37"" [label=""$stack136 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(3)""];\n	""38"" [label=""$stack137 = staticinvoke <java.lang.Math: int min(int,int)>(999999999, rounds)""];\n	""39"" [label=""$stack138 = new java.lang.StringBuilder""];\n	""40"" [label=""$stack139 = virtualinvoke $stack138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid salt value: \"")""];\n	""41"" [label=""$stack140 = virtualinvoke $stack139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(salt)""];\n	""42"" [label=""$stack141 = virtualinvoke $stack140.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""43"" [label=""$stack142 = new java.lang.IllegalArgumentException""];\n	""44"" [label=""$stack143 = new java.lang.IllegalArgumentException""];\n	""45"" [label=""$stack21 = <org.apache.commons.codec.digest.Sha2Crypt: java.util.regex.Pattern SALT_PATTERN>""];\n	""46"" [label=""$stack22 = virtualinvoke m.<java.util.regex.Matcher: boolean find()>()""];\n	""47"" [label=""$stack23 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(3)""];\n	""48"" [label=""$stack24 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""49"" [label=""$stack25 = keyLen - blocksize""];\n	""50"" [label=""$stack26 = keyLen - cp""];\n	""51"" [label=""$stack27 = altResult[0]""];\n	""52"" [label=""$stack28 = $stack27 & 255""];\n	""53"" [label=""$stack29 = 16 + $stack28""];\n	""54"" [label=""$stack30 = saltLen - blocksize""];\n	""55"" [label=""$stack31 = saltLen - cp""];\n	""56"" [label=""$stack32 = rounds - 1""];\n	""57"" [label=""$stack33 = new java.lang.StringBuilder""];\n	""58"" [label=""$stack34 = altResult[42]""];\n	""59"" [label=""$stack35 = altResult[21]""];\n	""60"" [label=""$stack36 = altResult[0]""];\n	""61"" [label=""$stack37 = altResult[1]""];\n	""62"" [label=""$stack38 = altResult[43]""];\n	""63"" [label=""$stack39 = altResult[22]""];\n	""64"" [label=""$stack40 = altResult[23]""];\n	""65"" [label=""$stack41 = altResult[2]""];\n	""66"" [label=""$stack42 = altResult[44]""];\n	""67"" [label=""$stack43 = altResult[45]""];\n	""68"" [label=""$stack44 = altResult[24]""];\n	""69"" [label=""$stack45 = altResult[3]""];\n	""70"" [label=""$stack46 = altResult[4]""];\n	""71"" [label=""$stack47 = altResult[46]""];\n	""72"" [label=""$stack48 = altResult[25]""];\n	""73"" [label=""$stack49 = altResult[26]""];\n	""74"" [label=""$stack50 = altResult[5]""];\n	""75"" [label=""$stack51 = altResult[47]""];\n	""76"" [label=""$stack52 = altResult[48]""];\n	""77"" [label=""$stack53 = altResult[27]""];\n	""78"" [label=""$stack54 = altResult[6]""];\n	""79"" [label=""$stack55 = altResult[7]""];\n	""80"" [label=""$stack56 = altResult[49]""];\n	""81"" [label=""$stack57 = altResult[28]""];\n	""82"" [label=""$stack58 = altResult[29]""];\n	""83"" [label=""$stack59 = altResult[8]""];\n	""84"" [label=""$stack60 = altResult[50]""];\n	""85"" [label=""$stack61 = altResult[51]""];\n	""86"" [label=""$stack62 = altResult[30]""];\n	""87"" [label=""$stack63 = altResult[9]""];\n	""88"" [label=""$stack64 = altResult[10]""];\n	""89"" [label=""$stack65 = altResult[52]""];\n	""90"" [label=""$stack66 = altResult[31]""];\n	""91"" [label=""$stack67 = altResult[32]""];\n	""92"" [label=""$stack68 = altResult[11]""];\n	""93"" [label=""$stack69 = altResult[53]""];\n	""94"" [label=""$stack70 = altResult[54]""];\n	""95"" [label=""$stack71 = altResult[33]""];\n	""96"" [label=""$stack72 = altResult[12]""];\n	""97"" [label=""$stack73 = altResult[13]""];\n	""98"" [label=""$stack74 = altResult[55]""];\n	""99"" [label=""$stack75 = altResult[34]""];\n	""100"" [label=""$stack76 = altResult[35]""];\n	""101"" [label=""$stack77 = altResult[14]""];\n	""102"" [label=""$stack78 = altResult[56]""];\n	""103"" [label=""$stack79 = altResult[57]""];\n	""104"" [label=""$stack80 = altResult[36]""];\n	""105"" [label=""$stack81 = altResult[15]""];\n	""106"" [label=""$stack82 = altResult[16]""];\n	""107"" [label=""$stack83 = altResult[58]""];\n	""108"" [label=""$stack84 = altResult[37]""];\n	""109"" [label=""$stack85 = altResult[38]""];\n	""110"" [label=""$stack86 = altResult[17]""];\n	""111"" [label=""$stack87 = altResult[59]""];\n	""112"" [label=""$stack88 = altResult[60]""];\n	""113"" [label=""$stack89 = altResult[39]""];\n	""114"" [label=""$stack90 = altResult[18]""];\n	""115"" [label=""$stack91 = altResult[19]""];\n	""116"" [label=""$stack92 = altResult[61]""];\n	""117"" [label=""$stack93 = altResult[40]""];\n	""118"" [label=""$stack94 = altResult[41]""];\n	""119"" [label=""$stack95 = altResult[20]""];\n	""120"" [label=""$stack96 = altResult[62]""];\n	""121"" [label=""$stack97 = altResult[63]""];\n	""122"" [label=""$stack98 = virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""123"" [label=""$stack99 = altResult[20]""];\n	""124"" [label=""algorithm := @parameter4: java.lang.String""];\n	""125"" [label=""altCtx = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(algorithm)""];\n	""126"" [label=""altCtx = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(algorithm)""];\n	""127"" [label=""altCtx = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(algorithm)""];\n	""128"" [label=""altResult = virtualinvoke altCtx.<java.security.MessageDigest: byte[] digest()>()""];\n	""129"" [label=""altResult = virtualinvoke ctx.<java.security.MessageDigest: byte[] digest()>()""];\n	""130"" [label=""altResult = virtualinvoke ctx.<java.security.MessageDigest: byte[] digest()>()""];\n	""131"" [label=""blocksize := @parameter3: int""];\n	""132"" [label=""cnt = cnt - blocksize""];\n	""133"" [label=""cnt = cnt >> 1""];\n	""134"" [label=""cnt = lengthof keyBytes""];\n	""135"" [label=""cnt = lengthof keyBytes""];\n	""136"" [label=""cp = 0""];\n	""137"" [label=""cp = 0""];\n	""138"" [label=""cp = cp + blocksize""];\n	""139"" [label=""cp = cp + blocksize""];\n	""140"" [label=""ctx = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(algorithm)""];\n	""141"" [label=""ctx = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(algorithm)""];\n	""142"" [label=""goto""];\n	""143"" [label=""goto""];\n	""144"" [label=""goto""];\n	""145"" [label=""goto""];\n	""146"" [label=""goto""];\n	""147"" [label=""goto""];\n	""148"" [label=""goto""];\n	""149"" [label=""goto""];\n	""150"" [label=""goto""];\n	""151"" [label=""goto""];\n	""152"" [label=""goto""];\n	""153"" [label=""i = 1""];\n	""154"" [label=""i = i + 1""];\n	""155"" [label=""i = virtualinvoke altCtx.<java.security.MessageDigest: byte[] digest()>()""];\n	""156"" [label=""i = virtualinvoke altCtx.<java.security.MessageDigest: byte[] digest()>()""];\n	""157"" [label=""i_1 = 1""];\n	""158"" [label=""i_1 = i_1 + 1""];\n	""159"" [label=""i_1 = newarray (byte)[saltLen]""];\n	""160"" [label=""i_1_2 = $stack33""];\n	""161"" [label=""i_1_2 = 0""];\n	""162"" [label=""i_1_2 = i_1_2 + 1""];\n	""163"" [label=""if $stack131 == 0""];\n	""164"" [label=""if $stack132 == 0""];\n	""165"" [label=""if $stack133 == 0""];\n	""166"" [label=""if $stack134 == 0""];\n	""167"" [label=""if $stack135 == 0""];\n	""168"" [label=""if $stack22 != 0""];\n	""169"" [label=""if $stack23 == null""];\n	""170"" [label=""if blocksize != 32""];\n	""171"" [label=""if cnt <= 0""];\n	""172"" [label=""if cnt <= blocksize""];\n	""173"" [label=""if cp >= $stack25""];\n	""174"" [label=""if cp >= $stack30""];\n	""175"" [label=""if i > keyLen""];\n	""176"" [label=""if i_1 > $stack29""];\n	""177"" [label=""if i_1_2 > $stack32""];\n	""178"" [label=""if roundsCustom == 0""];\n	""179"" [label=""if salt != null""];\n	""180"" [label=""keyBytes := @parameter0: byte[]""];\n	""181"" [label=""keyLen = lengthof keyBytes""];\n	""182"" [label=""m = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(salt)""];\n	""183"" [label=""pBytes = newarray (byte)[keyLen]""];\n	""184"" [label=""return $stack98""];\n	""185"" [label=""rounds = 5000""];\n	""186"" [label=""rounds = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack136)""];\n	""187"" [label=""rounds = staticinvoke <java.lang.Math: int max(int,int)>(1000, $stack137)""];\n	""188"" [label=""roundsCustom = 0""];\n	""189"" [label=""roundsCustom = 1""];\n	""190"" [label=""salt := @parameter1: java.lang.String""];\n	""191"" [label=""saltBytes = virtualinvoke saltString.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack24)""];\n	""192"" [label=""saltLen = lengthof saltBytes""];\n	""193"" [label=""saltPrefix := @parameter2: java.lang.String""];\n	""194"" [label=""saltString = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(4)""];\n	""195"" [label=""specialinvoke $stack138.<java.lang.StringBuilder: void <init>()>()""];\n	""196"" [label=""specialinvoke $stack142.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack141)""];\n	""197"" [label=""specialinvoke $stack143.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Salt must not be null\"")""];\n	""198"" [label=""specialinvoke $stack33.<java.lang.StringBuilder: void <init>(java.lang.String)>(saltPrefix)""];\n	""199"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(i, 0, i_1, cp, $stack31)""];\n	""200"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(i, 0, i_1, cp, blocksize)""];\n	""201"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(i, 0, pBytes, cp, $stack26)""];\n	""202"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(i, 0, pBytes, cp, blocksize)""];\n	""203"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(i, 0)""];\n	""204"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(i_1, 0)""];\n	""205"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(keyBytes, 0)""];\n	""206"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(pBytes, 0)""];\n	""207"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(saltBytes, 0)""];\n	""208"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack101, $stack100, $stack99, 4, i_1_2)""];\n	""209"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack104, $stack103, $stack102, 4, i_1_2)""];\n	""210"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack107, $stack106, $stack105, 4, i_1_2)""];\n	""211"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack110, $stack109, $stack108, 4, i_1_2)""];\n	""212"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack113, $stack112, $stack111, 4, i_1_2)""];\n	""213"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack116, $stack115, $stack114, 4, i_1_2)""];\n	""214"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack119, $stack118, $stack117, 4, i_1_2)""];\n	""215"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack122, $stack121, $stack120, 4, i_1_2)""];\n	""216"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack125, $stack124, $stack123, 4, i_1_2)""];\n	""217"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack128, $stack127, $stack126, 4, i_1_2)""];\n	""218"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack36, $stack35, $stack34, 4, i_1_2)""];\n	""219"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack39, $stack38, $stack37, 4, i_1_2)""];\n	""220"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack42, $stack41, $stack40, 4, i_1_2)""];\n	""221"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack45, $stack44, $stack43, 4, i_1_2)""];\n	""222"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack48, $stack47, $stack46, 4, i_1_2)""];\n	""223"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack51, $stack50, $stack49, 4, i_1_2)""];\n	""224"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack54, $stack53, $stack52, 4, i_1_2)""];\n	""225"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack57, $stack56, $stack55, 4, i_1_2)""];\n	""226"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack60, $stack59, $stack58, 4, i_1_2)""];\n	""227"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack63, $stack62, $stack61, 4, i_1_2)""];\n	""228"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack66, $stack65, $stack64, 4, i_1_2)""];\n	""229"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack69, $stack68, $stack67, 4, i_1_2)""];\n	""230"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack72, $stack71, $stack70, 4, i_1_2)""];\n	""231"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack75, $stack74, $stack73, 4, i_1_2)""];\n	""232"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack78, $stack77, $stack76, 4, i_1_2)""];\n	""233"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack81, $stack80, $stack79, 4, i_1_2)""];\n	""234"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack84, $stack83, $stack82, 4, i_1_2)""];\n	""235"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack87, $stack86, $stack85, 4, i_1_2)""];\n	""236"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack90, $stack89, $stack88, 4, i_1_2)""];\n	""237"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack93, $stack92, $stack91, 4, i_1_2)""];\n	""238"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($stack96, $stack95, $stack94, 4, i_1_2)""];\n	""239"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, $stack130, $stack129, 3, i_1_2)""];\n	""240"" [label=""staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, 0, $stack97, 2, i_1_2)""];\n	""241"" [label=""throw $stack142""];\n	""242"" [label=""throw $stack143""];\n	""243"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void reset()>()""];\n	""244"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""245"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""246"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""247"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void update(byte[])>(saltBytes)""];\n	""248"" [label=""virtualinvoke altCtx.<java.security.MessageDigest: void update(byte[])>(saltBytes)""];\n	""249"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void reset()>()""];\n	""250"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""251"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[])>(keyBytes)""];\n	""252"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[])>(saltBytes)""];\n	""253"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(altResult, 0, blocksize)""];\n	""254"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(altResult, 0, blocksize)""];\n	""255"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(altResult, 0, blocksize)""];\n	""256"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(altResult, 0, blocksize)""];\n	""257"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(altResult, 0, cnt)""];\n	""258"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(i_1, 0, saltLen)""];\n	""259"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(pBytes, 0, keyLen)""];\n	""260"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(pBytes, 0, keyLen)""];\n	""261"" [label=""virtualinvoke ctx.<java.security.MessageDigest: void update(byte[],int,int)>(pBytes, 0, keyLen)""];\n	""262"" [label=""virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(rounds)""];\n	""263"" [label=""virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$\"")""];\n	""264"" [label=""virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$\"")""];\n	""265"" [label=""virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""rounds=\"")""];\n	""266"" [label=""virtualinvoke i_1_2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(saltString)""];\n	""1"" -> ""123""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""100"" -> ""232""[label=""cfg_next""];\n	""101"" -> ""100""[label=""cfg_next""];\n	""102"" -> ""101""[label=""cfg_next""];\n	""103"" -> ""233""[label=""cfg_next""];\n	""104"" -> ""103""[label=""cfg_next""];\n	""105"" -> ""104""[label=""cfg_next""];\n	""106"" -> ""234""[label=""cfg_next""];\n	""107"" -> ""106""[label=""cfg_next""];\n	""108"" -> ""107""[label=""cfg_next""];\n	""109"" -> ""235""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""110"" -> ""109""[label=""cfg_next""];\n	""111"" -> ""110""[label=""cfg_next""];\n	""112"" -> ""236""[label=""cfg_next""];\n	""113"" -> ""112""[label=""cfg_next""];\n	""114"" -> ""113""[label=""cfg_next""];\n	""115"" -> ""237""[label=""cfg_next""];\n	""116"" -> ""115""[label=""cfg_next""];\n	""117"" -> ""116""[label=""cfg_next""];\n	""118"" -> ""238""[label=""cfg_next""];\n	""119"" -> ""118""[label=""cfg_next""];\n	""12"" -> ""212""[label=""cfg_next""];\n	""120"" -> ""119""[label=""cfg_next""];\n	""121"" -> ""240""[label=""cfg_next""];\n	""122"" -> ""184""[label=""cfg_next""];\n	""123"" -> ""208""[label=""cfg_next""];\n	""124"" -> ""181""[label=""cfg_next""];\n	""125"" -> ""244""[label=""cfg_next""];\n	""126"" -> ""153""[label=""cfg_next""];\n	""127"" -> ""157""[label=""cfg_next""];\n	""128"" -> ""134""[label=""cfg_next""];\n	""129"" -> ""126""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""130"" -> ""162""[label=""cfg_next""];\n	""131"" -> ""124""[label=""cfg_next""];\n	""132"" -> ""142""[label=""cfg_next""];\n	""133"" -> ""144""[label=""cfg_next""];\n	""134"" -> ""172""[label=""cfg_next""];\n	""135"" -> ""171""[label=""cfg_next""];\n	""136"" -> ""49""[label=""cfg_next""];\n	""137"" -> ""54""[label=""cfg_next""];\n	""138"" -> ""146""[label=""cfg_next""];\n	""139"" -> ""148""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""140"" -> ""250""[label=""cfg_next""];\n	""141"" -> ""32""[label=""cfg_next""];\n	""142"" -> ""172""[label=""cfg_goto""];\n	""143"" -> ""133""[label=""cfg_goto""];\n	""144"" -> ""171""[label=""cfg_goto""];\n	""145"" -> ""175""[label=""cfg_goto""];\n	""146"" -> ""49""[label=""cfg_goto""];\n	""147"" -> ""51""[label=""cfg_goto""];\n	""148"" -> ""54""[label=""cfg_goto""];\n	""149"" -> ""33""[label=""cfg_goto""];\n	""15"" -> ""213""[label=""cfg_next""];\n	""150"" -> ""130""[label=""cfg_goto""];\n	""151"" -> ""56""[label=""cfg_goto""];\n	""152"" -> ""203""[label=""cfg_goto""];\n	""153"" -> ""175""[label=""cfg_next""];\n	""154"" -> ""145""[label=""cfg_next""];\n	""155"" -> ""183""[label=""cfg_next""];\n	""156"" -> ""159""[label=""cfg_next""];\n	""157"" -> ""51""[label=""cfg_next""];\n	""158"" -> ""147""[label=""cfg_next""];\n	""159"" -> ""137""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""160"" -> ""178""[label=""cfg_next""];\n	""161"" -> ""56""[label=""cfg_next""];\n	""162"" -> ""151""[label=""cfg_next""];\n	""163"" -> ""255""[label=""cfg_true""];\n	""163"" -> ""259""[label=""cfg_false""];\n	""164"" -> ""258""[label=""cfg_false""];\n	""164"" -> ""34""[label=""cfg_true""];\n	""165"" -> ""260""[label=""cfg_false""];\n	""165"" -> ""35""[label=""cfg_true""];\n	""166"" -> ""256""[label=""cfg_false""];\n	""166"" -> ""261""[label=""cfg_true""];\n	""167"" -> ""251""[label=""cfg_true""];\n	""167"" -> ""254""[label=""cfg_false""];\n	""168"" -> ""43""[label=""cfg_false""];\n	""168"" -> ""47""[label=""cfg_true""];\n	""169"" -> ""194""[label=""cfg_true""];\n	""169"" -> ""37""[label=""cfg_false""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""170"" -> ""2""[label=""cfg_false""];\n	""170"" -> ""60""[label=""cfg_true""];\n	""171"" -> ""129""[label=""cfg_true""];\n	""171"" -> ""36""[label=""cfg_false""];\n	""172"" -> ""253""[label=""cfg_false""];\n	""172"" -> ""257""[label=""cfg_true""];\n	""173"" -> ""202""[label=""cfg_false""];\n	""173"" -> ""50""[label=""cfg_true""];\n	""174"" -> ""200""[label=""cfg_false""];\n	""174"" -> ""55""[label=""cfg_true""];\n	""175"" -> ""155""[label=""cfg_true""];\n	""175"" -> ""246""[label=""cfg_false""];\n	""176"" -> ""156""[label=""cfg_true""];\n	""176"" -> ""248""[label=""cfg_false""];\n	""177"" -> ""141""[label=""cfg_false""];\n	""177"" -> ""57""[label=""cfg_true""];\n	""178"" -> ""265""[label=""cfg_false""];\n	""178"" -> ""266""[label=""cfg_true""];\n	""179"" -> ""44""[label=""cfg_false""];\n	""179"" -> ""45""[label=""cfg_true""];\n	""18"" -> ""214""[label=""cfg_next""];\n	""180"" -> ""190""[label=""cfg_next""];\n	""181"" -> ""185""[label=""cfg_next""];\n	""182"" -> ""46""[label=""cfg_next""];\n	""183"" -> ""136""[label=""cfg_next""];\n	""185"" -> ""188""[label=""cfg_next""];\n	""186"" -> ""38""[label=""cfg_next""];\n	""187"" -> ""189""[label=""cfg_next""];\n	""188"" -> ""179""[label=""cfg_next""];\n	""189"" -> ""194""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""190"" -> ""193""[label=""cfg_next""];\n	""191"" -> ""192""[label=""cfg_next""];\n	""192"" -> ""140""[label=""cfg_next""];\n	""193"" -> ""131""[label=""cfg_next""];\n	""194"" -> ""48""[label=""cfg_next""];\n	""195"" -> ""40""[label=""cfg_next""];\n	""196"" -> ""241""[label=""cfg_next""];\n	""197"" -> ""242""[label=""cfg_next""];\n	""198"" -> ""160""[label=""cfg_next""];\n	""199"" -> ""161""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""19""[label=""cfg_next""];\n	""200"" -> ""139""[label=""cfg_next""];\n	""201"" -> ""127""[label=""cfg_next""];\n	""202"" -> ""138""[label=""cfg_next""];\n	""203"" -> ""206""[label=""cfg_next""];\n	""204"" -> ""249""[label=""cfg_next""];\n	""205"" -> ""207""[label=""cfg_next""];\n	""206"" -> ""204""[label=""cfg_next""];\n	""207"" -> ""122""[label=""cfg_next""];\n	""208"" -> ""5""[label=""cfg_next""];\n	""209"" -> ""8""[label=""cfg_next""];\n	""21"" -> ""215""[label=""cfg_next""];\n	""210"" -> ""11""[label=""cfg_next""];\n	""211"" -> ""14""[label=""cfg_next""];\n	""212"" -> ""17""[label=""cfg_next""];\n	""213"" -> ""20""[label=""cfg_next""];\n	""214"" -> ""23""[label=""cfg_next""];\n	""215"" -> ""26""[label=""cfg_next""];\n	""216"" -> ""29""[label=""cfg_next""];\n	""217"" -> ""31""[label=""cfg_next""];\n	""218"" -> ""63""[label=""cfg_next""];\n	""219"" -> ""66""[label=""cfg_next""];\n	""22"" -> ""21""[label=""cfg_next""];\n	""220"" -> ""69""[label=""cfg_next""];\n	""221"" -> ""72""[label=""cfg_next""];\n	""222"" -> ""75""[label=""cfg_next""];\n	""223"" -> ""78""[label=""cfg_next""];\n	""224"" -> ""81""[label=""cfg_next""];\n	""225"" -> ""84""[label=""cfg_next""];\n	""226"" -> ""87""[label=""cfg_next""];\n	""227"" -> ""90""[label=""cfg_next""];\n	""228"" -> ""93""[label=""cfg_next""];\n	""229"" -> ""96""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""230"" -> ""99""[label=""cfg_next""];\n	""231"" -> ""102""[label=""cfg_next""];\n	""232"" -> ""105""[label=""cfg_next""];\n	""233"" -> ""108""[label=""cfg_next""];\n	""234"" -> ""111""[label=""cfg_next""];\n	""235"" -> ""114""[label=""cfg_next""];\n	""236"" -> ""117""[label=""cfg_next""];\n	""237"" -> ""120""[label=""cfg_next""];\n	""238"" -> ""121""[label=""cfg_next""];\n	""239"" -> ""152""[label=""cfg_next""];\n	""24"" -> ""216""[label=""cfg_next""];\n	""240"" -> ""203""[label=""cfg_next""];\n	""243"" -> ""205""[label=""cfg_next""];\n	""244"" -> ""247""[label=""cfg_next""];\n	""245"" -> ""128""[label=""cfg_next""];\n	""246"" -> ""154""[label=""cfg_next""];\n	""247"" -> ""245""[label=""cfg_next""];\n	""248"" -> ""158""[label=""cfg_next""];\n	""249"" -> ""243""[label=""cfg_next""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""250"" -> ""252""[label=""cfg_next""];\n	""251"" -> ""133""[label=""cfg_next""];\n	""252"" -> ""125""[label=""cfg_next""];\n	""253"" -> ""132""[label=""cfg_next""];\n	""254"" -> ""143""[label=""cfg_next""];\n	""255"" -> ""33""[label=""cfg_next""];\n	""256"" -> ""150""[label=""cfg_next""];\n	""257"" -> ""135""[label=""cfg_next""];\n	""258"" -> ""34""[label=""cfg_next""];\n	""259"" -> ""149""[label=""cfg_next""];\n	""26"" -> ""25""[label=""cfg_next""];\n	""260"" -> ""35""[label=""cfg_next""];\n	""261"" -> ""130""[label=""cfg_next""];\n	""262"" -> ""263""[label=""cfg_next""];\n	""263"" -> ""266""[label=""cfg_next""];\n	""264"" -> ""170""[label=""cfg_next""];\n	""265"" -> ""262""[label=""cfg_next""];\n	""266"" -> ""264""[label=""cfg_next""];\n	""27"" -> ""217""[label=""cfg_next""];\n	""28"" -> ""27""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""209""[label=""cfg_next""];\n	""30"" -> ""239""[label=""cfg_next""];\n	""31"" -> ""30""[label=""cfg_next""];\n	""32"" -> ""163""[label=""cfg_next""];\n	""33"" -> ""164""[label=""cfg_next""];\n	""34"" -> ""165""[label=""cfg_next""];\n	""35"" -> ""166""[label=""cfg_next""];\n	""36"" -> ""167""[label=""cfg_next""];\n	""37"" -> ""186""[label=""cfg_next""];\n	""38"" -> ""187""[label=""cfg_next""];\n	""39"" -> ""195""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""196""[label=""cfg_next""];\n	""43"" -> ""39""[label=""cfg_next""];\n	""44"" -> ""197""[label=""cfg_next""];\n	""45"" -> ""182""[label=""cfg_next""];\n	""46"" -> ""168""[label=""cfg_next""];\n	""47"" -> ""169""[label=""cfg_next""];\n	""48"" -> ""191""[label=""cfg_next""];\n	""49"" -> ""173""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""50"" -> ""201""[label=""cfg_next""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""176""[label=""cfg_next""];\n	""54"" -> ""174""[label=""cfg_next""];\n	""55"" -> ""199""[label=""cfg_next""];\n	""56"" -> ""177""[label=""cfg_next""];\n	""57"" -> ""198""[label=""cfg_next""];\n	""58"" -> ""218""[label=""cfg_next""];\n	""59"" -> ""58""[label=""cfg_next""];\n	""6"" -> ""210""[label=""cfg_next""];\n	""60"" -> ""59""[label=""cfg_next""];\n	""61"" -> ""219""[label=""cfg_next""];\n	""62"" -> ""61""[label=""cfg_next""];\n	""63"" -> ""62""[label=""cfg_next""];\n	""64"" -> ""220""[label=""cfg_next""];\n	""65"" -> ""64""[label=""cfg_next""];\n	""66"" -> ""65""[label=""cfg_next""];\n	""67"" -> ""221""[label=""cfg_next""];\n	""68"" -> ""67""[label=""cfg_next""];\n	""69"" -> ""68""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""70"" -> ""222""[label=""cfg_next""];\n	""71"" -> ""70""[label=""cfg_next""];\n	""72"" -> ""71""[label=""cfg_next""];\n	""73"" -> ""223""[label=""cfg_next""];\n	""74"" -> ""73""[label=""cfg_next""];\n	""75"" -> ""74""[label=""cfg_next""];\n	""76"" -> ""224""[label=""cfg_next""];\n	""77"" -> ""76""[label=""cfg_next""];\n	""78"" -> ""77""[label=""cfg_next""];\n	""79"" -> ""225""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""80"" -> ""79""[label=""cfg_next""];\n	""81"" -> ""80""[label=""cfg_next""];\n	""82"" -> ""226""[label=""cfg_next""];\n	""83"" -> ""82""[label=""cfg_next""];\n	""84"" -> ""83""[label=""cfg_next""];\n	""85"" -> ""227""[label=""cfg_next""];\n	""86"" -> ""85""[label=""cfg_next""];\n	""87"" -> ""86""[label=""cfg_next""];\n	""88"" -> ""228""[label=""cfg_next""];\n	""89"" -> ""88""[label=""cfg_next""];\n	""9"" -> ""211""[label=""cfg_next""];\n	""90"" -> ""89""[label=""cfg_next""];\n	""91"" -> ""229""[label=""cfg_next""];\n	""92"" -> ""91""[label=""cfg_next""];\n	""93"" -> ""92""[label=""cfg_next""];\n	""94"" -> ""230""[label=""cfg_next""];\n	""95"" -> ""94""[label=""cfg_next""];\n	""96"" -> ""95""[label=""cfg_next""];\n	""97"" -> ""231""[label=""cfg_next""];\n	""98"" -> ""97""[label=""cfg_next""];\n	""99"" -> ""98""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[]),Method,"* Generates a libc crypt() compatible ""$6$"" hash value with random salt.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * <p>\n     * A salt is generated for you using {@link SecureRandom}\n     * </p>\n     *\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @return complete hash value\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String sha512Crypt(final byte[] keyBytes) {\n    return sha512Crypt(keyBytes, null);\n}",java.lang.String sha512Crypt(byte[]),"digraph cfg_sha512Crypt {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha512Crypt(byte[],java.lang.String)>(keyBytes, null)""];\n	""2"" [label=""keyBytes := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String)",Method,"* Generates a libc6 crypt() compatible ""$6$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a salt is generated\n     *            for you using {@link SecureRandom}; if you want to use a {@link Random} object other than\n     *            {@link SecureRandom} then we suggest you provide it using\n     *            {@link #sha512Crypt(byte[], String, Random)}.\n     * @return complete hash value including salt\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.","public static String sha512Crypt(final byte[] keyBytes, String salt) {\n    if (salt == null) {\n        salt = SHA512_PREFIX + B64.getRandomSalt(8);\n    }\n    return sha2Crypt(keyBytes, salt, SHA512_PREFIX, SHA512_BLOCKSIZE, MessageDigestAlgorithms.SHA_512);\n}","java.lang.String sha512Crypt(byte[],java.lang.String)","digraph cfg_sha512Crypt {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(keyBytes, salt, \""$6$\"", 64, \""SHA-512\"")""];\n	""2"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8)""];\n	""4"" [label=""$stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$6$\"")""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4)""];\n	""6"" [label=""if salt != null""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""return $stack2""];\n	""9"" [label=""salt := @parameter1: java.lang.String""];\n	""10"" [label=""salt = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""11"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String,Random)",Method,"* Generates a libc6 crypt() compatible ""$6$"" hash value.\n     * <p>\n     * See {@link Crypt#crypt(String, String)} for details.\n     * </p>\n     * @param keyBytes\n     *            plaintext to hash. Each array element is set to {@code 0} before returning.\n     * @param salt\n     *            real salt value without prefix or ""rounds="". The salt may be null, in which case a salt\n     *            is generated for you using {@link SecureRandom}.\n     * @param random\n     *            the instance of {@link Random} to use for generating the salt.\n     *            Consider using {@link SecureRandom} for more secure salts.\n     * @return complete hash value including salt\n     * @throws IllegalArgumentException\n     *             if the salt does not match the allowed pattern\n     * @throws IllegalArgumentException\n     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n     * @since 1.12","public static String sha512Crypt(final byte[] keyBytes, String salt, final Random random) {\n    if (salt == null) {\n        salt = SHA512_PREFIX + B64.getRandomSalt(8, random);\n    }\n    return sha2Crypt(keyBytes, salt, SHA512_PREFIX, SHA512_BLOCKSIZE, MessageDigestAlgorithms.SHA_512);\n}","java.lang.String sha512Crypt(byte[],java.lang.String,java.util.Random)","digraph cfg_sha512Crypt {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(keyBytes, salt, \""$6$\"", 64, \""SHA-512\"")""];\n	""2"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int,java.util.Random)>(8, random)""];\n	""4"" [label=""$stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$6$\"")""];\n	""5"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5)""];\n	""6"" [label=""if salt != null""];\n	""7"" [label=""keyBytes := @parameter0: byte[]""];\n	""8"" [label=""random := @parameter2: java.util.Random""];\n	""9"" [label=""return $stack3""];\n	""10"" [label=""salt := @parameter1: java.lang.String""];\n	""11"" [label=""salt = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""12"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.digest.Sha2Crypt.<init>(),Constructor,* Consider private.\n     *\n     * @deprecated Will be private in the next major version.,@Deprecated\npublic Sha2Crypt() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.Sha2Crypt""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.XXHash32.getInt(byte[],int)",Method,* Gets the little-endian int from 4 bytes starting at the specified index.\n     *\n     * @param buffer The data\n     * @param idx The index\n     * @return The little-endian int,"private static int getInt(final byte[] buffer, final int idx) {\n    return buffer[idx] & 0xff | (buffer[idx + 1] & 0xff) << 8 | (buffer[idx + 2] & 0xff) << 16 | (buffer[idx + 3] & 0xff) << 24;\n}","int getInt(byte[],int)","digraph cfg_getInt {\n	""1"" [label=""$stack10 = $stack9 & 255""];\n	""2"" [label=""$stack11 = $stack6 | $stack7""];\n	""3"" [label=""$stack12 = $stack10 << 16""];\n	""4"" [label=""$stack13 = idx + 3""];\n	""5"" [label=""$stack14 = buffer[$stack13]""];\n	""6"" [label=""$stack15 = $stack14 & 255""];\n	""7"" [label=""$stack16 = $stack11 | $stack12""];\n	""8"" [label=""$stack17 = $stack15 << 24""];\n	""9"" [label=""$stack18 = $stack16 | $stack17""];\n	""10"" [label=""$stack2 = buffer[idx]""];\n	""11"" [label=""$stack3 = idx + 1""];\n	""12"" [label=""$stack4 = buffer[$stack3]""];\n	""13"" [label=""$stack5 = $stack4 & 255""];\n	""14"" [label=""$stack6 = $stack2 & 255""];\n	""15"" [label=""$stack7 = $stack5 << 8""];\n	""16"" [label=""$stack8 = idx + 2""];\n	""17"" [label=""$stack9 = buffer[$stack8]""];\n	""18"" [label=""buffer := @parameter0: byte[]""];\n	""19"" [label=""idx := @parameter1: int""];\n	""20"" [label=""return $stack18""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""20""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.digest.XXHash32.getValue(),Method,No Comment,"@Override\npublic long getValue() {\n    int hash;\n    if (stateUpdated) {\n        // Hash with the state\n        hash = rotateLeft(state[0], 1) + rotateLeft(state[1], 7) + rotateLeft(state[2], 12) + rotateLeft(state[3], 18);\n    } else {\n        // Hash using the original seed from position 2\n        hash = state[2] + PRIME5;\n    }\n    hash += totalLen;\n    int idx = 0;\n    final int limit = pos - 4;\n    for (; idx <= limit; idx += 4) {\n        hash = rotateLeft(hash + getInt(buffer, idx) * PRIME3, 17) * PRIME4;\n    }\n    while (idx < pos) {\n        hash = rotateLeft(hash + (buffer[idx++] & 0xff) * PRIME5, 11) * PRIME1;\n    }\n    hash ^= hash >>> 15;\n    hash *= PRIME2;\n    hash ^= hash >>> 13;\n    hash *= PRIME3;\n    hash ^= hash >>> 16;\n    return hash & 0xffffffffL;\n}",long getValue(),"digraph cfg_getValue {\n	""1"" [label=""$stack10 = hash >>> 15""];\n	""2"" [label=""$stack11 = hash >>> 13""];\n	""3"" [label=""$stack12 = hash >>> 16""];\n	""4"" [label=""$stack13 = (long) hash""];\n	""5"" [label=""$stack14 = $stack13 & 4294967295L""];\n	""6"" [label=""$stack15 = idx""];\n	""7"" [label=""$stack16 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""8"" [label=""$stack17 = $stack16[$stack15]""];\n	""9"" [label=""$stack18 = $stack17 & 255""];\n	""10"" [label=""$stack19 = $stack18 * 374761393""];\n	""11"" [label=""$stack20 = hash + $stack19""];\n	""12"" [label=""$stack21 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack20, 11)""];\n	""13"" [label=""$stack22 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""14"" [label=""$stack23 = staticinvoke <org.apache.commons.codec.digest.XXHash32: int getInt(byte[],int)>($stack22, idx)""];\n	""15"" [label=""$stack24 = $stack23 * -1028477379""];\n	""16"" [label=""$stack25 = hash + $stack24""];\n	""17"" [label=""$stack26 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack25, 17)""];\n	""18"" [label=""$stack27 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""19"" [label=""$stack28 = $stack27[0]""];\n	""20"" [label=""$stack29 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""21"" [label=""$stack30 = $stack29[1]""];\n	""22"" [label=""$stack31 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack28, 1)""];\n	""23"" [label=""$stack32 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack30, 7)""];\n	""24"" [label=""$stack33 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""25"" [label=""$stack34 = $stack33[2]""];\n	""26"" [label=""$stack35 = $stack31 + $stack32""];\n	""27"" [label=""$stack36 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack34, 12)""];\n	""28"" [label=""$stack37 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""29"" [label=""$stack38 = $stack37[3]""];\n	""30"" [label=""$stack39 = $stack35 + $stack36""];\n	""31"" [label=""$stack4 = this.<org.apache.commons.codec.digest.XXHash32: boolean stateUpdated>""];\n	""32"" [label=""$stack40 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack38, 18)""];\n	""33"" [label=""$stack5 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""34"" [label=""$stack6 = $stack5[2]""];\n	""35"" [label=""$stack7 = this.<org.apache.commons.codec.digest.XXHash32: int totalLen>""];\n	""36"" [label=""$stack8 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""37"" [label=""$stack9 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""hash = $stack21 * -1640531535""];\n	""42"" [label=""hash = $stack26 * 668265263""];\n	""43"" [label=""hash = $stack39 + $stack40""];\n	""44"" [label=""hash = $stack6 + 374761393""];\n	""45"" [label=""hash = hash * -1028477379""];\n	""46"" [label=""hash = hash * -2048144777""];\n	""47"" [label=""hash = hash + $stack7""];\n	""48"" [label=""hash = hash ^ $stack10""];\n	""49"" [label=""hash = hash ^ $stack11""];\n	""50"" [label=""hash = hash ^ $stack12""];\n	""51"" [label=""idx = 0""];\n	""52"" [label=""idx = idx + 1""];\n	""53"" [label=""idx = idx + 4""];\n	""54"" [label=""if $stack4 == 0""];\n	""55"" [label=""if idx > limit""];\n	""56"" [label=""if idx >= $stack9""];\n	""57"" [label=""limit = $stack8 - 4""];\n	""58"" [label=""return $stack14""];\n	""59"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""1"" -> ""48""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""41""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""42""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""22""[label=""cfg_next""];\n	""2"" -> ""49""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""20""[label=""cfg_next""];\n	""23"" -> ""26""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""24""[label=""cfg_next""];\n	""27"" -> ""30""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""32""[label=""cfg_next""];\n	""3"" -> ""50""[label=""cfg_next""];\n	""30"" -> ""28""[label=""cfg_next""];\n	""31"" -> ""54""[label=""cfg_next""];\n	""32"" -> ""43""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""44""[label=""cfg_next""];\n	""35"" -> ""47""[label=""cfg_next""];\n	""36"" -> ""57""[label=""cfg_next""];\n	""37"" -> ""56""[label=""cfg_next""];\n	""38"" -> ""35""[label=""cfg_goto""];\n	""39"" -> ""55""[label=""cfg_goto""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""37""[label=""cfg_goto""];\n	""41"" -> ""40""[label=""cfg_next""];\n	""42"" -> ""53""[label=""cfg_next""];\n	""43"" -> ""38""[label=""cfg_next""];\n	""44"" -> ""35""[label=""cfg_next""];\n	""45"" -> ""3""[label=""cfg_next""];\n	""46"" -> ""2""[label=""cfg_next""];\n	""47"" -> ""51""[label=""cfg_next""];\n	""48"" -> ""46""[label=""cfg_next""];\n	""49"" -> ""45""[label=""cfg_next""];\n	""5"" -> ""58""[label=""cfg_next""];\n	""50"" -> ""4""[label=""cfg_next""];\n	""51"" -> ""36""[label=""cfg_next""];\n	""52"" -> ""8""[label=""cfg_next""];\n	""53"" -> ""39""[label=""cfg_next""];\n	""54"" -> ""18""[label=""cfg_false""];\n	""54"" -> ""33""[label=""cfg_true""];\n	""55"" -> ""13""[label=""cfg_false""];\n	""55"" -> ""37""[label=""cfg_true""];\n	""56"" -> ""1""[label=""cfg_true""];\n	""56"" -> ""7""[label=""cfg_false""];\n	""57"" -> ""55""[label=""cfg_next""];\n	""59"" -> ""31""[label=""cfg_next""];\n	""6"" -> ""52""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.XXHash32.initializeState(),Method,No Comment,private void initializeState() {\n    state[0] = seed + PRIME1 + PRIME2;\n    state[1] = seed + PRIME2;\n    state[2] = seed;\n    state[3] = seed - PRIME1;\n},void initializeState(),"digraph cfg_initializeState {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.digest.XXHash32: int seed>""];\n	""2"" [label=""$stack10 = this.<org.apache.commons.codec.digest.XXHash32: int seed>""];\n	""3"" [label=""$stack11 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""4"" [label=""$stack11[3] = $stack12""];\n	""5"" [label=""$stack12 = $stack10 - -1640531535""];\n	""6"" [label=""$stack2 = $stack1 + -1640531535""];\n	""7"" [label=""$stack3 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""8"" [label=""$stack3[0] = $stack4""];\n	""9"" [label=""$stack4 = $stack2 + -2048144777""];\n	""10"" [label=""$stack5 = this.<org.apache.commons.codec.digest.XXHash32: int seed>""];\n	""11"" [label=""$stack6 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""12"" [label=""$stack6[1] = $stack7""];\n	""13"" [label=""$stack7 = $stack5 + -2048144777""];\n	""14"" [label=""$stack8 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""15"" [label=""$stack8[2] = $stack9""];\n	""16"" [label=""$stack9 = this.<org.apache.commons.codec.digest.XXHash32: int seed>""];\n	""17"" [label=""return""];\n	""18"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""3""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.digest.XXHash32.process(byte[],int)",Method,No Comment,"private void process(final byte[] b, final int offset) {\n    // local shadows for performance\n    int s0 = state[0];\n    int s1 = state[1];\n    int s2 = state[2];\n    int s3 = state[3];\n    s0 = rotateLeft(s0 + getInt(b, offset) * PRIME2, ROTATE_BITS) * PRIME1;\n    s1 = rotateLeft(s1 + getInt(b, offset + 4) * PRIME2, ROTATE_BITS) * PRIME1;\n    s2 = rotateLeft(s2 + getInt(b, offset + 8) * PRIME2, ROTATE_BITS) * PRIME1;\n    s3 = rotateLeft(s3 + getInt(b, offset + 12) * PRIME2, ROTATE_BITS) * PRIME1;\n    state[0] = s0;\n    state[1] = s1;\n    state[2] = s2;\n    state[3] = s3;\n    stateUpdated = true;\n}","void process(byte[],int)","digraph cfg_process {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.digest.XXHash32: int getInt(byte[],int)>(b, offset)""];\n	""3"" [label=""$stack12 = $stack11 * -2048144777""];\n	""4"" [label=""$stack13 = s0 + $stack12""];\n	""5"" [label=""$stack14 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack13, 13)""];\n	""6"" [label=""$stack15 = offset + 4""];\n	""7"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.digest.XXHash32: int getInt(byte[],int)>(b, $stack15)""];\n	""8"" [label=""$stack17 = $stack16 * -2048144777""];\n	""9"" [label=""$stack18 = s1 + $stack17""];\n	""10"" [label=""$stack19 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack18, 13)""];\n	""11"" [label=""$stack20 = offset + 8""];\n	""12"" [label=""$stack21 = staticinvoke <org.apache.commons.codec.digest.XXHash32: int getInt(byte[],int)>(b, $stack20)""];\n	""13"" [label=""$stack22 = $stack21 * -2048144777""];\n	""14"" [label=""$stack23 = s2 + $stack22""];\n	""15"" [label=""$stack24 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack23, 13)""];\n	""16"" [label=""$stack25 = offset + 12""];\n	""17"" [label=""$stack26 = staticinvoke <org.apache.commons.codec.digest.XXHash32: int getInt(byte[],int)>(b, $stack25)""];\n	""18"" [label=""$stack27 = $stack26 * -2048144777""];\n	""19"" [label=""$stack28 = s3 + $stack27""];\n	""20"" [label=""$stack29 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($stack28, 13)""];\n	""21"" [label=""$stack30 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""22"" [label=""$stack30[0] = s0""];\n	""23"" [label=""$stack31 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""24"" [label=""$stack31[1] = s1""];\n	""25"" [label=""$stack32 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""26"" [label=""$stack32[2] = s2""];\n	""27"" [label=""$stack33 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""28"" [label=""$stack33[3] = s3""];\n	""29"" [label=""$stack7 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""30"" [label=""$stack8 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""31"" [label=""$stack9 = this.<org.apache.commons.codec.digest.XXHash32: int[] state>""];\n	""32"" [label=""b := @parameter0: byte[]""];\n	""33"" [label=""offset := @parameter1: int""];\n	""34"" [label=""return""];\n	""35"" [label=""s0 = $stack14 * -1640531535""];\n	""36"" [label=""s0 = $stack7[0]""];\n	""37"" [label=""s1 = $stack19 * -1640531535""];\n	""38"" [label=""s1 = $stack8[1]""];\n	""39"" [label=""s2 = $stack24 * -1640531535""];\n	""40"" [label=""s2 = $stack9[2]""];\n	""41"" [label=""s3 = $stack10[3]""];\n	""42"" [label=""s3 = $stack29 * -1640531535""];\n	""43"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""44"" [label=""this.<org.apache.commons.codec.digest.XXHash32: boolean stateUpdated> = 1""];\n	""1"" -> ""41""[label=""cfg_next""];\n	""10"" -> ""37""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""39""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""42""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""44""[label=""cfg_next""];\n	""29"" -> ""36""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""38""[label=""cfg_next""];\n	""31"" -> ""40""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""29""[label=""cfg_next""];\n	""35"" -> ""6""[label=""cfg_next""];\n	""36"" -> ""30""[label=""cfg_next""];\n	""37"" -> ""11""[label=""cfg_next""];\n	""38"" -> ""31""[label=""cfg_next""];\n	""39"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""1""[label=""cfg_next""];\n	""41"" -> ""2""[label=""cfg_next""];\n	""42"" -> ""21""[label=""cfg_next""];\n	""43"" -> ""32""[label=""cfg_next""];\n	""44"" -> ""34""[label=""cfg_next""];\n	""5"" -> ""35""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.digest.XXHash32.reset(),Method,No Comment,@Override\npublic void reset() {\n    initializeState();\n    totalLen = 0;\n    pos = 0;\n    stateUpdated = false;\n},void reset(),"digraph cfg_reset {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.digest.XXHash32: void initializeState()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""4"" [label=""this.<org.apache.commons.codec.digest.XXHash32: boolean stateUpdated> = 0""];\n	""5"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int pos> = 0""];\n	""6"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int totalLen> = 0""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.digest.XXHash32.update(byte[],int,int)",Method,No Comment,"@Override\npublic void update(final byte[] b, int off, final int len) {\n    if (len <= 0) {\n        return;\n    }\n    totalLen += len;\n    final int end = off + len;\n    // Check if the unprocessed bytes and new bytes can fill a block of 16.\n    // Make this overflow safe in the event that len is Integer.MAX_VALUE.\n    // Equivalent to: (pos + len < BUF_SIZE)\n    if (pos + len - BUF_SIZE < 0) {\n        System.arraycopy(b, off, buffer, pos, len);\n        pos += len;\n        return;\n    }\n    // Process left-over bytes with new bytes\n    if (pos > 0) {\n        final int size = BUF_SIZE - pos;\n        System.arraycopy(b, off, buffer, pos, size);\n        process(buffer, 0);\n        off += size;\n    }\n    final int limit = end - BUF_SIZE;\n    while (off <= limit) {\n        process(b, off);\n        off += BUF_SIZE;\n    }\n    // Handle left-over bytes\n    if (off < end) {\n        pos = end - off;\n        System.arraycopy(b, off, buffer, 0, pos);\n    } else {\n        pos = 0;\n    }\n}","void update(byte[],int,int)","digraph cfg_update {\n	""1"" [label=""$stack10 = $stack9 - 16""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""3"" [label=""$stack12 = end - off""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""6"" [label=""$stack15 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""7"" [label=""$stack16 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""8"" [label=""$stack17 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""9"" [label=""$stack18 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""10"" [label=""$stack19 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""11"" [label=""$stack20 = this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer>""];\n	""12"" [label=""$stack21 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""13"" [label=""$stack22 = $stack21 + len""];\n	""14"" [label=""$stack6 = this.<org.apache.commons.codec.digest.XXHash32: int totalLen>""];\n	""15"" [label=""$stack7 = $stack6 + len""];\n	""16"" [label=""$stack8 = this.<org.apache.commons.codec.digest.XXHash32: int pos>""];\n	""17"" [label=""$stack9 = $stack8 + len""];\n	""18"" [label=""b := @parameter0: byte[]""];\n	""19"" [label=""end = off + len""];\n	""20"" [label=""goto""];\n	""21"" [label=""goto""];\n	""22"" [label=""if $stack10 >= 0""];\n	""23"" [label=""if $stack11 <= 0""];\n	""24"" [label=""if len > 0""];\n	""25"" [label=""if off > size""];\n	""26"" [label=""if off >= end""];\n	""27"" [label=""len := @parameter2: int""];\n	""28"" [label=""off := @parameter1: int""];\n	""29"" [label=""off = off + 16""];\n	""30"" [label=""off = off + size""];\n	""31"" [label=""return""];\n	""32"" [label=""return""];\n	""33"" [label=""return""];\n	""34"" [label=""size = 16 - $stack15""];\n	""35"" [label=""size = end - 16""];\n	""36"" [label=""specialinvoke this.<org.apache.commons.codec.digest.XXHash32: void process(byte[],int)>($stack18, 0)""];\n	""37"" [label=""specialinvoke this.<org.apache.commons.codec.digest.XXHash32: void process(byte[],int)>(b, off)""];\n	""38"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(b, off, $stack14, 0, $stack13)""];\n	""39"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(b, off, $stack17, $stack16, size)""];\n	""40"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(b, off, $stack20, $stack19, len)""];\n	""41"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""42"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int pos> = $stack12""];\n	""43"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int pos> = $stack22""];\n	""44"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int pos> = 0""];\n	""45"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int totalLen> = $stack7""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""40""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""43""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""45""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""28""[label=""cfg_next""];\n	""19"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""23""[label=""cfg_next""];\n	""20"" -> ""25""[label=""cfg_goto""];\n	""21"" -> ""33""[label=""cfg_goto""];\n	""22"" -> ""11""[label=""cfg_false""];\n	""22"" -> ""2""[label=""cfg_true""];\n	""23"" -> ""35""[label=""cfg_true""];\n	""23"" -> ""6""[label=""cfg_false""];\n	""24"" -> ""14""[label=""cfg_true""];\n	""24"" -> ""31""[label=""cfg_false""];\n	""25"" -> ""26""[label=""cfg_true""];\n	""25"" -> ""37""[label=""cfg_false""];\n	""26"" -> ""3""[label=""cfg_false""];\n	""26"" -> ""44""[label=""cfg_true""];\n	""27"" -> ""24""[label=""cfg_next""];\n	""28"" -> ""27""[label=""cfg_next""];\n	""29"" -> ""20""[label=""cfg_next""];\n	""3"" -> ""42""[label=""cfg_next""];\n	""30"" -> ""35""[label=""cfg_next""];\n	""34"" -> ""8""[label=""cfg_next""];\n	""35"" -> ""25""[label=""cfg_next""];\n	""36"" -> ""30""[label=""cfg_next""];\n	""37"" -> ""29""[label=""cfg_next""];\n	""38"" -> ""21""[label=""cfg_next""];\n	""39"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""38""[label=""cfg_next""];\n	""40"" -> ""12""[label=""cfg_next""];\n	""41"" -> ""18""[label=""cfg_next""];\n	""42"" -> ""5""[label=""cfg_next""];\n	""43"" -> ""32""[label=""cfg_next""];\n	""44"" -> ""33""[label=""cfg_next""];\n	""45"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""34""[label=""cfg_next""];\n	""7"" -> ""39""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""36""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.XXHash32.update(int),Method,No Comment,"@Override\npublic void update(final int b) {\n    oneByte[0] = (byte) (b & 0xff);\n    update(oneByte, 0, 1);\n}",void update(int),"digraph cfg_update {\n	""1"" [label=""$stack2 = b & 255""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.digest.XXHash32: byte[] oneByte>""];\n	""3"" [label=""$stack3[0] = $stack4""];\n	""4"" [label=""$stack4 = (byte) $stack2""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.digest.XXHash32: byte[] oneByte>""];\n	""6"" [label=""b := @parameter0: int""];\n	""7"" [label=""return""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""9"" [label=""virtualinvoke this.<org.apache.commons.codec.digest.XXHash32: void update(byte[],int,int)>($stack5, 0, 1)""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.XXHash32.<init>(),Constructor,* Creates an XXHash32 instance with a seed of 0.,public XXHash32() {\n    this(0);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.digest.XXHash32: void <init>(int)>(0)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.digest.XXHash32.<init>(int),Constructor,* Creates an XXHash32 instance.\n     * @param seed the seed to use,public XXHash32(final int seed) {\n    this.seed = seed;\n    initializeState();\n},void <init>(int),"digraph cfg_init {\n	""1"" [label=""$stack2 = newarray (byte)[1]""];\n	""2"" [label=""$stack3 = newarray (int)[4]""];\n	""3"" [label=""$stack4 = newarray (byte)[16]""];\n	""4"" [label=""return""];\n	""5"" [label=""seed := @parameter0: int""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""specialinvoke this.<org.apache.commons.codec.digest.XXHash32: void initializeState()>()""];\n	""8"" [label=""this := @this: org.apache.commons.codec.digest.XXHash32""];\n	""9"" [label=""this.<org.apache.commons.codec.digest.XXHash32: byte[] buffer> = $stack4""];\n	""10"" [label=""this.<org.apache.commons.codec.digest.XXHash32: byte[] oneByte> = $stack2""];\n	""11"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int seed> = seed""];\n	""12"" [label=""this.<org.apache.commons.codec.digest.XXHash32: int[] state> = $stack3""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.EncoderException.<init>(),Constructor,"* Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n     * subsequently be initialized by a call to {@link #initCause}.\n     *\n     * @since 1.4",public EncoderException() {\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Exception: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.EncoderException""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.EncoderException.<init>(String),Constructor,"* Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n     * be initialized by a call to {@link #initCause}.\n     *\n     * @param message\n     *            a useful message relating to the encoder specific error.",public EncoderException(final String message) {\n    super(message);\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""message := @parameter0: java.lang.String""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(message)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.EncoderException""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.EncoderException.<init>(String,Throwable)",Constructor,"* Constructs a new exception with the specified detail message and cause.\n     *\n     * <p>\n     * Note that the detail message associated with {@code cause} is not automatically incorporated into this\n     * exception's detail message.\n     * </p>\n     *\n     * @param message\n     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n     * @param cause\n     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n     * @since 1.4","public EncoderException(final String message, final Throwable cause) {\n    super(message, cause);\n}","void <init>(java.lang.String,java.lang.Throwable)","digraph cfg_init {\n	""1"" [label=""cause := @parameter1: java.lang.Throwable""];\n	""2"" [label=""message := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(message, cause)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.EncoderException""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.EncoderException.<init>(Throwable),Constructor,"* Constructs a new exception with the specified cause and a detail message of {@code (cause==null ?\n     * null : cause.toString())} (which typically contains the class and detail message of {@code cause}).\n     * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n     *\n     * @param cause\n     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n     * @since 1.4",public EncoderException(final Throwable cause) {\n    super(cause);\n},void <init>(java.lang.Throwable),"digraph cfg_init {\n	""1"" [label=""cause := @parameter0: java.lang.Throwable""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Exception: void <init>(java.lang.Throwable)>(cause)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.EncoderException""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.StringDecoder.decode(String),Abstract Method,* Decodes a String and returns a String.\n     *\n     * @param source\n     *            the String to decode\n     * @return the encoded String\n     * @throws DecoderException\n     *             thrown if there is an error condition during the Encoding process.,String decode(String source) throws DecoderException;,java.lang.String decode(java.lang.String),digraph cfg_decode {\n}\n,default
"org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char)",Method,"* Returns whether the array contains the key, or not.","private static boolean arrayContains(final char[] arr, final char key) {\n    for (final char element : arr) {\n        if (element == key) {\n            return true;\n        }\n    }\n    return false;\n}","boolean arrayContains(char[],char)","digraph cfg_arrayContains {\n	""1"" [label=""arr := @parameter0: char[]""];\n	""2"" [label=""element = l2[l4]""];\n	""3"" [label=""goto""];\n	""4"" [label=""if element != key""];\n	""5"" [label=""if l4 >= l3""];\n	""6"" [label=""key := @parameter1: char""];\n	""7"" [label=""l2 = arr""];\n	""8"" [label=""l3 = lengthof l2""];\n	""9"" [label=""l4 = 0""];\n	""10"" [label=""l4 = l4 + 1""];\n	""11"" [label=""return 0""];\n	""12"" [label=""return 1""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""10""[label=""cfg_true""];\n	""4"" -> ""12""[label=""cfg_false""];\n	""5"" -> ""11""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(String),Method,"* <p>\n     * Implements the <em>K&ouml;lner Phonetik</em> algorithm.\n     * </p>\n     * <p>\n     * In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.\n     * </p>\n     *\n     * @param text The source text to encode\n     * @return the corresponding encoding according to the <em>K&ouml;lner Phonetik</em> algorithm","public String colognePhonetic(final String text) {\n    if (text == null) {\n        return null;\n    }\n    final CologneInputBuffer input = new CologneInputBuffer(preprocess(text));\n    final CologneOutputBuffer output = new CologneOutputBuffer(input.length() * 2);\n    char nextChar;\n    char lastChar = CHAR_IGNORE;\n    char chr;\n    while (!input.isEmpty()) {\n        chr = input.removeNext();\n        if (!input.isEmpty()) {\n            nextChar = input.getNextChar();\n        } else {\n            nextChar = CHAR_IGNORE;\n        }\n        if (chr < 'A' || chr > 'Z') {\n            // ignore unwanted characters\n            continue;\n        }\n        if (arrayContains(AEIJOUY, chr)) {\n            output.put('0');\n        } else if (chr == 'B' || chr == 'P' && nextChar != 'H') {\n            output.put('1');\n        } else if ((chr == 'D' || chr == 'T') && !arrayContains(CSZ, nextChar)) {\n            output.put('2');\n        } else if (arrayContains(FPVW, chr)) {\n            output.put('3');\n        } else if (arrayContains(GKQ, chr)) {\n            output.put('4');\n        } else if (chr == 'X' && !arrayContains(CKQ, lastChar)) {\n            output.put('4');\n            output.put('8');\n        } else if (chr == 'S' || chr == 'Z') {\n            output.put('8');\n        } else if (chr == 'C') {\n            if (output.isEmpty()) {\n                if (arrayContains(AHKLOQRUX, nextChar)) {\n                    output.put('4');\n                } else {\n                    output.put('8');\n                }\n            } else if (arrayContains(SZ, lastChar) || !arrayContains(AHKOQUX, nextChar)) {\n                output.put('8');\n            } else {\n                output.put('4');\n            }\n        } else if (arrayContains(DTX, chr)) {\n            output.put('8');\n        } else {\n            switch(chr) {\n                case 'R':\n                    output.put('7');\n                    break;\n                case 'L':\n                    output.put('5');\n                    break;\n                case 'M':\n                case 'N':\n                    output.put('6');\n                    break;\n                case 'H':\n                    // needed by put\n                    output.put(CHAR_IGNORE);\n                    break;\n                default:\n                    break;\n            }\n        }\n        lastChar = chr;\n    }\n    return output.toString();\n}",java.lang.String colognePhonetic(java.lang.String),"digraph cfg_colognePhonetic {\n	""1"" [label=""$stack10 = $stack9 * 2""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer""];\n	""3"" [label=""$stack12 = virtualinvoke input.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: boolean isEmpty()>()""];\n	""4"" [label=""$stack13 = virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: java.lang.String toString()>()""];\n	""5"" [label=""$stack14 = virtualinvoke input.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: boolean isEmpty()>()""];\n	""6"" [label=""$stack15 = <org.apache.commons.codec.language.ColognePhonetic: char[] AEIJOUY>""];\n	""7"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack15, chr)""];\n	""8"" [label=""$stack17 = <org.apache.commons.codec.language.ColognePhonetic: char[] CSZ>""];\n	""9"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack17, nextChar)""];\n	""10"" [label=""$stack19 = <org.apache.commons.codec.language.ColognePhonetic: char[] FPVW>""];\n	""11"" [label=""$stack20 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack19, chr)""];\n	""12"" [label=""$stack21 = <org.apache.commons.codec.language.ColognePhonetic: char[] GKQ>""];\n	""13"" [label=""$stack22 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack21, chr)""];\n	""14"" [label=""$stack23 = <org.apache.commons.codec.language.ColognePhonetic: char[] DTX>""];\n	""15"" [label=""$stack24 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack23, chr)""];\n	""16"" [label=""$stack25 = virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: boolean isEmpty()>()""];\n	""17"" [label=""$stack26 = <org.apache.commons.codec.language.ColognePhonetic: char[] SZ>""];\n	""18"" [label=""$stack27 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack26, lastChar)""];\n	""19"" [label=""$stack28 = <org.apache.commons.codec.language.ColognePhonetic: char[] AHKOQUX>""];\n	""20"" [label=""$stack29 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack28, nextChar)""];\n	""21"" [label=""$stack30 = <org.apache.commons.codec.language.ColognePhonetic: char[] AHKLOQRUX>""];\n	""22"" [label=""$stack31 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack30, nextChar)""];\n	""23"" [label=""$stack32 = <org.apache.commons.codec.language.ColognePhonetic: char[] CKQ>""];\n	""24"" [label=""$stack33 = staticinvoke <org.apache.commons.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($stack32, lastChar)""];\n	""25"" [label=""$stack7 = specialinvoke this.<org.apache.commons.codec.language.ColognePhonetic: char[] preprocess(java.lang.String)>(text)""];\n	""26"" [label=""$stack8 = new org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer""];\n	""27"" [label=""$stack9 = virtualinvoke input.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length()>()""];\n	""28"" [label=""chr = virtualinvoke input.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char removeNext()>()""];\n	""29"" [label=""goto""];\n	""30"" [label=""goto""];\n	""31"" [label=""goto""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""goto""];\n	""42"" [label=""goto""];\n	""43"" [label=""goto""];\n	""44"" [label=""goto""];\n	""45"" [label=""goto""];\n	""46"" [label=""goto""];\n	""47"" [label=""goto""];\n	""48"" [label=""if $stack12 != 0""];\n	""49"" [label=""if $stack14 != 0""];\n	""50"" [label=""if $stack16 == 0""];\n	""51"" [label=""if $stack18 != 0""];\n	""52"" [label=""if $stack20 == 0""];\n	""53"" [label=""if $stack22 == 0""];\n	""54"" [label=""if $stack24 == 0""];\n	""55"" [label=""if $stack25 == 0""];\n	""56"" [label=""if $stack27 != 0""];\n	""57"" [label=""if $stack29 != 0""];\n	""58"" [label=""if $stack31 == 0""];\n	""59"" [label=""if $stack33 != 0""];\n	""60"" [label=""if chr != 67""];\n	""61"" [label=""if chr != 80""];\n	""62"" [label=""if chr != 84""];\n	""63"" [label=""if chr != 88""];\n	""64"" [label=""if chr != 90""];\n	""65"" [label=""if chr < 65""];\n	""66"" [label=""if chr <= 90""];\n	""67"" [label=""if chr == 66""];\n	""68"" [label=""if chr == 68""];\n	""69"" [label=""if chr == 83""];\n	""70"" [label=""if nextChar == 72""];\n	""71"" [label=""if text != null""];\n	""72"" [label=""input = $stack8""];\n	""73"" [label=""lastChar = 45""];\n	""74"" [label=""lastChar = chr""];\n	""75"" [label=""nextChar = 45""];\n	""76"" [label=""nextChar = virtualinvoke input.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char getNextChar()>()""];\n	""77"" [label=""output = $stack11""];\n	""78"" [label=""return $stack13""];\n	""79"" [label=""return null""];\n	""80"" [label=""specialinvoke $stack11.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void <init>(org.apache.commons.codec.language.ColognePhonetic,int)>(this, $stack10)""];\n	""81"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: void <init>(org.apache.commons.codec.language.ColognePhonetic,char[])>(this, $stack7)""];\n	""82"" [label=""switch(chr) \{     case 72:     case 73:     case 74:     case 75:     case 76:     case 77:     case 78:     case 79:     case 80:     case 81:     case 82:     default:  \}""];\n	""83"" [label=""text := @parameter0: java.lang.String""];\n	""84"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""85"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(45)""];\n	""86"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(48)""];\n	""87"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(49)""];\n	""88"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(50)""];\n	""89"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(51)""];\n	""90"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(52)""];\n	""91"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(52)""];\n	""92"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(52)""];\n	""93"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(52)""];\n	""94"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(53)""];\n	""95"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(54)""];\n	""96"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(55)""];\n	""97"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(56)""];\n	""98"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(56)""];\n	""99"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(56)""];\n	""100"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(56)""];\n	""101"" [label=""virtualinvoke output.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: void put(char)>(56)""];\n	""1"" -> ""80""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""40""[label=""cfg_next""];\n	""101"" -> ""42""[label=""cfg_next""];\n	""11"" -> ""52""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""53""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""54""[label=""cfg_next""];\n	""16"" -> ""55""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""56""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""27""[label=""cfg_next""];\n	""20"" -> ""57""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""58""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""59""[label=""cfg_next""];\n	""25"" -> ""81""[label=""cfg_next""];\n	""26"" -> ""25""[label=""cfg_next""];\n	""27"" -> ""1""[label=""cfg_next""];\n	""28"" -> ""5""[label=""cfg_next""];\n	""29"" -> ""65""[label=""cfg_goto""];\n	""3"" -> ""48""[label=""cfg_next""];\n	""30"" -> ""3""[label=""cfg_goto""];\n	""31"" -> ""74""[label=""cfg_goto""];\n	""32"" -> ""74""[label=""cfg_goto""];\n	""33"" -> ""74""[label=""cfg_goto""];\n	""34"" -> ""74""[label=""cfg_goto""];\n	""35"" -> ""74""[label=""cfg_goto""];\n	""36"" -> ""74""[label=""cfg_goto""];\n	""37"" -> ""74""[label=""cfg_goto""];\n	""38"" -> ""74""[label=""cfg_goto""];\n	""39"" -> ""74""[label=""cfg_goto""];\n	""4"" -> ""78""[label=""cfg_next""];\n	""40"" -> ""74""[label=""cfg_goto""];\n	""41"" -> ""74""[label=""cfg_goto""];\n	""42"" -> ""74""[label=""cfg_goto""];\n	""43"" -> ""74""[label=""cfg_goto""];\n	""44"" -> ""74""[label=""cfg_goto""];\n	""45"" -> ""74""[label=""cfg_goto""];\n	""46"" -> ""74""[label=""cfg_goto""];\n	""47"" -> ""3""[label=""cfg_goto""];\n	""48"" -> ""28""[label=""cfg_false""];\n	""48"" -> ""4""[label=""cfg_true""];\n	""49"" -> ""75""[label=""cfg_true""];\n	""49"" -> ""76""[label=""cfg_false""];\n	""5"" -> ""49""[label=""cfg_next""];\n	""50"" -> ""67""[label=""cfg_true""];\n	""50"" -> ""86""[label=""cfg_false""];\n	""51"" -> ""10""[label=""cfg_true""];\n	""51"" -> ""88""[label=""cfg_false""];\n	""52"" -> ""12""[label=""cfg_true""];\n	""52"" -> ""89""[label=""cfg_false""];\n	""53"" -> ""63""[label=""cfg_true""];\n	""53"" -> ""90""[label=""cfg_false""];\n	""54"" -> ""101""[label=""cfg_false""];\n	""54"" -> ""82""[label=""cfg_true""];\n	""55"" -> ""17""[label=""cfg_true""];\n	""55"" -> ""21""[label=""cfg_false""];\n	""56"" -> ""100""[label=""cfg_true""];\n	""56"" -> ""19""[label=""cfg_false""];\n	""57"" -> ""100""[label=""cfg_false""];\n	""57"" -> ""93""[label=""cfg_true""];\n	""58"" -> ""92""[label=""cfg_false""];\n	""58"" -> ""99""[label=""cfg_true""];\n	""59"" -> ""69""[label=""cfg_true""];\n	""59"" -> ""91""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""14""[label=""cfg_true""];\n	""60"" -> ""16""[label=""cfg_false""];\n	""61"" -> ""68""[label=""cfg_true""];\n	""61"" -> ""70""[label=""cfg_false""];\n	""62"" -> ""10""[label=""cfg_true""];\n	""62"" -> ""8""[label=""cfg_false""];\n	""63"" -> ""23""[label=""cfg_false""];\n	""63"" -> ""69""[label=""cfg_true""];\n	""64"" -> ""60""[label=""cfg_true""];\n	""64"" -> ""98""[label=""cfg_false""];\n	""65"" -> ""3""[label=""cfg_true""];\n	""65"" -> ""66""[label=""cfg_false""];\n	""66"" -> ""30""[label=""cfg_false""];\n	""66"" -> ""6""[label=""cfg_true""];\n	""67"" -> ""61""[label=""cfg_false""];\n	""67"" -> ""87""[label=""cfg_true""];\n	""68"" -> ""62""[label=""cfg_false""];\n	""68"" -> ""8""[label=""cfg_true""];\n	""69"" -> ""64""[label=""cfg_false""];\n	""69"" -> ""98""[label=""cfg_true""];\n	""7"" -> ""50""[label=""cfg_next""];\n	""70"" -> ""68""[label=""cfg_true""];\n	""70"" -> ""87""[label=""cfg_false""];\n	""71"" -> ""26""[label=""cfg_true""];\n	""71"" -> ""79""[label=""cfg_false""];\n	""72"" -> ""2""[label=""cfg_next""];\n	""73"" -> ""3""[label=""cfg_next""];\n	""74"" -> ""47""[label=""cfg_next""];\n	""75"" -> ""65""[label=""cfg_next""];\n	""76"" -> ""29""[label=""cfg_next""];\n	""77"" -> ""73""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""77""[label=""cfg_next""];\n	""81"" -> ""72""[label=""cfg_next""];\n	""82"" -> ""74""[label=""cfg_switch""];\n	""82"" -> ""85""[label=""cfg_switch""];\n	""82"" -> ""94""[label=""cfg_switch""];\n	""82"" -> ""95""[label=""cfg_switch""];\n	""82"" -> ""96""[label=""cfg_switch""];\n	""83"" -> ""71""[label=""cfg_next""];\n	""84"" -> ""83""[label=""cfg_next""];\n	""85"" -> ""43""[label=""cfg_next""];\n	""86"" -> ""31""[label=""cfg_next""];\n	""87"" -> ""32""[label=""cfg_next""];\n	""88"" -> ""33""[label=""cfg_next""];\n	""89"" -> ""34""[label=""cfg_next""];\n	""9"" -> ""51""[label=""cfg_next""];\n	""90"" -> ""35""[label=""cfg_next""];\n	""91"" -> ""97""[label=""cfg_next""];\n	""92"" -> ""38""[label=""cfg_next""];\n	""93"" -> ""41""[label=""cfg_next""];\n	""94"" -> ""44""[label=""cfg_next""];\n	""95"" -> ""45""[label=""cfg_next""];\n	""96"" -> ""46""[label=""cfg_next""];\n	""97"" -> ""36""[label=""cfg_next""];\n	""98"" -> ""37""[label=""cfg_next""];\n	""99"" -> ""39""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic.encode(Object),Method,No Comment,"@Override\npublic Object encode(final Object object) throws EncoderException {\n    if (!(object instanceof String)) {\n        throw new EncoderException(""This method's parameter was expected to be of the type "" + String.class.getName() + "". But actually it was of the type "" + object.getClass().getName() + ""."");\n    }\n    return encode((String) object);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 = virtualinvoke object.<java.lang.Object: java.lang.Class getClass()>()""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.Class: java.lang.String getName()>()""];\n	""3"" [label=""$stack12 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"". But actually it was of the type \"")""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11)""];\n	""5"" [label=""$stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"".\"")""];\n	""6"" [label=""$stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""7"" [label=""$stack16 = new org.apache.commons.codec.EncoderException""];\n	""8"" [label=""$stack2 = object instanceof java.lang.String""];\n	""9"" [label=""$stack3 = (java.lang.String) object""];\n	""10"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic: java.lang.String encode(java.lang.String)>($stack3)""];\n	""11"" [label=""$stack5 = new java.lang.StringBuilder""];\n	""12"" [label=""$stack6 = class \""Ljava/lang/String;\""""];\n	""13"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>()""];\n	""14"" [label=""$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""This method\'s parameter was expected to be of the type \"")""];\n	""15"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7)""];\n	""16"" [label=""if $stack2 != 0""];\n	""17"" [label=""object := @parameter0: java.lang.Object""];\n	""18"" [label=""return $stack4""];\n	""19"" [label=""specialinvoke $stack16.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($stack15)""];\n	""20"" [label=""specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()""];\n	""21"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""22"" [label=""throw $stack16""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""20""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""15"" -> ""3""[label=""cfg_next""];\n	""16"" -> ""7""[label=""cfg_false""];\n	""16"" -> ""9""[label=""cfg_true""];\n	""17"" -> ""8""[label=""cfg_next""];\n	""19"" -> ""22""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""14""[label=""cfg_next""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""19""[label=""cfg_next""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic.encode(String),Method,No Comment,@Override\npublic String encode(final String text) {\n    return colognePhonetic(text);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>(text)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""text := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(String,String)",Method,"* Compares the first encoded string to the second encoded string.\n     *\n     * @param text1 source text to encode before testing for equality.\n     * @param text2 source text to encode before testing for equality.\n     * @return {@code true} if the encoding the first string equals the encoding of the second string, {@code false}\n     *         otherwise","public boolean isEncodeEqual(final String text1, final String text2) {\n    return colognePhonetic(text1).equals(colognePhonetic(text2));\n}","boolean isEncodeEqual(java.lang.String,java.lang.String)","digraph cfg_isEncodeEqual {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>(text2)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>(text1)""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack3)""];\n	""4"" [label=""return $stack5""];\n	""5"" [label=""text1 := @parameter0: java.lang.String""];\n	""6"" [label=""text2 := @parameter1: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic.preprocess(String),Method,"* Converts the string to upper case and replaces Germanic umlaut characters\n     * The following characters are mapped:\n     * <ul>\n     * <li>capital A, umlaut mark</li>\n     * <li>capital U, umlaut mark</li>\n     * <li>capital O, umlaut mark</li>\n     * <li>small sharp s, German</li>\n     * </ul>","private char[] preprocess(final String text) {\n    // This converts German small sharp s (Eszett) to SS\n    final char[] chrs = text.toUpperCase(Locale.GERMAN).toCharArray();\n    for (int index = 0; index < chrs.length; index++) {\n        switch(chrs[index]) {\n            case // capital A, umlaut mark\n            '\u00C4':\n                chrs[index] = 'A';\n                break;\n            case // capital U, umlaut mark\n            '\u00DC':\n                chrs[index] = 'U';\n                break;\n            case // capital O, umlaut mark\n            '\u00D6':\n                chrs[index] = 'O';\n                break;\n            default:\n                break;\n        }\n    }\n    return chrs;\n}",char[] preprocess(java.lang.String),"digraph cfg_preprocess {\n	""1"" [label=""$stack4 = <java.util.Locale: java.util.Locale GERMAN>""];\n	""2"" [label=""$stack5 = virtualinvoke text.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack4)""];\n	""3"" [label=""$stack6 = lengthof chrs""];\n	""4"" [label=""$stack7 = chrs[index]""];\n	""5"" [label=""chrs = virtualinvoke $stack5.<java.lang.String: char[] toCharArray()>()""];\n	""6"" [label=""chrs[index] = 65""];\n	""7"" [label=""chrs[index] = 79""];\n	""8"" [label=""chrs[index] = 85""];\n	""9"" [label=""goto""];\n	""10"" [label=""goto""];\n	""11"" [label=""goto""];\n	""12"" [label=""goto""];\n	""13"" [label=""if index >= $stack6""];\n	""14"" [label=""index = 0""];\n	""15"" [label=""index = index + 1""];\n	""16"" [label=""return chrs""];\n	""17"" [label=""switch($stack7) \{     case 196:     case 214:     case 220:     default:  \}""];\n	""18"" [label=""text := @parameter0: java.lang.String""];\n	""19"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_goto""];\n	""11"" -> ""15""[label=""cfg_goto""];\n	""12"" -> ""3""[label=""cfg_goto""];\n	""13"" -> ""16""[label=""cfg_true""];\n	""13"" -> ""4""[label=""cfg_false""];\n	""14"" -> ""3""[label=""cfg_next""];\n	""15"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_switch""];\n	""17"" -> ""6""[label=""cfg_switch""];\n	""17"" -> ""7""[label=""cfg_switch""];\n	""17"" -> ""8""[label=""cfg_switch""];\n	""18"" -> ""1""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""14""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_next""];\n	""9"" -> ""15""[label=""cfg_goto""];\n}\n",private 
org.apache.commons.codec.language.ColognePhonetic.<init>(),Constructor,* Constructs a new instance.,public ColognePhonetic() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.copyData(int,int)",Abstract Method,No Comment,"protected abstract char[] copyData(int start, int length);","char[] copyData(int,int)",digraph cfg_copyData {\n}\n,"protected , abstract "
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.isEmpty(),Method,No Comment,public boolean isEmpty() {\n    return length() == 0;\n},boolean isEmpty(),"digraph cfg_isEmpty {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: int length()>()""];\n	""2"" [label=""$stack2 = 0""];\n	""3"" [label=""$stack2 = 1""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack1 != 0""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneBuffer""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.length(),Method,No Comment,public int length() {\n    return length;\n},int length(),"digraph cfg_length {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: int length>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.toString(),Method,No Comment,"@Override\npublic String toString() {\n    return new String(copyData(0, length));\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: int length>""];\n	""2"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: char[] copyData(int,int)>(0, $stack1)""];\n	""3"" [label=""$stack3 = new java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""specialinvoke $stack3.<java.lang.String: void <init>(char[])>($stack2)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(char[]),Constructor,No Comment,CologneBuffer(final char[] data) {\n    this.data = data;\n    this.length = data.length;\n},void <init>(char[]),"digraph cfg_init {\n	""1"" [label=""$stack2 = lengthof data""];\n	""2"" [label=""data := @parameter0: char[]""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneBuffer""];\n	""6"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: char[] data> = data""];\n	""7"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: int length> = $stack2""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(int),Constructor,No Comment,CologneBuffer(final int buffSize) {\n    this.data = new char[buffSize];\n    this.length = 0;\n},void <init>(int),"digraph cfg_init {\n	""1"" [label=""$stack2 = newarray (char)[buffSize]""];\n	""2"" [label=""buffSize := @parameter0: int""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneBuffer""];\n	""6"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: char[] data> = $stack2""];\n	""7"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: int length> = 0""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",default
"org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.copyData(int,int)",Method,No Comment,"@Override\nprotected char[] copyData(final int start, final int length) {\n    final char[] newData = new char[length];\n    System.arraycopy(data, data.length - this.length + start, newData, 0, length);\n    return newData;\n}","char[] copyData(int,int)","digraph cfg_copyData {\n	""1"" [label=""$stack4 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>""];\n	""2"" [label=""$stack5 = lengthof $stack4""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>""];\n	""4"" [label=""$stack7 = $stack5 - $stack6""];\n	""5"" [label=""$stack8 = $stack7 + start""];\n	""6"" [label=""$stack9 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>""];\n	""7"" [label=""length := @parameter1: int""];\n	""8"" [label=""newData = newarray (char)[length]""];\n	""9"" [label=""return newData""];\n	""10"" [label=""start := @parameter0: int""];\n	""11"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack9, $stack8, newData, 0, length)""];\n	""12"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar(),Method,No Comment,public char getNextChar() {\n    return data[getNextPos()];\n},char getNextChar(),"digraph cfg_getNextChar {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>""];\n	""2"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int getNextPos()>()""];\n	""3"" [label=""$stack3 = $stack1[$stack2]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextPos(),Method,No Comment,protected int getNextPos() {\n    return data.length - length;\n},int getNextPos(),"digraph cfg_getNextPos {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>""];\n	""2"" [label=""$stack2 = lengthof $stack1""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>""];\n	""4"" [label=""$stack4 = $stack2 - $stack3""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext(),Method,No Comment,public char removeNext() {\n    final char ch = getNextChar();\n    length--;\n    return ch;\n},char removeNext(),"digraph cfg_removeNext {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>""];\n	""2"" [label=""$stack3 = $stack2 - 1""];\n	""3"" [label=""ch = virtualinvoke this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char getNextChar()>()""];\n	""4"" [label=""return ch""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer""];\n	""6"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length> = $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.copyData(int,int)",Method,No Comment,"@Override\nprotected char[] copyData(final int start, final int length) {\n    return Arrays.copyOfRange(data, start, length);\n}","char[] copyData(int,int)","digraph cfg_copyData {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char[] data>""];\n	""2"" [label=""$stack4 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack3, start, length)""];\n	""3"" [label=""length := @parameter1: int""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""start := @parameter0: int""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.put(char),Method,"* Stores the next code in the output buffer, keeping track of the previous code.\n         * '0' is only stored if it is the first entry.\n         * Ignored chars are never stored.\n         * If the code is the same as the last code (whether stored or not) it is not stored.\n         *\n         * @param code the code to store.",public void put(final char code) {\n    if (code != CHAR_IGNORE && lastCode != code && (code != '0' || length == 0)) {\n        data[length] = code;\n        length++;\n    }\n    lastCode = code;\n},void put(char),"digraph cfg_put {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char lastCode>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char[] data>""];\n	""3"" [label=""$stack3[$stack4] = code""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length>""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length>""];\n	""6"" [label=""$stack6 = $stack5 + 1""];\n	""7"" [label=""$stack7 = this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length>""];\n	""8"" [label=""code := @parameter0: char""];\n	""9"" [label=""if $stack2 == code""];\n	""10"" [label=""if $stack7 != 0""];\n	""11"" [label=""if code != 48""];\n	""12"" [label=""if code == 45""];\n	""13"" [label=""return""];\n	""14"" [label=""this := @this: org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer""];\n	""15"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char lastCode> = code""];\n	""16"" [label=""this.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length> = $stack6""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_true""];\n	""10"" -> ""2""[label=""cfg_false""];\n	""11"" -> ""2""[label=""cfg_true""];\n	""11"" -> ""7""[label=""cfg_false""];\n	""12"" -> ""1""[label=""cfg_false""];\n	""12"" -> ""15""[label=""cfg_true""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""12""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_false""];\n	""9"" -> ""15""[label=""cfg_true""];\n}\n",public 
"org.apache.commons.codec.language.RefinedSoundex.difference(String,String)",Method,"* Returns the number of characters in the two encoded Strings that are the\n     * same. This return value ranges from 0 to the length of the shortest\n     * encoded String: 0 indicates little or no similarity, and 4 out of 4 (for\n     * example) indicates strong similarity or identical values. For refined\n     * Soundex, the return value can be greater than 4.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the\n     *             same from 0 to the length of the shortest encoded String.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=""https://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"">\n     *          MS T-SQL DIFFERENCE</a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3","public int difference(final String s1, final String s2) throws EncoderException {\n    return SoundexUtils.difference(this, s1, s2);\n}","int difference(java.lang.String,java.lang.String)","digraph cfg_difference {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.language.SoundexUtils: int difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)>(this, s1, s2)""];\n	""2"" [label=""return $stack3""];\n	""3"" [label=""s1 := @parameter0: java.lang.String""];\n	""4"" [label=""s2 := @parameter1: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.encode(Object),Method,"* Encodes an Object using the refined soundex algorithm. This method is\n     * provided in order to satisfy the requirements of the Encoder interface,\n     * and will throw an EncoderException if the supplied object is not of type\n     * {@link String}.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type {@link String}) containing the refined\n     *             soundex code which corresponds to the String supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type {@link String}","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to RefinedSoundex encode is not of type java.lang.String"");\n    }\n    return soundex((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.RefinedSoundex: java.lang.String soundex(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to RefinedSoundex encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.encode(String),Method,* Encodes a String using the refined soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied,@Override\npublic String encode(final String str) {\n    return soundex(str);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.RefinedSoundex: java.lang.String soundex(java.lang.String)>(str)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""str := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char),Method,"* Returns the mapping code for a given character. The mapping codes are\n     * maintained in an internal char array named soundexMapping, and the\n     * default values of these mappings are US English.\n     *\n     * @param c\n     *                  char to get mapping for\n     * @return A character (really a numeral) to return for the given char",char getMappingCode(final char c) {\n    if (!Character.isLetter(c)) {\n        return 0;\n    }\n    final int index = Character.toUpperCase(c) - 'A';\n    if (index < 0 || index >= this.soundexMapping.length) {\n        return 0;\n    }\n    return this.soundexMapping[index];\n},char getMappingCode(char),"digraph cfg_getMappingCode {\n	""1"" [label=""$stack3 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c)""];\n	""2"" [label=""$stack4 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c)""];\n	""3"" [label=""$stack5 = this.<org.apache.commons.codec.language.RefinedSoundex: char[] soundexMapping>""];\n	""4"" [label=""$stack6 = lengthof $stack5""];\n	""5"" [label=""$stack7 = this.<org.apache.commons.codec.language.RefinedSoundex: char[] soundexMapping>""];\n	""6"" [label=""$stack8 = $stack7[index]""];\n	""7"" [label=""c := @parameter0: char""];\n	""8"" [label=""if $stack3 != 0""];\n	""9"" [label=""if index < $stack6""];\n	""10"" [label=""if index < 0""];\n	""11"" [label=""index = $stack4 - 65""];\n	""12"" [label=""return $stack8""];\n	""13"" [label=""return 0""];\n	""14"" [label=""return 0""];\n	""15"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_true""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""13""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_true""];\n	""9"" -> ""14""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_true""];\n}\n",default
org.apache.commons.codec.language.RefinedSoundex.soundex(String),Method,* Retrieves the Refined Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Refined Soundex algorithm\n     * @return A soundex code for the String supplied,"public String soundex(String str) {\n    if (str == null) {\n        return null;\n    }\n    str = SoundexUtils.clean(str);\n    if (str.isEmpty()) {\n        return str;\n    }\n    final StringBuilder sBuf = new StringBuilder();\n    sBuf.append(str.charAt(0));\n    char last, current;\n    last = '*';\n    for (int i = 0; i < str.length(); i++) {\n        current = getMappingCode(str.charAt(i));\n        if (current == last) {\n            continue;\n        }\n        if (current != 0) {\n            sBuf.append(current);\n        }\n        last = current;\n    }\n    return sBuf.toString();\n}",java.lang.String soundex(java.lang.String),"digraph cfg_soundex {\n	""1"" [label=""$stack10 = virtualinvoke sBuf.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = virtualinvoke str.<java.lang.String: char charAt(int)>(i)""];\n	""3"" [label=""$stack6 = virtualinvoke str.<java.lang.String: boolean isEmpty()>()""];\n	""4"" [label=""$stack7 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack8 = virtualinvoke str.<java.lang.String: char charAt(int)>(0)""];\n	""6"" [label=""$stack9 = virtualinvoke str.<java.lang.String: int length()>()""];\n	""7"" [label=""current = virtualinvoke this.<org.apache.commons.codec.language.RefinedSoundex: char getMappingCode(char)>($stack11)""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""i = 0""];\n	""11"" [label=""i = i + 1""];\n	""12"" [label=""if $stack6 == 0""];\n	""13"" [label=""if current != last""];\n	""14"" [label=""if current == 0""];\n	""15"" [label=""if i >= $stack9""];\n	""16"" [label=""if str != null""];\n	""17"" [label=""last = 42""];\n	""18"" [label=""last = current""];\n	""19"" [label=""return $stack10""];\n	""20"" [label=""return null""];\n	""21"" [label=""return str""];\n	""22"" [label=""sBuf = $stack7""];\n	""23"" [label=""specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""str := @parameter0: java.lang.String""];\n	""25"" [label=""str = staticinvoke <org.apache.commons.codec.language.SoundexUtils: java.lang.String clean(java.lang.String)>(str)""];\n	""26"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""27"" [label=""virtualinvoke sBuf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack8)""];\n	""28"" [label=""virtualinvoke sBuf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(current)""];\n	""1"" -> ""19""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""21""[label=""cfg_false""];\n	""12"" -> ""4""[label=""cfg_true""];\n	""13"" -> ""14""[label=""cfg_true""];\n	""13"" -> ""8""[label=""cfg_false""];\n	""14"" -> ""18""[label=""cfg_true""];\n	""14"" -> ""28""[label=""cfg_false""];\n	""15"" -> ""1""[label=""cfg_true""];\n	""15"" -> ""2""[label=""cfg_false""];\n	""16"" -> ""20""[label=""cfg_false""];\n	""16"" -> ""25""[label=""cfg_true""];\n	""17"" -> ""10""[label=""cfg_next""];\n	""18"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""22"" -> ""5""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""24"" -> ""16""[label=""cfg_next""];\n	""25"" -> ""3""[label=""cfg_next""];\n	""26"" -> ""24""[label=""cfg_next""];\n	""27"" -> ""17""[label=""cfg_next""];\n	""28"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""23""[label=""cfg_next""];\n	""5"" -> ""27""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_goto""];\n	""9"" -> ""6""[label=""cfg_goto""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.<init>(),Constructor,* Creates an instance of the RefinedSoundex object using the default US\n     * English mapping.,public RefinedSoundex() {\n    this.soundexMapping = US_ENGLISH_MAPPING;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.language.RefinedSoundex: char[] US_ENGLISH_MAPPING>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""5"" [label=""this.<org.apache.commons.codec.language.RefinedSoundex: char[] soundexMapping> = $stack1""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.<init>(char[]),Constructor,"* Creates a refined soundex instance using a custom mapping. This\n     * constructor can be used to customize the mapping, and/or possibly\n     * provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for\n     *                  a given character",public RefinedSoundex(final char[] mapping) {\n    this.soundexMapping = mapping.clone();\n},void <init>(char[]),"digraph cfg_init {\n	""1"" [label=""$stack2 = virtualinvoke mapping.<java.lang.Object: java.lang.Object clone()>()""];\n	""2"" [label=""$stack3 = (char[]) $stack2""];\n	""3"" [label=""mapping := @parameter0: char[]""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""7"" [label=""this.<org.apache.commons.codec.language.RefinedSoundex: char[] soundexMapping> = $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.RefinedSoundex.<init>(String),Constructor,"* Creates a refined Soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4",public RefinedSoundex(final String mapping) {\n    this.soundexMapping = mapping.toCharArray();\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = virtualinvoke mapping.<java.lang.String: char[] toCharArray()>()""];\n	""2"" [label=""mapping := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.RefinedSoundex""];\n	""6"" [label=""this.<org.apache.commons.codec.language.RefinedSoundex: char[] soundexMapping> = $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.AbstractCaverphone.encode(Object),Method,"* Encodes an Object using the Caverphone algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type {@link String}.\n     *\n     * @param source\n     *            Object to encode\n     * @return An object (or type {@link String}) containing the Caverphone code which corresponds to the String\n     *         supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type {@link String}.","@Override\npublic Object encode(final Object source) throws EncoderException {\n    if (!(source instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Caverphone encode is not of type java.lang.String"");\n    }\n    return this.encode((String) source);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = source instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) source""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.AbstractCaverphone: java.lang.String encode(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""source := @parameter0: java.lang.Object""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Caverphone encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.AbstractCaverphone""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(String,String)",Method,"* Tests if the encodings of two strings are equal.\n     *\n     * This method might be promoted to a new AbstractStringEncoder superclass.\n     *\n     * @param str1\n     *            First of two strings to compare\n     * @param str2\n     *            Second of two strings to compare\n     * @return {@code true} if the encodings of these strings are identical, {@code false} otherwise.\n     * @throws EncoderException\n     *             thrown if there is an error condition during the encoding process.","public boolean isEncodeEqual(final String str1, final String str2) throws EncoderException {\n    return this.encode(str1).equals(this.encode(str2));\n}","boolean isEncodeEqual(java.lang.String,java.lang.String)","digraph cfg_isEncodeEqual {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.AbstractCaverphone: java.lang.String encode(java.lang.String)>(str2)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.AbstractCaverphone: java.lang.String encode(java.lang.String)>(str1)""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack3)""];\n	""4"" [label=""return $stack5""];\n	""5"" [label=""str1 := @parameter0: java.lang.String""];\n	""6"" [label=""str2 := @parameter1: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.AbstractCaverphone""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.AbstractCaverphone.<init>(),Constructor,* Constructs a new instance for subclasses.,public AbstractCaverphone() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.AbstractCaverphone""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Metaphone.encode(Object),Method,"* Encodes an Object using the metaphone algorithm.  This method\n     * is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the\n     * supplied object is not of type {@link String}.\n     *\n     * @param obj Object to encode\n     * @return An object (or type {@link String}) containing the\n     *         metaphone code which corresponds to the String supplied.\n     * @throws EncoderException if the parameter supplied is not\n     *                          of type {@link String}","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Metaphone encode is not of type java.lang.String"");\n    }\n    return metaphone((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: java.lang.String metaphone(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Metaphone encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Metaphone.encode(String),Method,* Encodes a String using the Metaphone algorithm.\n     *\n     * @param str String object to encode\n     * @return The metaphone code corresponding to the String supplied,@Override\npublic String encode(final String str) {\n    return metaphone(str);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: java.lang.String metaphone(java.lang.String)>(str)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""str := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Metaphone.getMaxCodeLen(),Method,* Gets the maxCodeLen.\n     *\n     * @return the maxCodeLen.,public int getMaxCodeLen() {\n    return this.maxCodeLen;\n},int getMaxCodeLen(),"digraph cfg_getMaxCodeLen {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.Metaphone: int maxCodeLen>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.Metaphone.isLastChar(int,int)",Method,No Comment,"private boolean isLastChar(final int wdsz, final int n) {\n    return n + 1 == wdsz;\n}","boolean isLastChar(int,int)","digraph cfg_isLastChar {\n	""1"" [label=""$stack3 = n + 1""];\n	""2"" [label=""$stack4 = 0""];\n	""3"" [label=""$stack4 = 1""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack3 != wdsz""];\n	""6"" [label=""n := @parameter1: int""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""9"" [label=""wdsz := @parameter0: int""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(String,String)",Method,"* Tests is the metaphones of two strings are identical.\n     *\n     * @param str1 First of two strings to compare\n     * @param str2 Second of two strings to compare\n     * @return {@code true} if the metaphones of these strings are identical,\n     *        {@code false} otherwise.","public boolean isMetaphoneEqual(final String str1, final String str2) {\n    return metaphone(str1).equals(metaphone(str2));\n}","boolean isMetaphoneEqual(java.lang.String,java.lang.String)","digraph cfg_isMetaphoneEqual {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: java.lang.String metaphone(java.lang.String)>(str2)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: java.lang.String metaphone(java.lang.String)>(str1)""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack3)""];\n	""4"" [label=""return $stack5""];\n	""5"" [label=""str1 := @parameter0: java.lang.String""];\n	""6"" [label=""str2 := @parameter1: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.Metaphone.isNextChar(StringBuilder,int,char)",Method,No Comment,"private boolean isNextChar(final StringBuilder string, final int index, final char c) {\n    boolean matches = false;\n    if (index >= 0 && index < string.length() - 1) {\n        matches = string.charAt(index + 1) == c;\n    }\n    return matches;\n}","boolean isNextChar(java.lang.StringBuilder,int,char)","digraph cfg_isNextChar {\n	""1"" [label=""$stack5 = virtualinvoke string.<java.lang.StringBuilder: int length()>()""];\n	""2"" [label=""$stack6 = $stack5 - 1""];\n	""3"" [label=""$stack7 = index + 1""];\n	""4"" [label=""$stack8 = virtualinvoke string.<java.lang.StringBuilder: char charAt(int)>($stack7)""];\n	""5"" [label=""c := @parameter2: char""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack8 != c""];\n	""8"" [label=""if index < 0""];\n	""9"" [label=""if index >= $stack6""];\n	""10"" [label=""index := @parameter1: int""];\n	""11"" [label=""matches = 0""];\n	""12"" [label=""matches = 0""];\n	""13"" [label=""matches = 1""];\n	""14"" [label=""return matches""];\n	""15"" [label=""string := @parameter0: java.lang.StringBuilder""];\n	""16"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""6""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_goto""];\n	""7"" -> ""12""[label=""cfg_true""];\n	""7"" -> ""13""[label=""cfg_false""];\n	""8"" -> ""1""[label=""cfg_false""];\n	""8"" -> ""14""[label=""cfg_true""];\n	""9"" -> ""14""[label=""cfg_true""];\n	""9"" -> ""3""[label=""cfg_false""];\n}\n",private 
"org.apache.commons.codec.language.Metaphone.isPreviousChar(StringBuilder,int,char)",Method,No Comment,"private boolean isPreviousChar(final StringBuilder string, final int index, final char c) {\n    boolean matches = false;\n    if (index > 0 && index < string.length()) {\n        matches = string.charAt(index - 1) == c;\n    }\n    return matches;\n}","boolean isPreviousChar(java.lang.StringBuilder,int,char)","digraph cfg_isPreviousChar {\n	""1"" [label=""$stack5 = virtualinvoke string.<java.lang.StringBuilder: int length()>()""];\n	""2"" [label=""$stack6 = index - 1""];\n	""3"" [label=""$stack7 = virtualinvoke string.<java.lang.StringBuilder: char charAt(int)>($stack6)""];\n	""4"" [label=""c := @parameter2: char""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack7 != c""];\n	""7"" [label=""if index <= 0""];\n	""8"" [label=""if index >= $stack5""];\n	""9"" [label=""index := @parameter1: int""];\n	""10"" [label=""matches = 0""];\n	""11"" [label=""matches = 0""];\n	""12"" [label=""matches = 1""];\n	""13"" [label=""return matches""];\n	""14"" [label=""string := @parameter0: java.lang.StringBuilder""];\n	""15"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""14"" -> ""9""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_goto""];\n	""6"" -> ""11""[label=""cfg_true""];\n	""6"" -> ""12""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_false""];\n	""7"" -> ""13""[label=""cfg_true""];\n	""8"" -> ""13""[label=""cfg_true""];\n	""8"" -> ""2""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.Metaphone.isVowel(StringBuilder,int)",Method,No Comment,"private boolean isVowel(final StringBuilder string, final int index) {\n    return VOWELS.indexOf(string.charAt(index)) >= 0;\n}","boolean isVowel(java.lang.StringBuilder,int)","digraph cfg_isVowel {\n	""1"" [label=""$stack3 = virtualinvoke string.<java.lang.StringBuilder: char charAt(int)>(index)""];\n	""2"" [label=""$stack4 = \""AEIOU\""""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: int indexOf(int)>($stack3)""];\n	""4"" [label=""$stack6 = 0""];\n	""5"" [label=""$stack6 = 1""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack5 < 0""];\n	""8"" [label=""index := @parameter1: int""];\n	""9"" [label=""return $stack6""];\n	""10"" [label=""string := @parameter0: java.lang.StringBuilder""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_goto""];\n	""7"" -> ""4""[label=""cfg_true""];\n	""7"" -> ""5""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.Metaphone.metaphone(String),Method,"* Find the metaphone value of a String. This is similar to the\n     * soundex algorithm, but better at finding similar sounding words.\n     * All input is converted to upper case.\n     * Limitations: Input format is expected to be a single ASCII word\n     * with only characters in the A - Z range, no punctuation or numbers.\n     *\n     * @param txt String to find the metaphone code for\n     * @return A metaphone code corresponding to the String supplied","public String metaphone(final String txt) {\n    boolean hard = false;\n    final int txtLength;\n    if (txt == null || (txtLength = txt.length()) == 0) {\n        return """";\n    }\n    // single character is itself\n    if (txtLength == 1) {\n        return txt.toUpperCase(java.util.Locale.ENGLISH);\n    }\n    final char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    final StringBuilder local = new StringBuilder(40);\n    // output\n    final StringBuilder code = new StringBuilder(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n            /* looking for KN, etc */\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n            /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n            /* looking for WR or WH */\n            if (inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n            /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    final int wdsz = local.length();\n    int n = 0;\n    while (code.length() < getMaxCodeLen() && n < wdsz) {\n        // max code size of 4 works well\n        final char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if (symb != 'C' && isPreviousChar(local, n, symb)) {\n            // empty\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                    /* discard if SCI, SCE or SCY */\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n                        break;\n                    }\n                    if (regionMatch(local, n, ""CIA"")) {\n                        // ""CIA"" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (!isNextChar(local, n, 'H') || n == 0 && wdsz >= 3 && isVowel(local, 2)) {\n                        // CH consonant -> K consonant\n                        code.append('K');\n                    } else {\n                        // CHvowel -> X\n                        code.append('X');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if (n > 0 && (regionMatch(local, n, ""GN"") || regionMatch(local, n, ""GNED""))) {\n                        // silent G\n                        break;\n                    }\n                    // NOTE: Given that duplicated chars are removed, I don't see how this can ever be true\n                    hard = isPreviousChar(local, n, 'G');\n                    if (!isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, ""SH"") || regionMatch(local, n, ""SIO"") || regionMatch(local, n, ""SIA"")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, ""TIA"") || regionMatch(local, n, ""TIO"")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, ""TCH"")) {\n                        // Silent if in ""TCH""\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, ""TH"")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n                default:\n                    // do nothing\n                    break;\n            }\n            // end switch\n        }\n        // end else from symb != 'C'\n        n++;\n        if (code.length() > getMaxCodeLen()) {\n            code.setLength(getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}",java.lang.String metaphone(java.lang.String),"digraph cfg_metaphone {\n	""1"" [label=""$stack10 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""2"" [label=""$stack11 = virtualinvoke txt.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack10)""];\n	""3"" [label=""$stack12 = new java.lang.StringBuilder""];\n	""4"" [label=""$stack13 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack14 = inwd[0]""];\n	""6"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: int getMaxCodeLen()>()""];\n	""7"" [label=""$stack16 = virtualinvoke code.<java.lang.StringBuilder: int length()>()""];\n	""8"" [label=""$stack17 = virtualinvoke code.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""9"" [label=""$stack18 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: int getMaxCodeLen()>()""];\n	""10"" [label=""$stack19 = virtualinvoke code.<java.lang.StringBuilder: int length()>()""];\n	""11"" [label=""$stack20 = virtualinvoke this.<org.apache.commons.codec.language.Metaphone: int getMaxCodeLen()>()""];\n	""12"" [label=""$stack21 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""13"" [label=""$stack22 = n + 1""];\n	""14"" [label=""$stack23 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isVowel(java.lang.StringBuilder,int)>(local, $stack22)""];\n	""15"" [label=""$stack24 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""TIA\"")""];\n	""16"" [label=""$stack25 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""TIO\"")""];\n	""17"" [label=""$stack26 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""TCH\"")""];\n	""18"" [label=""$stack27 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""TH\"")""];\n	""19"" [label=""$stack28 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""SH\"")""];\n	""20"" [label=""$stack29 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""SIO\"")""];\n	""21"" [label=""$stack30 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""SIA\"")""];\n	""22"" [label=""$stack31 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 72)""];\n	""23"" [label=""$stack32 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, 67)""];\n	""24"" [label=""$stack33 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""25"" [label=""$stack34 = n + 1""];\n	""26"" [label=""$stack35 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isVowel(java.lang.StringBuilder,int)>(local, $stack34)""];\n	""27"" [label=""$stack36 = n - 1""];\n	""28"" [label=""$stack37 = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>($stack36)""];\n	""29"" [label=""$stack38 = \""CSPTG\""""];\n	""30"" [label=""$stack39 = virtualinvoke $stack38.<java.lang.String: int indexOf(int)>($stack37)""];\n	""31"" [label=""$stack40 = n + 1""];\n	""32"" [label=""$stack41 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, $stack40)""];\n	""33"" [label=""$stack42 = n + 1""];\n	""34"" [label=""$stack43 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, $stack42)""];\n	""35"" [label=""$stack44 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""36"" [label=""$stack45 = n + 1""];\n	""37"" [label=""$stack46 = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>($stack45)""];\n	""38"" [label=""$stack47 = \""EIY\""""];\n	""39"" [label=""$stack48 = virtualinvoke $stack47.<java.lang.String: int indexOf(int)>($stack46)""];\n	""40"" [label=""$stack49 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""GN\"")""];\n	""41"" [label=""$stack50 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""GNED\"")""];\n	""42"" [label=""$stack51 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 72)""];\n	""43"" [label=""$stack52 = n + 2""];\n	""44"" [label=""$stack53 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isVowel(java.lang.StringBuilder,int)>(local, $stack52)""];\n	""45"" [label=""$stack54 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 72)""];\n	""46"" [label=""$stack55 = n + 1""];\n	""47"" [label=""$stack56 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, $stack55)""];\n	""48"" [label=""$stack57 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 71)""];\n	""49"" [label=""$stack58 = n + 2""];\n	""50"" [label=""$stack59 = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>($stack58)""];\n	""51"" [label=""$stack60 = \""EIY\""""];\n	""52"" [label=""$stack61 = virtualinvoke $stack60.<java.lang.String: int indexOf(int)>($stack59)""];\n	""53"" [label=""$stack62 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, 83)""];\n	""54"" [label=""$stack63 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)>(local, n, \""CIA\"")""];\n	""55"" [label=""$stack64 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""56"" [label=""$stack65 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, 83)""];\n	""57"" [label=""$stack66 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 72)""];\n	""58"" [label=""$stack67 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isVowel(java.lang.StringBuilder,int)>(local, 2)""];\n	""59"" [label=""$stack68 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isNextChar(java.lang.StringBuilder,int,char)>(local, n, 72)""];\n	""60"" [label=""$stack69 = n + 1""];\n	""61"" [label=""$stack70 = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>($stack69)""];\n	""62"" [label=""$stack71 = \""EIY\""""];\n	""63"" [label=""$stack72 = virtualinvoke $stack71.<java.lang.String: int indexOf(int)>($stack70)""];\n	""64"" [label=""$stack73 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""65"" [label=""$stack74 = n + 1""];\n	""66"" [label=""$stack75 = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>($stack74)""];\n	""67"" [label=""$stack76 = \""EIY\""""];\n	""68"" [label=""$stack77 = virtualinvoke $stack76.<java.lang.String: int indexOf(int)>($stack75)""];\n	""69"" [label=""$stack78 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, 77)""];\n	""70"" [label=""$stack79 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isLastChar(int,int)>(wdsz, n)""];\n	""71"" [label=""$stack80 = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, symb)""];\n	""72"" [label=""$stack81 = inwd[1]""];\n	""73"" [label=""$stack82 = inwd[1]""];\n	""74"" [label=""$stack83 = lengthof inwd""];\n	""75"" [label=""$stack84 = $stack83 - 1""];\n	""76"" [label=""$stack85 = lengthof inwd""];\n	""77"" [label=""$stack86 = $stack85 - 1""];\n	""78"" [label=""$stack87 = inwd[1]""];\n	""79"" [label=""$stack88 = lengthof inwd""];\n	""80"" [label=""$stack89 = $stack88 - 1""];\n	""81"" [label=""$stack90 = inwd[1]""];\n	""82"" [label=""$stack91 = lengthof inwd""];\n	""83"" [label=""$stack92 = $stack91 - 1""];\n	""84"" [label=""$stack93 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""85"" [label=""$stack94 = virtualinvoke txt.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack93)""];\n	""86"" [label=""code = $stack13""];\n	""87"" [label=""goto""];\n	""88"" [label=""goto""];\n	""89"" [label=""goto""];\n	""90"" [label=""goto""];\n	""91"" [label=""goto""];\n	""92"" [label=""goto""];\n	""93"" [label=""goto""];\n	""94"" [label=""goto""];\n	""95"" [label=""goto""];\n	""96"" [label=""goto""];\n	""97"" [label=""goto""];\n	""98"" [label=""goto""];\n	""99"" [label=""goto""];\n	""100"" [label=""goto""];\n	""101"" [label=""goto""];\n	""102"" [label=""goto""];\n	""103"" [label=""goto""];\n	""104"" [label=""goto""];\n	""105"" [label=""goto""];\n	""106"" [label=""goto""];\n	""107"" [label=""goto""];\n	""108"" [label=""goto""];\n	""109"" [label=""goto""];\n	""110"" [label=""goto""];\n	""111"" [label=""goto""];\n	""112"" [label=""goto""];\n	""113"" [label=""goto""];\n	""114"" [label=""goto""];\n	""115"" [label=""goto""];\n	""116"" [label=""goto""];\n	""117"" [label=""goto""];\n	""118"" [label=""goto""];\n	""119"" [label=""goto""];\n	""120"" [label=""goto""];\n	""121"" [label=""goto""];\n	""122"" [label=""goto""];\n	""123"" [label=""goto""];\n	""124"" [label=""goto""];\n	""125"" [label=""goto""];\n	""126"" [label=""goto""];\n	""127"" [label=""goto""];\n	""128"" [label=""goto""];\n	""129"" [label=""goto""];\n	""130"" [label=""goto""];\n	""131"" [label=""goto""];\n	""132"" [label=""hard = 0""];\n	""133"" [label=""hard = specialinvoke this.<org.apache.commons.codec.language.Metaphone: boolean isPreviousChar(java.lang.StringBuilder,int,char)>(local, n, 71)""];\n	""134"" [label=""if $stack16 >= $stack15""];\n	""135"" [label=""if $stack19 <= $stack18""];\n	""136"" [label=""if $stack21 != 0""];\n	""137"" [label=""if $stack23 == 0""];\n	""138"" [label=""if $stack24 != 0""];\n	""139"" [label=""if $stack25 == 0""];\n	""140"" [label=""if $stack26 == 0""];\n	""141"" [label=""if $stack27 == 0""];\n	""142"" [label=""if $stack28 != 0""];\n	""143"" [label=""if $stack29 != 0""];\n	""144"" [label=""if $stack30 == 0""];\n	""145"" [label=""if $stack31 == 0""];\n	""146"" [label=""if $stack32 != 0""];\n	""147"" [label=""if $stack33 == 0""];\n	""148"" [label=""if $stack35 == 0""];\n	""149"" [label=""if $stack39 < 0""];\n	""150"" [label=""if $stack41 == 0""];\n	""151"" [label=""if $stack43 != 0""];\n	""152"" [label=""if $stack44 != 0""];\n	""153"" [label=""if $stack48 < 0""];\n	""154"" [label=""if $stack49 != 0""];\n	""155"" [label=""if $stack50 == 0""];\n	""156"" [label=""if $stack51 == 0""];\n	""157"" [label=""if $stack53 != 0""];\n	""158"" [label=""if $stack54 == 0""];\n	""159"" [label=""if $stack56 != 0""];\n	""160"" [label=""if $stack57 == 0""];\n	""161"" [label=""if $stack61 < 0""];\n	""162"" [label=""if $stack62 == 0""];\n	""163"" [label=""if $stack63 == 0""];\n	""164"" [label=""if $stack64 != 0""];\n	""165"" [label=""if $stack65 == 0""];\n	""166"" [label=""if $stack66 == 0""];\n	""167"" [label=""if $stack67 == 0""];\n	""168"" [label=""if $stack68 == 0""];\n	""169"" [label=""if $stack72 < 0""];\n	""170"" [label=""if $stack73 != 0""];\n	""171"" [label=""if $stack77 < 0""];\n	""172"" [label=""if $stack78 == 0""];\n	""173"" [label=""if $stack79 == 0""];\n	""174"" [label=""if $stack80 == 0""];\n	""175"" [label=""if $stack81 != 82""];\n	""176"" [label=""if $stack82 != 72""];\n	""177"" [label=""if $stack87 != 78""];\n	""178"" [label=""if $stack90 != 69""];\n	""179"" [label=""if hard != 0""];\n	""180"" [label=""if n != 0""];\n	""181"" [label=""if n != 0""];\n	""182"" [label=""if n <= 0""];\n	""183"" [label=""if n <= 0""];\n	""184"" [label=""if n <= 0""];\n	""185"" [label=""if n >= wdsz""];\n	""186"" [label=""if symb == 67""];\n	""187"" [label=""if txt == null""];\n	""188"" [label=""if txtLength != 0""];\n	""189"" [label=""if txtLength != 1""];\n	""190"" [label=""if wdsz < 3""];\n	""191"" [label=""inwd = virtualinvoke $stack11.<java.lang.String: char[] toCharArray()>()""];\n	""192"" [label=""inwd[0] = 83""];\n	""193"" [label=""local = $stack12""];\n	""194"" [label=""n = 0""];\n	""195"" [label=""n = n + 1""];\n	""196"" [label=""n = n + 2""];\n	""197"" [label=""return \""\""""];\n	""198"" [label=""return $stack17""];\n	""199"" [label=""return $stack94""];\n	""200"" [label=""specialinvoke $stack12.<java.lang.StringBuilder: void <init>(int)>(40)""];\n	""201"" [label=""specialinvoke $stack13.<java.lang.StringBuilder: void <init>(int)>(10)""];\n	""202"" [label=""switch($stack14) \{     case 65:     case 71:     case 75:     case 80:     case 87:     case 88:     default:  \}""];\n	""203"" [label=""switch(symb) \{     case 65:     case 66:     case 67:     case 68:     case 69:     case 70:     case 71:     case 72:     case 73:     case 74:     case 75:     case 76:     case 77:     case 78:     case 79:     case 80:     case 81:     case 82:     case 83:     case 84:     case 85:     case 86:     case 87:     case 88:     case 89:     case 90:     default:  \}""];\n	""204"" [label=""symb = virtualinvoke local.<java.lang.StringBuilder: char charAt(int)>(n)""];\n	""205"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""206"" [label=""txt := @parameter0: java.lang.String""];\n	""207"" [label=""txtLength = virtualinvoke txt.<java.lang.String: int length()>()""];\n	""208"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)""];\n	""209"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(70)""];\n	""210"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(70)""];\n	""211"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(72)""];\n	""212"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(74)""];\n	""213"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(74)""];\n	""214"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(75)""];\n	""215"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(75)""];\n	""216"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(75)""];\n	""217"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(75)""];\n	""218"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(75)""];\n	""219"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83)""];\n	""220"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83)""];\n	""221"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83)""];\n	""222"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83)""];\n	""223"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84)""];\n	""224"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84)""];\n	""225"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(88)""];\n	""226"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(88)""];\n	""227"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(88)""];\n	""228"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(88)""];\n	""229"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""230"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""231"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""232"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""233"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""234"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""235"" [label=""virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(symb)""];\n	""236"" [label=""virtualinvoke code.<java.lang.StringBuilder: void setLength(int)>($stack20)""];\n	""237"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(inwd)""];\n	""238"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(inwd)""];\n	""239"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(inwd)""];\n	""240"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(inwd)""];\n	""241"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(inwd)""];\n	""242"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(inwd, 1, $stack84)""];\n	""243"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(inwd, 1, $stack86)""];\n	""244"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(inwd, 1, $stack89)""];\n	""245"" [label=""virtualinvoke local.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(inwd, 1, $stack92)""];\n	""246"" [label=""virtualinvoke local.<java.lang.StringBuilder: void setCharAt(int,char)>(0, 87)""];\n	""247"" [label=""wdsz = virtualinvoke local.<java.lang.StringBuilder: int length()>()""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""100"" -> ""195""[label=""cfg_goto""];\n	""101"" -> ""195""[label=""cfg_goto""];\n	""102"" -> ""195""[label=""cfg_goto""];\n	""103"" -> ""195""[label=""cfg_goto""];\n	""104"" -> ""195""[label=""cfg_goto""];\n	""105"" -> ""195""[label=""cfg_goto""];\n	""106"" -> ""195""[label=""cfg_goto""];\n	""107"" -> ""195""[label=""cfg_goto""];\n	""108"" -> ""195""[label=""cfg_goto""];\n	""109"" -> ""195""[label=""cfg_goto""];\n	""11"" -> ""236""[label=""cfg_next""];\n	""110"" -> ""195""[label=""cfg_goto""];\n	""111"" -> ""195""[label=""cfg_goto""];\n	""112"" -> ""195""[label=""cfg_goto""];\n	""113"" -> ""195""[label=""cfg_goto""];\n	""114"" -> ""195""[label=""cfg_goto""];\n	""115"" -> ""195""[label=""cfg_goto""];\n	""116"" -> ""195""[label=""cfg_goto""];\n	""117"" -> ""195""[label=""cfg_goto""];\n	""118"" -> ""195""[label=""cfg_goto""];\n	""119"" -> ""195""[label=""cfg_goto""];\n	""12"" -> ""136""[label=""cfg_next""];\n	""120"" -> ""195""[label=""cfg_goto""];\n	""121"" -> ""195""[label=""cfg_goto""];\n	""122"" -> ""195""[label=""cfg_goto""];\n	""123"" -> ""195""[label=""cfg_goto""];\n	""124"" -> ""195""[label=""cfg_goto""];\n	""125"" -> ""195""[label=""cfg_goto""];\n	""126"" -> ""195""[label=""cfg_goto""];\n	""127"" -> ""195""[label=""cfg_goto""];\n	""128"" -> ""195""[label=""cfg_goto""];\n	""129"" -> ""195""[label=""cfg_goto""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""130"" -> ""195""[label=""cfg_goto""];\n	""131"" -> ""7""[label=""cfg_goto""];\n	""132"" -> ""187""[label=""cfg_next""];\n	""133"" -> ""35""[label=""cfg_next""];\n	""134"" -> ""185""[label=""cfg_false""];\n	""134"" -> ""8""[label=""cfg_true""];\n	""135"" -> ""11""[label=""cfg_false""];\n	""135"" -> ""131""[label=""cfg_true""];\n	""136"" -> ""13""[label=""cfg_false""];\n	""136"" -> ""195""[label=""cfg_true""];\n	""137"" -> ""195""[label=""cfg_true""];\n	""137"" -> ""235""[label=""cfg_false""];\n	""138"" -> ""16""[label=""cfg_false""];\n	""138"" -> ""228""[label=""cfg_true""];\n	""139"" -> ""17""[label=""cfg_true""];\n	""139"" -> ""228""[label=""cfg_false""];\n	""14"" -> ""137""[label=""cfg_next""];\n	""140"" -> ""123""[label=""cfg_false""];\n	""140"" -> ""18""[label=""cfg_true""];\n	""141"" -> ""208""[label=""cfg_false""];\n	""141"" -> ""224""[label=""cfg_true""];\n	""142"" -> ""20""[label=""cfg_false""];\n	""142"" -> ""227""[label=""cfg_true""];\n	""143"" -> ""21""[label=""cfg_false""];\n	""143"" -> ""227""[label=""cfg_true""];\n	""144"" -> ""221""[label=""cfg_true""];\n	""144"" -> ""227""[label=""cfg_false""];\n	""145"" -> ""210""[label=""cfg_false""];\n	""145"" -> ""233""[label=""cfg_true""];\n	""146"" -> ""195""[label=""cfg_true""];\n	""146"" -> ""232""[label=""cfg_false""];\n	""147"" -> ""111""[label=""cfg_false""];\n	""147"" -> ""184""[label=""cfg_true""];\n	""148"" -> ""195""[label=""cfg_true""];\n	""148"" -> ""211""[label=""cfg_false""];\n	""149"" -> ""112""[label=""cfg_false""];\n	""149"" -> ""25""[label=""cfg_true""];\n	""15"" -> ""138""[label=""cfg_next""];\n	""150"" -> ""33""[label=""cfg_true""];\n	""150"" -> ""45""[label=""cfg_false""];\n	""151"" -> ""183""[label=""cfg_true""];\n	""151"" -> ""42""[label=""cfg_false""];\n	""152"" -> ""218""[label=""cfg_true""];\n	""152"" -> ""38""[label=""cfg_false""];\n	""153"" -> ""179""[label=""cfg_false""];\n	""153"" -> ""218""[label=""cfg_true""];\n	""154"" -> ""195""[label=""cfg_true""];\n	""154"" -> ""41""[label=""cfg_false""];\n	""155"" -> ""108""[label=""cfg_false""];\n	""155"" -> ""133""[label=""cfg_true""];\n	""156"" -> ""183""[label=""cfg_true""];\n	""156"" -> ""43""[label=""cfg_false""];\n	""157"" -> ""107""[label=""cfg_false""];\n	""157"" -> ""183""[label=""cfg_true""];\n	""158"" -> ""106""[label=""cfg_false""];\n	""158"" -> ""33""[label=""cfg_true""];\n	""159"" -> ""223""[label=""cfg_true""];\n	""159"" -> ""48""[label=""cfg_false""];\n	""16"" -> ""139""[label=""cfg_next""];\n	""160"" -> ""223""[label=""cfg_true""];\n	""160"" -> ""51""[label=""cfg_false""];\n	""161"" -> ""212""[label=""cfg_false""];\n	""161"" -> ""223""[label=""cfg_true""];\n	""162"" -> ""54""[label=""cfg_true""];\n	""162"" -> ""64""[label=""cfg_false""];\n	""163"" -> ""225""[label=""cfg_false""];\n	""163"" -> ""55""[label=""cfg_true""];\n	""164"" -> ""56""[label=""cfg_true""];\n	""164"" -> ""62""[label=""cfg_false""];\n	""165"" -> ""57""[label=""cfg_true""];\n	""165"" -> ""59""[label=""cfg_false""];\n	""166"" -> ""181""[label=""cfg_false""];\n	""166"" -> ""217""[label=""cfg_true""];\n	""167"" -> ""217""[label=""cfg_false""];\n	""167"" -> ""226""[label=""cfg_true""];\n	""168"" -> ""216""[label=""cfg_false""];\n	""168"" -> ""57""[label=""cfg_true""];\n	""169"" -> ""220""[label=""cfg_false""];\n	""169"" -> ""56""[label=""cfg_true""];\n	""17"" -> ""140""[label=""cfg_next""];\n	""170"" -> ""54""[label=""cfg_true""];\n	""170"" -> ""67""[label=""cfg_false""];\n	""171"" -> ""54""[label=""cfg_true""];\n	""171"" -> ""98""[label=""cfg_false""];\n	""172"" -> ""230""[label=""cfg_true""];\n	""172"" -> ""70""[label=""cfg_false""];\n	""173"" -> ""230""[label=""cfg_true""];\n	""173"" -> ""96""[label=""cfg_false""];\n	""174"" -> ""203""[label=""cfg_true""];\n	""174"" -> ""95""[label=""cfg_false""];\n	""175"" -> ""73""[label=""cfg_true""];\n	""175"" -> ""76""[label=""cfg_false""];\n	""176"" -> ""240""[label=""cfg_true""];\n	""176"" -> ""74""[label=""cfg_false""];\n	""177"" -> ""239""[label=""cfg_true""];\n	""177"" -> ""79""[label=""cfg_false""];\n	""178"" -> ""238""[label=""cfg_true""];\n	""178"" -> ""82""[label=""cfg_false""];\n	""179"" -> ""213""[label=""cfg_false""];\n	""179"" -> ""218""[label=""cfg_true""];\n	""18"" -> ""141""[label=""cfg_next""];\n	""180"" -> ""195""[label=""cfg_true""];\n	""180"" -> ""234""[label=""cfg_false""];\n	""181"" -> ""190""[label=""cfg_false""];\n	""181"" -> ""226""[label=""cfg_true""];\n	""182"" -> ""23""[label=""cfg_false""];\n	""182"" -> ""231""[label=""cfg_true""];\n	""183"" -> ""133""[label=""cfg_true""];\n	""183"" -> ""40""[label=""cfg_false""];\n	""184"" -> ""25""[label=""cfg_true""];\n	""184"" -> ""29""[label=""cfg_false""];\n	""185"" -> ""204""[label=""cfg_false""];\n	""185"" -> ""8""[label=""cfg_true""];\n	""186"" -> ""203""[label=""cfg_true""];\n	""186"" -> ""71""[label=""cfg_false""];\n	""187"" -> ""197""[label=""cfg_true""];\n	""187"" -> ""207""[label=""cfg_false""];\n	""188"" -> ""189""[label=""cfg_true""];\n	""188"" -> ""197""[label=""cfg_false""];\n	""189"" -> ""1""[label=""cfg_true""];\n	""189"" -> ""84""[label=""cfg_false""];\n	""19"" -> ""142""[label=""cfg_next""];\n	""190"" -> ""226""[label=""cfg_true""];\n	""190"" -> ""58""[label=""cfg_false""];\n	""191"" -> ""3""[label=""cfg_next""];\n	""192"" -> ""241""[label=""cfg_next""];\n	""193"" -> ""4""[label=""cfg_next""];\n	""194"" -> ""7""[label=""cfg_next""];\n	""195"" -> ""10""[label=""cfg_next""];\n	""196"" -> ""104""[label=""cfg_next""];\n	""2"" -> ""191""[label=""cfg_next""];\n	""20"" -> ""143""[label=""cfg_next""];\n	""200"" -> ""193""[label=""cfg_next""];\n	""201"" -> ""86""[label=""cfg_next""];\n	""202"" -> ""192""[label=""cfg_switch""];\n	""202"" -> ""237""[label=""cfg_switch""];\n	""202"" -> ""72""[label=""cfg_switch""];\n	""202"" -> ""78""[label=""cfg_switch""];\n	""202"" -> ""81""[label=""cfg_switch""];\n	""203"" -> ""12""[label=""cfg_switch""];\n	""203"" -> ""15""[label=""cfg_switch""];\n	""203"" -> ""180""[label=""cfg_switch""];\n	""203"" -> ""182""[label=""cfg_switch""];\n	""203"" -> ""19""[label=""cfg_switch""];\n	""203"" -> ""195""[label=""cfg_switch""];\n	""203"" -> ""209""[label=""cfg_switch""];\n	""203"" -> ""214""[label=""cfg_switch""];\n	""203"" -> ""215""[label=""cfg_switch""];\n	""203"" -> ""219""[label=""cfg_switch""];\n	""203"" -> ""22""[label=""cfg_switch""];\n	""203"" -> ""229""[label=""cfg_switch""];\n	""203"" -> ""24""[label=""cfg_switch""];\n	""203"" -> ""31""[label=""cfg_switch""];\n	""203"" -> ""46""[label=""cfg_switch""];\n	""203"" -> ""53""[label=""cfg_switch""];\n	""203"" -> ""69""[label=""cfg_switch""];\n	""204"" -> ""186""[label=""cfg_next""];\n	""205"" -> ""206""[label=""cfg_next""];\n	""206"" -> ""132""[label=""cfg_next""];\n	""207"" -> ""188""[label=""cfg_next""];\n	""208"" -> ""124""[label=""cfg_next""];\n	""209"" -> ""127""[label=""cfg_next""];\n	""21"" -> ""144""[label=""cfg_next""];\n	""210"" -> ""116""[label=""cfg_next""];\n	""211"" -> ""113""[label=""cfg_next""];\n	""212"" -> ""196""[label=""cfg_next""];\n	""213"" -> ""109""[label=""cfg_next""];\n	""214"" -> ""118""[label=""cfg_next""];\n	""215"" -> ""222""[label=""cfg_next""];\n	""216"" -> ""101""[label=""cfg_next""];\n	""217"" -> ""102""[label=""cfg_next""];\n	""218"" -> ""110""[label=""cfg_next""];\n	""219"" -> ""130""[label=""cfg_next""];\n	""22"" -> ""145""[label=""cfg_next""];\n	""220"" -> ""100""[label=""cfg_next""];\n	""221"" -> ""121""[label=""cfg_next""];\n	""222"" -> ""128""[label=""cfg_next""];\n	""223"" -> ""105""[label=""cfg_next""];\n	""224"" -> ""125""[label=""cfg_next""];\n	""225"" -> ""99""[label=""cfg_next""];\n	""226"" -> ""103""[label=""cfg_next""];\n	""227"" -> ""120""[label=""cfg_next""];\n	""228"" -> ""122""[label=""cfg_next""];\n	""229"" -> ""119""[label=""cfg_next""];\n	""23"" -> ""146""[label=""cfg_next""];\n	""230"" -> ""97""[label=""cfg_next""];\n	""231"" -> ""115""[label=""cfg_next""];\n	""232"" -> ""114""[label=""cfg_next""];\n	""233"" -> ""117""[label=""cfg_next""];\n	""234"" -> ""126""[label=""cfg_next""];\n	""235"" -> ""129""[label=""cfg_next""];\n	""236"" -> ""131""[label=""cfg_next""];\n	""237"" -> ""247""[label=""cfg_next""];\n	""238"" -> ""88""[label=""cfg_next""];\n	""239"" -> ""90""[label=""cfg_next""];\n	""24"" -> ""147""[label=""cfg_next""];\n	""240"" -> ""93""[label=""cfg_next""];\n	""241"" -> ""94""[label=""cfg_next""];\n	""242"" -> ""246""[label=""cfg_next""];\n	""243"" -> ""91""[label=""cfg_next""];\n	""244"" -> ""89""[label=""cfg_next""];\n	""245"" -> ""87""[label=""cfg_next""];\n	""246"" -> ""92""[label=""cfg_next""];\n	""247"" -> ""194""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""148""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""27""[label=""cfg_next""];\n	""3"" -> ""200""[label=""cfg_next""];\n	""30"" -> ""149""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""150""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""151""[label=""cfg_next""];\n	""35"" -> ""152""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""39""[label=""cfg_next""];\n	""38"" -> ""36""[label=""cfg_next""];\n	""39"" -> ""153""[label=""cfg_next""];\n	""4"" -> ""201""[label=""cfg_next""];\n	""40"" -> ""154""[label=""cfg_next""];\n	""41"" -> ""155""[label=""cfg_next""];\n	""42"" -> ""156""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""157""[label=""cfg_next""];\n	""45"" -> ""158""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""159""[label=""cfg_next""];\n	""48"" -> ""160""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""202""[label=""cfg_next""];\n	""50"" -> ""52""[label=""cfg_next""];\n	""51"" -> ""49""[label=""cfg_next""];\n	""52"" -> ""161""[label=""cfg_next""];\n	""53"" -> ""162""[label=""cfg_next""];\n	""54"" -> ""163""[label=""cfg_next""];\n	""55"" -> ""164""[label=""cfg_next""];\n	""56"" -> ""165""[label=""cfg_next""];\n	""57"" -> ""166""[label=""cfg_next""];\n	""58"" -> ""167""[label=""cfg_next""];\n	""59"" -> ""168""[label=""cfg_next""];\n	""6"" -> ""134""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""63""[label=""cfg_next""];\n	""62"" -> ""60""[label=""cfg_next""];\n	""63"" -> ""169""[label=""cfg_next""];\n	""64"" -> ""170""[label=""cfg_next""];\n	""65"" -> ""66""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""65""[label=""cfg_next""];\n	""68"" -> ""171""[label=""cfg_next""];\n	""69"" -> ""172""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""70"" -> ""173""[label=""cfg_next""];\n	""71"" -> ""174""[label=""cfg_next""];\n	""72"" -> ""175""[label=""cfg_next""];\n	""73"" -> ""176""[label=""cfg_next""];\n	""74"" -> ""75""[label=""cfg_next""];\n	""75"" -> ""242""[label=""cfg_next""];\n	""76"" -> ""77""[label=""cfg_next""];\n	""77"" -> ""243""[label=""cfg_next""];\n	""78"" -> ""177""[label=""cfg_next""];\n	""79"" -> ""80""[label=""cfg_next""];\n	""8"" -> ""198""[label=""cfg_next""];\n	""80"" -> ""244""[label=""cfg_next""];\n	""81"" -> ""178""[label=""cfg_next""];\n	""82"" -> ""83""[label=""cfg_next""];\n	""83"" -> ""245""[label=""cfg_next""];\n	""84"" -> ""85""[label=""cfg_next""];\n	""85"" -> ""199""[label=""cfg_next""];\n	""86"" -> ""5""[label=""cfg_next""];\n	""87"" -> ""247""[label=""cfg_goto""];\n	""88"" -> ""247""[label=""cfg_goto""];\n	""89"" -> ""247""[label=""cfg_goto""];\n	""9"" -> ""135""[label=""cfg_next""];\n	""90"" -> ""247""[label=""cfg_goto""];\n	""91"" -> ""247""[label=""cfg_goto""];\n	""92"" -> ""247""[label=""cfg_goto""];\n	""93"" -> ""247""[label=""cfg_goto""];\n	""94"" -> ""247""[label=""cfg_goto""];\n	""95"" -> ""195""[label=""cfg_goto""];\n	""96"" -> ""195""[label=""cfg_goto""];\n	""97"" -> ""195""[label=""cfg_goto""];\n	""98"" -> ""195""[label=""cfg_goto""];\n	""99"" -> ""195""[label=""cfg_goto""];\n}\n",public 
"org.apache.commons.codec.language.Metaphone.regionMatch(StringBuilder,int,String)",Method,No Comment,"private boolean regionMatch(final StringBuilder string, final int index, final String test) {\n    boolean matches = false;\n    if (index >= 0 && index + test.length() - 1 < string.length()) {\n        final String substring = string.substring(index, index + test.length());\n        matches = substring.equals(test);\n    }\n    return matches;\n}","boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)","digraph cfg_regionMatch {\n	""1"" [label=""$stack10 = virtualinvoke test.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack11 = index + $stack10""];\n	""3"" [label=""$stack6 = virtualinvoke test.<java.lang.String: int length()>()""];\n	""4"" [label=""$stack7 = index + $stack6""];\n	""5"" [label=""$stack8 = virtualinvoke string.<java.lang.StringBuilder: int length()>()""];\n	""6"" [label=""$stack9 = $stack7 - 1""];\n	""7"" [label=""if $stack9 >= $stack8""];\n	""8"" [label=""if index < 0""];\n	""9"" [label=""index := @parameter1: int""];\n	""10"" [label=""matches = 0""];\n	""11"" [label=""matches = virtualinvoke substring.<java.lang.String: boolean equals(java.lang.Object)>(test)""];\n	""12"" [label=""return matches""];\n	""13"" [label=""string := @parameter0: java.lang.StringBuilder""];\n	""14"" [label=""substring = virtualinvoke string.<java.lang.StringBuilder: java.lang.String substring(int,int)>(index, $stack11)""];\n	""15"" [label=""test := @parameter2: java.lang.String""];\n	""16"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""13"" -> ""9""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""14""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_false""];\n	""7"" -> ""12""[label=""cfg_true""];\n	""8"" -> ""12""[label=""cfg_true""];\n	""8"" -> ""3""[label=""cfg_false""];\n	""9"" -> ""15""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.Metaphone.setMaxCodeLen(int),Method,* Sets the maxCodeLen.\n     *\n     * @param maxCodeLen The maxCodeLen to set.,public void setMaxCodeLen(final int maxCodeLen) {\n    this.maxCodeLen = maxCodeLen;\n},void setMaxCodeLen(int),"digraph cfg_setMaxCodeLen {\n	""1"" [label=""maxCodeLen := @parameter0: int""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""4"" [label=""this.<org.apache.commons.codec.language.Metaphone: int maxCodeLen> = maxCodeLen""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Metaphone.<init>(),Constructor,* Constructs a new instance.,public Metaphone() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Metaphone""];\n	""4"" [label=""this.<org.apache.commons.codec.language.Metaphone: int maxCodeLen> = 4""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[])",Method,* Tests whether {@code value} contains any of the {@code criteria} starting at index {@code start} and matching up to length {@code length}.\n     *\n     * @param value    The value to test.\n     * @param start    Where in {@code value} to start testing.\n     * @param length   How many to test.\n     * @param criteria The search criteria.\n     * @return Whether there was a match.,"protected static boolean contains(final String value, final int start, final int length, final String... criteria) {\n    boolean result = false;\n    if (start >= 0 && start + length <= value.length()) {\n        final String target = value.substring(start, start + length);\n        for (final String element : criteria) {\n            if (target.equals(element)) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}","boolean contains(java.lang.String,int,int,java.lang.String[])","digraph cfg_contains {\n	""1"" [label=""$stack10 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack11 = start + length""];\n	""3"" [label=""$stack12 = start + length""];\n	""4"" [label=""$stack13 = virtualinvoke target.<java.lang.String: boolean equals(java.lang.Object)>(element)""];\n	""5"" [label=""criteria := @parameter3: java.lang.String[]""];\n	""6"" [label=""element = l6[l8]""];\n	""7"" [label=""goto""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack11 > $stack10""];\n	""10"" [label=""if $stack13 == 0""];\n	""11"" [label=""if l8 >= l7""];\n	""12"" [label=""if start < 0""];\n	""13"" [label=""l6 = criteria""];\n	""14"" [label=""l7 = lengthof l6""];\n	""15"" [label=""l8 = 0""];\n	""16"" [label=""l8 = l8 + 1""];\n	""17"" [label=""length := @parameter2: int""];\n	""18"" [label=""result = 0""];\n	""19"" [label=""result = 1""];\n	""20"" [label=""return result""];\n	""21"" [label=""start := @parameter1: int""];\n	""22"" [label=""target = virtualinvoke value.<java.lang.String: java.lang.String substring(int,int)>(start, $stack12)""];\n	""23"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""16""[label=""cfg_true""];\n	""10"" -> ""19""[label=""cfg_false""];\n	""11"" -> ""20""[label=""cfg_true""];\n	""11"" -> ""6""[label=""cfg_false""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""12"" -> ""20""[label=""cfg_true""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""8""[label=""cfg_next""];\n	""17"" -> ""5""[label=""cfg_next""];\n	""18"" -> ""12""[label=""cfg_next""];\n	""19"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""22"" -> ""13""[label=""cfg_next""];\n	""23"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""22""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""20""[label=""cfg_goto""];\n	""8"" -> ""11""[label=""cfg_goto""];\n	""9"" -> ""20""[label=""cfg_true""];\n	""9"" -> ""3""[label=""cfg_false""];\n}\n","protected , static "
"org.apache.commons.codec.language.DoubleMetaphone.charAt(String,int)",Method,"* Gets the character at index {@code index} if available, or {@link Character#MIN_VALUE} if out of bounds.\n     *\n     * @param value The String to query.\n     * @param index A string index.\n     * @return The character at the index or {@link Character#MIN_VALUE} if out of bounds.","protected char charAt(final String value, final int index) {\n    if (index < 0 || index >= value.length()) {\n        return Character.MIN_VALUE;\n    }\n    return value.charAt(index);\n}","char charAt(java.lang.String,int)","digraph cfg_charAt {\n	""1"" [label=""$stack3 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack4 = virtualinvoke value.<java.lang.String: char charAt(int)>(index)""];\n	""3"" [label=""if index < $stack3""];\n	""4"" [label=""if index < 0""];\n	""5"" [label=""index := @parameter1: int""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""return 0""];\n	""8"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""9"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_true""];\n	""3"" -> ""7""[label=""cfg_false""];\n	""4"" -> ""1""[label=""cfg_false""];\n	""4"" -> ""7""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.language.DoubleMetaphone.cleanInput(String),Method,* Cleans the input.,private String cleanInput(String input) {\n    if (input == null) {\n        return null;\n    }\n    input = input.trim();\n    if (input.isEmpty()) {\n        return null;\n    }\n    return input.toUpperCase(java.util.Locale.ENGLISH);\n},java.lang.String cleanInput(java.lang.String),"digraph cfg_cleanInput {\n	""1"" [label=""$stack2 = virtualinvoke input.<java.lang.String: boolean isEmpty()>()""];\n	""2"" [label=""$stack3 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""3"" [label=""$stack4 = virtualinvoke input.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack3)""];\n	""4"" [label=""if $stack2 == 0""];\n	""5"" [label=""if input != null""];\n	""6"" [label=""input := @parameter0: java.lang.String""];\n	""7"" [label=""input = virtualinvoke input.<java.lang.String: java.lang.String trim()>()""];\n	""8"" [label=""return $stack4""];\n	""9"" [label=""return null""];\n	""10"" [label=""return null""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_false""];\n	""4"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_true""];\n	""5"" -> ""9""[label=""cfg_false""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.conditionC0(String,int)",Method,* Complex condition 0 for 'C'.,"private boolean conditionC0(final String value, final int index) {\n    if (contains(value, index, 4, ""CHIA"")) {\n        return true;\n    }\n    if (index <= 1) {\n        return false;\n    }\n    if (isVowel(charAt(value, index - 2))) {\n        return false;\n    }\n    if (!contains(value, index - 1, 3, ""ACH"")) {\n        return false;\n    }\n    final char c = charAt(value, index + 2);\n    return c != 'I' && c != 'E' || contains(value, index - 2, 6, ""BACHER"", ""MACHER"");\n}","boolean conditionC0(java.lang.String,int)","digraph cfg_conditionC0 {\n	""1"" [label=""$stack10 = index - 1""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 3, $stack9)""];\n	""3"" [label=""$stack12 = index + 2""];\n	""4"" [label=""$stack13 = newarray (java.lang.String)[2]""];\n	""5"" [label=""$stack13[0] = \""BACHER\""""];\n	""6"" [label=""$stack13[1] = \""MACHER\""""];\n	""7"" [label=""$stack14 = index - 2""];\n	""8"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack14, 6, $stack13)""];\n	""9"" [label=""$stack16 = 0""];\n	""10"" [label=""$stack16 = 1""];\n	""11"" [label=""$stack4 = newarray (java.lang.String)[1]""];\n	""12"" [label=""$stack4[0] = \""CHIA\""""];\n	""13"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack4)""];\n	""14"" [label=""$stack6 = index - 2""];\n	""15"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack6)""];\n	""16"" [label=""$stack8 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack7)""];\n	""17"" [label=""$stack9 = newarray (java.lang.String)[1]""];\n	""18"" [label=""$stack9[0] = \""ACH\""""];\n	""19"" [label=""c = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack12)""];\n	""20"" [label=""goto""];\n	""21"" [label=""if $stack11 != 0""];\n	""22"" [label=""if $stack15 == 0""];\n	""23"" [label=""if $stack5 == 0""];\n	""24"" [label=""if $stack8 == 0""];\n	""25"" [label=""if c != 69""];\n	""26"" [label=""if c == 73""];\n	""27"" [label=""if index > 1""];\n	""28"" [label=""index := @parameter1: int""];\n	""29"" [label=""return $stack16""];\n	""30"" [label=""return 0""];\n	""31"" [label=""return 0""];\n	""32"" [label=""return 0""];\n	""33"" [label=""return 1""];\n	""34"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""35"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""20""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""23""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""24""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""2""[label=""cfg_next""];\n	""19"" -> ""26""[label=""cfg_next""];\n	""2"" -> ""21""[label=""cfg_next""];\n	""20"" -> ""29""[label=""cfg_goto""];\n	""21"" -> ""3""[label=""cfg_true""];\n	""21"" -> ""32""[label=""cfg_false""];\n	""22"" -> ""10""[label=""cfg_false""];\n	""22"" -> ""9""[label=""cfg_true""];\n	""23"" -> ""27""[label=""cfg_true""];\n	""23"" -> ""33""[label=""cfg_false""];\n	""24"" -> ""1""[label=""cfg_true""];\n	""24"" -> ""31""[label=""cfg_false""];\n	""25"" -> ""10""[label=""cfg_true""];\n	""25"" -> ""7""[label=""cfg_false""];\n	""26"" -> ""25""[label=""cfg_false""];\n	""26"" -> ""7""[label=""cfg_true""];\n	""27"" -> ""14""[label=""cfg_true""];\n	""27"" -> ""30""[label=""cfg_false""];\n	""28"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""19""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""28""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""22""[label=""cfg_next""];\n	""9"" -> ""29""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(String,int)",Method,* Complex condition 0 for 'CH'.,"private boolean conditionCH0(final String value, final int index) {\n    if (index != 0) {\n        return false;\n    }\n    if (!contains(value, index + 1, 5, ""HARAC"", ""HARIS"") && !contains(value, index + 1, 3, ""HOR"", ""HYM"", ""HIA"", ""HEM"")) {\n        return false;\n    }\n    return !contains(value, 0, 5, ""CHORE"");\n}","boolean conditionCH0(java.lang.String,int)","digraph cfg_conditionCH0 {\n	""1"" [label=""$stack10 = index + 1""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 3, $stack9)""];\n	""3"" [label=""$stack3 = newarray (java.lang.String)[2]""];\n	""4"" [label=""$stack3[0] = \""HARAC\""""];\n	""5"" [label=""$stack3[1] = \""HARIS\""""];\n	""6"" [label=""$stack4 = index + 1""];\n	""7"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack4, 5, $stack3)""];\n	""8"" [label=""$stack6 = newarray (java.lang.String)[1]""];\n	""9"" [label=""$stack6[0] = \""CHORE\""""];\n	""10"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 5, $stack6)""];\n	""11"" [label=""$stack8 = 0""];\n	""12"" [label=""$stack8 = 1""];\n	""13"" [label=""$stack9 = newarray (java.lang.String)[4]""];\n	""14"" [label=""$stack9[0] = \""HOR\""""];\n	""15"" [label=""$stack9[1] = \""HYM\""""];\n	""16"" [label=""$stack9[2] = \""HIA\""""];\n	""17"" [label=""$stack9[3] = \""HEM\""""];\n	""18"" [label=""goto""];\n	""19"" [label=""if $stack11 != 0""];\n	""20"" [label=""if $stack5 != 0""];\n	""21"" [label=""if $stack7 != 0""];\n	""22"" [label=""if index == 0""];\n	""23"" [label=""index := @parameter1: int""];\n	""24"" [label=""return $stack8""];\n	""25"" [label=""return 0""];\n	""26"" [label=""return 0""];\n	""27"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""28"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""21""[label=""cfg_next""];\n	""11"" -> ""24""[label=""cfg_next""];\n	""12"" -> ""18""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""24""[label=""cfg_goto""];\n	""19"" -> ""26""[label=""cfg_false""];\n	""19"" -> ""8""[label=""cfg_true""];\n	""2"" -> ""19""[label=""cfg_next""];\n	""20"" -> ""1""[label=""cfg_false""];\n	""20"" -> ""8""[label=""cfg_true""];\n	""21"" -> ""11""[label=""cfg_true""];\n	""21"" -> ""12""[label=""cfg_false""];\n	""22"" -> ""25""[label=""cfg_false""];\n	""22"" -> ""6""[label=""cfg_true""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""23""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""20""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(String,int)",Method,* Complex condition 1 for 'CH'.,"private boolean conditionCH1(final String value, final int index) {\n    return contains(value, 0, 4, ""VAN "", ""VON "") || contains(value, 0, 3, ""SCH"") || contains(value, index - 2, 6, ""ORCHES"", ""ARCHIT"", ""ORCHID"") || contains(value, index + 2, 1, ""T"", ""S"") || (contains(value, index - 1, 1, ""A"", ""O"", ""U"", ""E"") || index == 0) && (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1);\n}","boolean conditionCH1(java.lang.String,int)","digraph cfg_conditionCH1 {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[2]""];\n	""2"" [label=""$stack10[0] = \""T\""""];\n	""3"" [label=""$stack10[1] = \""S\""""];\n	""4"" [label=""$stack11 = index + 2""];\n	""5"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack11, 1, $stack10)""];\n	""6"" [label=""$stack13 = newarray (java.lang.String)[4]""];\n	""7"" [label=""$stack13[0] = \""A\""""];\n	""8"" [label=""$stack13[1] = \""O\""""];\n	""9"" [label=""$stack13[2] = \""U\""""];\n	""10"" [label=""$stack13[3] = \""E\""""];\n	""11"" [label=""$stack14 = index - 1""];\n	""12"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack14, 1, $stack13)""];\n	""13"" [label=""$stack16 = <org.apache.commons.codec.language.DoubleMetaphone: java.lang.String[] L_R_N_M_B_H_F_V_W_SPACE>""];\n	""14"" [label=""$stack17 = index + 2""];\n	""15"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack17, 1, $stack16)""];\n	""16"" [label=""$stack19 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""17"" [label=""$stack20 = $stack19 - 1""];\n	""18"" [label=""$stack21 = index + 1""];\n	""19"" [label=""$stack22 = 0""];\n	""20"" [label=""$stack22 = 1""];\n	""21"" [label=""$stack3 = newarray (java.lang.String)[2]""];\n	""22"" [label=""$stack3[0] = \""VAN \""""];\n	""23"" [label=""$stack3[1] = \""VON \""""];\n	""24"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 4, $stack3)""];\n	""25"" [label=""$stack5 = newarray (java.lang.String)[1]""];\n	""26"" [label=""$stack5[0] = \""SCH\""""];\n	""27"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 3, $stack5)""];\n	""28"" [label=""$stack7 = newarray (java.lang.String)[3]""];\n	""29"" [label=""$stack7[0] = \""ORCHES\""""];\n	""30"" [label=""$stack7[1] = \""ARCHIT\""""];\n	""31"" [label=""$stack7[2] = \""ORCHID\""""];\n	""32"" [label=""$stack8 = index - 2""];\n	""33"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack8, 6, $stack7)""];\n	""34"" [label=""goto""];\n	""35"" [label=""if $stack12 != 0""];\n	""36"" [label=""if $stack15 != 0""];\n	""37"" [label=""if $stack18 != 0""];\n	""38"" [label=""if $stack21 != $stack20""];\n	""39"" [label=""if $stack4 != 0""];\n	""40"" [label=""if $stack6 != 0""];\n	""41"" [label=""if $stack9 != 0""];\n	""42"" [label=""if index != 0""];\n	""43"" [label=""index := @parameter1: int""];\n	""44"" [label=""return $stack22""];\n	""45"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""46"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""12"" -> ""36""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""37""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""38""[label=""cfg_next""];\n	""18"" -> ""16""[label=""cfg_next""];\n	""19"" -> ""44""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""34""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""39""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""40""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""33""[label=""cfg_next""];\n	""32"" -> ""28""[label=""cfg_next""];\n	""33"" -> ""41""[label=""cfg_next""];\n	""34"" -> ""44""[label=""cfg_goto""];\n	""35"" -> ""11""[label=""cfg_false""];\n	""35"" -> ""20""[label=""cfg_true""];\n	""36"" -> ""14""[label=""cfg_true""];\n	""36"" -> ""42""[label=""cfg_false""];\n	""37"" -> ""18""[label=""cfg_false""];\n	""37"" -> ""20""[label=""cfg_true""];\n	""38"" -> ""19""[label=""cfg_true""];\n	""38"" -> ""20""[label=""cfg_false""];\n	""39"" -> ""20""[label=""cfg_true""];\n	""39"" -> ""25""[label=""cfg_false""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""40"" -> ""20""[label=""cfg_true""];\n	""40"" -> ""32""[label=""cfg_false""];\n	""41"" -> ""20""[label=""cfg_true""];\n	""41"" -> ""4""[label=""cfg_false""];\n	""42"" -> ""14""[label=""cfg_false""];\n	""42"" -> ""19""[label=""cfg_true""];\n	""43"" -> ""21""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""43""[label=""cfg_next""];\n	""5"" -> ""35""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.conditionL0(String,int)",Method,* Complex condition 0 for 'L'.,"private boolean conditionL0(final String value, final int index) {\n    if (index == value.length() - 3 && contains(value, index - 1, 4, ""ILLO"", ""ILLA"", ""ALLE"")) {\n        return true;\n    }\n    return (contains(value, value.length() - 2, 2, ""AS"", ""OS"") || contains(value, value.length() - 1, 1, ""A"", ""O"")) && contains(value, index - 1, 4, ""ALLE"");\n}","boolean conditionL0(java.lang.String,int)","digraph cfg_conditionL0 {\n	""1"" [label=""$stack10 = index - 1""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 4, $stack9)""];\n	""3"" [label=""$stack12 = 0""];\n	""4"" [label=""$stack12 = 1""];\n	""5"" [label=""$stack13 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""6"" [label=""$stack14 = newarray (java.lang.String)[2]""];\n	""7"" [label=""$stack14[0] = \""A\""""];\n	""8"" [label=""$stack14[1] = \""O\""""];\n	""9"" [label=""$stack15 = $stack13 - 1""];\n	""10"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack15, 1, $stack14)""];\n	""11"" [label=""$stack17 = newarray (java.lang.String)[3]""];\n	""12"" [label=""$stack17[0] = \""ILLO\""""];\n	""13"" [label=""$stack17[1] = \""ILLA\""""];\n	""14"" [label=""$stack17[2] = \""ALLE\""""];\n	""15"" [label=""$stack18 = index - 1""];\n	""16"" [label=""$stack19 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack18, 4, $stack17)""];\n	""17"" [label=""$stack3 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""18"" [label=""$stack4 = $stack3 - 3""];\n	""19"" [label=""$stack5 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""20"" [label=""$stack6 = newarray (java.lang.String)[2]""];\n	""21"" [label=""$stack6[0] = \""AS\""""];\n	""22"" [label=""$stack6[1] = \""OS\""""];\n	""23"" [label=""$stack7 = $stack5 - 2""];\n	""24"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack7, 2, $stack6)""];\n	""25"" [label=""$stack9 = newarray (java.lang.String)[1]""];\n	""26"" [label=""$stack9[0] = \""ALLE\""""];\n	""27"" [label=""goto""];\n	""28"" [label=""if $stack11 == 0""];\n	""29"" [label=""if $stack16 == 0""];\n	""30"" [label=""if $stack19 == 0""];\n	""31"" [label=""if $stack8 != 0""];\n	""32"" [label=""if index != $stack4""];\n	""33"" [label=""index := @parameter1: int""];\n	""34"" [label=""return $stack12""];\n	""35"" [label=""return 1""];\n	""36"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""37"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""25""[label=""cfg_next""];\n	""10"" -> ""29""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""30""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""32""[label=""cfg_next""];\n	""19"" -> ""23""[label=""cfg_next""];\n	""2"" -> ""28""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_next""];\n	""23"" -> ""20""[label=""cfg_next""];\n	""24"" -> ""31""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""2""[label=""cfg_next""];\n	""27"" -> ""34""[label=""cfg_goto""];\n	""28"" -> ""3""[label=""cfg_true""];\n	""28"" -> ""4""[label=""cfg_false""];\n	""29"" -> ""1""[label=""cfg_false""];\n	""29"" -> ""3""[label=""cfg_true""];\n	""3"" -> ""34""[label=""cfg_next""];\n	""30"" -> ""19""[label=""cfg_true""];\n	""30"" -> ""35""[label=""cfg_false""];\n	""31"" -> ""1""[label=""cfg_true""];\n	""31"" -> ""5""[label=""cfg_false""];\n	""32"" -> ""15""[label=""cfg_false""];\n	""32"" -> ""19""[label=""cfg_true""];\n	""33"" -> ""17""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""33""[label=""cfg_next""];\n	""4"" -> ""27""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.conditionM0(String,int)",Method,* Complex condition 0 for 'M'.,"private boolean conditionM0(final String value, final int index) {\n    if (charAt(value, index + 1) == 'M') {\n        return true;\n    }\n    return contains(value, index - 1, 3, ""UMB"") && (index + 1 == value.length() - 1 || contains(value, index + 2, 2, ""ER""));\n}","boolean conditionM0(java.lang.String,int)","digraph cfg_conditionM0 {\n	""1"" [label=""$stack10 = index + 1""];\n	""2"" [label=""$stack11 = 0""];\n	""3"" [label=""$stack11 = 1""];\n	""4"" [label=""$stack12 = newarray (java.lang.String)[1]""];\n	""5"" [label=""$stack12[0] = \""ER\""""];\n	""6"" [label=""$stack13 = index + 2""];\n	""7"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack13, 2, $stack12)""];\n	""8"" [label=""$stack3 = index + 1""];\n	""9"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack3)""];\n	""10"" [label=""$stack5 = newarray (java.lang.String)[1]""];\n	""11"" [label=""$stack5[0] = \""UMB\""""];\n	""12"" [label=""$stack6 = index - 1""];\n	""13"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack6, 3, $stack5)""];\n	""14"" [label=""$stack8 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""15"" [label=""$stack9 = $stack8 - 1""];\n	""16"" [label=""goto""];\n	""17"" [label=""if $stack10 == $stack9""];\n	""18"" [label=""if $stack14 == 0""];\n	""19"" [label=""if $stack4 != 77""];\n	""20"" [label=""if $stack7 == 0""];\n	""21"" [label=""index := @parameter1: int""];\n	""22"" [label=""return $stack11""];\n	""23"" [label=""return 1""];\n	""24"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""25"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""14""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""20""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""22""[label=""cfg_goto""];\n	""17"" -> ""3""[label=""cfg_true""];\n	""17"" -> ""6""[label=""cfg_false""];\n	""18"" -> ""2""[label=""cfg_true""];\n	""18"" -> ""3""[label=""cfg_false""];\n	""19"" -> ""12""[label=""cfg_true""];\n	""19"" -> ""23""[label=""cfg_false""];\n	""2"" -> ""22""[label=""cfg_next""];\n	""20"" -> ""1""[label=""cfg_false""];\n	""20"" -> ""2""[label=""cfg_true""];\n	""21"" -> ""8""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""18""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""19""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String),Method,* Encode a value with Double Metaphone.\n     *\n     * @param value String to encode\n     * @return an encoded string,"public String doubleMetaphone(final String value) {\n    return doubleMetaphone(value, false);\n}",java.lang.String doubleMetaphone(java.lang.String),"digraph cfg_doubleMetaphone {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String doubleMetaphone(java.lang.String,boolean)>(value, 0)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""4"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String,boolean)",Method,"* Encode a value with Double Metaphone, optionally using the alternate encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string","public String doubleMetaphone(String value, final boolean alternate) {\n    value = cleanInput(value);\n    if (value == null) {\n        return null;\n    }\n    final boolean slavoGermanic = isSlavoGermanic(value);\n    int index = isSilentStart(value) ? 1 : 0;\n    final DoubleMetaphoneResult result = new DoubleMetaphoneResult(getMaxCodeLen());\n    while (!result.isComplete() && index <= value.length() - 1) {\n        switch(value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\u00C7':\n                // A C with a Cedilla\n                result.append('S');\n                index++;\n                break;\n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\u00D1':\n                // N with a tilde (spanish ene)\n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n        }\n    }\n    return alternate ? result.getAlternate() : result.getPrimary();\n}","java.lang.String doubleMetaphone(java.lang.String,boolean)","digraph cfg_doubleMetaphone {\n	""1"" [label=""$stack10 = virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.String getAlternate()>()""];\n	""2"" [label=""$stack10 = virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.String getPrimary()>()""];\n	""3"" [label=""$stack11 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""4"" [label=""$stack12 = $stack11 - 1""];\n	""5"" [label=""$stack13 = virtualinvoke value.<java.lang.String: char charAt(int)>(index)""];\n	""6"" [label=""$stack14 = index + 1""];\n	""7"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack14)""];\n	""8"" [label=""$stack16 = index + 1""];\n	""9"" [label=""$stack17 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack16)""];\n	""10"" [label=""$stack18 = index + 1""];\n	""11"" [label=""$stack19 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack18)""];\n	""12"" [label=""$stack20 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean conditionM0(java.lang.String,int)>(value, index)""];\n	""13"" [label=""$stack21 = index + 1""];\n	""14"" [label=""$stack22 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack21)""];\n	""15"" [label=""$stack23 = index + 1""];\n	""16"" [label=""$stack24 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack23)""];\n	""17"" [label=""$stack25 = index + 1""];\n	""18"" [label=""$stack26 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack25)""];\n	""19"" [label=""$stack6 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isSilentStart(java.lang.String)>(value)""];\n	""20"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int getMaxCodeLen()>()""];\n	""21"" [label=""$stack8 = new org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""22"" [label=""$stack9 = virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: boolean isComplete()>()""];\n	""23"" [label=""alternate := @parameter1: boolean""];\n	""24"" [label=""goto""];\n	""25"" [label=""goto""];\n	""26"" [label=""goto""];\n	""27"" [label=""goto""];\n	""28"" [label=""goto""];\n	""29"" [label=""goto""];\n	""30"" [label=""goto""];\n	""31"" [label=""goto""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""goto""];\n	""42"" [label=""goto""];\n	""43"" [label=""goto""];\n	""44"" [label=""goto""];\n	""45"" [label=""goto""];\n	""46"" [label=""goto""];\n	""47"" [label=""goto""];\n	""48"" [label=""goto""];\n	""49"" [label=""goto""];\n	""50"" [label=""goto""];\n	""51"" [label=""goto""];\n	""52"" [label=""goto""];\n	""53"" [label=""goto""];\n	""54"" [label=""goto""];\n	""55"" [label=""goto""];\n	""56"" [label=""goto""];\n	""57"" [label=""if $stack15 != 86""];\n	""58"" [label=""if $stack17 != 81""];\n	""59"" [label=""if $stack19 != 78""];\n	""60"" [label=""if $stack20 == 0""];\n	""61"" [label=""if $stack22 != 75""];\n	""62"" [label=""if $stack24 != 70""];\n	""63"" [label=""if $stack26 != 66""];\n	""64"" [label=""if $stack6 == 0""];\n	""65"" [label=""if $stack9 != 0""];\n	""66"" [label=""if alternate == 0""];\n	""67"" [label=""if index > $stack12""];\n	""68"" [label=""if value != null""];\n	""69"" [label=""index = 0""];\n	""70"" [label=""index = 1""];\n	""71"" [label=""index = index + 1""];\n	""72"" [label=""index = index + 1""];\n	""73"" [label=""index = index + 1""];\n	""74"" [label=""index = index + 1""];\n	""75"" [label=""index = index + 1""];\n	""76"" [label=""index = index + 1""];\n	""77"" [label=""index = index + 1""];\n	""78"" [label=""index = index + 1""];\n	""79"" [label=""index = index + 1""];\n	""80"" [label=""index = index + 1""];\n	""81"" [label=""index = index + 2""];\n	""82"" [label=""index = index + 2""];\n	""83"" [label=""index = index + 2""];\n	""84"" [label=""index = index + 2""];\n	""85"" [label=""index = index + 2""];\n	""86"" [label=""index = index + 2""];\n	""87"" [label=""index = index + 2""];\n	""88"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(result, index)""];\n	""89"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""90"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""91"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)>(value, result, index, slavoGermanic)""];\n	""92"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""93"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)>(value, result, index, slavoGermanic)""];\n	""94"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""95"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""96"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)>(value, result, index, slavoGermanic)""];\n	""97"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)>(value, result, index, slavoGermanic)""];\n	""98"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""99"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""100"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""101"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)>(value, result, index, slavoGermanic)""];\n	""102"" [label=""result = $stack8""];\n	""103"" [label=""return $stack10""];\n	""104"" [label=""return null""];\n	""105"" [label=""slavoGermanic = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isSlavoGermanic(java.lang.String)>(value)""];\n	""106"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void <init>(org.apache.commons.codec.language.DoubleMetaphone,int)>(this, $stack7)""];\n	""107"" [label=""switch($stack13) \{     case 65:     case 66:     case 67:     case 68:     case 69:     case 70:     case 71:     case 72:     case 73:     case 74:     case 75:     case 76:     case 77:     case 78:     case 79:     case 80:     case 81:     case 82:     case 83:     case 84:     case 85:     case 86:     case 87:     case 88:     case 89:     case 90:     case 199:     case 209:     default:  \}""];\n	""108"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""109"" [label=""value := @parameter0: java.lang.String""];\n	""110"" [label=""value = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String cleanInput(java.lang.String)>(value)""];\n	""111"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(70)""];\n	""112"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(70)""];\n	""113"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""114"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""115"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(77)""];\n	""116"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(78)""];\n	""117"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(78)""];\n	""118"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(80)""];\n	""119"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""1"" -> ""56""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""50""[label=""cfg_next""];\n	""101"" -> ""52""[label=""cfg_next""];\n	""102"" -> ""22""[label=""cfg_next""];\n	""105"" -> ""19""[label=""cfg_next""];\n	""106"" -> ""102""[label=""cfg_next""];\n	""107"" -> ""100""[label=""cfg_switch""];\n	""107"" -> ""101""[label=""cfg_switch""];\n	""107"" -> ""111""[label=""cfg_switch""];\n	""107"" -> ""112""[label=""cfg_switch""];\n	""107"" -> ""113""[label=""cfg_switch""];\n	""107"" -> ""114""[label=""cfg_switch""];\n	""107"" -> ""115""[label=""cfg_switch""];\n	""107"" -> ""116""[label=""cfg_switch""];\n	""107"" -> ""117""[label=""cfg_switch""];\n	""107"" -> ""118""[label=""cfg_switch""];\n	""107"" -> ""119""[label=""cfg_switch""];\n	""107"" -> ""71""[label=""cfg_switch""];\n	""107"" -> ""88""[label=""cfg_switch""];\n	""107"" -> ""89""[label=""cfg_switch""];\n	""107"" -> ""90""[label=""cfg_switch""];\n	""107"" -> ""91""[label=""cfg_switch""];\n	""107"" -> ""92""[label=""cfg_switch""];\n	""107"" -> ""93""[label=""cfg_switch""];\n	""107"" -> ""94""[label=""cfg_switch""];\n	""107"" -> ""95""[label=""cfg_switch""];\n	""107"" -> ""96""[label=""cfg_switch""];\n	""107"" -> ""97""[label=""cfg_switch""];\n	""107"" -> ""98""[label=""cfg_switch""];\n	""107"" -> ""99""[label=""cfg_switch""];\n	""108"" -> ""109""[label=""cfg_next""];\n	""109"" -> ""23""[label=""cfg_next""];\n	""11"" -> ""59""[label=""cfg_next""];\n	""110"" -> ""68""[label=""cfg_next""];\n	""111"" -> ""15""[label=""cfg_next""];\n	""112"" -> ""6""[label=""cfg_next""];\n	""113"" -> ""13""[label=""cfg_next""];\n	""114"" -> ""8""[label=""cfg_next""];\n	""115"" -> ""12""[label=""cfg_next""];\n	""116"" -> ""10""[label=""cfg_next""];\n	""117"" -> ""80""[label=""cfg_next""];\n	""118"" -> ""17""[label=""cfg_next""];\n	""119"" -> ""79""[label=""cfg_next""];\n	""12"" -> ""60""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""61""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""62""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""63""[label=""cfg_next""];\n	""19"" -> ""64""[label=""cfg_next""];\n	""2"" -> ""103""[label=""cfg_next""];\n	""20"" -> ""106""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""65""[label=""cfg_next""];\n	""23"" -> ""110""[label=""cfg_next""];\n	""24"" -> ""21""[label=""cfg_goto""];\n	""25"" -> ""26""[label=""cfg_goto""];\n	""26"" -> ""22""[label=""cfg_goto""];\n	""27"" -> ""22""[label=""cfg_goto""];\n	""28"" -> ""22""[label=""cfg_goto""];\n	""29"" -> ""30""[label=""cfg_goto""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""22""[label=""cfg_goto""];\n	""31"" -> ""22""[label=""cfg_goto""];\n	""32"" -> ""22""[label=""cfg_goto""];\n	""33"" -> ""22""[label=""cfg_goto""];\n	""34"" -> ""35""[label=""cfg_goto""];\n	""35"" -> ""22""[label=""cfg_goto""];\n	""36"" -> ""22""[label=""cfg_goto""];\n	""37"" -> ""38""[label=""cfg_goto""];\n	""38"" -> ""22""[label=""cfg_goto""];\n	""39"" -> ""40""[label=""cfg_goto""];\n	""4"" -> ""67""[label=""cfg_next""];\n	""40"" -> ""22""[label=""cfg_goto""];\n	""41"" -> ""22""[label=""cfg_goto""];\n	""42"" -> ""43""[label=""cfg_goto""];\n	""43"" -> ""22""[label=""cfg_goto""];\n	""44"" -> ""22""[label=""cfg_goto""];\n	""45"" -> ""22""[label=""cfg_goto""];\n	""46"" -> ""22""[label=""cfg_goto""];\n	""47"" -> ""48""[label=""cfg_goto""];\n	""48"" -> ""22""[label=""cfg_goto""];\n	""49"" -> ""22""[label=""cfg_goto""];\n	""5"" -> ""107""[label=""cfg_next""];\n	""50"" -> ""22""[label=""cfg_goto""];\n	""51"" -> ""22""[label=""cfg_goto""];\n	""52"" -> ""22""[label=""cfg_goto""];\n	""53"" -> ""22""[label=""cfg_goto""];\n	""54"" -> ""22""[label=""cfg_goto""];\n	""55"" -> ""22""[label=""cfg_goto""];\n	""56"" -> ""103""[label=""cfg_goto""];\n	""57"" -> ""78""[label=""cfg_true""];\n	""57"" -> ""87""[label=""cfg_false""];\n	""58"" -> ""77""[label=""cfg_true""];\n	""58"" -> ""86""[label=""cfg_false""];\n	""59"" -> ""76""[label=""cfg_true""];\n	""59"" -> ""85""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""75""[label=""cfg_true""];\n	""60"" -> ""84""[label=""cfg_false""];\n	""61"" -> ""74""[label=""cfg_true""];\n	""61"" -> ""83""[label=""cfg_false""];\n	""62"" -> ""73""[label=""cfg_true""];\n	""62"" -> ""82""[label=""cfg_false""];\n	""63"" -> ""72""[label=""cfg_true""];\n	""63"" -> ""81""[label=""cfg_false""];\n	""64"" -> ""69""[label=""cfg_true""];\n	""64"" -> ""70""[label=""cfg_false""];\n	""65"" -> ""3""[label=""cfg_false""];\n	""65"" -> ""66""[label=""cfg_true""];\n	""66"" -> ""1""[label=""cfg_false""];\n	""66"" -> ""2""[label=""cfg_true""];\n	""67"" -> ""5""[label=""cfg_false""];\n	""67"" -> ""66""[label=""cfg_true""];\n	""68"" -> ""104""[label=""cfg_false""];\n	""68"" -> ""105""[label=""cfg_true""];\n	""69"" -> ""21""[label=""cfg_next""];\n	""7"" -> ""57""[label=""cfg_next""];\n	""70"" -> ""24""[label=""cfg_next""];\n	""71"" -> ""55""[label=""cfg_next""];\n	""72"" -> ""26""[label=""cfg_next""];\n	""73"" -> ""30""[label=""cfg_next""];\n	""74"" -> ""35""[label=""cfg_next""];\n	""75"" -> ""38""[label=""cfg_next""];\n	""76"" -> ""40""[label=""cfg_next""];\n	""77"" -> ""43""[label=""cfg_next""];\n	""78"" -> ""48""[label=""cfg_next""];\n	""79"" -> ""53""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""54""[label=""cfg_next""];\n	""81"" -> ""25""[label=""cfg_next""];\n	""82"" -> ""29""[label=""cfg_next""];\n	""83"" -> ""34""[label=""cfg_next""];\n	""84"" -> ""37""[label=""cfg_next""];\n	""85"" -> ""39""[label=""cfg_next""];\n	""86"" -> ""42""[label=""cfg_next""];\n	""87"" -> ""47""[label=""cfg_next""];\n	""88"" -> ""51""[label=""cfg_next""];\n	""89"" -> ""27""[label=""cfg_next""];\n	""9"" -> ""58""[label=""cfg_next""];\n	""90"" -> ""28""[label=""cfg_next""];\n	""91"" -> ""31""[label=""cfg_next""];\n	""92"" -> ""32""[label=""cfg_next""];\n	""93"" -> ""33""[label=""cfg_next""];\n	""94"" -> ""36""[label=""cfg_next""];\n	""95"" -> ""41""[label=""cfg_next""];\n	""96"" -> ""44""[label=""cfg_next""];\n	""97"" -> ""45""[label=""cfg_next""];\n	""98"" -> ""46""[label=""cfg_next""];\n	""99"" -> ""49""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone.encode(Object),Method,* Encode the value using DoubleMetaphone.  It will only work if\n     * {@code obj} is a {@code String} (like {@code Metaphone}).\n     *\n     * @param obj Object to encode (should be of type String)\n     * @return An encoded Object (will be of type String)\n     * @throws EncoderException encode parameter is not of type String,"@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""DoubleMetaphone encode parameter is not of type String"");\n    }\n    return doubleMetaphone((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String doubleMetaphone(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""DoubleMetaphone encode parameter is not of type String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone.encode(String),Method,* Encode the value using DoubleMetaphone.\n     *\n     * @param value String to encode\n     * @return An encoded String,@Override\npublic String encode(final String value) {\n    return doubleMetaphone(value);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String doubleMetaphone(java.lang.String)>(value)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""4"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen(),Method,* Returns the maxCodeLen.\n     * @return int,public int getMaxCodeLen() {\n    return this.maxCodeLen;\n},int getMaxCodeLen(),"digraph cfg_getMaxCodeLen {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DoubleMetaphone: int maxCodeLen>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(DoubleMetaphoneResult,int)",Method,"* Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.","private int handleAEIOUY(final DoubleMetaphoneResult result, final int index) {\n    if (index == 0) {\n        result.append('A');\n    }\n    return index + 1;\n}","int handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleAEIOUY {\n	""1"" [label=""$stack3 = index + 1""];\n	""2"" [label=""if index != 0""];\n	""3"" [label=""index := @parameter1: int""];\n	""4"" [label=""result := @parameter0: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""5"" [label=""return $stack3""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""7"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(65)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_true""];\n	""2"" -> ""7""[label=""cfg_false""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleC(String,DoubleMetaphoneResult,int)",Method,* Handles 'C' cases.,"private int handleC(final String value, final DoubleMetaphoneResult result, int index) {\n    if (conditionC0(value, index)) {\n        // very confusing, moved out\n        result.append('K');\n        index += 2;\n    } else if (index == 0 && contains(value, index, 6, ""CAESAR"")) {\n        result.append('S');\n        index += 2;\n    } else if (contains(value, index, 2, ""CH"")) {\n        index = handleCH(value, result, index);\n    } else if (contains(value, index, 2, ""CZ"") && !contains(value, index - 2, 4, ""WICZ"")) {\n        //-- ""Czerny"" --//\n        result.append('S', 'X');\n        index += 2;\n    } else if (contains(value, index + 1, 3, ""CIA"")) {\n        //-- ""focaccia"" --//\n        result.append('X');\n        index += 3;\n    } else if (contains(value, index, 2, ""CC"") && !(index == 1 && charAt(value, 0) == 'M')) {\n        //-- double ""cc"" but not ""McClelland"" --//\n        return handleCC(value, result, index);\n    } else if (contains(value, index, 2, ""CK"", ""CG"", ""CQ"")) {\n        result.append('K');\n        index += 2;\n    } else if (contains(value, index, 2, ""CI"", ""CE"", ""CY"")) {\n        //-- Italian vs. English --//\n        if (contains(value, index, 3, ""CIO"", ""CIE"", ""CIA"")) {\n            result.append('S', 'X');\n        } else {\n            result.append('S');\n        }\n        index += 2;\n    } else {\n        result.append('K');\n        if (contains(value, index + 1, 2, "" C"", "" Q"", "" G"")) {\n            //-- Mac Caffrey, Mac Gregor --//\n            index += 3;\n        } else if (contains(value, index + 1, 1, ""C"", ""K"", ""Q"") && !contains(value, index + 1, 2, ""CE"", ""CI"")) {\n            index += 2;\n        } else {\n            index++;\n        }\n    }\n    return index;\n}","int handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleC {\n	""1"" [label=""$stack10 = index + 1""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 3, $stack9)""];\n	""3"" [label=""$stack12 = newarray (java.lang.String)[1]""];\n	""4"" [label=""$stack12[0] = \""CC\""""];\n	""5"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack12)""];\n	""6"" [label=""$stack14 = newarray (java.lang.String)[3]""];\n	""7"" [label=""$stack14[0] = \""CK\""""];\n	""8"" [label=""$stack14[1] = \""CG\""""];\n	""9"" [label=""$stack14[2] = \""CQ\""""];\n	""10"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack14)""];\n	""11"" [label=""$stack16 = newarray (java.lang.String)[3]""];\n	""12"" [label=""$stack16[0] = \""CI\""""];\n	""13"" [label=""$stack16[1] = \""CE\""""];\n	""14"" [label=""$stack16[2] = \""CY\""""];\n	""15"" [label=""$stack17 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack16)""];\n	""16"" [label=""$stack18 = newarray (java.lang.String)[3]""];\n	""17"" [label=""$stack18[0] = \"" C\""""];\n	""18"" [label=""$stack18[1] = \"" Q\""""];\n	""19"" [label=""$stack18[2] = \"" G\""""];\n	""20"" [label=""$stack19 = index + 1""];\n	""21"" [label=""$stack20 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack19, 2, $stack18)""];\n	""22"" [label=""$stack21 = newarray (java.lang.String)[3]""];\n	""23"" [label=""$stack21[0] = \""C\""""];\n	""24"" [label=""$stack21[1] = \""K\""""];\n	""25"" [label=""$stack21[2] = \""Q\""""];\n	""26"" [label=""$stack22 = index + 1""];\n	""27"" [label=""$stack23 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack22, 1, $stack21)""];\n	""28"" [label=""$stack24 = newarray (java.lang.String)[2]""];\n	""29"" [label=""$stack24[0] = \""CE\""""];\n	""30"" [label=""$stack24[1] = \""CI\""""];\n	""31"" [label=""$stack25 = index + 1""];\n	""32"" [label=""$stack26 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack25, 2, $stack24)""];\n	""33"" [label=""$stack27 = newarray (java.lang.String)[3]""];\n	""34"" [label=""$stack27[0] = \""CIO\""""];\n	""35"" [label=""$stack27[1] = \""CIE\""""];\n	""36"" [label=""$stack27[2] = \""CIA\""""];\n	""37"" [label=""$stack28 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 3, $stack27)""];\n	""38"" [label=""$stack29 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""39"" [label=""$stack30 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, 0)""];\n	""40"" [label=""$stack31 = newarray (java.lang.String)[1]""];\n	""41"" [label=""$stack31[0] = \""WICZ\""""];\n	""42"" [label=""$stack32 = index - 2""];\n	""43"" [label=""$stack33 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack32, 4, $stack31)""];\n	""44"" [label=""$stack34 = newarray (java.lang.String)[1]""];\n	""45"" [label=""$stack34[0] = \""CAESAR\""""];\n	""46"" [label=""$stack35 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 6, $stack34)""];\n	""47"" [label=""$stack4 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean conditionC0(java.lang.String,int)>(value, index)""];\n	""48"" [label=""$stack5 = newarray (java.lang.String)[1]""];\n	""49"" [label=""$stack5[0] = \""CH\""""];\n	""50"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack5)""];\n	""51"" [label=""$stack7 = newarray (java.lang.String)[1]""];\n	""52"" [label=""$stack7[0] = \""CZ\""""];\n	""53"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack7)""];\n	""54"" [label=""$stack9 = newarray (java.lang.String)[1]""];\n	""55"" [label=""$stack9[0] = \""CIA\""""];\n	""56"" [label=""goto""];\n	""57"" [label=""goto""];\n	""58"" [label=""goto""];\n	""59"" [label=""goto""];\n	""60"" [label=""goto""];\n	""61"" [label=""goto""];\n	""62"" [label=""goto""];\n	""63"" [label=""goto""];\n	""64"" [label=""goto""];\n	""65"" [label=""goto""];\n	""66"" [label=""if $stack11 == 0""];\n	""67"" [label=""if $stack13 == 0""];\n	""68"" [label=""if $stack15 == 0""];\n	""69"" [label=""if $stack17 == 0""];\n	""70"" [label=""if $stack20 == 0""];\n	""71"" [label=""if $stack23 == 0""];\n	""72"" [label=""if $stack26 != 0""];\n	""73"" [label=""if $stack28 == 0""];\n	""74"" [label=""if $stack30 == 77""];\n	""75"" [label=""if $stack33 != 0""];\n	""76"" [label=""if $stack35 == 0""];\n	""77"" [label=""if $stack4 == 0""];\n	""78"" [label=""if $stack6 == 0""];\n	""79"" [label=""if $stack8 == 0""];\n	""80"" [label=""if index != 0""];\n	""81"" [label=""if index != 1""];\n	""82"" [label=""index := @parameter2: int""];\n	""83"" [label=""index = index + 1""];\n	""84"" [label=""index = index + 2""];\n	""85"" [label=""index = index + 2""];\n	""86"" [label=""index = index + 2""];\n	""87"" [label=""index = index + 2""];\n	""88"" [label=""index = index + 2""];\n	""89"" [label=""index = index + 2""];\n	""90"" [label=""index = index + 3""];\n	""91"" [label=""index = index + 3""];\n	""92"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""93"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""94"" [label=""return $stack29""];\n	""95"" [label=""return index""];\n	""96"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""97"" [label=""value := @parameter0: java.lang.String""];\n	""98"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""99"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""100"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""101"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""102"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""103"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""104"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(83, 88)""];\n	""105"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(83, 88)""];\n	""1"" -> ""54""[label=""cfg_next""];\n	""10"" -> ""68""[label=""cfg_next""];\n	""100"" -> ""20""[label=""cfg_next""];\n	""101"" -> ""85""[label=""cfg_next""];\n	""102"" -> ""88""[label=""cfg_next""];\n	""103"" -> ""90""[label=""cfg_next""];\n	""104"" -> ""86""[label=""cfg_next""];\n	""105"" -> ""62""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""69""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""21""[label=""cfg_next""];\n	""2"" -> ""66""[label=""cfg_next""];\n	""20"" -> ""16""[label=""cfg_next""];\n	""21"" -> ""70""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""71""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""28""[label=""cfg_next""];\n	""32"" -> ""72""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""73""[label=""cfg_next""];\n	""38"" -> ""94""[label=""cfg_next""];\n	""39"" -> ""74""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""40""[label=""cfg_next""];\n	""43"" -> ""75""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""76""[label=""cfg_next""];\n	""47"" -> ""77""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""67""[label=""cfg_next""];\n	""50"" -> ""78""[label=""cfg_next""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""79""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""2""[label=""cfg_next""];\n	""56"" -> ""95""[label=""cfg_goto""];\n	""57"" -> ""95""[label=""cfg_goto""];\n	""58"" -> ""95""[label=""cfg_goto""];\n	""59"" -> ""95""[label=""cfg_goto""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""95""[label=""cfg_goto""];\n	""61"" -> ""95""[label=""cfg_goto""];\n	""62"" -> ""88""[label=""cfg_goto""];\n	""63"" -> ""95""[label=""cfg_goto""];\n	""64"" -> ""95""[label=""cfg_goto""];\n	""65"" -> ""95""[label=""cfg_goto""];\n	""66"" -> ""103""[label=""cfg_false""];\n	""66"" -> ""3""[label=""cfg_true""];\n	""67"" -> ""6""[label=""cfg_true""];\n	""67"" -> ""81""[label=""cfg_false""];\n	""68"" -> ""11""[label=""cfg_true""];\n	""68"" -> ""99""[label=""cfg_false""];\n	""69"" -> ""100""[label=""cfg_true""];\n	""69"" -> ""33""[label=""cfg_false""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""26""[label=""cfg_true""];\n	""70"" -> ""91""[label=""cfg_false""];\n	""71"" -> ""31""[label=""cfg_false""];\n	""71"" -> ""83""[label=""cfg_true""];\n	""72"" -> ""83""[label=""cfg_true""];\n	""72"" -> ""89""[label=""cfg_false""];\n	""73"" -> ""102""[label=""cfg_true""];\n	""73"" -> ""105""[label=""cfg_false""];\n	""74"" -> ""38""[label=""cfg_false""];\n	""74"" -> ""6""[label=""cfg_true""];\n	""75"" -> ""1""[label=""cfg_true""];\n	""75"" -> ""104""[label=""cfg_false""];\n	""76"" -> ""101""[label=""cfg_false""];\n	""76"" -> ""48""[label=""cfg_true""];\n	""77"" -> ""80""[label=""cfg_true""];\n	""77"" -> ""98""[label=""cfg_false""];\n	""78"" -> ""51""[label=""cfg_true""];\n	""78"" -> ""92""[label=""cfg_false""];\n	""79"" -> ""1""[label=""cfg_true""];\n	""79"" -> ""42""[label=""cfg_false""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""44""[label=""cfg_false""];\n	""80"" -> ""48""[label=""cfg_true""];\n	""81"" -> ""38""[label=""cfg_true""];\n	""81"" -> ""39""[label=""cfg_false""];\n	""82"" -> ""47""[label=""cfg_next""];\n	""83"" -> ""95""[label=""cfg_next""];\n	""84"" -> ""56""[label=""cfg_next""];\n	""85"" -> ""57""[label=""cfg_next""];\n	""86"" -> ""59""[label=""cfg_next""];\n	""87"" -> ""61""[label=""cfg_next""];\n	""88"" -> ""63""[label=""cfg_next""];\n	""89"" -> ""65""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""60""[label=""cfg_next""];\n	""91"" -> ""64""[label=""cfg_next""];\n	""92"" -> ""58""[label=""cfg_next""];\n	""93"" -> ""82""[label=""cfg_next""];\n	""96"" -> ""97""[label=""cfg_next""];\n	""97"" -> ""93""[label=""cfg_next""];\n	""98"" -> ""84""[label=""cfg_next""];\n	""99"" -> ""87""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleCC(String,DoubleMetaphoneResult,int)",Method,* Handles 'CC' cases.,"private int handleCC(final String value, final DoubleMetaphoneResult result, int index) {\n    if (contains(value, index + 2, 1, ""I"", ""E"", ""H"") && !contains(value, index + 2, 2, ""HU"")) {\n        //-- ""bellocchio"" but not ""bacchus"" --//\n        if (index == 1 && charAt(value, index - 1) == 'A' || contains(value, index - 1, 5, ""UCCEE"", ""UCCES"")) {\n            //-- ""accident"", ""accede"", ""succeed"" --//\n            result.append(""KS"");\n        } else {\n            //-- ""bacci"", ""bertucci"", other Italian --//\n            result.append('X');\n        }\n        index += 3;\n    } else {\n        // Pierce's rule\n        result.append('K');\n        index += 2;\n    }\n    return index;\n}","int handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleCC {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[2]""];\n	""2"" [label=""$stack10[0] = \""UCCEE\""""];\n	""3"" [label=""$stack10[1] = \""UCCES\""""];\n	""4"" [label=""$stack11 = index - 1""];\n	""5"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack11, 5, $stack10)""];\n	""6"" [label=""$stack13 = index - 1""];\n	""7"" [label=""$stack14 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack13)""];\n	""8"" [label=""$stack4 = newarray (java.lang.String)[3]""];\n	""9"" [label=""$stack4[0] = \""I\""""];\n	""10"" [label=""$stack4[1] = \""E\""""];\n	""11"" [label=""$stack4[2] = \""H\""""];\n	""12"" [label=""$stack5 = index + 2""];\n	""13"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack5, 1, $stack4)""];\n	""14"" [label=""$stack7 = newarray (java.lang.String)[1]""];\n	""15"" [label=""$stack7[0] = \""HU\""""];\n	""16"" [label=""$stack8 = index + 2""];\n	""17"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack8, 2, $stack7)""];\n	""18"" [label=""goto""];\n	""19"" [label=""goto""];\n	""20"" [label=""if $stack12 == 0""];\n	""21"" [label=""if $stack14 == 65""];\n	""22"" [label=""if $stack6 == 0""];\n	""23"" [label=""if $stack9 != 0""];\n	""24"" [label=""if index != 1""];\n	""25"" [label=""index := @parameter2: int""];\n	""26"" [label=""index = index + 2""];\n	""27"" [label=""index = index + 3""];\n	""28"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""29"" [label=""return index""];\n	""30"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""31"" [label=""value := @parameter0: java.lang.String""];\n	""32"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""33"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""34"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""KS\"")""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""8""[label=""cfg_next""];\n	""13"" -> ""22""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""23""[label=""cfg_next""];\n	""18"" -> ""27""[label=""cfg_goto""];\n	""19"" -> ""29""[label=""cfg_goto""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""33""[label=""cfg_true""];\n	""20"" -> ""34""[label=""cfg_false""];\n	""21"" -> ""34""[label=""cfg_true""];\n	""21"" -> ""4""[label=""cfg_false""];\n	""22"" -> ""16""[label=""cfg_false""];\n	""22"" -> ""32""[label=""cfg_true""];\n	""23"" -> ""24""[label=""cfg_false""];\n	""23"" -> ""32""[label=""cfg_true""];\n	""24"" -> ""4""[label=""cfg_true""];\n	""24"" -> ""6""[label=""cfg_false""];\n	""25"" -> ""12""[label=""cfg_next""];\n	""26"" -> ""29""[label=""cfg_next""];\n	""27"" -> ""19""[label=""cfg_next""];\n	""28"" -> ""25""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""28""[label=""cfg_next""];\n	""32"" -> ""26""[label=""cfg_next""];\n	""33"" -> ""27""[label=""cfg_next""];\n	""34"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""20""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleCH(String,DoubleMetaphoneResult,int)",Method,* Handles 'CH' cases.,"private int handleCH(final String value, final DoubleMetaphoneResult result, final int index) {\n    if (index > 0 && contains(value, index, 4, ""CHAE"")) {\n        // Michael\n        result.append('K', 'X');\n        return index + 2;\n    }\n    if (conditionCH0(value, index)) {\n        //-- Greek roots (""chemistry"", ""chorus"", etc.) --//\n        result.append('K');\n        return index + 2;\n    }\n    if (conditionCH1(value, index)) {\n        //-- Germanic, Greek, or otherwise 'ch' for 'kh' sound --//\n        result.append('K');\n        return index + 2;\n    }\n    if (index > 0) {\n        if (contains(value, 0, 2, ""MC"")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}","int handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleCH {\n	""1"" [label=""$stack10 = index + 2""];\n	""2"" [label=""$stack11 = newarray (java.lang.String)[1]""];\n	""3"" [label=""$stack11[0] = \""CHAE\""""];\n	""4"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack11)""];\n	""5"" [label=""$stack13 = index + 2""];\n	""6"" [label=""$stack4 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean conditionCH0(java.lang.String,int)>(value, index)""];\n	""7"" [label=""$stack5 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean conditionCH1(java.lang.String,int)>(value, index)""];\n	""8"" [label=""$stack6 = index + 2""];\n	""9"" [label=""$stack7 = newarray (java.lang.String)[1]""];\n	""10"" [label=""$stack7[0] = \""MC\""""];\n	""11"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 2, $stack7)""];\n	""12"" [label=""$stack9 = index + 2""];\n	""13"" [label=""goto""];\n	""14"" [label=""goto""];\n	""15"" [label=""if $stack12 == 0""];\n	""16"" [label=""if $stack4 == 0""];\n	""17"" [label=""if $stack5 == 0""];\n	""18"" [label=""if $stack8 == 0""];\n	""19"" [label=""if index <= 0""];\n	""20"" [label=""if index <= 0""];\n	""21"" [label=""index := @parameter2: int""];\n	""22"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""23"" [label=""return $stack10""];\n	""24"" [label=""return $stack13""];\n	""25"" [label=""return $stack6""];\n	""26"" [label=""return $stack9""];\n	""27"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""28"" [label=""value := @parameter0: java.lang.String""];\n	""29"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""30"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""31"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""32"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""33"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(75, 88)""];\n	""34"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(88, 75)""];\n	""1"" -> ""23""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""18""[label=""cfg_next""];\n	""12"" -> ""26""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_goto""];\n	""14"" -> ""8""[label=""cfg_goto""];\n	""15"" -> ""33""[label=""cfg_false""];\n	""15"" -> ""6""[label=""cfg_true""];\n	""16"" -> ""29""[label=""cfg_false""];\n	""16"" -> ""7""[label=""cfg_true""];\n	""17"" -> ""20""[label=""cfg_true""];\n	""17"" -> ""30""[label=""cfg_false""];\n	""18"" -> ""31""[label=""cfg_false""];\n	""18"" -> ""34""[label=""cfg_true""];\n	""19"" -> ""2""[label=""cfg_false""];\n	""19"" -> ""6""[label=""cfg_true""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""32""[label=""cfg_true""];\n	""20"" -> ""9""[label=""cfg_false""];\n	""21"" -> ""19""[label=""cfg_next""];\n	""22"" -> ""21""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""22""[label=""cfg_next""];\n	""29"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""12""[label=""cfg_next""];\n	""31"" -> ""13""[label=""cfg_next""];\n	""32"" -> ""8""[label=""cfg_next""];\n	""33"" -> ""5""[label=""cfg_next""];\n	""34"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""15""[label=""cfg_next""];\n	""5"" -> ""24""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""7"" -> ""17""[label=""cfg_next""];\n	""8"" -> ""25""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleD(String,DoubleMetaphoneResult,int)",Method,* Handles 'D' cases.,"private int handleD(final String value, final DoubleMetaphoneResult result, int index) {\n    if (contains(value, index, 2, ""DG"")) {\n        //-- ""Edge"" --//\n        if (contains(value, index + 2, 1, ""I"", ""E"", ""Y"")) {\n            result.append('J');\n            index += 3;\n            //-- ""Edgar"" --//\n        } else {\n            result.append(""TK"");\n            index += 2;\n        }\n    } else if (contains(value, index, 2, ""DT"", ""DD"")) {\n        result.append('T');\n        index += 2;\n    } else {\n        result.append('T');\n        index++;\n    }\n    return index;\n}","int handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleD {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack9, 1, $stack8)""];\n	""2"" [label=""$stack4 = newarray (java.lang.String)[1]""];\n	""3"" [label=""$stack4[0] = \""DG\""""];\n	""4"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack4)""];\n	""5"" [label=""$stack6 = newarray (java.lang.String)[2]""];\n	""6"" [label=""$stack6[0] = \""DT\""""];\n	""7"" [label=""$stack6[1] = \""DD\""""];\n	""8"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack6)""];\n	""9"" [label=""$stack8 = newarray (java.lang.String)[3]""];\n	""10"" [label=""$stack8[0] = \""I\""""];\n	""11"" [label=""$stack8[1] = \""E\""""];\n	""12"" [label=""$stack8[2] = \""Y\""""];\n	""13"" [label=""$stack9 = index + 2""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""if $stack10 == 0""];\n	""18"" [label=""if $stack5 == 0""];\n	""19"" [label=""if $stack7 == 0""];\n	""20"" [label=""index := @parameter2: int""];\n	""21"" [label=""index = index + 1""];\n	""22"" [label=""index = index + 2""];\n	""23"" [label=""index = index + 2""];\n	""24"" [label=""index = index + 3""];\n	""25"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""26"" [label=""return index""];\n	""27"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""28"" [label=""value := @parameter0: java.lang.String""];\n	""29"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(74)""];\n	""30"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(84)""];\n	""31"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(84)""];\n	""32"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""TK\"")""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""9""[label=""cfg_next""];\n	""14"" -> ""26""[label=""cfg_goto""];\n	""15"" -> ""26""[label=""cfg_goto""];\n	""16"" -> ""26""[label=""cfg_goto""];\n	""17"" -> ""29""[label=""cfg_false""];\n	""17"" -> ""32""[label=""cfg_true""];\n	""18"" -> ""13""[label=""cfg_false""];\n	""18"" -> ""5""[label=""cfg_true""];\n	""19"" -> ""30""[label=""cfg_false""];\n	""19"" -> ""31""[label=""cfg_true""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""2""[label=""cfg_next""];\n	""21"" -> ""26""[label=""cfg_next""];\n	""22"" -> ""15""[label=""cfg_next""];\n	""23"" -> ""16""[label=""cfg_next""];\n	""24"" -> ""14""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""25""[label=""cfg_next""];\n	""29"" -> ""24""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""23""[label=""cfg_next""];\n	""31"" -> ""21""[label=""cfg_next""];\n	""32"" -> ""22""[label=""cfg_next""];\n	""4"" -> ""18""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""19""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean)",Method,* Handles 'G' cases.,"private int handleG(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        index = handleGH(value, result, index);\n    } else if (charAt(value, index + 1) == 'N') {\n        if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n            result.append(""KN"", ""N"");\n        } else if (!contains(value, index + 2, 2, ""EY"") && charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n            result.append(""N"", ""KN"");\n        } else {\n            result.append(""KN"");\n        }\n        index += 2;\n    } else if (contains(value, index + 1, 2, ""LI"") && !slavoGermanic) {\n        result.append(""KL"", ""L"");\n        index += 2;\n    } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n        //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n        result.append('K', 'J');\n        index += 2;\n    } else if ((contains(value, index + 1, 2, ""ER"") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, ""DANGER"", ""RANGER"", ""MANGER"") && !contains(value, index - 1, 1, ""E"", ""I"") && !contains(value, index - 1, 3, ""RGY"", ""OGY"")) {\n        //-- -ger-, -gy- --//\n        result.append('K', 'J');\n        index += 2;\n    } else if (contains(value, index + 1, 1, ""E"", ""I"", ""Y"") || contains(value, index - 1, 4, ""AGGI"", ""OGGI"")) {\n        //-- Italian ""biaggi"" --//\n        if (contains(value, 0, 4, ""VAN "", ""VON "") || contains(value, 0, 3, ""SCH"") || contains(value, index + 1, 2, ""ET"")) {\n            //-- obvious germanic --//\n            result.append('K');\n        } else if (contains(value, index + 1, 3, ""IER"")) {\n            result.append('J');\n        } else {\n            result.append('J', 'K');\n        }\n        index += 2;\n    } else {\n        if (charAt(value, index + 1) == 'G') {\n            index += 2;\n        } else {\n            index++;\n        }\n        result.append('K');\n    }\n    return index;\n}","int handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)","digraph cfg_handleG {\n	""1"" [label=""$stack10 = index + 1""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 2, $stack9)""];\n	""3"" [label=""$stack12 = newarray (java.lang.String)[1]""];\n	""4"" [label=""$stack12[0] = \""ER\""""];\n	""5"" [label=""$stack13 = index + 1""];\n	""6"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack13, 2, $stack12)""];\n	""7"" [label=""$stack15 = newarray (java.lang.String)[3]""];\n	""8"" [label=""$stack15[0] = \""DANGER\""""];\n	""9"" [label=""$stack15[1] = \""RANGER\""""];\n	""10"" [label=""$stack15[2] = \""MANGER\""""];\n	""11"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 6, $stack15)""];\n	""12"" [label=""$stack17 = newarray (java.lang.String)[3]""];\n	""13"" [label=""$stack17[0] = \""E\""""];\n	""14"" [label=""$stack17[1] = \""I\""""];\n	""15"" [label=""$stack17[2] = \""Y\""""];\n	""16"" [label=""$stack18 = index + 1""];\n	""17"" [label=""$stack19 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack18, 1, $stack17)""];\n	""18"" [label=""$stack20 = newarray (java.lang.String)[2]""];\n	""19"" [label=""$stack20[0] = \""VAN \""""];\n	""20"" [label=""$stack20[1] = \""VON \""""];\n	""21"" [label=""$stack21 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 4, $stack20)""];\n	""22"" [label=""$stack22 = newarray (java.lang.String)[1]""];\n	""23"" [label=""$stack22[0] = \""SCH\""""];\n	""24"" [label=""$stack23 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 3, $stack22)""];\n	""25"" [label=""$stack24 = newarray (java.lang.String)[1]""];\n	""26"" [label=""$stack24[0] = \""ET\""""];\n	""27"" [label=""$stack25 = index + 1""];\n	""28"" [label=""$stack26 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack25, 2, $stack24)""];\n	""29"" [label=""$stack27 = newarray (java.lang.String)[1]""];\n	""30"" [label=""$stack27[0] = \""IER\""""];\n	""31"" [label=""$stack28 = index + 1""];\n	""32"" [label=""$stack29 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack28, 3, $stack27)""];\n	""33"" [label=""$stack30 = newarray (java.lang.String)[2]""];\n	""34"" [label=""$stack30[0] = \""AGGI\""""];\n	""35"" [label=""$stack30[1] = \""OGGI\""""];\n	""36"" [label=""$stack31 = index - 1""];\n	""37"" [label=""$stack32 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack31, 4, $stack30)""];\n	""38"" [label=""$stack33 = index + 1""];\n	""39"" [label=""$stack34 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack33)""];\n	""40"" [label=""$stack35 = newarray (java.lang.String)[2]""];\n	""41"" [label=""$stack35[0] = \""E\""""];\n	""42"" [label=""$stack35[1] = \""I\""""];\n	""43"" [label=""$stack36 = index - 1""];\n	""44"" [label=""$stack37 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack36, 1, $stack35)""];\n	""45"" [label=""$stack38 = newarray (java.lang.String)[2]""];\n	""46"" [label=""$stack38[0] = \""RGY\""""];\n	""47"" [label=""$stack38[1] = \""OGY\""""];\n	""48"" [label=""$stack39 = index - 1""];\n	""49"" [label=""$stack40 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack39, 3, $stack38)""];\n	""50"" [label=""$stack41 = index + 1""];\n	""51"" [label=""$stack42 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack41)""];\n	""52"" [label=""$stack43 = index + 1""];\n	""53"" [label=""$stack44 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack43)""];\n	""54"" [label=""$stack45 = <org.apache.commons.codec.language.DoubleMetaphone: java.lang.String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER>""];\n	""55"" [label=""$stack46 = index + 1""];\n	""56"" [label=""$stack47 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack46, 2, $stack45)""];\n	""57"" [label=""$stack48 = newarray (java.lang.String)[1]""];\n	""58"" [label=""$stack48[0] = \""EY\""""];\n	""59"" [label=""$stack49 = index + 2""];\n	""60"" [label=""$stack5 = index + 1""];\n	""61"" [label=""$stack50 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack49, 2, $stack48)""];\n	""62"" [label=""$stack51 = index + 1""];\n	""63"" [label=""$stack52 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack51)""];\n	""64"" [label=""$stack53 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, 0)""];\n	""65"" [label=""$stack54 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack53)""];\n	""66"" [label=""$stack6 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack5)""];\n	""67"" [label=""$stack7 = index + 1""];\n	""68"" [label=""$stack8 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack7)""];\n	""69"" [label=""$stack9 = newarray (java.lang.String)[1]""];\n	""70"" [label=""$stack9[0] = \""LI\""""];\n	""71"" [label=""goto""];\n	""72"" [label=""goto""];\n	""73"" [label=""goto""];\n	""74"" [label=""goto""];\n	""75"" [label=""goto""];\n	""76"" [label=""goto""];\n	""77"" [label=""goto""];\n	""78"" [label=""goto""];\n	""79"" [label=""goto""];\n	""80"" [label=""goto""];\n	""81"" [label=""goto""];\n	""82"" [label=""if $stack11 == 0""];\n	""83"" [label=""if $stack14 != 0""];\n	""84"" [label=""if $stack16 != 0""];\n	""85"" [label=""if $stack19 != 0""];\n	""86"" [label=""if $stack21 != 0""];\n	""87"" [label=""if $stack23 != 0""];\n	""88"" [label=""if $stack26 == 0""];\n	""89"" [label=""if $stack29 == 0""];\n	""90"" [label=""if $stack32 == 0""];\n	""91"" [label=""if $stack34 != 71""];\n	""92"" [label=""if $stack37 != 0""];\n	""93"" [label=""if $stack40 != 0""];\n	""94"" [label=""if $stack42 != 89""];\n	""95"" [label=""if $stack44 == 89""];\n	""96"" [label=""if $stack47 == 0""];\n	""97"" [label=""if $stack50 != 0""];\n	""98"" [label=""if $stack52 == 89""];\n	""99"" [label=""if $stack54 == 0""];\n	""100"" [label=""if $stack6 != 72""];\n	""101"" [label=""if $stack8 != 78""];\n	""102"" [label=""if index != 0""];\n	""103"" [label=""if index != 1""];\n	""104"" [label=""if slavoGermanic != 0""];\n	""105"" [label=""if slavoGermanic != 0""];\n	""106"" [label=""if slavoGermanic != 0""];\n	""107"" [label=""index := @parameter2: int""];\n	""108"" [label=""index = index + 1""];\n	""109"" [label=""index = index + 2""];\n	""110"" [label=""index = index + 2""];\n	""111"" [label=""index = index + 2""];\n	""112"" [label=""index = index + 2""];\n	""113"" [label=""index = index + 2""];\n	""114"" [label=""index = index + 2""];\n	""115"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""116"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""117"" [label=""return index""];\n	""118"" [label=""slavoGermanic := @parameter3: boolean""];\n	""119"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""120"" [label=""value := @parameter0: java.lang.String""];\n	""121"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(74)""];\n	""122"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""123"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""124"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(74, 75)""];\n	""125"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(75, 74)""];\n	""126"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(75, 74)""];\n	""127"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""KN\"")""];\n	""128"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""KL\"", \""L\"")""];\n	""129"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""KN\"", \""N\"")""];\n	""130"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""N\"", \""KN\"")""];\n	""1"" -> ""69""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""115""[label=""cfg_false""];\n	""100"" -> ""67""[label=""cfg_true""];\n	""101"" -> ""1""[label=""cfg_true""];\n	""101"" -> ""103""[label=""cfg_false""];\n	""102"" -> ""5""[label=""cfg_true""];\n	""102"" -> ""52""[label=""cfg_false""];\n	""103"" -> ""59""[label=""cfg_true""];\n	""103"" -> ""64""[label=""cfg_false""];\n	""104"" -> ""129""[label=""cfg_false""];\n	""104"" -> ""59""[label=""cfg_true""];\n	""105"" -> ""127""[label=""cfg_true""];\n	""105"" -> ""130""[label=""cfg_false""];\n	""106"" -> ""102""[label=""cfg_true""];\n	""106"" -> ""128""[label=""cfg_false""];\n	""107"" -> ""118""[label=""cfg_next""];\n	""108"" -> ""123""[label=""cfg_next""];\n	""109"" -> ""74""[label=""cfg_next""];\n	""11"" -> ""84""[label=""cfg_next""];\n	""110"" -> ""75""[label=""cfg_next""];\n	""111"" -> ""76""[label=""cfg_next""];\n	""112"" -> ""77""[label=""cfg_next""];\n	""113"" -> ""80""[label=""cfg_next""];\n	""114"" -> ""81""[label=""cfg_next""];\n	""115"" -> ""71""[label=""cfg_next""];\n	""116"" -> ""107""[label=""cfg_next""];\n	""118"" -> ""60""[label=""cfg_next""];\n	""119"" -> ""120""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""120"" -> ""116""[label=""cfg_next""];\n	""121"" -> ""79""[label=""cfg_next""];\n	""122"" -> ""78""[label=""cfg_next""];\n	""123"" -> ""117""[label=""cfg_next""];\n	""124"" -> ""113""[label=""cfg_next""];\n	""125"" -> ""111""[label=""cfg_next""];\n	""126"" -> ""112""[label=""cfg_next""];\n	""127"" -> ""109""[label=""cfg_next""];\n	""128"" -> ""110""[label=""cfg_next""];\n	""129"" -> ""72""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""130"" -> ""73""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""85""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""82""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""86""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""87""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""28""[label=""cfg_next""];\n	""27"" -> ""25""[label=""cfg_next""];\n	""28"" -> ""88""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""29""[label=""cfg_next""];\n	""32"" -> ""89""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""37""[label=""cfg_next""];\n	""36"" -> ""33""[label=""cfg_next""];\n	""37"" -> ""90""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""91""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""44""[label=""cfg_next""];\n	""43"" -> ""40""[label=""cfg_next""];\n	""44"" -> ""92""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""49""[label=""cfg_next""];\n	""48"" -> ""45""[label=""cfg_next""];\n	""49"" -> ""93""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""94""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""95""[label=""cfg_next""];\n	""54"" -> ""56""[label=""cfg_next""];\n	""55"" -> ""54""[label=""cfg_next""];\n	""56"" -> ""96""[label=""cfg_next""];\n	""57"" -> ""58""[label=""cfg_next""];\n	""58"" -> ""61""[label=""cfg_next""];\n	""59"" -> ""57""[label=""cfg_next""];\n	""6"" -> ""83""[label=""cfg_next""];\n	""60"" -> ""66""[label=""cfg_next""];\n	""61"" -> ""97""[label=""cfg_next""];\n	""62"" -> ""63""[label=""cfg_next""];\n	""63"" -> ""98""[label=""cfg_next""];\n	""64"" -> ""65""[label=""cfg_next""];\n	""65"" -> ""99""[label=""cfg_next""];\n	""66"" -> ""100""[label=""cfg_next""];\n	""67"" -> ""68""[label=""cfg_next""];\n	""68"" -> ""101""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""2""[label=""cfg_next""];\n	""71"" -> ""117""[label=""cfg_goto""];\n	""72"" -> ""109""[label=""cfg_goto""];\n	""73"" -> ""109""[label=""cfg_goto""];\n	""74"" -> ""117""[label=""cfg_goto""];\n	""75"" -> ""117""[label=""cfg_goto""];\n	""76"" -> ""117""[label=""cfg_goto""];\n	""77"" -> ""117""[label=""cfg_goto""];\n	""78"" -> ""113""[label=""cfg_goto""];\n	""79"" -> ""113""[label=""cfg_goto""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""117""[label=""cfg_goto""];\n	""81"" -> ""123""[label=""cfg_goto""];\n	""82"" -> ""102""[label=""cfg_true""];\n	""82"" -> ""106""[label=""cfg_false""];\n	""83"" -> ""50""[label=""cfg_false""];\n	""83"" -> ""7""[label=""cfg_true""];\n	""84"" -> ""16""[label=""cfg_true""];\n	""84"" -> ""43""[label=""cfg_false""];\n	""85"" -> ""18""[label=""cfg_true""];\n	""85"" -> ""36""[label=""cfg_false""];\n	""86"" -> ""122""[label=""cfg_true""];\n	""86"" -> ""22""[label=""cfg_false""];\n	""87"" -> ""122""[label=""cfg_true""];\n	""87"" -> ""27""[label=""cfg_false""];\n	""88"" -> ""122""[label=""cfg_false""];\n	""88"" -> ""31""[label=""cfg_true""];\n	""89"" -> ""121""[label=""cfg_false""];\n	""89"" -> ""124""[label=""cfg_true""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""18""[label=""cfg_false""];\n	""90"" -> ""38""[label=""cfg_true""];\n	""91"" -> ""108""[label=""cfg_true""];\n	""91"" -> ""114""[label=""cfg_false""];\n	""92"" -> ""16""[label=""cfg_true""];\n	""92"" -> ""48""[label=""cfg_false""];\n	""93"" -> ""126""[label=""cfg_false""];\n	""93"" -> ""16""[label=""cfg_true""];\n	""94"" -> ""16""[label=""cfg_true""];\n	""94"" -> ""7""[label=""cfg_false""];\n	""95"" -> ""125""[label=""cfg_true""];\n	""95"" -> ""55""[label=""cfg_false""];\n	""96"" -> ""125""[label=""cfg_false""];\n	""96"" -> ""5""[label=""cfg_true""];\n	""97"" -> ""127""[label=""cfg_true""];\n	""97"" -> ""62""[label=""cfg_false""];\n	""98"" -> ""105""[label=""cfg_false""];\n	""98"" -> ""127""[label=""cfg_true""];\n	""99"" -> ""104""[label=""cfg_false""];\n	""99"" -> ""59""[label=""cfg_true""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleGH(String,DoubleMetaphoneResult,int)",Method,* Handles 'GH' cases.,"private int handleGH(final String value, final DoubleMetaphoneResult result, int index) {\n    if (index > 0 && !isVowel(charAt(value, index - 1))) {\n        result.append('K');\n        index += 2;\n    } else if (index == 0) {\n        if (charAt(value, index + 2) == 'I') {\n            result.append('J');\n        } else {\n            result.append('K');\n        }\n        index += 2;\n    } else if (index > 1 && contains(value, index - 2, 1, ""B"", ""H"", ""D"") || index > 2 && contains(value, index - 3, 1, ""B"", ""H"", ""D"") || index > 3 && contains(value, index - 4, 1, ""B"", ""H"")) {\n        //-- Parker's rule (with some further refinements) - ""hugh""\n        index += 2;\n    } else {\n        if (index > 2 && charAt(value, index - 1) == 'U' && contains(value, index - 3, 1, ""C"", ""G"", ""L"", ""R"", ""T"")) {\n            //-- ""laugh"", ""McLaughlin"", ""cough"", ""gough"", ""rough"", ""tough""\n            result.append('F');\n        } else if (index > 0 && charAt(value, index - 1) != 'I') {\n            result.append('K');\n        }\n        index += 2;\n    }\n    return index;\n}","int handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleGH {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack9, 1, $stack8)""];\n	""2"" [label=""$stack11 = newarray (java.lang.String)[2]""];\n	""3"" [label=""$stack11[0] = \""B\""""];\n	""4"" [label=""$stack11[1] = \""H\""""];\n	""5"" [label=""$stack12 = index - 4""];\n	""6"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack12, 1, $stack11)""];\n	""7"" [label=""$stack14 = newarray (java.lang.String)[3]""];\n	""8"" [label=""$stack14[0] = \""B\""""];\n	""9"" [label=""$stack14[1] = \""H\""""];\n	""10"" [label=""$stack14[2] = \""D\""""];\n	""11"" [label=""$stack15 = index - 3""];\n	""12"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack15, 1, $stack14)""];\n	""13"" [label=""$stack17 = newarray (java.lang.String)[3]""];\n	""14"" [label=""$stack17[0] = \""B\""""];\n	""15"" [label=""$stack17[1] = \""H\""""];\n	""16"" [label=""$stack17[2] = \""D\""""];\n	""17"" [label=""$stack18 = index - 2""];\n	""18"" [label=""$stack19 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack18, 1, $stack17)""];\n	""19"" [label=""$stack20 = index + 2""];\n	""20"" [label=""$stack21 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack20)""];\n	""21"" [label=""$stack22 = index - 1""];\n	""22"" [label=""$stack23 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack22)""];\n	""23"" [label=""$stack24 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack23)""];\n	""24"" [label=""$stack4 = index - 1""];\n	""25"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack4)""];\n	""26"" [label=""$stack6 = index - 1""];\n	""27"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack6)""];\n	""28"" [label=""$stack8 = newarray (java.lang.String)[5]""];\n	""29"" [label=""$stack8[0] = \""C\""""];\n	""30"" [label=""$stack8[1] = \""G\""""];\n	""31"" [label=""$stack8[2] = \""L\""""];\n	""32"" [label=""$stack8[3] = \""R\""""];\n	""33"" [label=""$stack8[4] = \""T\""""];\n	""34"" [label=""$stack9 = index - 3""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""if $stack10 == 0""];\n	""41"" [label=""if $stack13 == 0""];\n	""42"" [label=""if $stack16 != 0""];\n	""43"" [label=""if $stack19 != 0""];\n	""44"" [label=""if $stack21 != 73""];\n	""45"" [label=""if $stack24 != 0""];\n	""46"" [label=""if $stack5 == 73""];\n	""47"" [label=""if $stack7 != 85""];\n	""48"" [label=""if index != 0""];\n	""49"" [label=""if index <= 0""];\n	""50"" [label=""if index <= 0""];\n	""51"" [label=""if index <= 1""];\n	""52"" [label=""if index <= 2""];\n	""53"" [label=""if index <= 2""];\n	""54"" [label=""if index <= 3""];\n	""55"" [label=""index := @parameter2: int""];\n	""56"" [label=""index = index + 2""];\n	""57"" [label=""index = index + 2""];\n	""58"" [label=""index = index + 2""];\n	""59"" [label=""index = index + 2""];\n	""60"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""61"" [label=""return index""];\n	""62"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""63"" [label=""value := @parameter0: java.lang.String""];\n	""64"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(70)""];\n	""65"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(74)""];\n	""66"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""67"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""68"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(75)""];\n	""1"" -> ""40""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""42""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""18""[label=""cfg_next""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""18"" -> ""43""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""44""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""45""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""46""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""47""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""1""[label=""cfg_next""];\n	""34"" -> ""28""[label=""cfg_next""];\n	""35"" -> ""61""[label=""cfg_goto""];\n	""36"" -> ""57""[label=""cfg_goto""];\n	""37"" -> ""61""[label=""cfg_goto""];\n	""38"" -> ""61""[label=""cfg_goto""];\n	""39"" -> ""59""[label=""cfg_goto""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""50""[label=""cfg_true""];\n	""40"" -> ""64""[label=""cfg_false""];\n	""41"" -> ""53""[label=""cfg_true""];\n	""41"" -> ""58""[label=""cfg_false""];\n	""42"" -> ""54""[label=""cfg_false""];\n	""42"" -> ""58""[label=""cfg_true""];\n	""43"" -> ""52""[label=""cfg_false""];\n	""43"" -> ""58""[label=""cfg_true""];\n	""44"" -> ""65""[label=""cfg_false""];\n	""44"" -> ""67""[label=""cfg_true""];\n	""45"" -> ""48""[label=""cfg_true""];\n	""45"" -> ""66""[label=""cfg_false""];\n	""46"" -> ""59""[label=""cfg_true""];\n	""46"" -> ""68""[label=""cfg_false""];\n	""47"" -> ""34""[label=""cfg_false""];\n	""47"" -> ""50""[label=""cfg_true""];\n	""48"" -> ""19""[label=""cfg_false""];\n	""48"" -> ""51""[label=""cfg_true""];\n	""49"" -> ""21""[label=""cfg_false""];\n	""49"" -> ""48""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""50"" -> ""24""[label=""cfg_false""];\n	""50"" -> ""59""[label=""cfg_true""];\n	""51"" -> ""17""[label=""cfg_false""];\n	""51"" -> ""52""[label=""cfg_true""];\n	""52"" -> ""11""[label=""cfg_false""];\n	""52"" -> ""54""[label=""cfg_true""];\n	""53"" -> ""26""[label=""cfg_false""];\n	""53"" -> ""50""[label=""cfg_true""];\n	""54"" -> ""5""[label=""cfg_false""];\n	""54"" -> ""53""[label=""cfg_true""];\n	""55"" -> ""49""[label=""cfg_next""];\n	""56"" -> ""35""[label=""cfg_next""];\n	""57"" -> ""37""[label=""cfg_next""];\n	""58"" -> ""38""[label=""cfg_next""];\n	""59"" -> ""61""[label=""cfg_next""];\n	""6"" -> ""41""[label=""cfg_next""];\n	""60"" -> ""55""[label=""cfg_next""];\n	""62"" -> ""63""[label=""cfg_next""];\n	""63"" -> ""60""[label=""cfg_next""];\n	""64"" -> ""39""[label=""cfg_next""];\n	""65"" -> ""36""[label=""cfg_next""];\n	""66"" -> ""56""[label=""cfg_next""];\n	""67"" -> ""57""[label=""cfg_next""];\n	""68"" -> ""59""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleH(String,DoubleMetaphoneResult,int)",Method,* Handles 'H' cases.,"private int handleH(final String value, final DoubleMetaphoneResult result, int index) {\n    //-- only keep if first & before vowel or between 2 vowels --//\n    if ((index == 0 || isVowel(charAt(value, index - 1))) && isVowel(charAt(value, index + 1))) {\n        result.append('H');\n        index += 2;\n        //-- also takes car of ""HH"" --//\n    } else {\n        index++;\n    }\n    return index;\n}","int handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleH {\n	""1"" [label=""$stack4 = index + 1""];\n	""2"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack4)""];\n	""3"" [label=""$stack6 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack5)""];\n	""4"" [label=""$stack7 = index - 1""];\n	""5"" [label=""$stack8 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack7)""];\n	""6"" [label=""$stack9 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack8)""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack6 == 0""];\n	""9"" [label=""if $stack9 == 0""];\n	""10"" [label=""if index == 0""];\n	""11"" [label=""index := @parameter2: int""];\n	""12"" [label=""index = index + 1""];\n	""13"" [label=""index = index + 2""];\n	""14"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""15"" [label=""return index""];\n	""16"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""17"" [label=""value := @parameter0: java.lang.String""];\n	""18"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(72)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_true""];\n	""10"" -> ""4""[label=""cfg_false""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""15""[label=""cfg_next""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""14""[label=""cfg_next""];\n	""18"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_goto""];\n	""8"" -> ""12""[label=""cfg_true""];\n	""8"" -> ""18""[label=""cfg_false""];\n	""9"" -> ""1""[label=""cfg_false""];\n	""9"" -> ""12""[label=""cfg_true""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean)",Method,* Handles 'J' cases.,"private int handleJ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (contains(value, index, 4, ""JOSE"") || contains(value, 0, 4, ""SAN "")) {\n        //-- obvious Spanish, ""Jose"", ""San Jacinto"" --//\n        if (index == 0 && charAt(value, index + 4) == ' ' || value.length() == 4 || contains(value, 0, 4, ""SAN "")) {\n            result.append('H');\n        } else {\n            result.append('J', 'H');\n        }\n        index++;\n    } else {\n        if (index == 0 && !contains(value, index, 4, ""JOSE"")) {\n            result.append('J', 'A');\n        } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n            result.append('J', 'H');\n        } else if (index == value.length() - 1) {\n            result.append('J', ' ');\n        } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, ""S"", ""K"", ""L"")) {\n            result.append('J');\n        }\n        if (charAt(value, index + 1) == 'J') {\n            index += 2;\n        } else {\n            index++;\n        }\n    }\n    return index;\n}","int handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)","digraph cfg_handleJ {\n	""1"" [label=""$stack10 = index + 4""];\n	""2"" [label=""$stack11 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack10)""];\n	""3"" [label=""$stack12 = newarray (java.lang.String)[1]""];\n	""4"" [label=""$stack12[0] = \""SAN \""""];\n	""5"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 4, $stack12)""];\n	""6"" [label=""$stack14 = index - 1""];\n	""7"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack14)""];\n	""8"" [label=""$stack16 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack15)""];\n	""9"" [label=""$stack17 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""10"" [label=""$stack18 = $stack17 - 1""];\n	""11"" [label=""$stack19 = <org.apache.commons.codec.language.DoubleMetaphone: java.lang.String[] L_T_K_S_N_M_B_Z>""];\n	""12"" [label=""$stack20 = index + 1""];\n	""13"" [label=""$stack21 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack20, 1, $stack19)""];\n	""14"" [label=""$stack22 = index + 1""];\n	""15"" [label=""$stack23 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack22)""];\n	""16"" [label=""$stack24 = newarray (java.lang.String)[3]""];\n	""17"" [label=""$stack24[0] = \""S\""""];\n	""18"" [label=""$stack24[1] = \""K\""""];\n	""19"" [label=""$stack24[2] = \""L\""""];\n	""20"" [label=""$stack25 = index - 1""];\n	""21"" [label=""$stack26 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack25, 1, $stack24)""];\n	""22"" [label=""$stack27 = index + 1""];\n	""23"" [label=""$stack28 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack27)""];\n	""24"" [label=""$stack29 = index + 1""];\n	""25"" [label=""$stack30 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack29)""];\n	""26"" [label=""$stack31 = newarray (java.lang.String)[1]""];\n	""27"" [label=""$stack31[0] = \""JOSE\""""];\n	""28"" [label=""$stack32 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack31)""];\n	""29"" [label=""$stack5 = newarray (java.lang.String)[1]""];\n	""30"" [label=""$stack5[0] = \""JOSE\""""];\n	""31"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack5)""];\n	""32"" [label=""$stack7 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""33"" [label=""$stack8 = newarray (java.lang.String)[1]""];\n	""34"" [label=""$stack8[0] = \""SAN \""""];\n	""35"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 4, $stack8)""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""goto""];\n	""42"" [label=""if $stack11 == 32""];\n	""43"" [label=""if $stack13 == 0""];\n	""44"" [label=""if $stack16 == 0""];\n	""45"" [label=""if $stack21 != 0""];\n	""46"" [label=""if $stack23 != 74""];\n	""47"" [label=""if $stack26 != 0""];\n	""48"" [label=""if $stack28 == 65""];\n	""49"" [label=""if $stack30 != 79""];\n	""50"" [label=""if $stack32 != 0""];\n	""51"" [label=""if $stack6 != 0""];\n	""52"" [label=""if $stack7 == 4""];\n	""53"" [label=""if $stack9 == 0""];\n	""54"" [label=""if index != $stack18""];\n	""55"" [label=""if index != 0""];\n	""56"" [label=""if index != 0""];\n	""57"" [label=""if slavoGermanic != 0""];\n	""58"" [label=""index := @parameter2: int""];\n	""59"" [label=""index = index + 1""];\n	""60"" [label=""index = index + 1""];\n	""61"" [label=""index = index + 2""];\n	""62"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""63"" [label=""return index""];\n	""64"" [label=""slavoGermanic := @parameter3: boolean""];\n	""65"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""66"" [label=""value := @parameter0: java.lang.String""];\n	""67"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(72)""];\n	""68"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(74)""];\n	""69"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(74, 32)""];\n	""70"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(74, 65)""];\n	""71"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(74, 72)""];\n	""72"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(74, 72)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""54""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""45""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""46""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""21""[label=""cfg_next""];\n	""2"" -> ""42""[label=""cfg_next""];\n	""20"" -> ""16""[label=""cfg_next""];\n	""21"" -> ""47""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""48""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""49""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""50""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""51""[label=""cfg_next""];\n	""32"" -> ""52""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""53""[label=""cfg_next""];\n	""36"" -> ""59""[label=""cfg_goto""];\n	""37"" -> ""63""[label=""cfg_goto""];\n	""38"" -> ""14""[label=""cfg_goto""];\n	""39"" -> ""14""[label=""cfg_goto""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""14""[label=""cfg_goto""];\n	""41"" -> ""63""[label=""cfg_goto""];\n	""42"" -> ""32""[label=""cfg_false""];\n	""42"" -> ""67""[label=""cfg_true""];\n	""43"" -> ""55""[label=""cfg_false""];\n	""43"" -> ""56""[label=""cfg_true""];\n	""44"" -> ""57""[label=""cfg_false""];\n	""44"" -> ""9""[label=""cfg_true""];\n	""45"" -> ""14""[label=""cfg_true""];\n	""45"" -> ""20""[label=""cfg_false""];\n	""46"" -> ""60""[label=""cfg_true""];\n	""46"" -> ""61""[label=""cfg_false""];\n	""47"" -> ""14""[label=""cfg_true""];\n	""47"" -> ""68""[label=""cfg_false""];\n	""48"" -> ""24""[label=""cfg_false""];\n	""48"" -> ""72""[label=""cfg_true""];\n	""49"" -> ""72""[label=""cfg_false""];\n	""49"" -> ""9""[label=""cfg_true""];\n	""5"" -> ""43""[label=""cfg_next""];\n	""50"" -> ""6""[label=""cfg_true""];\n	""50"" -> ""70""[label=""cfg_false""];\n	""51"" -> ""3""[label=""cfg_false""];\n	""51"" -> ""55""[label=""cfg_true""];\n	""52"" -> ""33""[label=""cfg_false""];\n	""52"" -> ""67""[label=""cfg_true""];\n	""53"" -> ""67""[label=""cfg_false""];\n	""53"" -> ""71""[label=""cfg_true""];\n	""54"" -> ""12""[label=""cfg_true""];\n	""54"" -> ""69""[label=""cfg_false""];\n	""55"" -> ""1""[label=""cfg_false""];\n	""55"" -> ""32""[label=""cfg_true""];\n	""56"" -> ""26""[label=""cfg_false""];\n	""56"" -> ""6""[label=""cfg_true""];\n	""57"" -> ""22""[label=""cfg_false""];\n	""57"" -> ""9""[label=""cfg_true""];\n	""58"" -> ""64""[label=""cfg_next""];\n	""59"" -> ""37""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""63""[label=""cfg_next""];\n	""61"" -> ""41""[label=""cfg_next""];\n	""62"" -> ""58""[label=""cfg_next""];\n	""64"" -> ""29""[label=""cfg_next""];\n	""65"" -> ""66""[label=""cfg_next""];\n	""66"" -> ""62""[label=""cfg_next""];\n	""67"" -> ""36""[label=""cfg_next""];\n	""68"" -> ""14""[label=""cfg_next""];\n	""69"" -> ""40""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""38""[label=""cfg_next""];\n	""71"" -> ""59""[label=""cfg_next""];\n	""72"" -> ""39""[label=""cfg_next""];\n	""8"" -> ""44""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleL(String,DoubleMetaphoneResult,int)",Method,* Handles 'L' cases.,"private int handleL(final String value, final DoubleMetaphoneResult result, int index) {\n    if (charAt(value, index + 1) == 'L') {\n        if (conditionL0(value, index)) {\n            result.appendPrimary('L');\n        } else {\n            result.append('L');\n        }\n        index += 2;\n    } else {\n        index++;\n        result.append('L');\n    }\n    return index;\n}","int handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleL {\n	""1"" [label=""$stack4 = index + 1""];\n	""2"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack4)""];\n	""3"" [label=""$stack6 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean conditionL0(java.lang.String,int)>(value, index)""];\n	""4"" [label=""goto""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack5 != 76""];\n	""7"" [label=""if $stack6 == 0""];\n	""8"" [label=""index := @parameter2: int""];\n	""9"" [label=""index = index + 1""];\n	""10"" [label=""index = index + 2""];\n	""11"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""12"" [label=""return index""];\n	""13"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""14"" [label=""value := @parameter0: java.lang.String""];\n	""15"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(76)""];\n	""16"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(76)""];\n	""17"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendPrimary(char)>(76)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""5""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_goto""];\n	""5"" -> ""12""[label=""cfg_goto""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""9""[label=""cfg_true""];\n	""7"" -> ""15""[label=""cfg_true""];\n	""7"" -> ""17""[label=""cfg_false""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleP(String,DoubleMetaphoneResult,int)",Method,* Handles 'P' cases.,"private int handleP(final String value, final DoubleMetaphoneResult result, int index) {\n    if (charAt(value, index + 1) == 'H') {\n        result.append('F');\n        index += 2;\n    } else {\n        result.append('P');\n        index = contains(value, index + 1, 1, ""P"", ""B"") ? index + 2 : index + 1;\n    }\n    return index;\n}","int handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleP {\n	""1"" [label=""$stack4 = index + 1""];\n	""2"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack4)""];\n	""3"" [label=""$stack6 = newarray (java.lang.String)[2]""];\n	""4"" [label=""$stack6[0] = \""P\""""];\n	""5"" [label=""$stack6[1] = \""B\""""];\n	""6"" [label=""$stack7 = index + 1""];\n	""7"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack7, 1, $stack6)""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""if $stack5 != 72""];\n	""11"" [label=""if $stack8 == 0""];\n	""12"" [label=""index := @parameter2: int""];\n	""13"" [label=""index = index + 1""];\n	""14"" [label=""index = index + 2""];\n	""15"" [label=""index = index + 2""];\n	""16"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""17"" [label=""return index""];\n	""18"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""19"" [label=""value := @parameter0: java.lang.String""];\n	""20"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(70)""];\n	""21"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(80)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""20""[label=""cfg_false""];\n	""10"" -> ""21""[label=""cfg_true""];\n	""11"" -> ""13""[label=""cfg_true""];\n	""11"" -> ""15""[label=""cfg_false""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""17""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""15"" -> ""9""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""20"" -> ""14""[label=""cfg_next""];\n	""21"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""17""[label=""cfg_goto""];\n	""9"" -> ""17""[label=""cfg_goto""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean)",Method,* Handles 'R' cases.,"private int handleR(final String value, final DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n    if (index == value.length() - 1 && !slavoGermanic && contains(value, index - 2, 2, ""IE"") && !contains(value, index - 4, 2, ""ME"", ""MA"")) {\n        result.appendAlternate('R');\n    } else {\n        result.append('R');\n    }\n    return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;\n}","int handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)","digraph cfg_handleR {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[1]""];\n	""2"" [label=""$stack10[0] = \""IE\""""];\n	""3"" [label=""$stack11 = index - 2""];\n	""4"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack11, 2, $stack10)""];\n	""5"" [label=""$stack13 = newarray (java.lang.String)[2]""];\n	""6"" [label=""$stack13[0] = \""ME\""""];\n	""7"" [label=""$stack13[1] = \""MA\""""];\n	""8"" [label=""$stack14 = index - 4""];\n	""9"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack14, 2, $stack13)""];\n	""10"" [label=""$stack5 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""11"" [label=""$stack6 = $stack5 - 1""];\n	""12"" [label=""$stack7 = index + 1""];\n	""13"" [label=""$stack8 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack7)""];\n	""14"" [label=""$stack9 = index + 1""];\n	""15"" [label=""$stack9 = index + 2""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack12 == 0""];\n	""19"" [label=""if $stack15 != 0""];\n	""20"" [label=""if $stack8 != 82""];\n	""21"" [label=""if index != $stack6""];\n	""22"" [label=""if slavoGermanic != 0""];\n	""23"" [label=""index := @parameter2: int""];\n	""24"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""25"" [label=""return $stack9""];\n	""26"" [label=""slavoGermanic := @parameter3: boolean""];\n	""27"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""28"" [label=""value := @parameter0: java.lang.String""];\n	""29"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(82)""];\n	""30"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(char)>(82)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""21""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""20""[label=""cfg_next""];\n	""14"" -> ""25""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_goto""];\n	""17"" -> ""25""[label=""cfg_goto""];\n	""18"" -> ""29""[label=""cfg_true""];\n	""18"" -> ""8""[label=""cfg_false""];\n	""19"" -> ""29""[label=""cfg_true""];\n	""19"" -> ""30""[label=""cfg_false""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""14""[label=""cfg_true""];\n	""20"" -> ""15""[label=""cfg_false""];\n	""21"" -> ""22""[label=""cfg_false""];\n	""21"" -> ""29""[label=""cfg_true""];\n	""22"" -> ""29""[label=""cfg_true""];\n	""22"" -> ""3""[label=""cfg_false""];\n	""23"" -> ""26""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""26"" -> ""10""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""24""[label=""cfg_next""];\n	""29"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""30"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""18""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""19""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean)",Method,* Handles 'S' cases.,"private int handleS(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (contains(value, index - 1, 3, ""ISL"", ""YSL"")) {\n        //-- special cases ""island"", ""isle"", ""carlisle"", ""carlysle"" --//\n        index++;\n    } else if (index == 0 && contains(value, index, 5, ""SUGAR"")) {\n        //-- special case ""sugar-"" --//\n        result.append('X', 'S');\n        index++;\n    } else if (contains(value, index, 2, ""SH"")) {\n        if (contains(value, index + 1, 4, ""HEIM"", ""HOEK"", ""HOLM"", ""HOLZ"")) {\n            //-- germanic --//\n            result.append('S');\n        } else {\n            result.append('X');\n        }\n        index += 2;\n    } else if (contains(value, index, 3, ""SIO"", ""SIA"") || contains(value, index, 4, ""SIAN"")) {\n        //-- Italian and Armenian --//\n        if (slavoGermanic) {\n            result.append('S');\n        } else {\n            result.append('S', 'X');\n        }\n        index += 3;\n    } else if (index == 0 && contains(value, index + 1, 1, ""M"", ""N"", ""L"", ""W"") || contains(value, index + 1, 1, ""Z"")) {\n        //-- german & anglicisations, for example ""smith"" match ""schmidt"" //\n        // ""snider"" match ""schneider"" --//\n        //-- also, -sz- in slavic language although in hungarian it //\n        //   is pronounced ""s"" --//\n        result.append('S', 'X');\n        index = contains(value, index + 1, 1, ""Z"") ? index + 2 : index + 1;\n    } else if (contains(value, index, 2, ""SC"")) {\n        index = handleSC(value, result, index);\n    } else {\n        if (index == value.length() - 1 && contains(value, index - 2, 2, ""AI"", ""OI"")) {\n            //-- french for example ""resnais"", ""artois"" --//\n            result.appendAlternate('S');\n        } else {\n            result.append('S');\n        }\n        index = contains(value, index + 1, 1, ""S"", ""Z"") ? index + 2 : index + 1;\n    }\n    return index;\n}","int handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)","digraph cfg_handleS {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[2]""];\n	""2"" [label=""$stack10[0] = \""SIO\""""];\n	""3"" [label=""$stack10[1] = \""SIA\""""];\n	""4"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 3, $stack10)""];\n	""5"" [label=""$stack12 = newarray (java.lang.String)[1]""];\n	""6"" [label=""$stack12[0] = \""SIAN\""""];\n	""7"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack12)""];\n	""8"" [label=""$stack14 = newarray (java.lang.String)[1]""];\n	""9"" [label=""$stack14[0] = \""Z\""""];\n	""10"" [label=""$stack15 = index + 1""];\n	""11"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack15, 1, $stack14)""];\n	""12"" [label=""$stack17 = newarray (java.lang.String)[1]""];\n	""13"" [label=""$stack17[0] = \""SC\""""];\n	""14"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack17)""];\n	""15"" [label=""$stack19 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""16"" [label=""$stack20 = $stack19 - 1""];\n	""17"" [label=""$stack21 = newarray (java.lang.String)[2]""];\n	""18"" [label=""$stack21[0] = \""S\""""];\n	""19"" [label=""$stack21[1] = \""Z\""""];\n	""20"" [label=""$stack22 = index + 1""];\n	""21"" [label=""$stack23 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack22, 1, $stack21)""];\n	""22"" [label=""$stack24 = newarray (java.lang.String)[2]""];\n	""23"" [label=""$stack24[0] = \""AI\""""];\n	""24"" [label=""$stack24[1] = \""OI\""""];\n	""25"" [label=""$stack25 = index - 2""];\n	""26"" [label=""$stack26 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack25, 2, $stack24)""];\n	""27"" [label=""$stack27 = newarray (java.lang.String)[1]""];\n	""28"" [label=""$stack27[0] = \""Z\""""];\n	""29"" [label=""$stack28 = index + 1""];\n	""30"" [label=""$stack29 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack28, 1, $stack27)""];\n	""31"" [label=""$stack30 = newarray (java.lang.String)[4]""];\n	""32"" [label=""$stack30[0] = \""M\""""];\n	""33"" [label=""$stack30[1] = \""N\""""];\n	""34"" [label=""$stack30[2] = \""L\""""];\n	""35"" [label=""$stack30[3] = \""W\""""];\n	""36"" [label=""$stack31 = index + 1""];\n	""37"" [label=""$stack32 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack31, 1, $stack30)""];\n	""38"" [label=""$stack33 = newarray (java.lang.String)[4]""];\n	""39"" [label=""$stack33[0] = \""HEIM\""""];\n	""40"" [label=""$stack33[1] = \""HOEK\""""];\n	""41"" [label=""$stack33[2] = \""HOLM\""""];\n	""42"" [label=""$stack33[3] = \""HOLZ\""""];\n	""43"" [label=""$stack34 = index + 1""];\n	""44"" [label=""$stack35 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack34, 4, $stack33)""];\n	""45"" [label=""$stack36 = newarray (java.lang.String)[1]""];\n	""46"" [label=""$stack36[0] = \""SUGAR\""""];\n	""47"" [label=""$stack37 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 5, $stack36)""];\n	""48"" [label=""$stack5 = newarray (java.lang.String)[2]""];\n	""49"" [label=""$stack5[0] = \""ISL\""""];\n	""50"" [label=""$stack5[1] = \""YSL\""""];\n	""51"" [label=""$stack6 = index - 1""];\n	""52"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack6, 3, $stack5)""];\n	""53"" [label=""$stack8 = newarray (java.lang.String)[1]""];\n	""54"" [label=""$stack8[0] = \""SH\""""];\n	""55"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack8)""];\n	""56"" [label=""goto""];\n	""57"" [label=""goto""];\n	""58"" [label=""goto""];\n	""59"" [label=""goto""];\n	""60"" [label=""goto""];\n	""61"" [label=""goto""];\n	""62"" [label=""goto""];\n	""63"" [label=""goto""];\n	""64"" [label=""goto""];\n	""65"" [label=""goto""];\n	""66"" [label=""goto""];\n	""67"" [label=""if $stack11 != 0""];\n	""68"" [label=""if $stack13 == 0""];\n	""69"" [label=""if $stack16 == 0""];\n	""70"" [label=""if $stack18 == 0""];\n	""71"" [label=""if $stack23 == 0""];\n	""72"" [label=""if $stack26 == 0""];\n	""73"" [label=""if $stack29 == 0""];\n	""74"" [label=""if $stack32 != 0""];\n	""75"" [label=""if $stack35 == 0""];\n	""76"" [label=""if $stack37 == 0""];\n	""77"" [label=""if $stack7 == 0""];\n	""78"" [label=""if $stack9 == 0""];\n	""79"" [label=""if index != $stack20""];\n	""80"" [label=""if index != 0""];\n	""81"" [label=""if index != 0""];\n	""82"" [label=""if slavoGermanic == 0""];\n	""83"" [label=""index := @parameter2: int""];\n	""84"" [label=""index = index + 1""];\n	""85"" [label=""index = index + 1""];\n	""86"" [label=""index = index + 1""];\n	""87"" [label=""index = index + 1""];\n	""88"" [label=""index = index + 2""];\n	""89"" [label=""index = index + 2""];\n	""90"" [label=""index = index + 2""];\n	""91"" [label=""index = index + 3""];\n	""92"" [label=""index = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: int handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)>(value, result, index)""];\n	""93"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""94"" [label=""return index""];\n	""95"" [label=""slavoGermanic := @parameter3: boolean""];\n	""96"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""97"" [label=""value := @parameter0: java.lang.String""];\n	""98"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""99"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""100"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""101"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""102"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(83, 88)""];\n	""103"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(83, 88)""];\n	""104"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(88, 83)""];\n	""105"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(char)>(83)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""100"" -> ""20""[label=""cfg_next""];\n	""101"" -> ""88""[label=""cfg_next""];\n	""102"" -> ""91""[label=""cfg_next""];\n	""103"" -> ""29""[label=""cfg_next""];\n	""104"" -> ""85""[label=""cfg_next""];\n	""105"" -> ""65""[label=""cfg_next""];\n	""11"" -> ""69""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""70""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""79""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""21""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""17""[label=""cfg_next""];\n	""21"" -> ""71""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""22""[label=""cfg_next""];\n	""26"" -> ""72""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""27""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""73""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""37""[label=""cfg_next""];\n	""36"" -> ""31""[label=""cfg_next""];\n	""37"" -> ""74""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""67""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""44""[label=""cfg_next""];\n	""43"" -> ""38""[label=""cfg_next""];\n	""44"" -> ""75""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""76""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""52""[label=""cfg_next""];\n	""51"" -> ""48""[label=""cfg_next""];\n	""52"" -> ""77""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""78""[label=""cfg_next""];\n	""56"" -> ""94""[label=""cfg_goto""];\n	""57"" -> ""94""[label=""cfg_goto""];\n	""58"" -> ""88""[label=""cfg_goto""];\n	""59"" -> ""94""[label=""cfg_goto""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""91""[label=""cfg_goto""];\n	""61"" -> ""94""[label=""cfg_goto""];\n	""62"" -> ""63""[label=""cfg_goto""];\n	""63"" -> ""94""[label=""cfg_goto""];\n	""64"" -> ""94""[label=""cfg_goto""];\n	""65"" -> ""20""[label=""cfg_goto""];\n	""66"" -> ""94""[label=""cfg_goto""];\n	""67"" -> ""5""[label=""cfg_false""];\n	""67"" -> ""82""[label=""cfg_true""];\n	""68"" -> ""81""[label=""cfg_true""];\n	""68"" -> ""82""[label=""cfg_false""];\n	""69"" -> ""103""[label=""cfg_false""];\n	""69"" -> ""12""[label=""cfg_true""];\n	""7"" -> ""68""[label=""cfg_next""];\n	""70"" -> ""15""[label=""cfg_true""];\n	""70"" -> ""92""[label=""cfg_false""];\n	""71"" -> ""87""[label=""cfg_true""];\n	""71"" -> ""90""[label=""cfg_false""];\n	""72"" -> ""100""[label=""cfg_true""];\n	""72"" -> ""105""[label=""cfg_false""];\n	""73"" -> ""86""[label=""cfg_true""];\n	""73"" -> ""89""[label=""cfg_false""];\n	""74"" -> ""10""[label=""cfg_false""];\n	""74"" -> ""103""[label=""cfg_true""];\n	""75"" -> ""101""[label=""cfg_true""];\n	""75"" -> ""98""[label=""cfg_false""];\n	""76"" -> ""104""[label=""cfg_false""];\n	""76"" -> ""53""[label=""cfg_true""];\n	""77"" -> ""80""[label=""cfg_true""];\n	""77"" -> ""84""[label=""cfg_false""];\n	""78"" -> ""1""[label=""cfg_true""];\n	""78"" -> ""43""[label=""cfg_false""];\n	""79"" -> ""100""[label=""cfg_true""];\n	""79"" -> ""25""[label=""cfg_false""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""45""[label=""cfg_false""];\n	""80"" -> ""53""[label=""cfg_true""];\n	""81"" -> ""10""[label=""cfg_true""];\n	""81"" -> ""36""[label=""cfg_false""];\n	""82"" -> ""102""[label=""cfg_true""];\n	""82"" -> ""99""[label=""cfg_false""];\n	""83"" -> ""95""[label=""cfg_next""];\n	""84"" -> ""56""[label=""cfg_next""];\n	""85"" -> ""57""[label=""cfg_next""];\n	""86"" -> ""63""[label=""cfg_next""];\n	""87"" -> ""94""[label=""cfg_next""];\n	""88"" -> ""59""[label=""cfg_next""];\n	""89"" -> ""62""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n	""90"" -> ""66""[label=""cfg_next""];\n	""91"" -> ""61""[label=""cfg_next""];\n	""92"" -> ""64""[label=""cfg_next""];\n	""93"" -> ""83""[label=""cfg_next""];\n	""95"" -> ""51""[label=""cfg_next""];\n	""96"" -> ""97""[label=""cfg_next""];\n	""97"" -> ""93""[label=""cfg_next""];\n	""98"" -> ""58""[label=""cfg_next""];\n	""99"" -> ""60""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleSC(String,DoubleMetaphoneResult,int)",Method,* Handles 'SC' cases.,"private int handleSC(final String value, final DoubleMetaphoneResult result, final int index) {\n    if (charAt(value, index + 2) == 'H') {\n        //-- Schlesinger's rule --//\n        if (contains(value, index + 3, 2, ""OO"", ""ER"", ""EN"", ""UY"", ""ED"", ""EM"")) {\n            //-- Dutch origin, for example ""school"", ""schooner"" --//\n            if (contains(value, index + 3, 2, ""ER"", ""EN"")) {\n                //-- ""schermerhorn"", ""schenker"" --//\n                result.append(""X"", ""SK"");\n            } else {\n                result.append(""SK"");\n            }\n        } else if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') {\n            result.append('X', 'S');\n        } else {\n            result.append('X');\n        }\n    } else if (contains(value, index + 2, 1, ""I"", ""E"", ""Y"")) {\n        result.append('S');\n    } else {\n        result.append(""SK"");\n    }\n    return index + 3;\n}","int handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleSC {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[6]""];\n	""2"" [label=""$stack10[0] = \""OO\""""];\n	""3"" [label=""$stack10[1] = \""ER\""""];\n	""4"" [label=""$stack10[2] = \""EN\""""];\n	""5"" [label=""$stack10[3] = \""UY\""""];\n	""6"" [label=""$stack10[4] = \""ED\""""];\n	""7"" [label=""$stack10[5] = \""EM\""""];\n	""8"" [label=""$stack11 = index + 3""];\n	""9"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack11, 2, $stack10)""];\n	""10"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, 3)""];\n	""11"" [label=""$stack14 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack13)""];\n	""12"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, 3)""];\n	""13"" [label=""$stack16 = newarray (java.lang.String)[2]""];\n	""14"" [label=""$stack16[0] = \""ER\""""];\n	""15"" [label=""$stack16[1] = \""EN\""""];\n	""16"" [label=""$stack17 = index + 3""];\n	""17"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack17, 2, $stack16)""];\n	""18"" [label=""$stack4 = index + 2""];\n	""19"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack4)""];\n	""20"" [label=""$stack6 = newarray (java.lang.String)[3]""];\n	""21"" [label=""$stack6[0] = \""I\""""];\n	""22"" [label=""$stack6[1] = \""E\""""];\n	""23"" [label=""$stack6[2] = \""Y\""""];\n	""24"" [label=""$stack7 = index + 2""];\n	""25"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack7, 1, $stack6)""];\n	""26"" [label=""$stack9 = index + 3""];\n	""27"" [label=""goto""];\n	""28"" [label=""goto""];\n	""29"" [label=""goto""];\n	""30"" [label=""goto""];\n	""31"" [label=""goto""];\n	""32"" [label=""if $stack12 == 0""];\n	""33"" [label=""if $stack14 != 0""];\n	""34"" [label=""if $stack15 == 87""];\n	""35"" [label=""if $stack18 == 0""];\n	""36"" [label=""if $stack5 != 72""];\n	""37"" [label=""if $stack8 == 0""];\n	""38"" [label=""if index != 0""];\n	""39"" [label=""index := @parameter2: int""];\n	""40"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""41"" [label=""return $stack9""];\n	""42"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""43"" [label=""value := @parameter0: java.lang.String""];\n	""44"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""45"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""46"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(88, 83)""];\n	""47"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""SK\"")""];\n	""48"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""SK\"")""];\n	""49"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""X\"", \""SK\"")""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""33""[label=""cfg_next""];\n	""12"" -> ""34""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""17""[label=""cfg_next""];\n	""16"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""35""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""36""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""25""[label=""cfg_next""];\n	""24"" -> ""20""[label=""cfg_next""];\n	""25"" -> ""37""[label=""cfg_next""];\n	""26"" -> ""41""[label=""cfg_next""];\n	""27"" -> ""26""[label=""cfg_goto""];\n	""28"" -> ""26""[label=""cfg_goto""];\n	""29"" -> ""26""[label=""cfg_goto""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""26""[label=""cfg_goto""];\n	""31"" -> ""26""[label=""cfg_goto""];\n	""32"" -> ""16""[label=""cfg_false""];\n	""32"" -> ""38""[label=""cfg_true""];\n	""33"" -> ""12""[label=""cfg_false""];\n	""33"" -> ""45""[label=""cfg_true""];\n	""34"" -> ""45""[label=""cfg_true""];\n	""34"" -> ""46""[label=""cfg_false""];\n	""35"" -> ""47""[label=""cfg_true""];\n	""35"" -> ""49""[label=""cfg_false""];\n	""36"" -> ""24""[label=""cfg_true""];\n	""36"" -> ""8""[label=""cfg_false""];\n	""37"" -> ""44""[label=""cfg_false""];\n	""37"" -> ""48""[label=""cfg_true""];\n	""38"" -> ""10""[label=""cfg_false""];\n	""38"" -> ""45""[label=""cfg_true""];\n	""39"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""39""[label=""cfg_next""];\n	""42"" -> ""43""[label=""cfg_next""];\n	""43"" -> ""40""[label=""cfg_next""];\n	""44"" -> ""31""[label=""cfg_next""];\n	""45"" -> ""30""[label=""cfg_next""];\n	""46"" -> ""29""[label=""cfg_next""];\n	""47"" -> ""28""[label=""cfg_next""];\n	""48"" -> ""26""[label=""cfg_next""];\n	""49"" -> ""27""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""32""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleT(String,DoubleMetaphoneResult,int)",Method,* Handles 'T' cases.,"private int handleT(final String value, final DoubleMetaphoneResult result, int index) {\n    if (contains(value, index, 4, ""TION"") || contains(value, index, 3, ""TIA"", ""TCH"")) {\n        result.append('X');\n        index += 3;\n    } else if (contains(value, index, 2, ""TH"") || contains(value, index, 3, ""TTH"")) {\n        if (contains(value, index + 2, 2, ""OM"", ""AM"") || //-- special case ""thomas"", ""thames"" or germanic --//\n        contains(value, 0, 4, ""VAN "", ""VON "") || contains(value, 0, 3, ""SCH"")) {\n            result.append('T');\n        } else {\n            result.append('0', 'T');\n        }\n        index += 2;\n    } else {\n        result.append('T');\n        index = contains(value, index + 1, 1, ""T"", ""D"") ? index + 2 : index + 1;\n    }\n    return index;\n}","int handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleT {\n	""1"" [label=""$stack10 = newarray (java.lang.String)[2]""];\n	""2"" [label=""$stack10[0] = \""OM\""""];\n	""3"" [label=""$stack10[1] = \""AM\""""];\n	""4"" [label=""$stack11 = index + 2""];\n	""5"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack11, 2, $stack10)""];\n	""6"" [label=""$stack13 = newarray (java.lang.String)[2]""];\n	""7"" [label=""$stack13[0] = \""VAN \""""];\n	""8"" [label=""$stack13[1] = \""VON \""""];\n	""9"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 4, $stack13)""];\n	""10"" [label=""$stack15 = newarray (java.lang.String)[1]""];\n	""11"" [label=""$stack15[0] = \""SCH\""""];\n	""12"" [label=""$stack16 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 3, $stack15)""];\n	""13"" [label=""$stack17 = newarray (java.lang.String)[1]""];\n	""14"" [label=""$stack17[0] = \""TTH\""""];\n	""15"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 3, $stack17)""];\n	""16"" [label=""$stack19 = newarray (java.lang.String)[2]""];\n	""17"" [label=""$stack19[0] = \""T\""""];\n	""18"" [label=""$stack19[1] = \""D\""""];\n	""19"" [label=""$stack20 = index + 1""];\n	""20"" [label=""$stack21 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack20, 1, $stack19)""];\n	""21"" [label=""$stack4 = newarray (java.lang.String)[1]""];\n	""22"" [label=""$stack4[0] = \""TION\""""];\n	""23"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack4)""];\n	""24"" [label=""$stack6 = newarray (java.lang.String)[2]""];\n	""25"" [label=""$stack6[0] = \""TIA\""""];\n	""26"" [label=""$stack6[1] = \""TCH\""""];\n	""27"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 3, $stack6)""];\n	""28"" [label=""$stack8 = newarray (java.lang.String)[1]""];\n	""29"" [label=""$stack8[0] = \""TH\""""];\n	""30"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack8)""];\n	""31"" [label=""goto""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""if $stack12 != 0""];\n	""36"" [label=""if $stack14 != 0""];\n	""37"" [label=""if $stack16 == 0""];\n	""38"" [label=""if $stack18 == 0""];\n	""39"" [label=""if $stack21 == 0""];\n	""40"" [label=""if $stack5 != 0""];\n	""41"" [label=""if $stack7 == 0""];\n	""42"" [label=""if $stack9 != 0""];\n	""43"" [label=""index := @parameter2: int""];\n	""44"" [label=""index = index + 1""];\n	""45"" [label=""index = index + 2""];\n	""46"" [label=""index = index + 2""];\n	""47"" [label=""index = index + 3""];\n	""48"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""49"" [label=""return index""];\n	""50"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""51"" [label=""value := @parameter0: java.lang.String""];\n	""52"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(84)""];\n	""53"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(84)""];\n	""54"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(88)""];\n	""55"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(48, 84)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""37""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""38""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""39""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""40""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""41""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""30"" -> ""42""[label=""cfg_next""];\n	""31"" -> ""49""[label=""cfg_goto""];\n	""32"" -> ""45""[label=""cfg_goto""];\n	""33"" -> ""49""[label=""cfg_goto""];\n	""34"" -> ""49""[label=""cfg_goto""];\n	""35"" -> ""53""[label=""cfg_true""];\n	""35"" -> ""6""[label=""cfg_false""];\n	""36"" -> ""10""[label=""cfg_false""];\n	""36"" -> ""53""[label=""cfg_true""];\n	""37"" -> ""53""[label=""cfg_false""];\n	""37"" -> ""55""[label=""cfg_true""];\n	""38"" -> ""4""[label=""cfg_false""];\n	""38"" -> ""52""[label=""cfg_true""];\n	""39"" -> ""44""[label=""cfg_true""];\n	""39"" -> ""46""[label=""cfg_false""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""40"" -> ""24""[label=""cfg_false""];\n	""40"" -> ""54""[label=""cfg_true""];\n	""41"" -> ""28""[label=""cfg_true""];\n	""41"" -> ""54""[label=""cfg_false""];\n	""42"" -> ""13""[label=""cfg_false""];\n	""42"" -> ""4""[label=""cfg_true""];\n	""43"" -> ""21""[label=""cfg_next""];\n	""44"" -> ""49""[label=""cfg_next""];\n	""45"" -> ""33""[label=""cfg_next""];\n	""46"" -> ""34""[label=""cfg_next""];\n	""47"" -> ""31""[label=""cfg_next""];\n	""48"" -> ""43""[label=""cfg_next""];\n	""5"" -> ""35""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""48""[label=""cfg_next""];\n	""52"" -> ""19""[label=""cfg_next""];\n	""53"" -> ""32""[label=""cfg_next""];\n	""54"" -> ""47""[label=""cfg_next""];\n	""55"" -> ""45""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""36""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleW(String,DoubleMetaphoneResult,int)",Method,* Handles 'W' cases.,"private int handleW(final String value, final DoubleMetaphoneResult result, int index) {\n    if (contains(value, index, 2, ""WR"")) {\n        //-- can also be in middle of word --//\n        result.append('R');\n        index += 2;\n    } else if (index == 0 && (isVowel(charAt(value, index + 1)) || contains(value, index, 2, ""WH""))) {\n        if (isVowel(charAt(value, index + 1))) {\n            //-- Wasserman should match Vasserman --//\n            result.append('A', 'F');\n        } else {\n            //-- need Uomo to match Womo --//\n            result.append('A');\n        }\n        index++;\n    } else if (index == value.length() - 1 && isVowel(charAt(value, index - 1)) || contains(value, index - 1, 5, ""EWSKI"", ""EWSKY"", ""OWSKI"", ""OWSKY"") || contains(value, 0, 3, ""SCH"")) {\n        //-- Arnow should match Arnoff --//\n        result.appendAlternate('F');\n        index++;\n    } else if (contains(value, index, 4, ""WICZ"", ""WITZ"")) {\n        //-- Polish for example ""filipowicz"" --//\n        result.append(""TS"", ""FX"");\n        index += 4;\n    } else {\n        index++;\n    }\n    return index;\n}","int handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleW {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack9, 5, $stack8)""];\n	""2"" [label=""$stack11 = newarray (java.lang.String)[1]""];\n	""3"" [label=""$stack11[0] = \""SCH\""""];\n	""4"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, 0, 3, $stack11)""];\n	""5"" [label=""$stack13 = newarray (java.lang.String)[2]""];\n	""6"" [label=""$stack13[0] = \""WICZ\""""];\n	""7"" [label=""$stack13[1] = \""WITZ\""""];\n	""8"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 4, $stack13)""];\n	""9"" [label=""$stack15 = index - 1""];\n	""10"" [label=""$stack16 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack15)""];\n	""11"" [label=""$stack17 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack16)""];\n	""12"" [label=""$stack18 = index + 1""];\n	""13"" [label=""$stack19 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack18)""];\n	""14"" [label=""$stack20 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack19)""];\n	""15"" [label=""$stack21 = index + 1""];\n	""16"" [label=""$stack22 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack21)""];\n	""17"" [label=""$stack23 = specialinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isVowel(char)>($stack22)""];\n	""18"" [label=""$stack24 = newarray (java.lang.String)[1]""];\n	""19"" [label=""$stack24[0] = \""WH\""""];\n	""20"" [label=""$stack25 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack24)""];\n	""21"" [label=""$stack4 = newarray (java.lang.String)[1]""];\n	""22"" [label=""$stack4[0] = \""WR\""""];\n	""23"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, index, 2, $stack4)""];\n	""24"" [label=""$stack6 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""25"" [label=""$stack7 = $stack6 - 1""];\n	""26"" [label=""$stack8 = newarray (java.lang.String)[4]""];\n	""27"" [label=""$stack8[0] = \""EWSKI\""""];\n	""28"" [label=""$stack8[1] = \""EWSKY\""""];\n	""29"" [label=""$stack8[2] = \""OWSKI\""""];\n	""30"" [label=""$stack8[3] = \""OWSKY\""""];\n	""31"" [label=""$stack9 = index - 1""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""if $stack10 != 0""];\n	""38"" [label=""if $stack12 == 0""];\n	""39"" [label=""if $stack14 == 0""];\n	""40"" [label=""if $stack17 != 0""];\n	""41"" [label=""if $stack20 != 0""];\n	""42"" [label=""if $stack23 == 0""];\n	""43"" [label=""if $stack25 == 0""];\n	""44"" [label=""if $stack5 == 0""];\n	""45"" [label=""if index != $stack7""];\n	""46"" [label=""if index != 0""];\n	""47"" [label=""index := @parameter2: int""];\n	""48"" [label=""index = index + 1""];\n	""49"" [label=""index = index + 1""];\n	""50"" [label=""index = index + 1""];\n	""51"" [label=""index = index + 2""];\n	""52"" [label=""index = index + 4""];\n	""53"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""54"" [label=""return index""];\n	""55"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""56"" [label=""value := @parameter0: java.lang.String""];\n	""57"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(65)""];\n	""58"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(82)""];\n	""59"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char,char)>(65, 70)""];\n	""60"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""TS\"", \""FX\"")""];\n	""61"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(char)>(70)""];\n	""1"" -> ""37""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""40""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""41""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""42""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""43""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""44""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""45""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""1""[label=""cfg_next""];\n	""31"" -> ""26""[label=""cfg_next""];\n	""32"" -> ""54""[label=""cfg_goto""];\n	""33"" -> ""48""[label=""cfg_goto""];\n	""34"" -> ""54""[label=""cfg_goto""];\n	""35"" -> ""54""[label=""cfg_goto""];\n	""36"" -> ""54""[label=""cfg_goto""];\n	""37"" -> ""2""[label=""cfg_false""];\n	""37"" -> ""61""[label=""cfg_true""];\n	""38"" -> ""5""[label=""cfg_true""];\n	""38"" -> ""61""[label=""cfg_false""];\n	""39"" -> ""50""[label=""cfg_true""];\n	""39"" -> ""60""[label=""cfg_false""];\n	""4"" -> ""38""[label=""cfg_next""];\n	""40"" -> ""31""[label=""cfg_false""];\n	""40"" -> ""61""[label=""cfg_true""];\n	""41"" -> ""15""[label=""cfg_true""];\n	""41"" -> ""18""[label=""cfg_false""];\n	""42"" -> ""57""[label=""cfg_true""];\n	""42"" -> ""59""[label=""cfg_false""];\n	""43"" -> ""15""[label=""cfg_false""];\n	""43"" -> ""24""[label=""cfg_true""];\n	""44"" -> ""46""[label=""cfg_true""];\n	""44"" -> ""58""[label=""cfg_false""];\n	""45"" -> ""31""[label=""cfg_true""];\n	""45"" -> ""9""[label=""cfg_false""];\n	""46"" -> ""12""[label=""cfg_false""];\n	""46"" -> ""24""[label=""cfg_true""];\n	""47"" -> ""21""[label=""cfg_next""];\n	""48"" -> ""34""[label=""cfg_next""];\n	""49"" -> ""35""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""54""[label=""cfg_next""];\n	""51"" -> ""32""[label=""cfg_next""];\n	""52"" -> ""36""[label=""cfg_next""];\n	""53"" -> ""47""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""53""[label=""cfg_next""];\n	""57"" -> ""48""[label=""cfg_next""];\n	""58"" -> ""51""[label=""cfg_next""];\n	""59"" -> ""33""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""52""[label=""cfg_next""];\n	""61"" -> ""49""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""39""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleX(String,DoubleMetaphoneResult,int)",Method,* Handles 'X' cases.,"private int handleX(final String value, final DoubleMetaphoneResult result, int index) {\n    if (index == 0) {\n        result.append('S');\n        index++;\n    } else {\n        if (!(index == value.length() - 1 && (contains(value, index - 3, 3, ""IAU"", ""EAU"") || contains(value, index - 2, 2, ""AU"", ""OU"")))) {\n            //-- French for example breaux --//\n            result.append(""KS"");\n        }\n        index = contains(value, index + 1, 1, ""C"", ""X"") ? index + 2 : index + 1;\n    }\n    return index;\n}","int handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)","digraph cfg_handleX {\n	""1"" [label=""$stack10 = index - 3""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack10, 3, $stack9)""];\n	""3"" [label=""$stack12 = newarray (java.lang.String)[2]""];\n	""4"" [label=""$stack12[0] = \""AU\""""];\n	""5"" [label=""$stack12[1] = \""OU\""""];\n	""6"" [label=""$stack13 = index - 2""];\n	""7"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack13, 2, $stack12)""];\n	""8"" [label=""$stack4 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""9"" [label=""$stack5 = $stack4 - 1""];\n	""10"" [label=""$stack6 = newarray (java.lang.String)[2]""];\n	""11"" [label=""$stack6[0] = \""C\""""];\n	""12"" [label=""$stack6[1] = \""X\""""];\n	""13"" [label=""$stack7 = index + 1""];\n	""14"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack7, 1, $stack6)""];\n	""15"" [label=""$stack9 = newarray (java.lang.String)[2]""];\n	""16"" [label=""$stack9[0] = \""IAU\""""];\n	""17"" [label=""$stack9[1] = \""EAU\""""];\n	""18"" [label=""goto""];\n	""19"" [label=""goto""];\n	""20"" [label=""if $stack11 != 0""];\n	""21"" [label=""if $stack14 != 0""];\n	""22"" [label=""if $stack8 == 0""];\n	""23"" [label=""if index != $stack5""];\n	""24"" [label=""if index != 0""];\n	""25"" [label=""index := @parameter2: int""];\n	""26"" [label=""index = index + 1""];\n	""27"" [label=""index = index + 1""];\n	""28"" [label=""index = index + 2""];\n	""29"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""30"" [label=""return index""];\n	""31"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""32"" [label=""value := @parameter0: java.lang.String""];\n	""33"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""34"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String)>(\""KS\"")""];\n	""1"" -> ""15""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""14"" -> ""22""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""30""[label=""cfg_goto""];\n	""19"" -> ""30""[label=""cfg_goto""];\n	""2"" -> ""20""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_true""];\n	""20"" -> ""6""[label=""cfg_false""];\n	""21"" -> ""13""[label=""cfg_true""];\n	""21"" -> ""34""[label=""cfg_false""];\n	""22"" -> ""27""[label=""cfg_true""];\n	""22"" -> ""28""[label=""cfg_false""];\n	""23"" -> ""1""[label=""cfg_false""];\n	""23"" -> ""34""[label=""cfg_true""];\n	""24"" -> ""33""[label=""cfg_false""];\n	""24"" -> ""8""[label=""cfg_true""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""26"" -> ""18""[label=""cfg_next""];\n	""27"" -> ""30""[label=""cfg_next""];\n	""28"" -> ""19""[label=""cfg_next""];\n	""29"" -> ""25""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""29""[label=""cfg_next""];\n	""33"" -> ""26""[label=""cfg_next""];\n	""34"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean)",Method,* Handles 'Z' cases.,"private int handleZ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        //-- Chinese pinyin for example ""zhao"" or Angelina ""Zhang"" --//\n        result.append('J');\n        index += 2;\n    } else {\n        if (contains(value, index + 1, 2, ""ZO"", ""ZI"", ""ZA"") || slavoGermanic && index > 0 && charAt(value, index - 1) != 'T') {\n            result.append(""S"", ""TS"");\n        } else {\n            result.append('S');\n        }\n        index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;\n    }\n    return index;\n}","int handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)","digraph cfg_handleZ {\n	""1"" [label=""$stack10 = index + 1""];\n	""2"" [label=""$stack11 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack10)""];\n	""3"" [label=""$stack12 = index - 1""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack12)""];\n	""5"" [label=""$stack5 = index + 1""];\n	""6"" [label=""$stack6 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: char charAt(java.lang.String,int)>(value, $stack5)""];\n	""7"" [label=""$stack7 = newarray (java.lang.String)[3]""];\n	""8"" [label=""$stack7[0] = \""ZO\""""];\n	""9"" [label=""$stack7[1] = \""ZI\""""];\n	""10"" [label=""$stack7[2] = \""ZA\""""];\n	""11"" [label=""$stack8 = index + 1""];\n	""12"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.DoubleMetaphone: boolean contains(java.lang.String,int,int,java.lang.String[])>(value, $stack8, 2, $stack7)""];\n	""13"" [label=""goto""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack11 != 90""];\n	""17"" [label=""if $stack13 == 84""];\n	""18"" [label=""if $stack6 != 72""];\n	""19"" [label=""if $stack9 != 0""];\n	""20"" [label=""if index <= 0""];\n	""21"" [label=""if slavoGermanic == 0""];\n	""22"" [label=""index := @parameter2: int""];\n	""23"" [label=""index = index + 1""];\n	""24"" [label=""index = index + 2""];\n	""25"" [label=""index = index + 2""];\n	""26"" [label=""result := @parameter1: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""27"" [label=""return index""];\n	""28"" [label=""slavoGermanic := @parameter3: boolean""];\n	""29"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""30"" [label=""value := @parameter0: java.lang.String""];\n	""31"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(74)""];\n	""32"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(char)>(83)""];\n	""33"" [label=""virtualinvoke result.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void append(java.lang.String,java.lang.String)>(\""S\"", \""TS\"")""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""19""[label=""cfg_next""];\n	""13"" -> ""27""[label=""cfg_goto""];\n	""14"" -> ""1""[label=""cfg_goto""];\n	""15"" -> ""27""[label=""cfg_goto""];\n	""16"" -> ""23""[label=""cfg_true""];\n	""16"" -> ""25""[label=""cfg_false""];\n	""17"" -> ""32""[label=""cfg_true""];\n	""17"" -> ""33""[label=""cfg_false""];\n	""18"" -> ""11""[label=""cfg_true""];\n	""18"" -> ""31""[label=""cfg_false""];\n	""19"" -> ""21""[label=""cfg_false""];\n	""19"" -> ""33""[label=""cfg_true""];\n	""2"" -> ""16""[label=""cfg_next""];\n	""20"" -> ""3""[label=""cfg_false""];\n	""20"" -> ""32""[label=""cfg_true""];\n	""21"" -> ""20""[label=""cfg_false""];\n	""21"" -> ""32""[label=""cfg_true""];\n	""22"" -> ""28""[label=""cfg_next""];\n	""23"" -> ""27""[label=""cfg_next""];\n	""24"" -> ""13""[label=""cfg_next""];\n	""25"" -> ""15""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""28"" -> ""5""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""26""[label=""cfg_next""];\n	""31"" -> ""24""[label=""cfg_next""];\n	""32"" -> ""1""[label=""cfg_next""];\n	""33"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""18""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String)",Method,"* Check if the Double Metaphone values of two {@code String} values\n     * are equal.\n     *\n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @return {@code true} if the encoded {@code String}s are equal;\n     *          {@code false} otherwise.\n     * @see #isDoubleMetaphoneEqual(String,String,boolean)","public boolean isDoubleMetaphoneEqual(final String value1, final String value2) {\n    return isDoubleMetaphoneEqual(value1, value2, false);\n}","boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String)","digraph cfg_isDoubleMetaphoneEqual {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)>(value1, value2, 0)""];\n	""2"" [label=""return $stack3""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""4"" [label=""value1 := @parameter0: java.lang.String""];\n	""5"" [label=""value2 := @parameter1: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean)",Method,"* Check if the Double Metaphone values of two {@code String} values\n     * are equal, optionally using the alternate value.\n     *\n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @param alternate use the alternate value if {@code true}.\n     * @return {@code true} if the encoded {@code String}s are equal;\n     *          {@code false} otherwise.","public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n    return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n}","boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean)","digraph cfg_isDoubleMetaphoneEqual {\n	""1"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String doubleMetaphone(java.lang.String,boolean)>(value2, alternate)""];\n	""2"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String doubleMetaphone(java.lang.String,boolean)>(value1, alternate)""];\n	""3"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($stack5, $stack4)""];\n	""4"" [label=""alternate := @parameter2: boolean""];\n	""5"" [label=""return $stack6""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""7"" [label=""value1 := @parameter0: java.lang.String""];\n	""8"" [label=""value2 := @parameter1: java.lang.String""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(String),Method,"* Determines whether or not the value starts with a silent letter.  It will\n     * return {@code true} if the value starts with any of 'GN', 'KN',\n     * 'PN', 'WR' or 'PS'.",private boolean isSilentStart(final String value) {\n    boolean result = false;\n    for (final String element : SILENT_START) {\n        if (value.startsWith(element)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n},boolean isSilentStart(java.lang.String),"digraph cfg_isSilentStart {\n	""1"" [label=""$stack7 = virtualinvoke value.<java.lang.String: boolean startsWith(java.lang.String)>(element)""];\n	""2"" [label=""element = l3[l5]""];\n	""3"" [label=""goto""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack7 == 0""];\n	""6"" [label=""if l5 >= l4""];\n	""7"" [label=""l3 = <org.apache.commons.codec.language.DoubleMetaphone: java.lang.String[] SILENT_START>""];\n	""8"" [label=""l4 = lengthof l3""];\n	""9"" [label=""l5 = 0""];\n	""10"" [label=""l5 = l5 + 1""];\n	""11"" [label=""result = 0""];\n	""12"" [label=""result = 1""];\n	""13"" [label=""return result""];\n	""14"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""15"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""3""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_goto""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""10""[label=""cfg_true""];\n	""5"" -> ""12""[label=""cfg_false""];\n	""6"" -> ""13""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(String),Method,"* Determines whether or not a value is of slavo-germanic origin. A value is\n     * of slavo-germanic origin if it contains any of 'W', 'K', 'CZ', or 'WITZ'.","private boolean isSlavoGermanic(final String value) {\n    return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.contains(""CZ"") || value.contains(""WITZ"");\n}",boolean isSlavoGermanic(java.lang.String),"digraph cfg_isSlavoGermanic {\n	""1"" [label=""$stack2 = virtualinvoke value.<java.lang.String: int indexOf(int)>(87)""];\n	""2"" [label=""$stack3 = virtualinvoke value.<java.lang.String: int indexOf(int)>(75)""];\n	""3"" [label=""$stack4 = virtualinvoke value.<java.lang.String: boolean contains(java.lang.CharSequence)>(\""CZ\"")""];\n	""4"" [label=""$stack5 = virtualinvoke value.<java.lang.String: boolean contains(java.lang.CharSequence)>(\""WITZ\"")""];\n	""5"" [label=""$stack6 = 0""];\n	""6"" [label=""$stack6 = 1""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack2 > -1""];\n	""9"" [label=""if $stack3 > -1""];\n	""10"" [label=""if $stack4 != 0""];\n	""11"" [label=""if $stack5 == 0""];\n	""12"" [label=""return $stack6""];\n	""13"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""14"" [label=""value := @parameter0: java.lang.String""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_false""];\n	""10"" -> ""6""[label=""cfg_true""];\n	""11"" -> ""5""[label=""cfg_true""];\n	""11"" -> ""6""[label=""cfg_false""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_goto""];\n	""8"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""6""[label=""cfg_true""];\n	""9"" -> ""3""[label=""cfg_false""];\n	""9"" -> ""6""[label=""cfg_true""];\n}\n",private 
org.apache.commons.codec.language.DoubleMetaphone.isVowel(char),Method,* Determines whether or not a character is a vowel or not,private boolean isVowel(final char ch) {\n    return VOWELS.indexOf(ch) != -1;\n},boolean isVowel(char),"digraph cfg_isVowel {\n	""1"" [label=""$stack2 = \""AEIOUY\""""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.String: int indexOf(int)>(ch)""];\n	""3"" [label=""$stack4 = 0""];\n	""4"" [label=""$stack4 = 1""];\n	""5"" [label=""ch := @parameter0: char""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack3 == -1""];\n	""8"" [label=""return $stack4""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_goto""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""7"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int),Method,* Sets the maxCodeLen.\n     * @param maxCodeLen The maxCodeLen to set,public void setMaxCodeLen(final int maxCodeLen) {\n    this.maxCodeLen = maxCodeLen;\n},void setMaxCodeLen(int),"digraph cfg_setMaxCodeLen {\n	""1"" [label=""maxCodeLen := @parameter0: int""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""4"" [label=""this.<org.apache.commons.codec.language.DoubleMetaphone: int maxCodeLen> = maxCodeLen""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone.<init>(),Constructor,* Constructs a new instance.,public DoubleMetaphone() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone""];\n	""4"" [label=""this.<org.apache.commons.codec.language.DoubleMetaphone: int maxCodeLen> = 4""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char),Method,* Appends the given value as primary and alternative.\n         *\n         * @param value The value to append.,public void append(final char value) {\n    appendPrimary(value);\n    appendAlternate(value);\n},void append(char),"digraph cfg_append {\n	""1"" [label=""return""];\n	""2"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""3"" [label=""value := @parameter0: char""];\n	""4"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(char)>(value)""];\n	""5"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendPrimary(char)>(value)""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)",Method,* Appends the given primary and alternative values.\n         *\n         * @param primary   The primary value.\n         * @param alternate The alternate value.,"public void append(final char primary, final char alternate) {\n    appendPrimary(primary);\n    appendAlternate(alternate);\n}","void append(char,char)","digraph cfg_append {\n	""1"" [label=""alternate := @parameter1: char""];\n	""2"" [label=""primary := @parameter0: char""];\n	""3"" [label=""return""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""5"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(char)>(alternate)""];\n	""6"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendPrimary(char)>(primary)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String),Method,* Appends the given value as primary and alternative.\n         *\n         * @param value The value to append.,public void append(final String value) {\n    appendPrimary(value);\n    appendAlternate(value);\n},void append(java.lang.String),"digraph cfg_append {\n	""1"" [label=""return""];\n	""2"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""3"" [label=""value := @parameter0: java.lang.String""];\n	""4"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(java.lang.String)>(value)""];\n	""5"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendPrimary(java.lang.String)>(value)""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String,String)",Method,* Appends the given primary and alternative values.\n         *\n         * @param primary   The primary value.\n         * @param alternate The alternate value.,"public void append(final String primary, final String alternate) {\n    appendPrimary(primary);\n    appendAlternate(alternate);\n}","void append(java.lang.String,java.lang.String)","digraph cfg_append {\n	""1"" [label=""alternate := @parameter1: java.lang.String""];\n	""2"" [label=""primary := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""5"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendAlternate(java.lang.String)>(alternate)""];\n	""6"" [label=""virtualinvoke this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: void appendPrimary(java.lang.String)>(primary)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char),Method,* Appends the given value as alternative.\n         *\n         * @param value The value to append.,public void appendAlternate(final char value) {\n    if (this.alternate.length() < this.maxLength) {\n        this.alternate.append(value);\n    }\n},void appendAlternate(char),"digraph cfg_appendAlternate {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""3"" [label=""$stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack5 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""5"" [label=""if $stack4 >= $stack3""];\n	""6"" [label=""return""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""8"" [label=""value := @parameter0: char""];\n	""9"" [label=""virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(value)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""5"" -> ""6""[label=""cfg_true""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(String),Method,* Appends the given value as alternative.\n         *\n         * @param value The value to append.,"public void appendAlternate(final String value) {\n    final int addChars = this.maxLength - this.alternate.length();\n    if (value.length() <= addChars) {\n        this.alternate.append(value);\n    } else {\n        this.alternate.append(value, 0, addChars);\n    }\n}",void appendAlternate(java.lang.String),"digraph cfg_appendAlternate {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""2"" [label=""$stack4 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""3"" [label=""$stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack6 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""5"" [label=""$stack7 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""6"" [label=""$stack8 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""7"" [label=""addChars = $stack4 - $stack5""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack6 > addChars""];\n	""10"" [label=""return""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""12"" [label=""value := @parameter0: java.lang.String""];\n	""13"" [label=""virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(value, 0, addChars)""];\n	""14"" [label=""virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_goto""];\n	""9"" -> ""5""[label=""cfg_true""];\n	""9"" -> ""6""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char),Method,* Appends the given value as primary.\n         *\n         * @param value The value to append.,public void appendPrimary(final char value) {\n    if (this.primary.length() < this.maxLength) {\n        this.primary.append(value);\n    }\n},void appendPrimary(char),"digraph cfg_appendPrimary {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""3"" [label=""$stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack5 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""5"" [label=""if $stack4 >= $stack3""];\n	""6"" [label=""return""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""8"" [label=""value := @parameter0: char""];\n	""9"" [label=""virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(value)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""5"" -> ""6""[label=""cfg_true""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(String),Method,* Appends the given value as primary.\n         *\n         * @param value The value to append.,"public void appendPrimary(final String value) {\n    final int addChars = this.maxLength - this.primary.length();\n    if (value.length() <= addChars) {\n        this.primary.append(value);\n    } else {\n        this.primary.append(value, 0, addChars);\n    }\n}",void appendPrimary(java.lang.String),"digraph cfg_appendPrimary {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""2"" [label=""$stack4 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""3"" [label=""$stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack6 = virtualinvoke value.<java.lang.String: int length()>()""];\n	""5"" [label=""$stack7 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""6"" [label=""$stack8 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""7"" [label=""addChars = $stack4 - $stack5""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack6 > addChars""];\n	""10"" [label=""return""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""12"" [label=""value := @parameter0: java.lang.String""];\n	""13"" [label=""virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(value, 0, addChars)""];\n	""14"" [label=""virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_goto""];\n	""9"" -> ""5""[label=""cfg_true""];\n	""9"" -> ""6""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate(),Method,* Gets the alternate string.\n         *\n         * @return the alternate string.,public String getAlternate() {\n    return this.alternate.toString();\n},java.lang.String getAlternate(),"digraph cfg_getAlternate {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary(),Method,* Gets the primary string.\n         *\n         * @return the primary string.,public String getPrimary() {\n    return this.primary.toString();\n},java.lang.String getPrimary(),"digraph cfg_getPrimary {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete(),Method,* Tests whether this result is complete.\n         *\n         * @return whether this result is complete.,public boolean isComplete() {\n    return this.primary.length() >= this.maxLength && this.alternate.length() >= this.maxLength;\n},boolean isComplete(),"digraph cfg_isComplete {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder primary>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""3"" [label=""$stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: java.lang.StringBuilder alternate>""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult: int maxLength>""];\n	""6"" [label=""$stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: int length()>()""];\n	""7"" [label=""$stack7 = 0""];\n	""8"" [label=""$stack7 = 1""];\n	""9"" [label=""goto""];\n	""10"" [label=""if $stack3 < $stack2""];\n	""11"" [label=""if $stack6 < $stack5""];\n	""12"" [label=""return $stack7""];\n	""13"" [label=""this := @this: org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_false""];\n	""10"" -> ""7""[label=""cfg_true""];\n	""11"" -> ""7""[label=""cfg_true""];\n	""11"" -> ""8""[label=""cfg_false""];\n	""13"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_goto""];\n}\n",public 
org.apache.commons.codec.language.Caverphone2.encode(String),Method,* Encodes the given String into a Caverphone 2.0 value.\n     *\n     * @param source\n     *            String the source string\n     * @return A Caverphone code for the given String,"@Override\npublic String encode(final String source) {\n    String txt = source;\n    if (SoundexUtils.isEmpty(txt)) {\n        return TEN_1;\n    }\n    // 1. Convert to lowercase\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    // 2. Remove anything not A-Z\n    txt = txt.replaceAll(""[^a-z]"", """");\n    // 2.5. Remove final e\n    // 2.0 only\n    txt = txt.replaceAll(""e$"", """");\n    // 3. Handle various start options\n    txt = txt.replaceAll(""^cough"", ""cou2f"");\n    txt = txt.replaceAll(""^rough"", ""rou2f"");\n    txt = txt.replaceAll(""^tough"", ""tou2f"");\n    // 2.0 only\n    txt = txt.replaceAll(""^enough"", ""enou2f"");\n    // 2.0 only\n    txt = txt.replaceAll(""^trough"", ""trou2f"");\n    // note the spec says ^enough here again, c+p error I assume\n    txt = txt.replaceAll(""^gn"", ""2n"");\n    // End\n    txt = txt.replaceAll(""mb$"", ""m2"");\n    // 4. Handle replacements\n    txt = txt.replace(""cq"", ""2q"");\n    txt = txt.replace(""ci"", ""si"");\n    txt = txt.replace(""ce"", ""se"");\n    txt = txt.replace(""cy"", ""sy"");\n    txt = txt.replace(""tch"", ""2ch"");\n    txt = txt.replace(""c"", ""k"");\n    txt = txt.replace(""q"", ""k"");\n    txt = txt.replace(""x"", ""k"");\n    txt = txt.replace(""v"", ""f"");\n    txt = txt.replace(""dg"", ""2g"");\n    txt = txt.replace(""tio"", ""sio"");\n    txt = txt.replace(""tia"", ""sia"");\n    txt = txt.replace(""d"", ""t"");\n    txt = txt.replace(""ph"", ""fh"");\n    txt = txt.replace(""b"", ""p"");\n    txt = txt.replace(""sh"", ""s2"");\n    txt = txt.replace(""z"", ""s"");\n    txt = txt.replaceAll(""^[aeiou]"", ""A"");\n    txt = txt.replaceAll(""[aeiou]"", ""3"");\n    // 2.0 only\n    txt = txt.replace(""j"", ""y"");\n    // 2.0 only\n    txt = txt.replaceAll(""^y3"", ""Y3"");\n    // 2.0 only\n    txt = txt.replaceAll(""^y"", ""A"");\n    // 2.0 only\n    txt = txt.replace(""y"", ""3"");\n    txt = txt.replace(""3gh3"", ""3kh3"");\n    txt = txt.replace(""gh"", ""22"");\n    txt = txt.replace(""g"", ""k"");\n    txt = txt.replaceAll(""s+"", ""S"");\n    txt = txt.replaceAll(""t+"", ""T"");\n    txt = txt.replaceAll(""p+"", ""P"");\n    txt = txt.replaceAll(""k+"", ""K"");\n    txt = txt.replaceAll(""f+"", ""F"");\n    txt = txt.replaceAll(""m+"", ""M"");\n    txt = txt.replaceAll(""n+"", ""N"");\n    txt = txt.replace(""w3"", ""W3"");\n    txt = txt.replace(""wh3"", ""Wh3"");\n    // 2.0 only\n    txt = txt.replaceAll(""w$"", ""3"");\n    txt = txt.replace(""w"", ""2"");\n    txt = txt.replaceAll(""^h"", ""A"");\n    txt = txt.replace(""h"", ""2"");\n    txt = txt.replace(""r3"", ""R3"");\n    // 2.0 only\n    txt = txt.replaceAll(""r$"", ""3"");\n    txt = txt.replace(""r"", ""2"");\n    txt = txt.replace(""l3"", ""L3"");\n    // 2.0 only\n    txt = txt.replaceAll(""l$"", ""3"");\n    txt = txt.replace(""l"", ""2"");\n    // 5. Handle removals\n    txt = txt.replace(""2"", """");\n    // 2.0 only\n    txt = txt.replaceAll(""3$"", ""A"");\n    txt = txt.replace(""3"", """");\n    // 6. put ten 1s on the end\n    txt += TEN_1;\n    // 7. take the first ten characters as the code\n    return txt.substring(0, TEN_1.length());\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack10 = virtualinvoke txt.<java.lang.String: java.lang.String substring(int,int)>(0, $stack9)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.language.SoundexUtils: boolean isEmpty(java.lang.CharSequence)>(txt)""];\n	""3"" [label=""$stack4 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""4"" [label=""$stack5 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(txt)""];\n	""6"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""1111111111\"")""];\n	""7"" [label=""$stack8 = \""1111111111\""""];\n	""8"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.String: int length()>()""];\n	""9"" [label=""if $stack3 == 0""];\n	""10"" [label=""return \""1111111111\""""];\n	""11"" [label=""return $stack10""];\n	""12"" [label=""source := @parameter0: java.lang.String""];\n	""13"" [label=""specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()""];\n	""14"" [label=""this := @this: org.apache.commons.codec.language.Caverphone2""];\n	""15"" [label=""txt = source""];\n	""16"" [label=""txt = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""17"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""2\"", \""\"")""];\n	""18"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""3\"", \""\"")""];\n	""19"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""3gh3\"", \""3kh3\"")""];\n	""20"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""b\"", \""p\"")""];\n	""21"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""c\"", \""k\"")""];\n	""22"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ce\"", \""se\"")""];\n	""23"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ci\"", \""si\"")""];\n	""24"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""cq\"", \""2q\"")""];\n	""25"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""cy\"", \""sy\"")""];\n	""26"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""d\"", \""t\"")""];\n	""27"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""dg\"", \""2g\"")""];\n	""28"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""g\"", \""k\"")""];\n	""29"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""gh\"", \""22\"")""];\n	""30"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""h\"", \""2\"")""];\n	""31"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""j\"", \""y\"")""];\n	""32"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""l\"", \""2\"")""];\n	""33"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""l3\"", \""L3\"")""];\n	""34"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ph\"", \""fh\"")""];\n	""35"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""q\"", \""k\"")""];\n	""36"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""r\"", \""2\"")""];\n	""37"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""r3\"", \""R3\"")""];\n	""38"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""sh\"", \""s2\"")""];\n	""39"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tch\"", \""2ch\"")""];\n	""40"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tia\"", \""sia\"")""];\n	""41"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tio\"", \""sio\"")""];\n	""42"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""v\"", \""f\"")""];\n	""43"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""w\"", \""2\"")""];\n	""44"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""w3\"", \""W3\"")""];\n	""45"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""wh3\"", \""Wh3\"")""];\n	""46"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""x\"", \""k\"")""];\n	""47"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""y\"", \""3\"")""];\n	""48"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""z\"", \""s\"")""];\n	""49"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""3$\"", \""A\"")""];\n	""50"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""[^a-z]\"", \""\"")""];\n	""51"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""[aeiou]\"", \""3\"")""];\n	""52"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^[aeiou]\"", \""A\"")""];\n	""53"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^cough\"", \""cou2f\"")""];\n	""54"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^enough\"", \""enou2f\"")""];\n	""55"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^gn\"", \""2n\"")""];\n	""56"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^h\"", \""A\"")""];\n	""57"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^rough\"", \""rou2f\"")""];\n	""58"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^tough\"", \""tou2f\"")""];\n	""59"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^trough\"", \""trou2f\"")""];\n	""60"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^y\"", \""A\"")""];\n	""61"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^y3\"", \""Y3\"")""];\n	""62"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""e$\"", \""\"")""];\n	""63"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""f+\"", \""F\"")""];\n	""64"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""k+\"", \""K\"")""];\n	""65"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""l$\"", \""3\"")""];\n	""66"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""m+\"", \""M\"")""];\n	""67"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""mb$\"", \""m2\"")""];\n	""68"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""n+\"", \""N\"")""];\n	""69"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""p+\"", \""P\"")""];\n	""70"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""r$\"", \""3\"")""];\n	""71"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""s+\"", \""S\"")""];\n	""72"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""t+\"", \""T\"")""];\n	""73"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""w$\"", \""3\"")""];\n	""74"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack4)""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""12"" -> ""15""[label=""cfg_next""];\n	""13"" -> ""5""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""15"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""7""[label=""cfg_next""];\n	""17"" -> ""49""[label=""cfg_next""];\n	""18"" -> ""4""[label=""cfg_next""];\n	""19"" -> ""29""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""20"" -> ""38""[label=""cfg_next""];\n	""21"" -> ""35""[label=""cfg_next""];\n	""22"" -> ""25""[label=""cfg_next""];\n	""23"" -> ""22""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""25"" -> ""39""[label=""cfg_next""];\n	""26"" -> ""34""[label=""cfg_next""];\n	""27"" -> ""41""[label=""cfg_next""];\n	""28"" -> ""71""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""74""[label=""cfg_next""];\n	""30"" -> ""37""[label=""cfg_next""];\n	""31"" -> ""61""[label=""cfg_next""];\n	""32"" -> ""17""[label=""cfg_next""];\n	""33"" -> ""65""[label=""cfg_next""];\n	""34"" -> ""20""[label=""cfg_next""];\n	""35"" -> ""46""[label=""cfg_next""];\n	""36"" -> ""33""[label=""cfg_next""];\n	""37"" -> ""70""[label=""cfg_next""];\n	""38"" -> ""48""[label=""cfg_next""];\n	""39"" -> ""21""[label=""cfg_next""];\n	""4"" -> ""13""[label=""cfg_next""];\n	""40"" -> ""26""[label=""cfg_next""];\n	""41"" -> ""40""[label=""cfg_next""];\n	""42"" -> ""27""[label=""cfg_next""];\n	""43"" -> ""56""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""73""[label=""cfg_next""];\n	""46"" -> ""42""[label=""cfg_next""];\n	""47"" -> ""19""[label=""cfg_next""];\n	""48"" -> ""52""[label=""cfg_next""];\n	""49"" -> ""18""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""62""[label=""cfg_next""];\n	""51"" -> ""31""[label=""cfg_next""];\n	""52"" -> ""51""[label=""cfg_next""];\n	""53"" -> ""57""[label=""cfg_next""];\n	""54"" -> ""59""[label=""cfg_next""];\n	""55"" -> ""67""[label=""cfg_next""];\n	""56"" -> ""30""[label=""cfg_next""];\n	""57"" -> ""58""[label=""cfg_next""];\n	""58"" -> ""54""[label=""cfg_next""];\n	""59"" -> ""55""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""60"" -> ""47""[label=""cfg_next""];\n	""61"" -> ""60""[label=""cfg_next""];\n	""62"" -> ""53""[label=""cfg_next""];\n	""63"" -> ""66""[label=""cfg_next""];\n	""64"" -> ""63""[label=""cfg_next""];\n	""65"" -> ""32""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""24""[label=""cfg_next""];\n	""68"" -> ""44""[label=""cfg_next""];\n	""69"" -> ""64""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""36""[label=""cfg_next""];\n	""71"" -> ""72""[label=""cfg_next""];\n	""72"" -> ""69""[label=""cfg_next""];\n	""73"" -> ""43""[label=""cfg_next""];\n	""74"" -> ""50""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_false""];\n	""9"" -> ""3""[label=""cfg_true""];\n}\n",public 
org.apache.commons.codec.language.Caverphone2.<init>(),Constructor,* Constructs a new instance.,public Caverphone2() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.language.AbstractCaverphone: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Caverphone2""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Lang.instance(NameType),Method,* Gets a Lang instance for one of the supported NameTypes.\n     *\n     * @param nameType\n     *            the NameType to look up\n     * @return a Lang encapsulating the language guessing rules for that name type,public static Lang instance(final NameType nameType) {\n    return LANGS.get(nameType);\n},org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType),"digraph cfg_instance {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.language.bm.Lang: java.util.Map LANGS>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.Map: java.lang.Object get(java.lang.Object)>(nameType)""];\n	""3"" [label=""$stack3 = (org.apache.commons.codec.language.bm.Lang) $stack2""];\n	""4"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.language.bm.Lang.loadFromResource(String,Languages)",Method,"* Loads language rules from a resource.\n     * <p>\n     * In normal use, you will obtain instances of Lang through the {@link #instance(NameType)} method.\n     * You will only need to call this yourself if you are developing custom language mapping rules.\n     * </p>\n     *\n     * @param languageRulesResourceName\n     *            the fully-qualified resource name to load\n     * @param languages\n     *            the languages that these rules will support\n     * @return a Lang encapsulating the loaded language-guessing rules.","public static Lang loadFromResource(final String languageRulesResourceName, final Languages languages) {\n    final List<LangRule> rules = new ArrayList<>();\n    try (Scanner scanner = new Scanner(Resources.getInputStream(languageRulesResourceName), ResourceConstants.ENCODING)) {\n        boolean inExtendedComment = false;\n        while (scanner.hasNextLine()) {\n            final String rawLine = scanner.nextLine();\n            String line = rawLine;\n            if (inExtendedComment) {\n                // check for closing comment marker, otherwise discard doc comment line\n                if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n                    inExtendedComment = false;\n                }\n            } else if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else {\n                // discard comments\n                final int cmtI = line.indexOf(ResourceConstants.CMT);\n                if (cmtI >= 0) {\n                    line = line.substring(0, cmtI);\n                }\n                // trim leading-trailing whitespace\n                line = line.trim();\n                if (line.isEmpty()) {\n                    // empty lines can be safely skipped\n                    continue;\n                }\n                // split it up\n                final String[] parts = line.split(""\\s+"");\n                if (parts.length != 3) {\n                    throw new IllegalArgumentException(""Malformed line '"" + rawLine + ""' in language resource '"" + languageRulesResourceName + ""'"");\n                }\n                final Pattern pattern = Pattern.compile(parts[0]);\n                final String[] langs = parts[1].split(""\\+"");\n                final boolean accept = parts[2].equals(""true"");\n                rules.add(new LangRule(pattern, new HashSet<>(Arrays.asList(langs)), accept));\n            }\n        }\n    }\n    return new Lang(rules, languages);\n}","org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)","digraph cfg_loadFromResource {\n	""1"" [label=""$stack12 = new java.util.ArrayList""];\n	""2"" [label=""$stack13 = <org.apache.commons.codec.language.bm.ResourceConstants: java.lang.String ENCODING>""];\n	""3"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.Resources: java.io.InputStream getInputStream(java.lang.String)>(languageRulesResourceName)""];\n	""4"" [label=""$stack15 = new java.util.Scanner""];\n	""5"" [label=""$stack16 = virtualinvoke scanner.<java.util.Scanner: boolean hasNextLine()>()""];\n	""6"" [label=""$stack17 = new org.apache.commons.codec.language.bm.Lang""];\n	""7"" [label=""$stack18 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>(\""/*\"")""];\n	""8"" [label=""$stack19 = virtualinvoke line.<java.lang.String: boolean isEmpty()>()""];\n	""9"" [label=""$stack20 = lengthof parts""];\n	""10"" [label=""$stack21 = parts[0]""];\n	""11"" [label=""$stack22 = parts[1]""];\n	""12"" [label=""$stack23 = parts[2]""];\n	""13"" [label=""$stack24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(langs)""];\n	""14"" [label=""$stack25 = new java.util.HashSet""];\n	""15"" [label=""$stack26 = new org.apache.commons.codec.language.bm.Lang$LangRule""];\n	""16"" [label=""$stack27 = new java.lang.StringBuilder""];\n	""17"" [label=""$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed line \'\"")""];\n	""18"" [label=""$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""19"" [label=""$stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""\' in language resource \'\"")""];\n	""20"" [label=""$stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(languageRulesResourceName)""];\n	""21"" [label=""$stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""\'\"")""];\n	""22"" [label=""$stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""23"" [label=""$stack34 = new java.lang.IllegalArgumentException""];\n	""24"" [label=""$stack35 = virtualinvoke line.<java.lang.String: boolean endsWith(java.lang.String)>(\""*/\"")""];\n	""25"" [label=""$stack36 := @caughtexception""];\n	""26"" [label=""$stack37 := @caughtexception""];\n	""27"" [label=""accept = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(\""true\"")""];\n	""28"" [label=""cmtI = virtualinvoke line.<java.lang.String: int indexOf(java.lang.String)>(\""//\"")""];\n	""29"" [label=""goto""];\n	""30"" [label=""goto""];\n	""31"" [label=""goto""];\n	""32"" [label=""goto""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""if $stack16 == 0""];\n	""36"" [label=""if $stack18 == 0""];\n	""37"" [label=""if $stack19 == 0""];\n	""38"" [label=""if $stack20 == 3""];\n	""39"" [label=""if $stack35 == 0""];\n	""40"" [label=""if cmtI < 0""];\n	""41"" [label=""if inExtendedComment == 0""];\n	""42"" [label=""inExtendedComment = $stack37""];\n	""43"" [label=""inExtendedComment = 0""];\n	""44"" [label=""inExtendedComment = 0""];\n	""45"" [label=""inExtendedComment = 1""];\n	""46"" [label=""interfaceinvoke rules.<java.util.List: boolean add(java.lang.Object)>($stack26)""];\n	""47"" [label=""langs = virtualinvoke $stack22.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\+\"")""];\n	""48"" [label=""languageRulesResourceName := @parameter0: java.lang.String""];\n	""49"" [label=""languages := @parameter1: org.apache.commons.codec.language.bm.Languages""];\n	""50"" [label=""line = rawLine""];\n	""51"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String substring(int,int)>(0, cmtI)""];\n	""52"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String trim()>()""];\n	""53"" [label=""parts = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\s+\"")""];\n	""54"" [label=""pattern = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($stack21)""];\n	""55"" [label=""rawLine = $stack36""];\n	""56"" [label=""rawLine = virtualinvoke scanner.<java.util.Scanner: java.lang.String nextLine()>()""];\n	""57"" [label=""return $stack17""];\n	""58"" [label=""rules = $stack12""];\n	""59"" [label=""scanner = $stack15""];\n	""60"" [label=""specialinvoke $stack12.<java.util.ArrayList: void <init>()>()""];\n	""61"" [label=""specialinvoke $stack15.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($stack14, $stack13)""];\n	""62"" [label=""specialinvoke $stack17.<org.apache.commons.codec.language.bm.Lang: void <init>(java.util.List,org.apache.commons.codec.language.bm.Languages)>(rules, languages)""];\n	""63"" [label=""specialinvoke $stack25.<java.util.HashSet: void <init>(java.util.Collection)>($stack24)""];\n	""64"" [label=""specialinvoke $stack26.<org.apache.commons.codec.language.bm.Lang$LangRule: void <init>(java.util.regex.Pattern,java.util.Set,boolean,org.apache.commons.codec.language.bm.Lang$1)>(pattern, $stack25, accept, null)""];\n	""65"" [label=""specialinvoke $stack27.<java.lang.StringBuilder: void <init>()>()""];\n	""66"" [label=""specialinvoke $stack34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack33)""];\n	""67"" [label=""throw $stack34""];\n	""68"" [label=""throw inExtendedComment""];\n	""69"" [label=""virtualinvoke inExtendedComment.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(rawLine)""];\n	""70"" [label=""virtualinvoke scanner.<java.util.Scanner: void close()>()""];\n	""71"" [label=""virtualinvoke scanner.<java.util.Scanner: void close()>()""];\n	""1"" -> ""60""[label=""cfg_next""];\n	""10"" -> ""26""[label=""cfg_except""];\n	""10"" -> ""54""[label=""cfg_next""];\n	""11"" -> ""26""[label=""cfg_except""];\n	""11"" -> ""47""[label=""cfg_next""];\n	""12"" -> ""26""[label=""cfg_except""];\n	""12"" -> ""27""[label=""cfg_next""];\n	""13"" -> ""26""[label=""cfg_except""];\n	""13"" -> ""63""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""14"" -> ""26""[label=""cfg_except""];\n	""15"" -> ""14""[label=""cfg_next""];\n	""15"" -> ""26""[label=""cfg_except""];\n	""16"" -> ""26""[label=""cfg_except""];\n	""16"" -> ""65""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""17"" -> ""26""[label=""cfg_except""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""18"" -> ""26""[label=""cfg_except""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""26""[label=""cfg_except""];\n	""2"" -> ""61""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""20"" -> ""26""[label=""cfg_except""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""21"" -> ""26""[label=""cfg_except""];\n	""22"" -> ""26""[label=""cfg_except""];\n	""22"" -> ""66""[label=""cfg_next""];\n	""23"" -> ""16""[label=""cfg_next""];\n	""23"" -> ""26""[label=""cfg_except""];\n	""24"" -> ""26""[label=""cfg_except""];\n	""24"" -> ""39""[label=""cfg_next""];\n	""25"" -> ""55""[label=""cfg_next""];\n	""26"" -> ""42""[label=""cfg_next""];\n	""27"" -> ""15""[label=""cfg_next""];\n	""27"" -> ""26""[label=""cfg_except""];\n	""28"" -> ""26""[label=""cfg_except""];\n	""28"" -> ""40""[label=""cfg_next""];\n	""29"" -> ""26""[label=""cfg_except""];\n	""29"" -> ""5""[label=""cfg_goto""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""30"" -> ""26""[label=""cfg_except""];\n	""30"" -> ""29""[label=""cfg_goto""];\n	""31"" -> ""68""[label=""cfg_goto""];\n	""32"" -> ""26""[label=""cfg_except""];\n	""32"" -> ""29""[label=""cfg_goto""];\n	""33"" -> ""26""[label=""cfg_except""];\n	""33"" -> ""5""[label=""cfg_goto""];\n	""34"" -> ""6""[label=""cfg_goto""];\n	""35"" -> ""26""[label=""cfg_except""];\n	""35"" -> ""56""[label=""cfg_false""];\n	""35"" -> ""70""[label=""cfg_true""];\n	""36"" -> ""26""[label=""cfg_except""];\n	""36"" -> ""28""[label=""cfg_true""];\n	""36"" -> ""45""[label=""cfg_false""];\n	""37"" -> ""26""[label=""cfg_except""];\n	""37"" -> ""33""[label=""cfg_false""];\n	""37"" -> ""53""[label=""cfg_true""];\n	""38"" -> ""10""[label=""cfg_true""];\n	""38"" -> ""23""[label=""cfg_false""];\n	""38"" -> ""26""[label=""cfg_except""];\n	""39"" -> ""26""[label=""cfg_except""];\n	""39"" -> ""29""[label=""cfg_true""];\n	""39"" -> ""44""[label=""cfg_false""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""40"" -> ""26""[label=""cfg_except""];\n	""40"" -> ""51""[label=""cfg_false""];\n	""40"" -> ""52""[label=""cfg_true""];\n	""41"" -> ""24""[label=""cfg_false""];\n	""41"" -> ""26""[label=""cfg_except""];\n	""41"" -> ""7""[label=""cfg_true""];\n	""42"" -> ""71""[label=""cfg_next""];\n	""43"" -> ""26""[label=""cfg_except""];\n	""43"" -> ""5""[label=""cfg_next""];\n	""44"" -> ""26""[label=""cfg_except""];\n	""44"" -> ""30""[label=""cfg_next""];\n	""45"" -> ""26""[label=""cfg_except""];\n	""45"" -> ""32""[label=""cfg_next""];\n	""46"" -> ""26""[label=""cfg_except""];\n	""46"" -> ""29""[label=""cfg_next""];\n	""47"" -> ""12""[label=""cfg_next""];\n	""47"" -> ""26""[label=""cfg_except""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""26""[label=""cfg_except""];\n	""5"" -> ""35""[label=""cfg_next""];\n	""50"" -> ""26""[label=""cfg_except""];\n	""50"" -> ""41""[label=""cfg_next""];\n	""51"" -> ""26""[label=""cfg_except""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""26""[label=""cfg_except""];\n	""52"" -> ""8""[label=""cfg_next""];\n	""53"" -> ""26""[label=""cfg_except""];\n	""53"" -> ""9""[label=""cfg_next""];\n	""54"" -> ""11""[label=""cfg_next""];\n	""54"" -> ""26""[label=""cfg_except""];\n	""55"" -> ""69""[label=""cfg_next""];\n	""56"" -> ""26""[label=""cfg_except""];\n	""56"" -> ""50""[label=""cfg_next""];\n	""58"" -> ""4""[label=""cfg_next""];\n	""59"" -> ""43""[label=""cfg_next""];\n	""6"" -> ""62""[label=""cfg_next""];\n	""60"" -> ""58""[label=""cfg_next""];\n	""61"" -> ""59""[label=""cfg_next""];\n	""62"" -> ""57""[label=""cfg_next""];\n	""63"" -> ""26""[label=""cfg_except""];\n	""63"" -> ""64""[label=""cfg_next""];\n	""64"" -> ""26""[label=""cfg_except""];\n	""64"" -> ""46""[label=""cfg_next""];\n	""65"" -> ""17""[label=""cfg_next""];\n	""65"" -> ""26""[label=""cfg_except""];\n	""66"" -> ""26""[label=""cfg_except""];\n	""66"" -> ""67""[label=""cfg_next""];\n	""67"" -> ""26""[label=""cfg_except""];\n	""69"" -> ""68""[label=""cfg_next""];\n	""7"" -> ""26""[label=""cfg_except""];\n	""7"" -> ""36""[label=""cfg_next""];\n	""70"" -> ""34""[label=""cfg_next""];\n	""71"" -> ""25""[label=""cfg_except""];\n	""71"" -> ""31""[label=""cfg_next""];\n	""8"" -> ""26""[label=""cfg_except""];\n	""8"" -> ""37""[label=""cfg_next""];\n	""9"" -> ""26""[label=""cfg_except""];\n	""9"" -> ""38""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.Lang.guessLanguage(String),Method,* Guesses the language of a word.\n     *\n     * @param text\n     *            the word\n     * @return the language that the word originates from or {@link Languages#ANY} if there was no unique match,public String guessLanguage(final String text) {\n    final Languages.LanguageSet ls = guessLanguages(text);\n    return ls.isSingleton() ? ls.getAny() : Languages.ANY;\n},java.lang.String guessLanguage(java.lang.String),"digraph cfg_guessLanguage {\n	""1"" [label=""$stack3 = virtualinvoke ls.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>()""];\n	""2"" [label=""$stack4 = \""any\""""];\n	""3"" [label=""$stack4 = virtualinvoke ls.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>()""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack3 == 0""];\n	""6"" [label=""ls = virtualinvoke this.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>(text)""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""text := @parameter0: java.lang.String""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.Lang""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Lang.guessLanguages(String),Method,* Guesses the languages of a word.\n     *\n     * @param input\n     *            the word\n     * @return a Set of Strings of language names that are potential matches for the input word,public Languages.LanguageSet guessLanguages(final String input) {\n    final String text = input.toLowerCase(Locale.ENGLISH);\n    final Set<String> langs = new HashSet<>(this.languages.getLanguages());\n    rules.forEach(rule -> {\n        if (rule.matches(text)) {\n            if (rule.acceptOnMatch) {\n                langs.retainAll(rule.languages);\n            } else {\n                langs.removeAll(rule.languages);\n            }\n        }\n    });\n    final Languages.LanguageSet ls = Languages.LanguageSet.from(langs);\n    return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;\n},org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String),"digraph cfg_guessLanguages {\n	""1"" [label=""$stack10 = dynamicinvoke \""accept\"" <java.util.function.Consumer (java.lang.String,java.util.Set)>(text, langs) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Lang: void lambda$guessLanguages$0(java.lang.String,java.util.Set,org.apache.commons.codec.language.bm.Lang$LangRule)>, methodtype: void __METHODTYPE__(org.apache.commons.codec.language.bm.Lang$LangRule))""];\n	""2"" [label=""$stack11 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>""];\n	""3"" [label=""$stack12 = virtualinvoke ls.<java.lang.Object: boolean equals(java.lang.Object)>($stack11)""];\n	""4"" [label=""$stack13 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>""];\n	""5"" [label=""$stack13 = ls""];\n	""6"" [label=""$stack5 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""7"" [label=""$stack6 = this.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages>""];\n	""8"" [label=""$stack7 = virtualinvoke $stack6.<org.apache.commons.codec.language.bm.Languages: java.util.Set getLanguages()>()""];\n	""9"" [label=""$stack8 = new java.util.HashSet""];\n	""10"" [label=""$stack9 = this.<org.apache.commons.codec.language.bm.Lang: java.util.List rules>""];\n	""11"" [label=""goto""];\n	""12"" [label=""if $stack12 == 0""];\n	""13"" [label=""input := @parameter0: java.lang.String""];\n	""14"" [label=""interfaceinvoke $stack9.<java.util.List: void forEach(java.util.function.Consumer)>($stack10)""];\n	""15"" [label=""langs = $stack8""];\n	""16"" [label=""ls = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set)>(langs)""];\n	""17"" [label=""return $stack13""];\n	""18"" [label=""specialinvoke $stack8.<java.util.HashSet: void <init>(java.util.Collection)>($stack7)""];\n	""19"" [label=""text = virtualinvoke input.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack5)""];\n	""20"" [label=""this := @this: org.apache.commons.codec.language.bm.Lang""];\n	""1"" -> ""14""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_goto""];\n	""12"" -> ""4""[label=""cfg_false""];\n	""12"" -> ""5""[label=""cfg_true""];\n	""13"" -> ""6""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""15""[label=""cfg_next""];\n	""19"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""17""[label=""cfg_next""];\n	""6"" -> ""19""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""18""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Lang.<init>(List,Languages)",Constructor,No Comment,"private Lang(final List<LangRule> rules, final Languages languages) {\n    this.rules = Collections.unmodifiableList(rules);\n    this.languages = languages;\n}","void <init>(java.util.List,org.apache.commons.codec.language.bm.Languages)","digraph cfg_init {\n	""1"" [label=""$stack3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(rules)""];\n	""2"" [label=""languages := @parameter1: org.apache.commons.codec.language.bm.Languages""];\n	""3"" [label=""return""];\n	""4"" [label=""rules := @parameter0: java.util.List""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.Lang""];\n	""7"" [label=""this.<org.apache.commons.codec.language.bm.Lang: java.util.List rules> = $stack3""];\n	""8"" [label=""this.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages> = languages""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.bm.Lang$LangRule.matches(String),Method,No Comment,public boolean matches(final String txt) {\n    return this.pattern.matcher(txt).find();\n},boolean matches(java.lang.String),"digraph cfg_matches {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Lang$LangRule: java.util.regex.Pattern pattern>""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(txt)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean find()>()""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.bm.Lang$LangRule""];\n	""6"" [label=""txt := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Lang$LangRule.<init>(Pattern,Set,boolean)",Constructor,No Comment,"private LangRule(final Pattern pattern, final Set<String> languages, final boolean acceptOnMatch) {\n    this.pattern = pattern;\n    this.languages = languages;\n    this.acceptOnMatch = acceptOnMatch;\n}","void <init>(java.util.regex.Pattern,java.util.Set,boolean)","digraph cfg_init {\n	""1"" [label=""acceptOnMatch := @parameter2: boolean""];\n	""2"" [label=""languages := @parameter1: java.util.Set""];\n	""3"" [label=""pattern := @parameter0: java.util.regex.Pattern""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.Lang$LangRule""];\n	""7"" [label=""this.<org.apache.commons.codec.language.bm.Lang$LangRule: boolean acceptOnMatch> = acceptOnMatch""];\n	""8"" [label=""this.<org.apache.commons.codec.language.bm.Lang$LangRule: java.util.Set languages> = languages""];\n	""9"" [label=""this.<org.apache.commons.codec.language.bm.Lang$LangRule: java.util.regex.Pattern pattern> = pattern""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.bm.NameType.getName(),Method,* Gets the short version of the name type.\n     *\n     * @return the NameType short string,public String getName() {\n    return this.name;\n},java.lang.String getName(),"digraph cfg_getName {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.NameType: java.lang.String name>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.NameType""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(Object),Method,No Comment,"@Override\npublic Object encode(final Object source) throws EncoderException {\n    if (!(source instanceof String)) {\n        throw new EncoderException(""BeiderMorseEncoder encode parameter is not of type String"");\n    }\n    return encode((String) source);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = source instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) source""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""source := @parameter0: java.lang.Object""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""BeiderMorseEncoder encode parameter is not of type String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(String),Method,No Comment,@Override\npublic String encode(final String source) throws EncoderException {\n    if (source == null) {\n        return null;\n    }\n    return this.engine.encode(source);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(source)""];\n	""3"" [label=""if source != null""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""return null""];\n	""6"" [label=""source := @parameter0: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_true""];\n	""3"" -> ""5""[label=""cfg_false""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType(),Method,* Gets the name type currently in operation.\n     *\n     * @return the NameType currently being used,public NameType getNameType() {\n    return this.engine.getNameType();\n},org.apache.commons.codec.language.bm.NameType getNameType(),"digraph cfg_getNameType {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType getNameType()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType(),Method,* Gets the rule type currently in operation.\n     *\n     * @return the RuleType currently being used,public RuleType getRuleType() {\n    return this.engine.getRuleType();\n},org.apache.commons.codec.language.bm.RuleType getRuleType(),"digraph cfg_getRuleType {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType getRuleType()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat(),Method,"* Discovers if multiple possible encodings are concatenated.\n     *\n     * @return true if multiple encodings are concatenated, false if just the first one is returned",public boolean isConcat() {\n    return this.engine.isConcat();\n},boolean isConcat(),"digraph cfg_isConcat {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean isConcat()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean),Method,"* Sets how multiple possible phonetic encodings are combined.\n     *\n     * @param concat\n     *            true if multiple encodings are to be combined with a '|', false if just the first one is\n     *            to be considered","public void setConcat(final boolean concat) {\n    this.engine = new PhoneticEngine(this.engine.getNameType(), this.engine.getRuleType(), concat, this.engine.getMaxPhonemes());\n}",void setConcat(boolean),"digraph cfg_setConcat {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<org.apache.commons.codec.language.bm.PhoneticEngine: int getMaxPhonemes()>()""];\n	""5"" [label=""$stack6 = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType getRuleType()>()""];\n	""6"" [label=""$stack7 = virtualinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType getNameType()>()""];\n	""7"" [label=""$stack8 = new org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""8"" [label=""concat := @parameter0: boolean""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>($stack7, $stack6, concat, $stack5)""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""12"" [label=""this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine> = $stack8""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int),Method,* Sets the number of maximum of phonemes that shall be considered by the engine.\n     *\n     * @param maxPhonemes\n     *            the maximum number of phonemes returned by the engine\n     * @since 1.7,"public void setMaxPhonemes(final int maxPhonemes) {\n    this.engine = new PhoneticEngine(this.engine.getNameType(), this.engine.getRuleType(), this.engine.isConcat(), maxPhonemes);\n}",void setMaxPhonemes(int),"digraph cfg_setMaxPhonemes {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean isConcat()>()""];\n	""5"" [label=""$stack6 = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType getRuleType()>()""];\n	""6"" [label=""$stack7 = virtualinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType getNameType()>()""];\n	""7"" [label=""$stack8 = new org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""8"" [label=""maxPhonemes := @parameter0: int""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>($stack7, $stack6, $stack5, maxPhonemes)""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""12"" [label=""this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine> = $stack8""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(NameType),Method,* Sets the type of name. Use {@link NameType#GENERIC} unless you specifically want phonetic encodings\n     * optimized for Ashkenazi or Sephardic Jewish family names.\n     *\n     * @param nameType\n     *            the NameType in use,"public void setNameType(final NameType nameType) {\n    this.engine = new PhoneticEngine(nameType, this.engine.getRuleType(), this.engine.isConcat(), this.engine.getMaxPhonemes());\n}",void setNameType(org.apache.commons.codec.language.bm.NameType),"digraph cfg_setNameType {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<org.apache.commons.codec.language.bm.PhoneticEngine: int getMaxPhonemes()>()""];\n	""5"" [label=""$stack6 = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean isConcat()>()""];\n	""6"" [label=""$stack7 = virtualinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType getRuleType()>()""];\n	""7"" [label=""$stack8 = new org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""8"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>(nameType, $stack7, $stack6, $stack5)""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""12"" [label=""this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine> = $stack8""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(RuleType),Method,* Sets the rule type to apply. This will widen or narrow the range of phonetic encodings considered.\n     *\n     * @param ruleType\n     *            {@link RuleType#APPROX} or {@link RuleType#EXACT} for approximate or exact phonetic matches,"public void setRuleType(final RuleType ruleType) {\n    this.engine = new PhoneticEngine(this.engine.getNameType(), ruleType, this.engine.isConcat(), this.engine.getMaxPhonemes());\n}",void setRuleType(org.apache.commons.codec.language.bm.RuleType),"digraph cfg_setRuleType {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine>""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<org.apache.commons.codec.language.bm.PhoneticEngine: int getMaxPhonemes()>()""];\n	""5"" [label=""$stack6 = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean isConcat()>()""];\n	""6"" [label=""$stack7 = virtualinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType getNameType()>()""];\n	""7"" [label=""$stack8 = new org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""8"" [label=""return""];\n	""9"" [label=""ruleType := @parameter0: org.apache.commons.codec.language.bm.RuleType""];\n	""10"" [label=""specialinvoke $stack8.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>($stack7, ruleType, $stack6, $stack5)""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""12"" [label=""this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine> = $stack8""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.BeiderMorseEncoder.<init>(),Constructor,* Constructs a new instance.,public BeiderMorseEncoder() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType APPROX>""];\n	""2"" [label=""$stack2 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>""];\n	""3"" [label=""$stack3 = new org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)>($stack2, $stack1, 1)""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoder""];\n	""8"" [label=""this.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.PhoneticEngine engine> = $stack3""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine.join(List,String)",Method,* Joins some strings with an internal separator.\n     *\n     * @param strings   Strings to join\n     * @param sep       String to separate them with\n     * @return a single String consisting of each element of {@code strings} interleaved by {@code sep},"private static String join(final List<String> strings, final String sep) {\n    return strings.stream().collect(Collectors.joining(sep));\n}","java.lang.String join(java.util.List,java.lang.String)","digraph cfg_join {\n	""1"" [label=""$stack2 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(sep)""];\n	""2"" [label=""$stack3 = interfaceinvoke strings.<java.util.List: java.util.stream.Stream stream()>()""];\n	""3"" [label=""$stack4 = interfaceinvoke $stack3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack2)""];\n	""4"" [label=""$stack5 = (java.lang.String) $stack4""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""sep := @parameter1: java.lang.String""];\n	""7"" [label=""strings := @parameter0: java.util.List""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(PhonemeBuilder,Map)",Method,* Applies the final rules to convert from a language-specific phonetic representation to a\n     * language-independent representation.\n     *\n     * @param phonemeBuilder the current phonemes\n     * @param finalRules the final rules to apply\n     * @return the resulting phonemes,"private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder, final Map<String, List<Rule>> finalRules) {\n    Objects.requireNonNull(finalRules, ""finalRules"");\n    if (finalRules.isEmpty()) {\n        return phonemeBuilder;\n    }\n    final Map<Rule.Phoneme, Rule.Phoneme> phonemes = new TreeMap<>(Rule.Phoneme.COMPARATOR);\n    phonemeBuilder.getPhonemes().forEach(phoneme -> {\n        PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());\n        final String phonemeText = phoneme.getPhonemeText().toString();\n        for (int i = 0; i < phonemeText.length(); ) {\n            final RulesApplication rulesApplication = new RulesApplication(finalRules, phonemeText, subBuilder, i, maxPhonemes).invoke();\n            final boolean found = rulesApplication.isFound();\n            subBuilder = rulesApplication.getPhonemeBuilder();\n            if (!found) {\n                // not found, appending as-is\n                subBuilder.append(phonemeText.subSequence(i, i + 1));\n            }\n            i = rulesApplication.getI();\n        }\n        // the phonemes map orders the phonemes only based on their text, but ignores the language set\n        // when adding new phonemes, check for equal phonemes and merge their language set, otherwise\n        // phonemes with the same text but different language set get lost\n        subBuilder.getPhonemes().forEach(newPhoneme -> {\n            if (phonemes.containsKey(newPhoneme)) {\n                final Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n                final Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n                phonemes.put(mergedPhoneme, mergedPhoneme);\n            } else {\n                phonemes.put(newPhoneme, newPhoneme);\n            }\n        });\n    });\n    return new PhonemeBuilder(phonemes.keySet());\n}","org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)","digraph cfg_applyFinalRules {\n	""1"" [label=""$stack10 = new org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""2"" [label=""$stack4 = interfaceinvoke finalRules.<java.util.Map: boolean isEmpty()>()""];\n	""3"" [label=""$stack5 = <org.apache.commons.codec.language.bm.Rule$Phoneme: java.util.Comparator COMPARATOR>""];\n	""4"" [label=""$stack6 = new java.util.TreeMap""];\n	""5"" [label=""$stack7 = dynamicinvoke \""accept\"" <java.util.function.Consumer (org.apache.commons.codec.language.bm.PhoneticEngine,java.util.Map,java.util.Map)>(this, finalRules, phonemes) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_SPECIAL\"" <org.apache.commons.codec.language.bm.PhoneticEngine: void lambda$applyFinalRules$1(java.util.Map,java.util.Map,org.apache.commons.codec.language.bm.Rule$Phoneme)>, methodtype: void __METHODTYPE__(org.apache.commons.codec.language.bm.Rule$Phoneme))""];\n	""6"" [label=""$stack8 = virtualinvoke phonemeBuilder.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>()""];\n	""7"" [label=""$stack9 = interfaceinvoke phonemes.<java.util.Map: java.util.Set keySet()>()""];\n	""8"" [label=""finalRules := @parameter1: java.util.Map""];\n	""9"" [label=""if $stack4 == 0""];\n	""10"" [label=""interfaceinvoke $stack8.<java.util.Set: void forEach(java.util.function.Consumer)>($stack7)""];\n	""11"" [label=""phonemeBuilder := @parameter0: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""12"" [label=""phonemes = $stack6""];\n	""13"" [label=""return $stack10""];\n	""14"" [label=""return phonemeBuilder""];\n	""15"" [label=""specialinvoke $stack10.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void <init>(java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$1)>($stack9, null)""];\n	""16"" [label=""specialinvoke $stack6.<java.util.TreeMap: void <init>(java.util.Comparator)>($stack5)""];\n	""17"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(finalRules, \""finalRules\"")""];\n	""18"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""17""[label=""cfg_next""];\n	""9"" -> ""14""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_true""];\n}\n",private 
org.apache.commons.codec.language.bm.PhoneticEngine.encode(String),Method,* Encodes a string to its phonetic representation.\n     *\n     * @param input\n     *            the String to encode\n     * @return the encoding of the input,"public String encode(final String input) {\n    final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);\n    return encode(input, languageSet);\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(input, languageSet)""];\n	""3"" [label=""input := @parameter0: java.lang.String""];\n	""4"" [label=""languageSet = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>(input)""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine.encode(String,LanguageSet)",Method,"* Encodes an input string into an output phonetic representation, given a set of possible origin languages.\n     *\n     * @param input\n     *            String to phoneticise; a String with dashes or spaces separating each word\n     * @param languageSet\n     *            set of possible origin languages\n     * @return a phonetic representation of the input; a String containing '-'-separated phonetic representations of the\n     *         input","public String encode(String input, final Languages.LanguageSet languageSet) {\n    final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);\n    // rules common across many (all) languages\n    final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, ""common"");\n    // rules that apply to a specific language that may be ambiguous or wrong if applied to other languages\n    final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);\n    // tidy the input\n    // lower case is a locale-dependent operation\n    input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();\n    if (this.nameType == NameType.GENERIC) {\n        if (input.startsWith(""d'"")) {\n            // check for d'\n            final String remainder = input.substring(2);\n            final String combined = ""d"" + remainder;\n            return ""("" + encode(remainder) + "")-("" + encode(combined) + "")"";\n        }\n        for (final String l : NAME_PREFIXES.get(this.nameType)) {\n            // handle generic prefixes\n            if (input.startsWith(l + "" "")) {\n                // check for any prefix in the words list\n                // input without the prefix\n                final String remainder = input.substring(l.length() + 1);\n                // input with prefix without space\n                final String combined = l + remainder;\n                return ""("" + encode(remainder) + "")-("" + encode(combined) + "")"";\n            }\n        }\n    }\n    final List<String> words = Arrays.asList(input.split(""\\s+""));\n    final List<String> words2 = new ArrayList<>();\n    // special-case handling of word prefixes based upon the name type\n    switch(this.nameType) {\n        case SEPHARDIC:\n            words.forEach(aWord -> {\n                final String[] parts = aWord.split(""'"", -1);\n                words2.add(parts[parts.length - 1]);\n            });\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case ASHKENAZI:\n            words2.addAll(words);\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case GENERIC:\n            words2.addAll(words);\n            break;\n        default:\n            throw new IllegalStateException(""Unreachable case: "" + this.nameType);\n    }\n    if (this.concat) {\n        // concat mode enabled\n        input = join(words2, "" "");\n    } else if (words2.size() == 1) {\n        // not a multi-word name\n        input = words.iterator().next();\n    } else if (!words2.isEmpty()) {\n        // encode each word in a multi-word name separately (normally used for approx matches)\n        final StringBuilder result = new StringBuilder();\n        words2.forEach(word -> result.append(""-"").append(encode(word)));\n        // return the result without the leading ""-""\n        return result.substring(1);\n    }\n    PhonemeBuilder phonemeBuilder = PhonemeBuilder.empty(languageSet);\n    // loop over each char in the input - we will handle the increment manually\n    for (int i = 0; i < input.length(); ) {\n        final RulesApplication rulesApplication = new RulesApplication(rules, input, phonemeBuilder, i, maxPhonemes).invoke();\n        i = rulesApplication.getI();\n        phonemeBuilder = rulesApplication.getPhonemeBuilder();\n    }\n    // Apply the general rules\n    phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n    // Apply the language-specific rules\n    phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n    return phonemeBuilder.makeString();\n}","java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)","digraph cfg_encode {\n	""1"" [label=""$stack11 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>""];\n	""2"" [label=""$stack12 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""3"" [label=""$stack13 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>""];\n	""4"" [label=""$stack14 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""5"" [label=""$stack15 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>""];\n	""6"" [label=""$stack16 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""7"" [label=""$stack17 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""8"" [label=""$stack18 = virtualinvoke input.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack17)""];\n	""9"" [label=""$stack19 = virtualinvoke $stack18.<java.lang.String: java.lang.String replace(char,char)>(45, 32)""];\n	""10"" [label=""$stack20 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>""];\n	""11"" [label=""$stack21 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""12"" [label=""$stack22 = virtualinvoke input.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\s+\"")""];\n	""13"" [label=""$stack23 = new java.util.ArrayList""];\n	""14"" [label=""$stack24 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""15"" [label=""$stack25 = <org.apache.commons.codec.language.bm.PhoneticEngine$1: int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType>""];\n	""16"" [label=""$stack26 = virtualinvoke $stack24.<org.apache.commons.codec.language.bm.NameType: int ordinal()>()""];\n	""17"" [label=""$stack27 = $stack25[$stack26]""];\n	""18"" [label=""$stack28 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>""];\n	""19"" [label=""$stack29 = interfaceinvoke combined.<java.util.List: int size()>()""];\n	""20"" [label=""$stack30 = interfaceinvoke combined.<java.util.List: boolean isEmpty()>()""];\n	""21"" [label=""$stack31 = virtualinvoke input.<java.lang.String: int length()>()""];\n	""22"" [label=""$stack32 = virtualinvoke remainder_1.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.lang.String makeString()>()""];\n	""23"" [label=""$stack33 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>""];\n	""24"" [label=""$stack34 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""25"" [label=""$stack35 = new java.lang.StringBuilder""];\n	""26"" [label=""$stack36 = dynamicinvoke \""accept\"" <java.util.function.Consumer (org.apache.commons.codec.language.bm.PhoneticEngine,java.lang.StringBuilder)>(this, remainder_1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_SPECIAL\"" <org.apache.commons.codec.language.bm.PhoneticEngine: void lambda$encode$3(java.lang.StringBuilder,java.lang.String)>, methodtype: void __METHODTYPE__(java.lang.String))""];\n	""27"" [label=""$stack37 = virtualinvoke remainder_1.<java.lang.StringBuilder: java.lang.String substring(int)>(1)""];\n	""28"" [label=""$stack38 = interfaceinvoke remainder.<java.util.List: java.util.Iterator iterator()>()""];\n	""29"" [label=""$stack39 = interfaceinvoke $stack38.<java.util.Iterator: java.lang.Object next()>()""];\n	""30"" [label=""$stack40 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""31"" [label=""$stack41 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>""];\n	""32"" [label=""$stack42 = interfaceinvoke $stack41.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack40)""];\n	""33"" [label=""$stack43 = (java.util.Collection) $stack42""];\n	""34"" [label=""$stack44 = dynamicinvoke \""accept\"" <java.util.function.Consumer (java.util.List)>(combined) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.PhoneticEngine: void lambda$encode$2(java.util.List,java.lang.String)>, methodtype: void __METHODTYPE__(java.lang.String))""];\n	""35"" [label=""$stack45 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""36"" [label=""$stack46 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>""];\n	""37"" [label=""$stack47 = interfaceinvoke $stack46.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack45)""];\n	""38"" [label=""$stack48 = (java.util.Collection) $stack47""];\n	""39"" [label=""$stack49 = new java.lang.StringBuilder""];\n	""40"" [label=""$stack50 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""41"" [label=""$stack51 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Unreachable case: \"")""];\n	""42"" [label=""$stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack50)""];\n	""43"" [label=""$stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""44"" [label=""$stack54 = new java.lang.IllegalStateException""];\n	""45"" [label=""$stack55 = virtualinvoke input.<java.lang.String: boolean startsWith(java.lang.String)>(\""d\'\"")""];\n	""46"" [label=""$stack56 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""47"" [label=""$stack57 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>""];\n	""48"" [label=""$stack58 = interfaceinvoke $stack57.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack56)""];\n	""49"" [label=""$stack59 = (java.util.Set) $stack58""];\n	""50"" [label=""$stack60 = interfaceinvoke remainder.<java.util.Iterator: boolean hasNext()>()""];\n	""51"" [label=""$stack61 = interfaceinvoke remainder.<java.util.Iterator: java.lang.Object next()>()""];\n	""52"" [label=""$stack62 = new java.lang.StringBuilder""];\n	""53"" [label=""$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(combined)""];\n	""54"" [label=""$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" \"")""];\n	""55"" [label=""$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""56"" [label=""$stack66 = virtualinvoke input.<java.lang.String: boolean startsWith(java.lang.String)>($stack65)""];\n	""57"" [label=""$stack67 = virtualinvoke combined.<java.lang.String: int length()>()""];\n	""58"" [label=""$stack68 = $stack67 + 1""];\n	""59"" [label=""$stack69 = new java.lang.StringBuilder""];\n	""60"" [label=""$stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(combined)""];\n	""61"" [label=""$stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(remainder_1)""];\n	""62"" [label=""$stack72 = new java.lang.StringBuilder""];\n	""63"" [label=""$stack73 = virtualinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(remainder_1)""];\n	""64"" [label=""$stack74 = virtualinvoke $stack72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""(\"")""];\n	""65"" [label=""$stack75 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack73)""];\n	""66"" [label=""$stack76 = virtualinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(combined_1)""];\n	""67"" [label=""$stack77 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")-(\"")""];\n	""68"" [label=""$stack78 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack76)""];\n	""69"" [label=""$stack79 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")\"")""];\n	""70"" [label=""$stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""71"" [label=""$stack81 = new java.lang.StringBuilder""];\n	""72"" [label=""$stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""d\"")""];\n	""73"" [label=""$stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(remainder)""];\n	""74"" [label=""$stack84 = new java.lang.StringBuilder""];\n	""75"" [label=""$stack85 = virtualinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(remainder)""];\n	""76"" [label=""$stack86 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""(\"")""];\n	""77"" [label=""$stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack85)""];\n	""78"" [label=""$stack88 = virtualinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(combined)""];\n	""79"" [label=""$stack89 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")-(\"")""];\n	""80"" [label=""$stack90 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack88)""];\n	""81"" [label=""$stack91 = virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")\"")""];\n	""82"" [label=""$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""83"" [label=""combined = $stack23""];\n	""84"" [label=""combined = (java.lang.String) $stack61""];\n	""85"" [label=""combined = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""86"" [label=""combined_1 = 0""];\n	""87"" [label=""combined_1 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""88"" [label=""combined_1 = virtualinvoke rulesApplication.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>()""];\n	""89"" [label=""finalRules1 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($stack14, $stack13, \""common\"")""];\n	""90"" [label=""finalRules2 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack16, $stack15, languageSet)""];\n	""91"" [label=""goto""];\n	""92"" [label=""goto""];\n	""93"" [label=""goto""];\n	""94"" [label=""goto""];\n	""95"" [label=""goto""];\n	""96"" [label=""goto""];\n	""97"" [label=""goto""];\n	""98"" [label=""if $stack21 != $stack20""];\n	""99"" [label=""if $stack28 == 0""];\n	""100"" [label=""if $stack29 != 1""];\n	""101"" [label=""if $stack30 != 0""];\n	""102"" [label=""if $stack55 == 0""];\n	""103"" [label=""if $stack60 == 0""];\n	""104"" [label=""if $stack66 == 0""];\n	""105"" [label=""if combined_1 >= $stack31""];\n	""106"" [label=""input := @parameter0: java.lang.String""];\n	""107"" [label=""input = (java.lang.String) $stack39""];\n	""108"" [label=""input = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String join(java.util.List,java.lang.String)>(combined, \"" \"")""];\n	""109"" [label=""input = virtualinvoke $stack19.<java.lang.String: java.lang.String trim()>()""];\n	""110"" [label=""interfaceinvoke combined.<java.util.List: boolean addAll(java.util.Collection)>(remainder)""];\n	""111"" [label=""interfaceinvoke combined.<java.util.List: boolean addAll(java.util.Collection)>(remainder)""];\n	""112"" [label=""interfaceinvoke combined.<java.util.List: boolean removeAll(java.util.Collection)>($stack43)""];\n	""113"" [label=""interfaceinvoke combined.<java.util.List: boolean removeAll(java.util.Collection)>($stack48)""];\n	""114"" [label=""interfaceinvoke combined.<java.util.List: void forEach(java.util.function.Consumer)>($stack36)""];\n	""115"" [label=""interfaceinvoke remainder.<java.util.List: void forEach(java.util.function.Consumer)>($stack44)""];\n	""116"" [label=""languageSet := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""117"" [label=""remainder = interfaceinvoke $stack59.<java.util.Set: java.util.Iterator iterator()>()""];\n	""118"" [label=""remainder = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack22)""];\n	""119"" [label=""remainder = virtualinvoke input.<java.lang.String: java.lang.String substring(int)>(2)""];\n	""120"" [label=""remainder_1 = $stack35""];\n	""121"" [label=""remainder_1 = specialinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)>(remainder_1, finalRules1)""];\n	""122"" [label=""remainder_1 = specialinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)>(remainder_1, finalRules2)""];\n	""123"" [label=""remainder_1 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>(languageSet)""];\n	""124"" [label=""remainder_1 = virtualinvoke input.<java.lang.String: java.lang.String substring(int)>($stack68)""];\n	""125"" [label=""remainder_1 = virtualinvoke rulesApplication.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>()""];\n	""126"" [label=""return $stack32""];\n	""127"" [label=""return $stack37""];\n	""128"" [label=""return $stack80""];\n	""129"" [label=""return $stack92""];\n	""130"" [label=""rules = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack12, $stack11, languageSet)""];\n	""131"" [label=""rulesApplication = virtualinvoke $stack34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>()""];\n	""132"" [label=""specialinvoke $stack23.<java.util.ArrayList: void <init>()>()""];\n	""133"" [label=""specialinvoke $stack34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)>(rules, input, remainder_1, combined_1, $stack33)""];\n	""134"" [label=""specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>()""];\n	""135"" [label=""specialinvoke $stack49.<java.lang.StringBuilder: void <init>()>()""];\n	""136"" [label=""specialinvoke $stack54.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack53)""];\n	""137"" [label=""specialinvoke $stack62.<java.lang.StringBuilder: void <init>()>()""];\n	""138"" [label=""specialinvoke $stack69.<java.lang.StringBuilder: void <init>()>()""];\n	""139"" [label=""specialinvoke $stack72.<java.lang.StringBuilder: void <init>()>()""];\n	""140"" [label=""specialinvoke $stack81.<java.lang.StringBuilder: void <init>()>()""];\n	""141"" [label=""specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>()""];\n	""142"" [label=""switch($stack27) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""143"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""144"" [label=""throw $stack54""];\n	""1"" -> ""130""[label=""cfg_next""];\n	""10"" -> ""98""[label=""cfg_next""];\n	""100"" -> ""20""[label=""cfg_true""];\n	""100"" -> ""28""[label=""cfg_false""];\n	""101"" -> ""123""[label=""cfg_true""];\n	""101"" -> ""25""[label=""cfg_false""];\n	""102"" -> ""119""[label=""cfg_false""];\n	""102"" -> ""47""[label=""cfg_true""];\n	""103"" -> ""12""[label=""cfg_true""];\n	""103"" -> ""51""[label=""cfg_false""];\n	""104"" -> ""57""[label=""cfg_false""];\n	""104"" -> ""91""[label=""cfg_true""];\n	""105"" -> ""121""[label=""cfg_true""];\n	""105"" -> ""24""[label=""cfg_false""];\n	""106"" -> ""116""[label=""cfg_next""];\n	""107"" -> ""96""[label=""cfg_next""];\n	""108"" -> ""95""[label=""cfg_next""];\n	""109"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""110"" -> ""31""[label=""cfg_next""];\n	""111"" -> ""94""[label=""cfg_next""];\n	""112"" -> ""93""[label=""cfg_next""];\n	""113"" -> ""92""[label=""cfg_next""];\n	""114"" -> ""27""[label=""cfg_next""];\n	""115"" -> ""36""[label=""cfg_next""];\n	""116"" -> ""2""[label=""cfg_next""];\n	""117"" -> ""50""[label=""cfg_next""];\n	""118"" -> ""13""[label=""cfg_next""];\n	""119"" -> ""71""[label=""cfg_next""];\n	""12"" -> ""118""[label=""cfg_next""];\n	""120"" -> ""26""[label=""cfg_next""];\n	""121"" -> ""122""[label=""cfg_next""];\n	""122"" -> ""22""[label=""cfg_next""];\n	""123"" -> ""86""[label=""cfg_next""];\n	""124"" -> ""59""[label=""cfg_next""];\n	""125"" -> ""97""[label=""cfg_next""];\n	""13"" -> ""132""[label=""cfg_next""];\n	""130"" -> ""4""[label=""cfg_next""];\n	""131"" -> ""88""[label=""cfg_next""];\n	""132"" -> ""83""[label=""cfg_next""];\n	""133"" -> ""131""[label=""cfg_next""];\n	""134"" -> ""120""[label=""cfg_next""];\n	""135"" -> ""41""[label=""cfg_next""];\n	""136"" -> ""144""[label=""cfg_next""];\n	""137"" -> ""53""[label=""cfg_next""];\n	""138"" -> ""60""[label=""cfg_next""];\n	""139"" -> ""64""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""140"" -> ""72""[label=""cfg_next""];\n	""141"" -> ""76""[label=""cfg_next""];\n	""142"" -> ""110""[label=""cfg_switch""];\n	""142"" -> ""111""[label=""cfg_switch""];\n	""142"" -> ""34""[label=""cfg_switch""];\n	""142"" -> ""44""[label=""cfg_switch""];\n	""143"" -> ""106""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""142""[label=""cfg_next""];\n	""18"" -> ""99""[label=""cfg_next""];\n	""19"" -> ""100""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""101""[label=""cfg_next""];\n	""21"" -> ""105""[label=""cfg_next""];\n	""22"" -> ""126""[label=""cfg_next""];\n	""23"" -> ""133""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""25"" -> ""134""[label=""cfg_next""];\n	""26"" -> ""114""[label=""cfg_next""];\n	""27"" -> ""127""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""107""[label=""cfg_next""];\n	""3"" -> ""89""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""30""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""112""[label=""cfg_next""];\n	""34"" -> ""115""[label=""cfg_next""];\n	""35"" -> ""37""[label=""cfg_next""];\n	""36"" -> ""35""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""113""[label=""cfg_next""];\n	""39"" -> ""135""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""40"" -> ""42""[label=""cfg_next""];\n	""41"" -> ""40""[label=""cfg_next""];\n	""42"" -> ""43""[label=""cfg_next""];\n	""43"" -> ""136""[label=""cfg_next""];\n	""44"" -> ""39""[label=""cfg_next""];\n	""45"" -> ""102""[label=""cfg_next""];\n	""46"" -> ""48""[label=""cfg_next""];\n	""47"" -> ""46""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""117""[label=""cfg_next""];\n	""5"" -> ""90""[label=""cfg_next""];\n	""50"" -> ""103""[label=""cfg_next""];\n	""51"" -> ""84""[label=""cfg_next""];\n	""52"" -> ""137""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""104""[label=""cfg_next""];\n	""57"" -> ""58""[label=""cfg_next""];\n	""58"" -> ""124""[label=""cfg_next""];\n	""59"" -> ""138""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""87""[label=""cfg_next""];\n	""62"" -> ""139""[label=""cfg_next""];\n	""63"" -> ""65""[label=""cfg_next""];\n	""64"" -> ""63""[label=""cfg_next""];\n	""65"" -> ""67""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""66""[label=""cfg_next""];\n	""68"" -> ""69""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""128""[label=""cfg_next""];\n	""71"" -> ""140""[label=""cfg_next""];\n	""72"" -> ""73""[label=""cfg_next""];\n	""73"" -> ""85""[label=""cfg_next""];\n	""74"" -> ""141""[label=""cfg_next""];\n	""75"" -> ""77""[label=""cfg_next""];\n	""76"" -> ""75""[label=""cfg_next""];\n	""77"" -> ""79""[label=""cfg_next""];\n	""78"" -> ""80""[label=""cfg_next""];\n	""79"" -> ""78""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""81""[label=""cfg_next""];\n	""81"" -> ""82""[label=""cfg_next""];\n	""82"" -> ""129""[label=""cfg_next""];\n	""83"" -> ""15""[label=""cfg_next""];\n	""84"" -> ""52""[label=""cfg_next""];\n	""85"" -> ""74""[label=""cfg_next""];\n	""86"" -> ""21""[label=""cfg_next""];\n	""87"" -> ""62""[label=""cfg_next""];\n	""88"" -> ""125""[label=""cfg_next""];\n	""89"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""109""[label=""cfg_next""];\n	""90"" -> ""7""[label=""cfg_next""];\n	""91"" -> ""50""[label=""cfg_goto""];\n	""92"" -> ""18""[label=""cfg_goto""];\n	""93"" -> ""18""[label=""cfg_goto""];\n	""94"" -> ""18""[label=""cfg_goto""];\n	""95"" -> ""123""[label=""cfg_goto""];\n	""96"" -> ""123""[label=""cfg_goto""];\n	""97"" -> ""21""[label=""cfg_goto""];\n	""98"" -> ""12""[label=""cfg_true""];\n	""98"" -> ""45""[label=""cfg_false""];\n	""99"" -> ""108""[label=""cfg_false""];\n	""99"" -> ""19""[label=""cfg_true""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine.getLang(),Method,* Gets the Lang language guessing rules being used.\n     *\n     * @return the Lang in use,public Lang getLang() {\n    return this.lang;\n},org.apache.commons.codec.language.bm.Lang getLang(),"digraph cfg_getLang {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes(),Method,* Gets the maximum number of phonemes the engine will calculate for a given input.\n     *\n     * @return the maximum number of phonemes\n     * @since 1.7,public int getMaxPhonemes() {\n    return this.maxPhonemes;\n},int getMaxPhonemes(),"digraph cfg_getMaxPhonemes {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine.getNameType(),Method,* Gets the NameType being used.\n     *\n     * @return the NameType in use,public NameType getNameType() {\n    return this.nameType;\n},org.apache.commons.codec.language.bm.NameType getNameType(),"digraph cfg_getNameType {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType(),Method,* Gets the RuleType being used.\n     *\n     * @return the RuleType in use,public RuleType getRuleType() {\n    return this.ruleType;\n},org.apache.commons.codec.language.bm.RuleType getRuleType(),"digraph cfg_getRuleType {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine.isConcat(),Method,"* Gets if multiple phonetic encodings are concatenated or if just the first one is kept.\n     *\n     * @return true if multiple phonetic encodings are returned, false if just the first is",public boolean isConcat() {\n    return this.concat;\n},boolean isConcat(),"digraph cfg_isConcat {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean)",Constructor,"* Generates a new, fully-configured phonetic engine.\n     *\n     * @param nameType\n     *            the type of names it will use\n     * @param ruleType\n     *            the type of rules it will apply\n     * @param concatenate\n     *            if it will concatenate multiple encodings","public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concatenate) {\n    this(nameType, ruleType, concatenate, DEFAULT_MAX_PHONEMES);\n}","void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean)","digraph cfg_init {\n	""1"" [label=""concatenate := @parameter2: boolean""];\n	""2"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""3"" [label=""return""];\n	""4"" [label=""ruleType := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>(nameType, ruleType, concatenate, 20)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int)",Constructor,"* Generates a new, fully-configured phonetic engine.\n     *\n     * @param nameType\n     *            the type of names it will use\n     * @param ruleType\n     *            the type of rules it will apply\n     * @param concatenate\n     *            if it will concatenate multiple encodings\n     * @param maxPhonemes\n     *            the maximum number of phonemes that will be handled\n     * @since 1.7","public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concatenate, final int maxPhonemes) {\n    if (ruleType == RuleType.RULES) {\n        throw new IllegalArgumentException(""ruleType must not be "" + RuleType.RULES);\n    }\n    this.nameType = nameType;\n    this.ruleType = ruleType;\n    this.concat = concatenate;\n    this.lang = Lang.instance(nameType);\n    this.maxPhonemes = maxPhonemes;\n}","void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)","digraph cfg_init {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack8)""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""3"" [label=""$stack12 = new java.lang.IllegalArgumentException""];\n	""4"" [label=""$stack5 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>""];\n	""5"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)>(nameType)""];\n	""6"" [label=""$stack7 = new java.lang.StringBuilder""];\n	""7"" [label=""$stack8 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>""];\n	""8"" [label=""$stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""ruleType must not be \"")""];\n	""9"" [label=""concatenate := @parameter2: boolean""];\n	""10"" [label=""if ruleType != $stack5""];\n	""11"" [label=""maxPhonemes := @parameter3: int""];\n	""12"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""13"" [label=""return""];\n	""14"" [label=""ruleType := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""15"" [label=""specialinvoke $stack12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack11)""];\n	""16"" [label=""specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>()""];\n	""17"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine""];\n	""19"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat> = concatenate""];\n	""20"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes> = maxPhonemes""];\n	""21"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang> = $stack6""];\n	""22"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType> = nameType""];\n	""23"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType> = ruleType""];\n	""24"" [label=""throw $stack12""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""22""[label=""cfg_true""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""9""[label=""cfg_next""];\n	""15"" -> ""24""[label=""cfg_next""];\n	""16"" -> ""8""[label=""cfg_next""];\n	""17"" -> ""4""[label=""cfg_next""];\n	""18"" -> ""12""[label=""cfg_next""];\n	""19"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""15""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""19""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""21""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(LanguageSet),Method,"* An empty builder where all phonemes must come from some set of languages. This will contain a single\n         * phoneme of zero characters. This can then be appended to. This should be the only way to create a new\n         * phoneme from scratch.\n         *\n         * @param languages the set of languages\n         * @return  a new, empty phoneme builder","public static PhonemeBuilder empty(final Languages.LanguageSet languages) {\n    return new PhonemeBuilder(new Rule.Phoneme("""", languages));\n}",org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet),"digraph cfg_empty {\n	""1"" [label=""$stack1 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""2"" [label=""$stack2 = new org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""3"" [label=""languages := @parameter0: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack1.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(\""\"", languages)""];\n	""6"" [label=""specialinvoke $stack2.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme)>($stack1)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(CharSequence),Method,* Creates a new phoneme builder containing all phonemes in this one extended by {@code str}.\n         *\n         * @param str   the characters to append to the phonemes,public void append(final CharSequence str) {\n    phonemes.forEach(ph -> ph.append(str));\n},void append(java.lang.CharSequence),"digraph cfg_append {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""2"" [label=""$stack3 = dynamicinvoke \""accept\"" <java.util.function.Consumer (java.lang.CharSequence)>(str) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void lambda$append$0(java.lang.CharSequence,org.apache.commons.codec.language.bm.Rule$Phoneme)>, methodtype: void __METHODTYPE__(org.apache.commons.codec.language.bm.Rule$Phoneme))""];\n	""3"" [label=""interfaceinvoke $stack2.<java.util.Set: void forEach(java.util.function.Consumer)>($stack3)""];\n	""4"" [label=""return""];\n	""5"" [label=""str := @parameter0: java.lang.CharSequence""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(PhonemeExpr,int)",Method,"* Applies the given phoneme expression to all phonemes in this phoneme builder.\n         * <p>\n         * This will lengthen phonemes that have compatible language sets to the expression, and drop those that are\n         * incompatible.\n         * </p>\n         *\n         * @param phonemeExpr   the expression to apply\n         * @param maxPhonemes   the maximum number of phonemes to build up","public void apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n    final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<>(Math.min(phonemes.size() * phonemeExpr.size(), maxPhonemes));\n    EXPR: for (final Rule.Phoneme left : phonemes) {\n        for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n            final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n            if (!languages.isEmpty()) {\n                final Rule.Phoneme join = new Phoneme(left, right, languages);\n                if (newPhonemes.size() < maxPhonemes) {\n                    newPhonemes.add(join);\n                    if (newPhonemes.size() >= maxPhonemes) {\n                        break EXPR;\n                    }\n                }\n            }\n        }\n    }\n    phonemes.clear();\n    phonemes.addAll(newPhonemes);\n}","void apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)","digraph cfg_apply {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""2"" [label=""$stack11 = interfaceinvoke $stack10.<java.util.Set: int size()>()""];\n	""3"" [label=""$stack12 = interfaceinvoke phonemeExpr.<org.apache.commons.codec.language.bm.Rule$PhonemeExpr: int size()>()""];\n	""4"" [label=""$stack13 = $stack11 * $stack12""];\n	""5"" [label=""$stack14 = staticinvoke <java.lang.Math: int min(int,int)>($stack13, maxPhonemes)""];\n	""6"" [label=""$stack15 = new java.util.LinkedHashSet""];\n	""7"" [label=""$stack16 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""8"" [label=""$stack17 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()""];\n	""9"" [label=""$stack18 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""10"" [label=""$stack19 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""11"" [label=""$stack20 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()""];\n	""12"" [label=""$stack21 = interfaceinvoke phonemeExpr.<org.apache.commons.codec.language.bm.Rule$PhonemeExpr: java.lang.Iterable getPhonemes()>()""];\n	""13"" [label=""$stack22 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()""];\n	""14"" [label=""$stack23 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()""];\n	""15"" [label=""$stack24 = virtualinvoke right.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>()""];\n	""16"" [label=""$stack25 = virtualinvoke left.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>()""];\n	""17"" [label=""$stack26 = virtualinvoke languages.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isEmpty()>()""];\n	""18"" [label=""$stack27 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""19"" [label=""$stack28 = interfaceinvoke newPhonemes.<java.util.Set: int size()>()""];\n	""20"" [label=""$stack29 = interfaceinvoke newPhonemes.<java.util.Set: int size()>()""];\n	""21"" [label=""goto""];\n	""22"" [label=""goto""];\n	""23"" [label=""goto""];\n	""24"" [label=""if $stack17 == 0""];\n	""25"" [label=""if $stack22 == 0""];\n	""26"" [label=""if $stack26 != 0""];\n	""27"" [label=""if $stack28 >= maxPhonemes""];\n	""28"" [label=""if $stack29 < maxPhonemes""];\n	""29"" [label=""interfaceinvoke $stack18.<java.util.Set: void clear()>()""];\n	""30"" [label=""interfaceinvoke $stack19.<java.util.Set: boolean addAll(java.util.Collection)>(newPhonemes)""];\n	""31"" [label=""interfaceinvoke newPhonemes.<java.util.Set: boolean add(java.lang.Object)>(join)""];\n	""32"" [label=""join = $stack27""];\n	""33"" [label=""l4 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>()""];\n	""34"" [label=""l6 = interfaceinvoke $stack21.<java.lang.Iterable: java.util.Iterator iterator()>()""];\n	""35"" [label=""languages = virtualinvoke $stack25.<org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack24)""];\n	""36"" [label=""left = (org.apache.commons.codec.language.bm.Rule$Phoneme) $stack20""];\n	""37"" [label=""maxPhonemes := @parameter1: int""];\n	""38"" [label=""newPhonemes = $stack15""];\n	""39"" [label=""phonemeExpr := @parameter0: org.apache.commons.codec.language.bm.Rule$PhonemeExpr""];\n	""40"" [label=""return""];\n	""41"" [label=""right = (org.apache.commons.codec.language.bm.Rule$Phoneme) $stack23""];\n	""42"" [label=""specialinvoke $stack15.<java.util.LinkedHashSet: void <init>(int)>($stack14)""];\n	""43"" [label=""specialinvoke $stack27.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(left, right, languages)""];\n	""44"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""30""[label=""cfg_next""];\n	""11"" -> ""36""[label=""cfg_next""];\n	""12"" -> ""34""[label=""cfg_next""];\n	""13"" -> ""25""[label=""cfg_next""];\n	""14"" -> ""41""[label=""cfg_next""];\n	""15"" -> ""35""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""17"" -> ""26""[label=""cfg_next""];\n	""18"" -> ""43""[label=""cfg_next""];\n	""19"" -> ""27""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""28""[label=""cfg_next""];\n	""21"" -> ""8""[label=""cfg_goto""];\n	""22"" -> ""13""[label=""cfg_goto""];\n	""23"" -> ""9""[label=""cfg_goto""];\n	""24"" -> ""11""[label=""cfg_false""];\n	""24"" -> ""9""[label=""cfg_true""];\n	""25"" -> ""14""[label=""cfg_false""];\n	""25"" -> ""21""[label=""cfg_true""];\n	""26"" -> ""18""[label=""cfg_false""];\n	""26"" -> ""22""[label=""cfg_true""];\n	""27"" -> ""22""[label=""cfg_true""];\n	""27"" -> ""31""[label=""cfg_false""];\n	""28"" -> ""22""[label=""cfg_true""];\n	""28"" -> ""23""[label=""cfg_false""];\n	""29"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""40""[label=""cfg_next""];\n	""31"" -> ""20""[label=""cfg_next""];\n	""32"" -> ""19""[label=""cfg_next""];\n	""33"" -> ""8""[label=""cfg_next""];\n	""34"" -> ""13""[label=""cfg_next""];\n	""35"" -> ""17""[label=""cfg_next""];\n	""36"" -> ""12""[label=""cfg_next""];\n	""37"" -> ""6""[label=""cfg_next""];\n	""38"" -> ""7""[label=""cfg_next""];\n	""39"" -> ""37""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""41"" -> ""16""[label=""cfg_next""];\n	""42"" -> ""38""[label=""cfg_next""];\n	""43"" -> ""32""[label=""cfg_next""];\n	""44"" -> ""39""[label=""cfg_next""];\n	""5"" -> ""42""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""33""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""29""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes(),Method,* Gets underlying phoneme set. Please don't mutate.\n         *\n         * @return  the phoneme set,public Set<Rule.Phoneme> getPhonemes() {\n    return phonemes;\n},java.util.Set getPhonemes(),"digraph cfg_getPhonemes {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString(),Method,"* Stringifies the phoneme set. This produces a single string of the strings of each phoneme,\n         * joined with a pipe. This is explicitly provided in place of toString as it is a potentially\n         * expensive operation, which should be avoided when debugging.\n         *\n         * @return  the stringified phoneme set","public String makeString() {\n    return phonemes.stream().map(Rule.Phoneme::getPhonemeText).collect(Collectors.joining(""|""));\n}",java.lang.String makeString(),"digraph cfg_makeString {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""2"" [label=""$stack2 = dynamicinvoke \""apply\"" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_VIRTUAL\"" <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence getPhonemeText()>, methodtype: java.lang.CharSequence __METHODTYPE__(org.apache.commons.codec.language.bm.Rule$Phoneme))""];\n	""3"" [label=""$stack3 = interfaceinvoke $stack1.<java.util.Set: java.util.stream.Stream stream()>()""];\n	""4"" [label=""$stack4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(\""|\"")""];\n	""5"" [label=""$stack5 = interfaceinvoke $stack3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack2)""];\n	""6"" [label=""$stack6 = interfaceinvoke $stack5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack4)""];\n	""7"" [label=""$stack7 = (java.lang.String) $stack6""];\n	""8"" [label=""return $stack7""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.<init>(Phoneme),Constructor,No Comment,private PhonemeBuilder(final Rule.Phoneme phoneme) {\n    this.phonemes = new LinkedHashSet<>();\n    this.phonemes.add(phoneme);\n},void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme),"digraph cfg_init {\n	""1"" [label=""$stack2 = new java.util.LinkedHashSet""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes>""];\n	""3"" [label=""interfaceinvoke $stack3.<java.util.Set: boolean add(java.lang.Object)>(phoneme)""];\n	""4"" [label=""phoneme := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke $stack2.<java.util.LinkedHashSet: void <init>()>()""];\n	""7"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""8"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""9"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes> = $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.<init>(Set),Constructor,No Comment,private PhonemeBuilder(final Set<Rule.Phoneme> phonemes) {\n    this.phonemes = phonemes;\n},void <init>(java.util.Set),"digraph cfg_init {\n	""1"" [label=""phonemes := @parameter0: java.util.Set""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""5"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set phonemes> = phonemes""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI(),Method,No Comment,public int getI() {\n    return i;\n},int getI(),"digraph cfg_getI {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder(),Method,No Comment,public PhonemeBuilder getPhonemeBuilder() {\n    return phonemeBuilder;\n},org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder(),"digraph cfg_getPhonemeBuilder {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke(),Method,"* Invokes the rules. Loops over the rules list, stopping at the first one that has a matching context\n         * and pattern. Then applies this rule to the phoneme builder to produce updated phonemes. If there was no\n         * match, {@code i} is advanced one and the character is silently dropped from the phonetic spelling.\n         *\n         * @return {@code this}","public RulesApplication invoke() {\n    found = false;\n    int patternLength = 1;\n    final List<Rule> rules = finalRules.get(input.subSequence(i, i + patternLength));\n    if (rules != null) {\n        for (final Rule rule : rules) {\n            final String pattern = rule.getPattern();\n            patternLength = pattern.length();\n            if (rule.patternAndContextMatches(input, i)) {\n                phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n                found = true;\n                break;\n            }\n        }\n    }\n    if (!found) {\n        patternLength = 1;\n    }\n    i += patternLength;\n    return this;\n}",org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke(),"digraph cfg_invoke {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.Map finalRules>""];\n	""2"" [label=""$stack11 = interfaceinvoke $stack9.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($stack8, $stack7)""];\n	""3"" [label=""$stack12 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack11)""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>""];\n	""6"" [label=""$stack15 = $stack14 + patternLength""];\n	""7"" [label=""$stack16 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()""];\n	""8"" [label=""$stack17 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()""];\n	""9"" [label=""$stack18 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>""];\n	""10"" [label=""$stack19 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input>""];\n	""11"" [label=""$stack20 = virtualinvoke rule.<org.apache.commons.codec.language.bm.Rule: boolean patternAndContextMatches(java.lang.CharSequence,int)>($stack19, $stack18)""];\n	""12"" [label=""$stack21 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>""];\n	""13"" [label=""$stack22 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes>""];\n	""14"" [label=""$stack23 = virtualinvoke rule.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme()>()""];\n	""15"" [label=""$stack6 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>""];\n	""16"" [label=""$stack7 = $stack6 + patternLength""];\n	""17"" [label=""$stack8 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>""];\n	""18"" [label=""$stack9 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input>""];\n	""19"" [label=""goto""];\n	""20"" [label=""goto""];\n	""21"" [label=""if $stack13 != 0""];\n	""22"" [label=""if $stack16 == 0""];\n	""23"" [label=""if $stack20 == 0""];\n	""24"" [label=""if rules == null""];\n	""25"" [label=""l3 = interfaceinvoke rules.<java.util.List: java.util.Iterator iterator()>()""];\n	""26"" [label=""pattern = virtualinvoke rule.<org.apache.commons.codec.language.bm.Rule: java.lang.String getPattern()>()""];\n	""27"" [label=""patternLength = 1""];\n	""28"" [label=""patternLength = 1""];\n	""29"" [label=""patternLength = virtualinvoke pattern.<java.lang.String: int length()>()""];\n	""30"" [label=""return this""];\n	""31"" [label=""rule = (org.apache.commons.codec.language.bm.Rule) $stack17""];\n	""32"" [label=""rules = (java.util.List) $stack12""];\n	""33"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""34"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 0""];\n	""35"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 1""];\n	""36"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = $stack15""];\n	""37"" [label=""virtualinvoke $stack21.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)>($stack23, $stack22)""];\n	""1"" -> ""18""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""23""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""37""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""7""[label=""cfg_goto""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""4""[label=""cfg_goto""];\n	""21"" -> ""28""[label=""cfg_false""];\n	""21"" -> ""5""[label=""cfg_true""];\n	""22"" -> ""4""[label=""cfg_true""];\n	""22"" -> ""8""[label=""cfg_false""];\n	""23"" -> ""12""[label=""cfg_false""];\n	""23"" -> ""19""[label=""cfg_true""];\n	""24"" -> ""25""[label=""cfg_false""];\n	""24"" -> ""4""[label=""cfg_true""];\n	""25"" -> ""7""[label=""cfg_next""];\n	""26"" -> ""29""[label=""cfg_next""];\n	""27"" -> ""1""[label=""cfg_next""];\n	""28"" -> ""5""[label=""cfg_next""];\n	""29"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""26""[label=""cfg_next""];\n	""32"" -> ""24""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""27""[label=""cfg_next""];\n	""35"" -> ""20""[label=""cfg_next""];\n	""36"" -> ""30""[label=""cfg_next""];\n	""37"" -> ""35""[label=""cfg_next""];\n	""4"" -> ""21""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""36""[label=""cfg_next""];\n	""7"" -> ""22""[label=""cfg_next""];\n	""8"" -> ""31""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.isFound(),Method,No Comment,public boolean isFound() {\n    return found;\n},boolean isFound(),"digraph cfg_isFound {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int)",Constructor,No Comment,"RulesApplication(final Map<String, List<Rule>> finalRules, final CharSequence input, final PhonemeBuilder phonemeBuilder, final int i, final int maxPhonemes) {\n    Objects.requireNonNull(finalRules, ""finalRules"");\n    this.finalRules = finalRules;\n    this.phonemeBuilder = phonemeBuilder;\n    this.input = input;\n    this.i = i;\n    this.maxPhonemes = maxPhonemes;\n}","void <init>(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)","digraph cfg_init {\n	""1"" [label=""finalRules := @parameter0: java.util.Map""];\n	""2"" [label=""i := @parameter3: int""];\n	""3"" [label=""input := @parameter1: java.lang.CharSequence""];\n	""4"" [label=""maxPhonemes := @parameter4: int""];\n	""5"" [label=""phonemeBuilder := @parameter2: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""8"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(finalRules, \""finalRules\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication""];\n	""10"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = i""];\n	""11"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes> = maxPhonemes""];\n	""12"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input> = input""];\n	""13"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.Map finalRules> = finalRules""];\n	""14"" [label=""this.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder> = phonemeBuilder""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""13""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.bm.Languages.getInstance(NameType),Method,* Gets an instance for the given name type.\n     *\n     * @param nameType The name type to lookup.\n     * @return an instance for the given name type.,public static Languages getInstance(final NameType nameType) {\n    return LANGUAGES.get(nameType);\n},org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType),"digraph cfg_getInstance {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.Map: java.lang.Object get(java.lang.Object)>(nameType)""];\n	""3"" [label=""$stack3 = (org.apache.commons.codec.language.bm.Languages) $stack2""];\n	""4"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""5"" [label=""return $stack3""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.Languages.getInstance(String),Method,* Gets a new instance for the given resource name.\n     *\n     * @param languagesResourceName the resource name to lookup.\n     * @return a new instance.,"public static Languages getInstance(final String languagesResourceName) {\n    // read languages list\n    final Set<String> ls = new HashSet<>();\n    try (Scanner lsScanner = new Scanner(Resources.getInputStream(languagesResourceName), ResourceConstants.ENCODING)) {\n        boolean inExtendedComment = false;\n        while (lsScanner.hasNextLine()) {\n            final String line = lsScanner.nextLine().trim();\n            if (inExtendedComment) {\n                if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n                    inExtendedComment = false;\n                }\n            } else if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n                inExtendedComment = true;\n            } else if (!line.isEmpty()) {\n                ls.add(line);\n            }\n        }\n        return new Languages(Collections.unmodifiableSet(ls));\n    }\n}",org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String),"digraph cfg_getInstance {\n	""1"" [label=""$stack10 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(ls)""];\n	""2"" [label=""$stack11 = new org.apache.commons.codec.language.bm.Languages""];\n	""3"" [label=""$stack12 = virtualinvoke lsScanner.<java.util.Scanner: java.lang.String nextLine()>()""];\n	""4"" [label=""$stack13 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>(\""/*\"")""];\n	""5"" [label=""$stack14 = virtualinvoke line.<java.lang.String: boolean isEmpty()>()""];\n	""6"" [label=""$stack15 = virtualinvoke line.<java.lang.String: boolean endsWith(java.lang.String)>(\""*/\"")""];\n	""7"" [label=""$stack16 := @caughtexception""];\n	""8"" [label=""$stack17 := @caughtexception""];\n	""9"" [label=""$stack5 = new java.util.HashSet""];\n	""10"" [label=""$stack6 = <org.apache.commons.codec.language.bm.ResourceConstants: java.lang.String ENCODING>""];\n	""11"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.Resources: java.io.InputStream getInputStream(java.lang.String)>(languagesResourceName)""];\n	""12"" [label=""$stack8 = new java.util.Scanner""];\n	""13"" [label=""$stack9 = virtualinvoke lsScanner.<java.util.Scanner: boolean hasNextLine()>()""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack13 == 0""];\n	""19"" [label=""if $stack14 != 0""];\n	""20"" [label=""if $stack15 == 0""];\n	""21"" [label=""if $stack9 == 0""];\n	""22"" [label=""if inExtendedComment == 0""];\n	""23"" [label=""inExtendedComment = $stack17""];\n	""24"" [label=""inExtendedComment = 0""];\n	""25"" [label=""inExtendedComment = 0""];\n	""26"" [label=""inExtendedComment = 1""];\n	""27"" [label=""interfaceinvoke ls.<java.util.Set: boolean add(java.lang.Object)>(line)""];\n	""28"" [label=""languagesResourceName := @parameter0: java.lang.String""];\n	""29"" [label=""line = $stack11""];\n	""30"" [label=""line = $stack16""];\n	""31"" [label=""line = virtualinvoke $stack12.<java.lang.String: java.lang.String trim()>()""];\n	""32"" [label=""ls = $stack5""];\n	""33"" [label=""lsScanner = $stack8""];\n	""34"" [label=""return line""];\n	""35"" [label=""specialinvoke $stack11.<org.apache.commons.codec.language.bm.Languages: void <init>(java.util.Set)>($stack10)""];\n	""36"" [label=""specialinvoke $stack5.<java.util.HashSet: void <init>()>()""];\n	""37"" [label=""specialinvoke $stack8.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($stack7, $stack6)""];\n	""38"" [label=""throw inExtendedComment""];\n	""39"" [label=""virtualinvoke inExtendedComment.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(line)""];\n	""40"" [label=""virtualinvoke lsScanner.<java.util.Scanner: void close()>()""];\n	""41"" [label=""virtualinvoke lsScanner.<java.util.Scanner: void close()>()""];\n	""1"" -> ""35""[label=""cfg_next""];\n	""1"" -> ""8""[label=""cfg_except""];\n	""10"" -> ""37""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""21""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_except""];\n	""14"" -> ""13""[label=""cfg_goto""];\n	""14"" -> ""8""[label=""cfg_except""];\n	""15"" -> ""14""[label=""cfg_goto""];\n	""15"" -> ""8""[label=""cfg_except""];\n	""16"" -> ""38""[label=""cfg_goto""];\n	""17"" -> ""14""[label=""cfg_goto""];\n	""17"" -> ""8""[label=""cfg_except""];\n	""18"" -> ""26""[label=""cfg_false""];\n	""18"" -> ""5""[label=""cfg_true""];\n	""18"" -> ""8""[label=""cfg_except""];\n	""19"" -> ""14""[label=""cfg_true""];\n	""19"" -> ""27""[label=""cfg_false""];\n	""19"" -> ""8""[label=""cfg_except""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_except""];\n	""20"" -> ""14""[label=""cfg_true""];\n	""20"" -> ""25""[label=""cfg_false""];\n	""20"" -> ""8""[label=""cfg_except""];\n	""21"" -> ""2""[label=""cfg_true""];\n	""21"" -> ""3""[label=""cfg_false""];\n	""21"" -> ""8""[label=""cfg_except""];\n	""22"" -> ""4""[label=""cfg_true""];\n	""22"" -> ""6""[label=""cfg_false""];\n	""22"" -> ""8""[label=""cfg_except""];\n	""23"" -> ""40""[label=""cfg_next""];\n	""24"" -> ""13""[label=""cfg_next""];\n	""24"" -> ""8""[label=""cfg_except""];\n	""25"" -> ""15""[label=""cfg_next""];\n	""25"" -> ""8""[label=""cfg_except""];\n	""26"" -> ""17""[label=""cfg_next""];\n	""26"" -> ""8""[label=""cfg_except""];\n	""27"" -> ""14""[label=""cfg_next""];\n	""27"" -> ""8""[label=""cfg_except""];\n	""28"" -> ""9""[label=""cfg_next""];\n	""29"" -> ""41""[label=""cfg_next""];\n	""29"" -> ""8""[label=""cfg_except""];\n	""3"" -> ""31""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_except""];\n	""30"" -> ""39""[label=""cfg_next""];\n	""31"" -> ""22""[label=""cfg_next""];\n	""31"" -> ""8""[label=""cfg_except""];\n	""32"" -> ""12""[label=""cfg_next""];\n	""33"" -> ""24""[label=""cfg_next""];\n	""35"" -> ""29""[label=""cfg_next""];\n	""35"" -> ""8""[label=""cfg_except""];\n	""36"" -> ""32""[label=""cfg_next""];\n	""37"" -> ""33""[label=""cfg_next""];\n	""39"" -> ""38""[label=""cfg_next""];\n	""4"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_except""];\n	""40"" -> ""16""[label=""cfg_next""];\n	""40"" -> ""7""[label=""cfg_except""];\n	""41"" -> ""34""[label=""cfg_next""];\n	""5"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_except""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_except""];\n	""7"" -> ""30""[label=""cfg_next""];\n	""8"" -> ""23""[label=""cfg_next""];\n	""9"" -> ""36""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.Languages.langResourceName(NameType),Method,No Comment,"private static String langResourceName(final NameType nameType) {\n    return String.format(""/org/apache/commons/codec/language/bm/%s_languages.txt"", nameType.getName());\n}",java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType),"digraph cfg_langResourceName {\n	""1"" [label=""$stack1 = newarray (java.lang.Object)[1]""];\n	""2"" [label=""$stack1[0] = $stack2""];\n	""3"" [label=""$stack2 = virtualinvoke nameType.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>()""];\n	""4"" [label=""$stack3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""/org/apache/commons/codec/language/bm/%s_languages.txt\"", $stack1)""];\n	""5"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""6"" [label=""return $stack3""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Languages.getLanguages(),Method,* Gets the language set.\n     *\n     * @return the language set.,public Set<String> getLanguages() {\n    return this.languages;\n},java.util.Set getLanguages(),"digraph cfg_getLanguages {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages.<init>(Set),Constructor,No Comment,private Languages(final Set<String> languages) {\n    this.languages = languages;\n},void <init>(java.util.Set),"digraph cfg_init {\n	""1"" [label=""languages := @parameter0: java.util.Set""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages""];\n	""5"" [label=""this.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages> = languages""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.bm.Languages$LanguageSet.from(Set),Method,* Gets a language set for the given languages.\n         *\n         * @param languages a language set.\n         * @return a LanguageSet.,public static LanguageSet from(final Set<String> languages) {\n    return languages.isEmpty() ? NO_LANGUAGES : new SomeLanguages(languages);\n},org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set),"digraph cfg_from {\n	""1"" [label=""$stack1 = interfaceinvoke languages.<java.util.Set: boolean isEmpty()>()""];\n	""2"" [label=""$stack2 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>""];\n	""3"" [label=""$stack2 = new org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack1 == 0""];\n	""6"" [label=""languages := @parameter0: java.util.Set""];\n	""7"" [label=""return $stack2""];\n	""8"" [label=""specialinvoke $stack2.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: void <init>(java.util.Set,org.apache.commons.codec.language.bm.Languages$1)>(languages, null)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_goto""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""5"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.Languages$LanguageSet.contains(String),Abstract Method,* Tests whether this instance contains the given value.\n         *\n         * @param language the value to test.\n         * @return whether this instance contains the given value.,public abstract boolean contains(String language);,boolean contains(java.lang.String),digraph cfg_contains {\n}\n,"public , abstract "
org.apache.commons.codec.language.bm.Languages$LanguageSet.getAny(),Abstract Method,* Gets any of this instance's element.\n         *\n         * @return any of this instance's element.,public abstract String getAny();,java.lang.String getAny(),digraph cfg_getAny {\n}\n,"public , abstract "
org.apache.commons.codec.language.bm.Languages$LanguageSet.isEmpty(),Abstract Method,* Tests whether this instance is empty.\n         *\n         * @return whether this instance is empty.,public abstract boolean isEmpty();,boolean isEmpty(),digraph cfg_isEmpty {\n}\n,"public , abstract "
org.apache.commons.codec.language.bm.Languages$LanguageSet.isSingleton(),Abstract Method,* Tests whether this instance contains a single element.\n         *\n         * @return whether this instance contains a single element.,public abstract boolean isSingleton();,boolean isSingleton(),digraph cfg_isSingleton {\n}\n,"public , abstract "
org.apache.commons.codec.language.bm.Languages$LanguageSet.<init>(),Constructor,* Constructs a new instance for subclasses.,public LanguageSet() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.contains(String),Method,No Comment,@Override\npublic boolean contains(final String language) {\n    return this.languages.contains(language);\n},boolean contains(java.lang.String),"digraph cfg_contains {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""2"" [label=""$stack3 = interfaceinvoke $stack2.<java.util.Set: boolean contains(java.lang.Object)>(language)""];\n	""3"" [label=""language := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.getAny(),Method,No Comment,@Override\npublic String getAny() {\n    return this.languages.iterator().next();\n},java.lang.String getAny(),"digraph cfg_getAny {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.Set: java.util.Iterator iterator()>()""];\n	""3"" [label=""$stack3 = interfaceinvoke $stack2.<java.util.Iterator: java.lang.Object next()>()""];\n	""4"" [label=""$stack4 = (java.lang.String) $stack3""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.getLanguages(),Method,* Gets the language strings\n         *\n         * @return the languages strings.,public Set<String> getLanguages() {\n    return this.languages;\n},java.util.Set getLanguages(),"digraph cfg_getLanguages {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.isEmpty(),Method,No Comment,@Override\npublic boolean isEmpty() {\n    return this.languages.isEmpty();\n},boolean isEmpty(),"digraph cfg_isEmpty {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.Set: boolean isEmpty()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.isSingleton(),Method,No Comment,@Override\npublic boolean isSingleton() {\n    return this.languages.size() == 1;\n},boolean isSingleton(),"digraph cfg_isSingleton {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.Set: int size()>()""];\n	""3"" [label=""$stack3 = 0""];\n	""4"" [label=""$stack3 = 1""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack2 != 1""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_false""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.merge(LanguageSet),Method,No Comment,@Override\npublic LanguageSet merge(final LanguageSet other) {\n    if (other == NO_LANGUAGES) {\n        return this;\n    }\n    if (other == ANY_LANGUAGE) {\n        return other;\n    }\n    final SomeLanguages someLanguages = (SomeLanguages) other;\n    final Set<String> set = new HashSet<>(languages);\n    set.addAll(someLanguages.languages);\n    return from(set);\n},org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet),"digraph cfg_merge {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>""];\n	""2"" [label=""$stack5 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""4"" [label=""$stack7 = new java.util.HashSet""];\n	""5"" [label=""$stack8 = someLanguages.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""6"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.bm.Languages$SomeLanguages: org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set)>(set)""];\n	""7"" [label=""if other != $stack4""];\n	""8"" [label=""if other != $stack5""];\n	""9"" [label=""interfaceinvoke set.<java.util.Set: boolean addAll(java.util.Collection)>($stack8)""];\n	""10"" [label=""other := @parameter0: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""11"" [label=""return $stack9""];\n	""12"" [label=""return other""];\n	""13"" [label=""return this""];\n	""14"" [label=""set = $stack7""];\n	""15"" [label=""someLanguages = (org.apache.commons.codec.language.bm.Languages$SomeLanguages) other""];\n	""16"" [label=""specialinvoke $stack7.<java.util.HashSet: void <init>(java.util.Collection)>($stack6)""];\n	""17"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""15"" -> ""4""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""11""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_false""];\n	""7"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""12""[label=""cfg_false""];\n	""8"" -> ""15""[label=""cfg_true""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.restrictTo(LanguageSet),Method,No Comment,@Override\npublic LanguageSet restrictTo(final LanguageSet other) {\n    if (other == NO_LANGUAGES) {\n        return other;\n    }\n    if (other == ANY_LANGUAGE) {\n        return this;\n    }\n    final SomeLanguages someLanguages = (SomeLanguages) other;\n    return from(languages.stream().filter(lang -> someLanguages.languages.contains(lang)).collect(Collectors.toSet()));\n},org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet),"digraph cfg_restrictTo {\n	""1"" [label=""$stack10 = interfaceinvoke $stack9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack8)""];\n	""2"" [label=""$stack11 = (java.util.Set) $stack10""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.language.bm.Languages$SomeLanguages: org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set)>($stack11)""];\n	""4"" [label=""$stack3 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>""];\n	""5"" [label=""$stack4 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>""];\n	""6"" [label=""$stack5 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""7"" [label=""$stack6 = dynamicinvoke \""test\"" <java.util.function.Predicate (org.apache.commons.codec.language.bm.Languages$SomeLanguages)>(someLanguages) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Languages$SomeLanguages: boolean lambda$restrictTo$0(org.apache.commons.codec.language.bm.Languages$SomeLanguages,java.lang.String)>, methodtype: boolean __METHODTYPE__(java.lang.String))""];\n	""8"" [label=""$stack7 = interfaceinvoke $stack5.<java.util.Set: java.util.stream.Stream stream()>()""];\n	""9"" [label=""$stack8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>()""];\n	""10"" [label=""$stack9 = interfaceinvoke $stack7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack6)""];\n	""11"" [label=""if other != $stack3""];\n	""12"" [label=""if other != $stack4""];\n	""13"" [label=""other := @parameter0: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""14"" [label=""return $stack12""];\n	""15"" [label=""return other""];\n	""16"" [label=""return this""];\n	""17"" [label=""someLanguages = (org.apache.commons.codec.language.bm.Languages$SomeLanguages) other""];\n	""18"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""15""[label=""cfg_false""];\n	""11"" -> ""5""[label=""cfg_true""];\n	""12"" -> ""16""[label=""cfg_false""];\n	""12"" -> ""17""[label=""cfg_true""];\n	""13"" -> ""4""[label=""cfg_next""];\n	""17"" -> ""6""[label=""cfg_next""];\n	""18"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.toString(),Method,No Comment,"@Override\npublic String toString() {\n    return ""Languages("" + languages.toString() + "")"";\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages>""];\n	""3"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.Object: java.lang.String toString()>()""];\n	""4"" [label=""$stack4 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Languages(\"")""];\n	""5"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3)""];\n	""6"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")\"")""];\n	""7"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""8"" [label=""return $stack7""];\n	""9"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""10"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Languages$SomeLanguages.<init>(Set),Constructor,No Comment,private SomeLanguages(final Set<String> languages) {\n    this.languages = Collections.unmodifiableSet(languages);\n},void <init>(java.util.Set),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(languages)""];\n	""2"" [label=""languages := @parameter0: java.util.Set""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.language.bm.Languages$LanguageSet: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.bm.Languages$SomeLanguages""];\n	""6"" [label=""this.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: java.util.Set languages> = $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.language.bm.Rule.contains(CharSequence,char)",Method,No Comment,"private static boolean contains(final CharSequence chars, final char input) {\n    return chars.chars().anyMatch(c -> c == input);\n}","boolean contains(java.lang.CharSequence,char)","digraph cfg_contains {\n	""1"" [label=""$stack2 = dynamicinvoke \""test\"" <java.util.function.IntPredicate (char)>(input) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(int), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$contains$2(char,int)>, methodtype: boolean __METHODTYPE__(int))""];\n	""2"" [label=""$stack3 = interfaceinvoke chars.<java.lang.CharSequence: java.util.stream.IntStream chars()>()""];\n	""3"" [label=""$stack4 = interfaceinvoke $stack3.<java.util.stream.IntStream: boolean anyMatch(java.util.function.IntPredicate)>($stack2)""];\n	""4"" [label=""chars := @parameter0: java.lang.CharSequence""];\n	""5"" [label=""input := @parameter1: char""];\n	""6"" [label=""return $stack4""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.createResourceName(NameType,RuleType,String)",Method,No Comment,"private static String createResourceName(final NameType nameType, final RuleType rt, final String lang) {\n    return String.format(""/org/apache/commons/codec/language/bm/%s_%s_%s.txt"", nameType.getName(), rt.getName(), lang);\n}","java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)","digraph cfg_createResourceName {\n	""1"" [label=""$stack3 = newarray (java.lang.Object)[3]""];\n	""2"" [label=""$stack3[0] = $stack4""];\n	""3"" [label=""$stack3[1] = $stack5""];\n	""4"" [label=""$stack3[2] = lang""];\n	""5"" [label=""$stack4 = virtualinvoke nameType.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>()""];\n	""6"" [label=""$stack5 = virtualinvoke rt.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>()""];\n	""7"" [label=""$stack6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""/org/apache/commons/codec/language/bm/%s_%s_%s.txt\"", $stack3)""];\n	""8"" [label=""lang := @parameter2: java.lang.String""];\n	""9"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""10"" [label=""return $stack6""];\n	""11"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.createScanner(NameType,RuleType,String)",Method,No Comment,"// Closing the Scanner closes the resource\n@SuppressWarnings(""resource"")\nprivate static Scanner createScanner(final NameType nameType, final RuleType rt, final String lang) {\n    final String resName = createResourceName(nameType, rt, lang);\n    return new Scanner(Resources.getInputStream(resName), ResourceConstants.ENCODING);\n}","java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)","digraph cfg_createScanner {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.language.bm.ResourceConstants: java.lang.String ENCODING>""];\n	""2"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.Resources: java.io.InputStream getInputStream(java.lang.String)>(resName)""];\n	""3"" [label=""$stack6 = new java.util.Scanner""];\n	""4"" [label=""lang := @parameter2: java.lang.String""];\n	""5"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""6"" [label=""resName = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(nameType, rt, lang)""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""9"" [label=""specialinvoke $stack6.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($stack5, $stack4)""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Rule.createScanner(String),Method,No Comment,"// Closing the Scanner closes the resource\n@SuppressWarnings(""resource"")\nprivate static Scanner createScanner(final String lang) {\n    final String resName = String.format(""/org/apache/commons/codec/language/bm/%s.txt"", lang);\n    return new Scanner(Resources.getInputStream(resName), ResourceConstants.ENCODING);\n}",java.util.Scanner createScanner(java.lang.String),"digraph cfg_createScanner {\n	""1"" [label=""$stack2 = newarray (java.lang.Object)[1]""];\n	""2"" [label=""$stack2[0] = lang""];\n	""3"" [label=""$stack3 = <org.apache.commons.codec.language.bm.ResourceConstants: java.lang.String ENCODING>""];\n	""4"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.Resources: java.io.InputStream getInputStream(java.lang.String)>(resName)""];\n	""5"" [label=""$stack5 = new java.util.Scanner""];\n	""6"" [label=""lang := @parameter0: java.lang.String""];\n	""7"" [label=""resName = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""/org/apache/commons/codec/language/bm/%s.txt\"", $stack2)""];\n	""8"" [label=""return $stack5""];\n	""9"" [label=""specialinvoke $stack5.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($stack4, $stack3)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.endsWith(CharSequence,CharSequence)",Method,No Comment,"private static boolean endsWith(final CharSequence input, final CharSequence suffix) {\n    final int suffixLength = suffix.length();\n    final int inputLength = input.length();\n    if (suffixLength > inputLength) {\n        return false;\n    }\n    for (int i = inputLength - 1, j = suffixLength - 1; j >= 0; i--, j--) {\n        if (input.charAt(i) != suffix.charAt(j)) {\n            return false;\n        }\n    }\n    return true;\n}","boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)","digraph cfg_endsWith {\n	""1"" [label=""$stack6 = interfaceinvoke suffix.<java.lang.CharSequence: char charAt(int)>(j)""];\n	""2"" [label=""$stack7 = interfaceinvoke input.<java.lang.CharSequence: char charAt(int)>(i)""];\n	""3"" [label=""goto""];\n	""4"" [label=""i = i + -1""];\n	""5"" [label=""i = inputLength - 1""];\n	""6"" [label=""if $stack7 == $stack6""];\n	""7"" [label=""if j < 0""];\n	""8"" [label=""if suffixLength <= inputLength""];\n	""9"" [label=""input := @parameter0: java.lang.CharSequence""];\n	""10"" [label=""inputLength = interfaceinvoke input.<java.lang.CharSequence: int length()>()""];\n	""11"" [label=""j = j + -1""];\n	""12"" [label=""j = suffixLength - 1""];\n	""13"" [label=""return 0""];\n	""14"" [label=""return 0""];\n	""15"" [label=""return 1""];\n	""16"" [label=""suffix := @parameter1: java.lang.CharSequence""];\n	""17"" [label=""suffixLength = interfaceinvoke suffix.<java.lang.CharSequence: int length()>()""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_goto""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_true""];\n	""7"" -> ""15""[label=""cfg_true""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""13""[label=""cfg_false""];\n	""8"" -> ""5""[label=""cfg_true""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,LanguageSet)",Method,"* Gets rules for a combination of name type, rule type and languages.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param langs\n     *            the set of languages to consider\n     * @return a list of Rules that apply","public static List<Rule> getInstance(final NameType nameType, final RuleType rt, final Languages.LanguageSet langs) {\n    final Map<String, List<Rule>> ruleMap = getInstanceMap(nameType, rt, langs);\n    final List<Rule> allRules = new ArrayList<>();\n    ruleMap.values().forEach(rules -> allRules.addAll(rules));\n    return allRules;\n}","java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)","digraph cfg_getInstance {\n	""1"" [label=""$stack5 = new java.util.ArrayList""];\n	""2"" [label=""$stack6 = dynamicinvoke \""accept\"" <java.util.function.Consumer (java.util.List)>(allRules) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: void lambda$getInstance$3(java.util.List,java.util.List)>, methodtype: void __METHODTYPE__(java.util.List))""];\n	""3"" [label=""$stack7 = interfaceinvoke ruleMap.<java.util.Map: java.util.Collection values()>()""];\n	""4"" [label=""allRules = $stack5""];\n	""5"" [label=""interfaceinvoke $stack7.<java.util.Collection: void forEach(java.util.function.Consumer)>($stack6)""];\n	""6"" [label=""langs := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""7"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""8"" [label=""return allRules""];\n	""9"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""10"" [label=""ruleMap = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(nameType, rt, langs)""];\n	""11"" [label=""specialinvoke $stack5.<java.util.ArrayList: void <init>()>()""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,String)",Method,"* Gets rules for a combination of name type, rule type and a single language.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param lang\n     *            the language to consider\n     * @return a list of Rules that apply","public static List<Rule> getInstance(final NameType nameType, final RuleType rt, final String lang) {\n    return getInstance(nameType, rt, LanguageSet.from(new HashSet<>(Arrays.asList(lang))));\n}","java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)","digraph cfg_getInstance {\n	""1"" [label=""$stack3 = newarray (java.lang.String)[1]""];\n	""2"" [label=""$stack3[0] = lang""];\n	""3"" [label=""$stack4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack3)""];\n	""4"" [label=""$stack5 = new java.util.HashSet""];\n	""5"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set)>($stack5)""];\n	""6"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(nameType, rt, $stack6)""];\n	""7"" [label=""lang := @parameter2: java.lang.String""];\n	""8"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""9"" [label=""return $stack7""];\n	""10"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""11"" [label=""specialinvoke $stack5.<java.util.HashSet: void <init>(java.util.Collection)>($stack4)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,LanguageSet)",Method,"* Gets rules for a combination of name type, rule type and languages.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param langs\n     *            the set of languages to consider\n     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n     * @since 1.9","public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final Languages.LanguageSet langs) {\n    return langs.isSingleton() ? getInstanceMap(nameType, rt, langs.getAny()) : getInstanceMap(nameType, rt, Languages.ANY);\n}","java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)","digraph cfg_getInstanceMap {\n	""1"" [label=""$stack3 = virtualinvoke langs.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>()""];\n	""2"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(nameType, rt, \""any\"")""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(nameType, rt, $stack5)""];\n	""4"" [label=""$stack5 = virtualinvoke langs.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>()""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack3 == 0""];\n	""7"" [label=""langs := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""8"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""9"" [label=""return $stack4""];\n	""10"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_goto""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,String)",Method,"* Gets rules for a combination of name type, rule type and a single language.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param lang\n     *            the language to consider\n     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n     * @since 1.9","public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) {\n    final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang);\n    if (rules == null) {\n        throw new IllegalArgumentException(String.format(""No rules found for %s, %s, %s."", nameType.getName(), rt.getName(), lang));\n    }\n    return rules;\n}","java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)","digraph cfg_getInstanceMap {\n	""1"" [label=""$stack10 = newarray (java.lang.Object)[3]""];\n	""2"" [label=""$stack10[0] = $stack11""];\n	""3"" [label=""$stack10[1] = $stack12""];\n	""4"" [label=""$stack10[2] = lang""];\n	""5"" [label=""$stack11 = virtualinvoke nameType.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>()""];\n	""6"" [label=""$stack12 = virtualinvoke rt.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>()""];\n	""7"" [label=""$stack13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""No rules found for %s, %s, %s.\"", $stack10)""];\n	""8"" [label=""$stack14 = new java.lang.IllegalArgumentException""];\n	""9"" [label=""$stack4 = <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES>""];\n	""10"" [label=""$stack5 = interfaceinvoke $stack4.<java.util.Map: java.lang.Object get(java.lang.Object)>(nameType)""];\n	""11"" [label=""$stack6 = (java.util.Map) $stack5""];\n	""12"" [label=""$stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(rt)""];\n	""13"" [label=""$stack8 = (java.util.Map) $stack7""];\n	""14"" [label=""$stack9 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>(lang)""];\n	""15"" [label=""if rules != null""];\n	""16"" [label=""lang := @parameter2: java.lang.String""];\n	""17"" [label=""nameType := @parameter0: org.apache.commons.codec.language.bm.NameType""];\n	""18"" [label=""return rules""];\n	""19"" [label=""rt := @parameter1: org.apache.commons.codec.language.bm.RuleType""];\n	""20"" [label=""rules = (java.util.Map) $stack9""];\n	""21"" [label=""specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)""];\n	""22"" [label=""throw $stack14""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""20""[label=""cfg_next""];\n	""15"" -> ""18""[label=""cfg_true""];\n	""15"" -> ""8""[label=""cfg_false""];\n	""16"" -> ""9""[label=""cfg_next""];\n	""17"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""20"" -> ""15""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.language.bm.Rule.parsePhoneme(String),Method,No Comment,"private static Phoneme parsePhoneme(final String ph) {\n    final int open = ph.indexOf(""["");\n    if (open >= 0) {\n        if (!ph.endsWith(""]"")) {\n            throw new IllegalArgumentException(""Phoneme expression contains a '[' but does not end in ']'"");\n        }\n        final String before = ph.substring(0, open);\n        final String in = ph.substring(open + 1, ph.length() - 1);\n        final Set<String> langs = new HashSet<>(Arrays.asList(in.split(""[+]"")));\n        return new Phoneme(before, Languages.LanguageSet.from(langs));\n    }\n    return new Phoneme(ph, Languages.ANY_LANGUAGE);\n}",org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String),"digraph cfg_parsePhoneme {\n	""1"" [label=""$stack10 = open + 1""];\n	""2"" [label=""$stack11 = virtualinvoke in.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""[+]\"")""];\n	""3"" [label=""$stack12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack11)""];\n	""4"" [label=""$stack13 = new java.util.HashSet""];\n	""5"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set)>(langs)""];\n	""6"" [label=""$stack15 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""7"" [label=""$stack16 = new java.lang.IllegalArgumentException""];\n	""8"" [label=""$stack5 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>""];\n	""9"" [label=""$stack6 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""10"" [label=""$stack7 = virtualinvoke ph.<java.lang.String: boolean endsWith(java.lang.String)>(\""]\"")""];\n	""11"" [label=""$stack8 = virtualinvoke ph.<java.lang.String: int length()>()""];\n	""12"" [label=""$stack9 = $stack8 - 1""];\n	""13"" [label=""before = virtualinvoke ph.<java.lang.String: java.lang.String substring(int,int)>(0, open)""];\n	""14"" [label=""if $stack7 != 0""];\n	""15"" [label=""if open < 0""];\n	""16"" [label=""in = virtualinvoke ph.<java.lang.String: java.lang.String substring(int,int)>($stack10, $stack9)""];\n	""17"" [label=""langs = $stack13""];\n	""18"" [label=""open = virtualinvoke ph.<java.lang.String: int indexOf(java.lang.String)>(\""[\"")""];\n	""19"" [label=""ph := @parameter0: java.lang.String""];\n	""20"" [label=""return $stack15""];\n	""21"" [label=""return $stack6""];\n	""22"" [label=""specialinvoke $stack13.<java.util.HashSet: void <init>(java.util.Collection)>($stack12)""];\n	""23"" [label=""specialinvoke $stack15.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(before, $stack14)""];\n	""24"" [label=""specialinvoke $stack16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Phoneme expression contains a \'[\' but does not end in \']\'\"")""];\n	""25"" [label=""specialinvoke $stack6.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(ph, $stack5)""];\n	""26"" [label=""throw $stack16""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""16""[label=""cfg_next""];\n	""13"" -> ""1""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_true""];\n	""14"" -> ""7""[label=""cfg_false""];\n	""15"" -> ""10""[label=""cfg_false""];\n	""15"" -> ""9""[label=""cfg_true""];\n	""16"" -> ""4""[label=""cfg_next""];\n	""17"" -> ""6""[label=""cfg_next""];\n	""18"" -> ""15""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""22"" -> ""17""[label=""cfg_next""];\n	""23"" -> ""20""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""22""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""23""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""24""[label=""cfg_next""];\n	""8"" -> ""25""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(String),Method,No Comment,"private static PhonemeExpr parsePhonemeExpr(final String ph) {\n    if (ph.startsWith(""("")) {\n        // we have a bracketed list of options\n        if (!ph.endsWith("")"")) {\n            throw new IllegalArgumentException(""Phoneme starts with '(' so must end with ')'"");\n        }\n        final List<Phoneme> phs = new ArrayList<>();\n        final String body = ph.substring(1, ph.length() - 1);\n        for (final String part : body.split(""[|]"")) {\n            phs.add(parsePhoneme(part));\n        }\n        if (body.startsWith(""|"") || body.endsWith(""|"")) {\n            phs.add(new Phoneme("""", Languages.ANY_LANGUAGE));\n        }\n        return new PhonemeList(phs);\n    }\n    return parsePhoneme(ph);\n}",org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String),"digraph cfg_parsePhonemeExpr {\n	""1"" [label=""$stack10 = new java.util.ArrayList""];\n	""2"" [label=""$stack11 = virtualinvoke ph.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack12 = $stack11 - 1""];\n	""4"" [label=""$stack13 = virtualinvoke body.<java.lang.String: boolean startsWith(java.lang.String)>(\""|\"")""];\n	""5"" [label=""$stack14 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>""];\n	""6"" [label=""$stack15 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""7"" [label=""$stack16 = new org.apache.commons.codec.language.bm.Rule$PhonemeList""];\n	""8"" [label=""$stack17 = virtualinvoke body.<java.lang.String: boolean endsWith(java.lang.String)>(\""|\"")""];\n	""9"" [label=""$stack18 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>(part)""];\n	""10"" [label=""$stack19 = new java.lang.IllegalArgumentException""];\n	""11"" [label=""$stack7 = virtualinvoke ph.<java.lang.String: boolean startsWith(java.lang.String)>(\""(\"")""];\n	""12"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>(ph)""];\n	""13"" [label=""$stack9 = virtualinvoke ph.<java.lang.String: boolean endsWith(java.lang.String)>(\"")\"")""];\n	""14"" [label=""body = virtualinvoke ph.<java.lang.String: java.lang.String substring(int,int)>(1, $stack12)""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack13 != 0""];\n	""17"" [label=""if $stack17 == 0""];\n	""18"" [label=""if $stack7 == 0""];\n	""19"" [label=""if $stack9 != 0""];\n	""20"" [label=""if l5 >= l4""];\n	""21"" [label=""interfaceinvoke phs.<java.util.List: boolean add(java.lang.Object)>($stack15)""];\n	""22"" [label=""interfaceinvoke phs.<java.util.List: boolean add(java.lang.Object)>($stack18)""];\n	""23"" [label=""l3 = virtualinvoke body.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""[|]\"")""];\n	""24"" [label=""l4 = lengthof l3""];\n	""25"" [label=""l5 = 0""];\n	""26"" [label=""l5 = l5 + 1""];\n	""27"" [label=""part = l3[l5]""];\n	""28"" [label=""ph := @parameter0: java.lang.String""];\n	""29"" [label=""phs = $stack10""];\n	""30"" [label=""return $stack16""];\n	""31"" [label=""return $stack8""];\n	""32"" [label=""specialinvoke $stack10.<java.util.ArrayList: void <init>()>()""];\n	""33"" [label=""specialinvoke $stack15.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(\""\"", $stack14)""];\n	""34"" [label=""specialinvoke $stack16.<org.apache.commons.codec.language.bm.Rule$PhonemeList: void <init>(java.util.List)>(phs)""];\n	""35"" [label=""specialinvoke $stack19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Phoneme starts with \'(\' so must end with \')\'\"")""];\n	""36"" [label=""throw $stack19""];\n	""1"" -> ""32""[label=""cfg_next""];\n	""10"" -> ""35""[label=""cfg_next""];\n	""11"" -> ""18""[label=""cfg_next""];\n	""12"" -> ""31""[label=""cfg_next""];\n	""13"" -> ""19""[label=""cfg_next""];\n	""14"" -> ""23""[label=""cfg_next""];\n	""15"" -> ""20""[label=""cfg_goto""];\n	""16"" -> ""6""[label=""cfg_true""];\n	""16"" -> ""8""[label=""cfg_false""];\n	""17"" -> ""6""[label=""cfg_false""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""18"" -> ""12""[label=""cfg_true""];\n	""18"" -> ""13""[label=""cfg_false""];\n	""19"" -> ""1""[label=""cfg_true""];\n	""19"" -> ""10""[label=""cfg_false""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""27""[label=""cfg_false""];\n	""20"" -> ""4""[label=""cfg_true""];\n	""21"" -> ""7""[label=""cfg_next""];\n	""22"" -> ""26""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""15""[label=""cfg_next""];\n	""27"" -> ""9""[label=""cfg_next""];\n	""28"" -> ""11""[label=""cfg_next""];\n	""29"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""32"" -> ""29""[label=""cfg_next""];\n	""33"" -> ""21""[label=""cfg_next""];\n	""34"" -> ""30""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""4"" -> ""16""[label=""cfg_next""];\n	""5"" -> ""33""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""34""[label=""cfg_next""];\n	""8"" -> ""17""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.parseRules(Scanner,String)",Method,No Comment,"private static Map<String, List<Rule>> parseRules(final Scanner scanner, final String location) {\n    final Map<String, List<Rule>> lines = new HashMap<>();\n    int currentLine = 0;\n    boolean inMultilineComment = false;\n    while (scanner.hasNextLine()) {\n        currentLine++;\n        final String rawLine = scanner.nextLine();\n        String line = rawLine;\n        if (inMultilineComment) {\n            if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n                inMultilineComment = false;\n            }\n        } else if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n            inMultilineComment = true;\n        } else {\n            // discard comments\n            final int cmtI = line.indexOf(ResourceConstants.CMT);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            }\n            // trim leading-trailing whitespace\n            line = line.trim();\n            if (line.isEmpty()) {\n                // empty lines can be safely skipped\n                continue;\n            }\n            if (line.startsWith(HASH_INCLUDE)) {\n                // include statement\n                final String incl = line.substring(HASH_INCLUDE_LENGTH).trim();\n                if (incl.contains("" "")) {\n                    throw new IllegalArgumentException(""Malformed import statement '"" + rawLine + ""' in "" + location);\n                }\n                try (Scanner hashIncludeScanner = createScanner(incl)) {\n                    lines.putAll(parseRules(hashIncludeScanner, location + ""->"" + incl));\n                }\n            } else {\n                // rule\n                final String[] parts = line.split(""\\s+"");\n                if (parts.length != 4) {\n                    throw new IllegalArgumentException(""Malformed rule statement split into "" + parts.length + "" parts: "" + rawLine + "" in "" + location);\n                }\n                try {\n                    final String pat = stripQuotes(parts[0]);\n                    final String lCon = stripQuotes(parts[1]);\n                    final String rCon = stripQuotes(parts[2]);\n                    final PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));\n                    final int cLine = currentLine;\n                    final Rule r = new Rule(pat, lCon, rCon, ph) {\n\n                        private final int myLine = cLine;\n\n                        private final String loc = location;\n\n                        @Override\n                        public String toString() {\n                            final StringBuilder sb = new StringBuilder();\n                            sb.append(""Rule"");\n                            sb.append(""{line="").append(myLine);\n                            sb.append("", loc='"").append(loc).append('\'');\n                            sb.append("", pat='"").append(pat).append('\'');\n                            sb.append("", lcon='"").append(lCon).append('\'');\n                            sb.append("", rcon='"").append(rCon).append('\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final String patternKey = r.pattern.substring(0, 1);\n                    final List<Rule> rules = lines.computeIfAbsent(patternKey, k -> new ArrayList<>());\n                    rules.add(r);\n                } catch (final IllegalArgumentException e) {\n                    throw new IllegalStateException(""Problem parsing line '"" + currentLine + ""' in "" + location, e);\n                }\n            }\n        }\n    }\n    return lines;\n}","java.util.Map parseRules(java.util.Scanner,java.lang.String)","digraph cfg_parseRules {\n	""1"" [label=""$stack17 = new java.util.HashMap""];\n	""2"" [label=""$stack18 = virtualinvoke scanner.<java.util.Scanner: boolean hasNextLine()>()""];\n	""3"" [label=""$stack19 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>(\""/*\"")""];\n	""4"" [label=""$stack20 = virtualinvoke line.<java.lang.String: boolean isEmpty()>()""];\n	""5"" [label=""$stack21 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>(\""#include\"")""];\n	""6"" [label=""$stack22 = lengthof incl""];\n	""7"" [label=""$stack23 = incl[0]""];\n	""8"" [label=""$stack24 = incl[1]""];\n	""9"" [label=""$stack25 = incl[2]""];\n	""10"" [label=""$stack26 = incl[3]""];\n	""11"" [label=""$stack27 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($stack26)""];\n	""12"" [label=""$stack28 = new org.apache.commons.codec.language.bm.Rule$1""];\n	""13"" [label=""$stack29 = r.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>""];\n	""14"" [label=""$stack30 = dynamicinvoke \""apply\"" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: java.util.List lambda$parseRules$4(java.lang.String)>, methodtype: java.util.List __METHODTYPE__(java.lang.String))""];\n	""15"" [label=""$stack31 = interfaceinvoke lines.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(patternKey, $stack30)""];\n	""16"" [label=""$stack32 = new java.lang.StringBuilder""];\n	""17"" [label=""$stack33 = lengthof incl""];\n	""18"" [label=""$stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed rule statement split into \"")""];\n	""19"" [label=""$stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack33)""];\n	""20"" [label=""$stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" parts: \"")""];\n	""21"" [label=""$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""22"" [label=""$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" in \"")""];\n	""23"" [label=""$stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""24"" [label=""$stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""25"" [label=""$stack41 = new java.lang.IllegalArgumentException""];\n	""26"" [label=""$stack42 = <org.apache.commons.codec.language.bm.Rule: int HASH_INCLUDE_LENGTH>""];\n	""27"" [label=""$stack43 = virtualinvoke line.<java.lang.String: java.lang.String substring(int)>($stack42)""];\n	""28"" [label=""$stack44 = virtualinvoke incl.<java.lang.String: boolean contains(java.lang.CharSequence)>(\"" \"")""];\n	""29"" [label=""$stack45 = new java.lang.StringBuilder""];\n	""30"" [label=""$stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""31"" [label=""$stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""->\"")""];\n	""32"" [label=""$stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(incl)""];\n	""33"" [label=""$stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""34"" [label=""$stack50 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)>(hashIncludeScanner, $stack49)""];\n	""35"" [label=""$stack51 = new java.lang.StringBuilder""];\n	""36"" [label=""$stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed import statement \'\"")""];\n	""37"" [label=""$stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""38"" [label=""$stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""\' in \"")""];\n	""39"" [label=""$stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""40"" [label=""$stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""41"" [label=""$stack57 = new java.lang.IllegalArgumentException""];\n	""42"" [label=""$stack58 = virtualinvoke line.<java.lang.String: boolean endsWith(java.lang.String)>(\""*/\"")""];\n	""43"" [label=""$stack59 := @caughtexception""];\n	""44"" [label=""$stack60 = new java.lang.StringBuilder""];\n	""45"" [label=""$stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Problem parsing line \'\"")""];\n	""46"" [label=""$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currentLine)""];\n	""47"" [label=""$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""\' in \"")""];\n	""48"" [label=""$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""49"" [label=""$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""50"" [label=""$stack66 = new java.lang.IllegalStateException""];\n	""51"" [label=""$stack67 := @caughtexception""];\n	""52"" [label=""$stack68 := @caughtexception""];\n	""53"" [label=""cLine = currentLine""];\n	""54"" [label=""cmtI = virtualinvoke line.<java.lang.String: int indexOf(java.lang.String)>(\""//\"")""];\n	""55"" [label=""currentLine = 0""];\n	""56"" [label=""currentLine = currentLine + 1""];\n	""57"" [label=""goto""];\n	""58"" [label=""goto""];\n	""59"" [label=""goto""];\n	""60"" [label=""goto""];\n	""61"" [label=""goto""];\n	""62"" [label=""goto""];\n	""63"" [label=""goto""];\n	""64"" [label=""goto""];\n	""65"" [label=""hashIncludeScanner = $stack59""];\n	""66"" [label=""hashIncludeScanner = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($stack23)""];\n	""67"" [label=""hashIncludeScanner = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(java.lang.String)>(incl)""];\n	""68"" [label=""if $stack18 == 0""];\n	""69"" [label=""if $stack19 == 0""];\n	""70"" [label=""if $stack20 == 0""];\n	""71"" [label=""if $stack21 == 0""];\n	""72"" [label=""if $stack22 == 4""];\n	""73"" [label=""if $stack44 == 0""];\n	""74"" [label=""if $stack58 == 0""];\n	""75"" [label=""if cmtI < 0""];\n	""76"" [label=""if hashIncludeScanner == null""];\n	""77"" [label=""if hashIncludeScanner == null""];\n	""78"" [label=""if inMultilineComment == 0""];\n	""79"" [label=""inMultilineComment = 0""];\n	""80"" [label=""inMultilineComment = 0""];\n	""81"" [label=""inMultilineComment = 1""];\n	""82"" [label=""incl = virtualinvoke $stack43.<java.lang.String: java.lang.String trim()>()""];\n	""83"" [label=""incl = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\s+\"")""];\n	""84"" [label=""interfaceinvoke lines.<java.util.Map: void putAll(java.util.Map)>($stack50)""];\n	""85"" [label=""interfaceinvoke rules.<java.util.List: boolean add(java.lang.Object)>(r)""];\n	""86"" [label=""lCon = $stack68""];\n	""87"" [label=""lCon = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($stack24)""];\n	""88"" [label=""line = rawLine""];\n	""89"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String substring(int,int)>(0, cmtI)""];\n	""90"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String trim()>()""];\n	""91"" [label=""lines = $stack17""];\n	""92"" [label=""location := @parameter1: java.lang.String""];\n	""93"" [label=""patternKey = virtualinvoke $stack29.<java.lang.String: java.lang.String substring(int,int)>(0, 1)""];\n	""94"" [label=""ph = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)>($stack27)""];\n	""95"" [label=""r = $stack28""];\n	""96"" [label=""rCon = $stack67""];\n	""97"" [label=""rCon = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($stack25)""];\n	""98"" [label=""rawLine = virtualinvoke scanner.<java.util.Scanner: java.lang.String nextLine()>()""];\n	""99"" [label=""return lines""];\n	""100"" [label=""rules = (java.util.List) $stack31""];\n	""101"" [label=""scanner := @parameter0: java.util.Scanner""];\n	""102"" [label=""specialinvoke $stack17.<java.util.HashMap: void <init>()>()""];\n	""103"" [label=""specialinvoke $stack28.<org.apache.commons.codec.language.bm.Rule$1: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(hashIncludeScanner, lCon, rCon, ph, cLine, location, hashIncludeScanner, lCon, rCon)""];\n	""104"" [label=""specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>()""];\n	""105"" [label=""specialinvoke $stack41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack40)""];\n	""106"" [label=""specialinvoke $stack45.<java.lang.StringBuilder: void <init>()>()""];\n	""107"" [label=""specialinvoke $stack51.<java.lang.StringBuilder: void <init>()>()""];\n	""108"" [label=""specialinvoke $stack57.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack56)""];\n	""109"" [label=""specialinvoke $stack60.<java.lang.StringBuilder: void <init>()>()""];\n	""110"" [label=""specialinvoke $stack66.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($stack65, hashIncludeScanner)""];\n	""111"" [label=""throw $stack41""];\n	""112"" [label=""throw $stack57""];\n	""113"" [label=""throw $stack66""];\n	""114"" [label=""throw lCon""];\n	""115"" [label=""virtualinvoke hashIncludeScanner.<java.util.Scanner: void close()>()""];\n	""116"" [label=""virtualinvoke hashIncludeScanner.<java.util.Scanner: void close()>()""];\n	""117"" [label=""virtualinvoke lCon.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(rCon)""];\n	""1"" -> ""102""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""43""[label=""cfg_except""];\n	""100"" -> ""43""[label=""cfg_except""];\n	""100"" -> ""85""[label=""cfg_next""];\n	""101"" -> ""92""[label=""cfg_next""];\n	""102"" -> ""91""[label=""cfg_next""];\n	""103"" -> ""43""[label=""cfg_except""];\n	""103"" -> ""95""[label=""cfg_next""];\n	""104"" -> ""18""[label=""cfg_next""];\n	""105"" -> ""111""[label=""cfg_next""];\n	""106"" -> ""30""[label=""cfg_next""];\n	""106"" -> ""52""[label=""cfg_except""];\n	""107"" -> ""36""[label=""cfg_next""];\n	""108"" -> ""112""[label=""cfg_next""];\n	""109"" -> ""45""[label=""cfg_next""];\n	""11"" -> ""43""[label=""cfg_except""];\n	""11"" -> ""94""[label=""cfg_next""];\n	""110"" -> ""113""[label=""cfg_next""];\n	""115"" -> ""62""[label=""cfg_next""];\n	""116"" -> ""51""[label=""cfg_except""];\n	""116"" -> ""63""[label=""cfg_next""];\n	""117"" -> ""114""[label=""cfg_next""];\n	""12"" -> ""103""[label=""cfg_next""];\n	""12"" -> ""43""[label=""cfg_except""];\n	""13"" -> ""43""[label=""cfg_except""];\n	""13"" -> ""93""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""43""[label=""cfg_except""];\n	""15"" -> ""100""[label=""cfg_next""];\n	""15"" -> ""43""[label=""cfg_except""];\n	""16"" -> ""104""[label=""cfg_next""];\n	""17"" -> ""19""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""68""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""105""[label=""cfg_next""];\n	""25"" -> ""16""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""82""[label=""cfg_next""];\n	""28"" -> ""73""[label=""cfg_next""];\n	""29"" -> ""106""[label=""cfg_next""];\n	""29"" -> ""52""[label=""cfg_except""];\n	""3"" -> ""69""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""30"" -> ""52""[label=""cfg_except""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""52""[label=""cfg_except""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""32"" -> ""52""[label=""cfg_except""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""33"" -> ""52""[label=""cfg_except""];\n	""34"" -> ""52""[label=""cfg_except""];\n	""34"" -> ""84""[label=""cfg_next""];\n	""35"" -> ""107""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""70""[label=""cfg_next""];\n	""40"" -> ""108""[label=""cfg_next""];\n	""41"" -> ""35""[label=""cfg_next""];\n	""42"" -> ""74""[label=""cfg_next""];\n	""43"" -> ""65""[label=""cfg_next""];\n	""44"" -> ""109""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""48""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""110""[label=""cfg_next""];\n	""5"" -> ""71""[label=""cfg_next""];\n	""50"" -> ""44""[label=""cfg_next""];\n	""51"" -> ""96""[label=""cfg_next""];\n	""52"" -> ""86""[label=""cfg_next""];\n	""53"" -> ""12""[label=""cfg_next""];\n	""53"" -> ""43""[label=""cfg_except""];\n	""54"" -> ""75""[label=""cfg_next""];\n	""55"" -> ""79""[label=""cfg_next""];\n	""56"" -> ""98""[label=""cfg_next""];\n	""57"" -> ""2""[label=""cfg_goto""];\n	""58"" -> ""57""[label=""cfg_goto""];\n	""59"" -> ""57""[label=""cfg_goto""];\n	""6"" -> ""72""[label=""cfg_next""];\n	""60"" -> ""2""[label=""cfg_goto""];\n	""61"" -> ""57""[label=""cfg_goto""];\n	""62"" -> ""61""[label=""cfg_goto""];\n	""63"" -> ""114""[label=""cfg_goto""];\n	""64"" -> ""57""[label=""cfg_goto""];\n	""65"" -> ""50""[label=""cfg_next""];\n	""66"" -> ""43""[label=""cfg_except""];\n	""66"" -> ""8""[label=""cfg_next""];\n	""67"" -> ""29""[label=""cfg_next""];\n	""68"" -> ""56""[label=""cfg_false""];\n	""68"" -> ""99""[label=""cfg_true""];\n	""69"" -> ""54""[label=""cfg_true""];\n	""69"" -> ""81""[label=""cfg_false""];\n	""7"" -> ""43""[label=""cfg_except""];\n	""7"" -> ""66""[label=""cfg_next""];\n	""70"" -> ""5""[label=""cfg_true""];\n	""70"" -> ""60""[label=""cfg_false""];\n	""71"" -> ""26""[label=""cfg_false""];\n	""71"" -> ""83""[label=""cfg_true""];\n	""72"" -> ""25""[label=""cfg_false""];\n	""72"" -> ""7""[label=""cfg_true""];\n	""73"" -> ""41""[label=""cfg_false""];\n	""73"" -> ""67""[label=""cfg_true""];\n	""74"" -> ""57""[label=""cfg_true""];\n	""74"" -> ""80""[label=""cfg_false""];\n	""75"" -> ""89""[label=""cfg_false""];\n	""75"" -> ""90""[label=""cfg_true""];\n	""76"" -> ""115""[label=""cfg_false""];\n	""76"" -> ""61""[label=""cfg_true""];\n	""77"" -> ""114""[label=""cfg_true""];\n	""77"" -> ""116""[label=""cfg_false""];\n	""78"" -> ""3""[label=""cfg_true""];\n	""78"" -> ""42""[label=""cfg_false""];\n	""79"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""43""[label=""cfg_except""];\n	""8"" -> ""87""[label=""cfg_next""];\n	""80"" -> ""58""[label=""cfg_next""];\n	""81"" -> ""59""[label=""cfg_next""];\n	""82"" -> ""28""[label=""cfg_next""];\n	""83"" -> ""6""[label=""cfg_next""];\n	""84"" -> ""52""[label=""cfg_except""];\n	""84"" -> ""76""[label=""cfg_next""];\n	""85"" -> ""43""[label=""cfg_except""];\n	""85"" -> ""64""[label=""cfg_next""];\n	""86"" -> ""77""[label=""cfg_next""];\n	""87"" -> ""43""[label=""cfg_except""];\n	""87"" -> ""9""[label=""cfg_next""];\n	""88"" -> ""78""[label=""cfg_next""];\n	""89"" -> ""90""[label=""cfg_next""];\n	""9"" -> ""43""[label=""cfg_except""];\n	""9"" -> ""97""[label=""cfg_next""];\n	""90"" -> ""4""[label=""cfg_next""];\n	""91"" -> ""55""[label=""cfg_next""];\n	""92"" -> ""1""[label=""cfg_next""];\n	""93"" -> ""14""[label=""cfg_next""];\n	""93"" -> ""43""[label=""cfg_except""];\n	""94"" -> ""43""[label=""cfg_except""];\n	""94"" -> ""53""[label=""cfg_next""];\n	""95"" -> ""13""[label=""cfg_next""];\n	""95"" -> ""43""[label=""cfg_except""];\n	""96"" -> ""117""[label=""cfg_next""];\n	""97"" -> ""10""[label=""cfg_next""];\n	""97"" -> ""43""[label=""cfg_except""];\n	""98"" -> ""88""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Rule.pattern(String),Method,"* Attempts to compile the regex into direct string ops, falling back to Pattern and Matcher in the worst case.\n     *\n     * @param regex\n     *            the regular expression to compile\n     * @return an RPattern that will match this regex","private static RPattern pattern(final String regex) {\n    final boolean startsWith = regex.startsWith(""^"");\n    final boolean endsWith = regex.endsWith(""$"");\n    final String content = regex.substring(startsWith ? 1 : 0, endsWith ? regex.length() - 1 : regex.length());\n    final boolean boxes = content.contains(""["");\n    if (!boxes) {\n        if (startsWith && endsWith) {\n            // exact match\n            if (content.isEmpty()) {\n                // empty\n                return input -> input.length() == 0;\n            }\n            return input -> input.equals(content);\n        }\n        if ((startsWith || endsWith) && content.isEmpty()) {\n            // matches every string\n            return ALL_STRINGS_RMATCHER;\n        }\n        if (startsWith) {\n            // matches from start\n            return input -> startsWith(input, content);\n        }\n        if (endsWith) {\n            // matches from start\n            return input -> endsWith(input, content);\n        }\n    } else {\n        final boolean startsWithBox = content.startsWith(""["");\n        final boolean endsWithBox = content.endsWith(""]"");\n        if (startsWithBox && endsWithBox) {\n            String boxContent = content.substring(1, content.length() - 1);\n            if (!boxContent.contains(""["")) {\n                // box containing alternatives\n                final boolean negate = boxContent.startsWith(""^"");\n                if (negate) {\n                    boxContent = boxContent.substring(1);\n                }\n                final String bContent = boxContent;\n                final boolean shouldMatch = !negate;\n                if (startsWith && endsWith) {\n                    // exact match\n                    return input -> input.length() == 1 && contains(bContent, input.charAt(0)) == shouldMatch;\n                }\n                if (startsWith) {\n                    // first char\n                    return input -> input.length() > 0 && contains(bContent, input.charAt(0)) == shouldMatch;\n                }\n                if (endsWith) {\n                    // last char\n                    return input -> input.length() > 0 && contains(bContent, input.charAt(input.length() - 1)) == shouldMatch;\n                }\n            }\n        }\n    }\n    return new RPattern() {\n\n        final Pattern pattern = Pattern.compile(regex);\n\n        @Override\n        public boolean isMatch(final CharSequence input) {\n            final Matcher matcher = pattern.matcher(input);\n            return matcher.find();\n        }\n    };\n}",org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String),"digraph cfg_pattern {\n	""1"" [label=""$stack11 = $stack26 - 1""];\n	""2"" [label=""$stack11 = virtualinvoke regex.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack12 = new org.apache.commons.codec.language.bm.Rule$2""];\n	""4"" [label=""$stack13 = virtualinvoke content.<java.lang.String: int length()>()""];\n	""5"" [label=""$stack14 = $stack13 - 1""];\n	""6"" [label=""$stack15 = virtualinvoke boxContent.<java.lang.String: boolean contains(java.lang.CharSequence)>(\""[\"")""];\n	""7"" [label=""$stack16 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String,boolean)>(bContent, shouldMatch) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$11(java.lang.String,boolean,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""8"" [label=""$stack17 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String,boolean)>(bContent, shouldMatch) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$10(java.lang.String,boolean,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""9"" [label=""$stack18 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String,boolean)>(bContent, shouldMatch) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$9(java.lang.String,boolean,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""10"" [label=""$stack19 = virtualinvoke content.<java.lang.String: boolean isEmpty()>()""];\n	""11"" [label=""$stack20 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String)>(content) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$8(java.lang.String,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""12"" [label=""$stack21 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String)>(content) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$7(java.lang.String,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""13"" [label=""$stack22 = <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER>""];\n	""14"" [label=""$stack23 = virtualinvoke content.<java.lang.String: boolean isEmpty()>()""];\n	""15"" [label=""$stack24 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern (java.lang.String)>(content) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$6(java.lang.String,java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""16"" [label=""$stack25 = dynamicinvoke \""isMatch\"" <org.apache.commons.codec.language.bm.Rule$RPattern ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.CharSequence), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.bm.Rule: boolean lambda$pattern$5(java.lang.CharSequence)>, methodtype: boolean __METHODTYPE__(java.lang.CharSequence))""];\n	""17"" [label=""$stack26 = virtualinvoke regex.<java.lang.String: int length()>()""];\n	""18"" [label=""$stack27 = 0""];\n	""19"" [label=""$stack27 = 1""];\n	""20"" [label=""bContent = boxContent""];\n	""21"" [label=""boxContent = virtualinvoke boxContent.<java.lang.String: java.lang.String substring(int)>(1)""];\n	""22"" [label=""boxContent = virtualinvoke content.<java.lang.String: java.lang.String substring(int,int)>(1, $stack14)""];\n	""23"" [label=""boxes = virtualinvoke content.<java.lang.String: boolean contains(java.lang.CharSequence)>(\""[\"")""];\n	""24"" [label=""content = virtualinvoke regex.<java.lang.String: java.lang.String substring(int,int)>($stack27, $stack11)""];\n	""25"" [label=""endsWith = virtualinvoke regex.<java.lang.String: boolean endsWith(java.lang.String)>(\""$\"")""];\n	""26"" [label=""endsWithBox = virtualinvoke content.<java.lang.String: boolean endsWith(java.lang.String)>(\""]\"")""];\n	""27"" [label=""goto""];\n	""28"" [label=""goto""];\n	""29"" [label=""goto""];\n	""30"" [label=""if $stack15 != 0""];\n	""31"" [label=""if $stack19 == 0""];\n	""32"" [label=""if $stack23 == 0""];\n	""33"" [label=""if boxes != 0""];\n	""34"" [label=""if endsWith == 0""];\n	""35"" [label=""if endsWith == 0""];\n	""36"" [label=""if endsWith == 0""];\n	""37"" [label=""if endsWith == 0""];\n	""38"" [label=""if endsWith == 0""];\n	""39"" [label=""if endsWith == 0""];\n	""40"" [label=""if endsWithBox == 0""];\n	""41"" [label=""if negate != 0""];\n	""42"" [label=""if negate == 0""];\n	""43"" [label=""if startsWith != 0""];\n	""44"" [label=""if startsWith == 0""];\n	""45"" [label=""if startsWith == 0""];\n	""46"" [label=""if startsWith == 0""];\n	""47"" [label=""if startsWith == 0""];\n	""48"" [label=""if startsWith == 0""];\n	""49"" [label=""if startsWithBox == 0""];\n	""50"" [label=""negate = virtualinvoke boxContent.<java.lang.String: boolean startsWith(java.lang.String)>(\""^\"")""];\n	""51"" [label=""regex := @parameter0: java.lang.String""];\n	""52"" [label=""return $stack12""];\n	""53"" [label=""return $stack16""];\n	""54"" [label=""return $stack17""];\n	""55"" [label=""return $stack18""];\n	""56"" [label=""return $stack20""];\n	""57"" [label=""return $stack21""];\n	""58"" [label=""return $stack22""];\n	""59"" [label=""return $stack24""];\n	""60"" [label=""return $stack25""];\n	""61"" [label=""shouldMatch = 0""];\n	""62"" [label=""shouldMatch = 1""];\n	""63"" [label=""specialinvoke $stack12.<org.apache.commons.codec.language.bm.Rule$2: void <init>(java.lang.String)>(regex)""];\n	""64"" [label=""startsWith = virtualinvoke regex.<java.lang.String: boolean startsWith(java.lang.String)>(\""^\"")""];\n	""65"" [label=""startsWithBox = virtualinvoke content.<java.lang.String: boolean startsWith(java.lang.String)>(\""[\"")""];\n	""1"" -> ""28""[label=""cfg_next""];\n	""10"" -> ""31""[label=""cfg_next""];\n	""11"" -> ""56""[label=""cfg_next""];\n	""12"" -> ""57""[label=""cfg_next""];\n	""13"" -> ""58""[label=""cfg_next""];\n	""14"" -> ""32""[label=""cfg_next""];\n	""15"" -> ""59""[label=""cfg_next""];\n	""16"" -> ""60""[label=""cfg_next""];\n	""17"" -> ""1""[label=""cfg_next""];\n	""18"" -> ""34""[label=""cfg_next""];\n	""19"" -> ""27""[label=""cfg_next""];\n	""2"" -> ""24""[label=""cfg_next""];\n	""20"" -> ""41""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""6""[label=""cfg_next""];\n	""23"" -> ""33""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""25"" -> ""44""[label=""cfg_next""];\n	""26"" -> ""49""[label=""cfg_next""];\n	""27"" -> ""34""[label=""cfg_goto""];\n	""28"" -> ""24""[label=""cfg_goto""];\n	""29"" -> ""47""[label=""cfg_goto""];\n	""3"" -> ""63""[label=""cfg_next""];\n	""30"" -> ""3""[label=""cfg_true""];\n	""30"" -> ""50""[label=""cfg_false""];\n	""31"" -> ""13""[label=""cfg_false""];\n	""31"" -> ""46""[label=""cfg_true""];\n	""32"" -> ""15""[label=""cfg_true""];\n	""32"" -> ""16""[label=""cfg_false""];\n	""33"" -> ""45""[label=""cfg_false""];\n	""33"" -> ""65""[label=""cfg_true""];\n	""34"" -> ""17""[label=""cfg_false""];\n	""34"" -> ""2""[label=""cfg_true""];\n	""35"" -> ""14""[label=""cfg_false""];\n	""35"" -> ""43""[label=""cfg_true""];\n	""36"" -> ""10""[label=""cfg_false""];\n	""36"" -> ""46""[label=""cfg_true""];\n	""37"" -> ""11""[label=""cfg_false""];\n	""37"" -> ""3""[label=""cfg_true""];\n	""38"" -> ""48""[label=""cfg_true""];\n	""38"" -> ""9""[label=""cfg_false""];\n	""39"" -> ""3""[label=""cfg_true""];\n	""39"" -> ""7""[label=""cfg_false""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""40"" -> ""3""[label=""cfg_true""];\n	""40"" -> ""4""[label=""cfg_false""];\n	""41"" -> ""61""[label=""cfg_true""];\n	""41"" -> ""62""[label=""cfg_false""];\n	""42"" -> ""20""[label=""cfg_true""];\n	""42"" -> ""21""[label=""cfg_false""];\n	""43"" -> ""10""[label=""cfg_true""];\n	""43"" -> ""36""[label=""cfg_false""];\n	""44"" -> ""18""[label=""cfg_true""];\n	""44"" -> ""19""[label=""cfg_false""];\n	""45"" -> ""35""[label=""cfg_false""];\n	""45"" -> ""43""[label=""cfg_true""];\n	""46"" -> ""12""[label=""cfg_false""];\n	""46"" -> ""37""[label=""cfg_true""];\n	""47"" -> ""38""[label=""cfg_false""];\n	""47"" -> ""48""[label=""cfg_true""];\n	""48"" -> ""39""[label=""cfg_true""];\n	""48"" -> ""8""[label=""cfg_false""];\n	""49"" -> ""3""[label=""cfg_true""];\n	""49"" -> ""40""[label=""cfg_false""];\n	""5"" -> ""22""[label=""cfg_next""];\n	""50"" -> ""42""[label=""cfg_next""];\n	""51"" -> ""64""[label=""cfg_next""];\n	""6"" -> ""30""[label=""cfg_next""];\n	""61"" -> ""47""[label=""cfg_next""];\n	""62"" -> ""29""[label=""cfg_next""];\n	""63"" -> ""52""[label=""cfg_next""];\n	""64"" -> ""25""[label=""cfg_next""];\n	""65"" -> ""26""[label=""cfg_next""];\n	""7"" -> ""53""[label=""cfg_next""];\n	""8"" -> ""54""[label=""cfg_next""];\n	""9"" -> ""55""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.language.bm.Rule.startsWith(CharSequence,CharSequence)",Method,No Comment,"private static boolean startsWith(final CharSequence input, final CharSequence prefix) {\n    if (prefix.length() > input.length()) {\n        return false;\n    }\n    for (int i = 0; i < prefix.length(); i++) {\n        if (input.charAt(i) != prefix.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}","boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)","digraph cfg_startsWith {\n	""1"" [label=""$stack3 = interfaceinvoke input.<java.lang.CharSequence: int length()>()""];\n	""2"" [label=""$stack4 = interfaceinvoke prefix.<java.lang.CharSequence: int length()>()""];\n	""3"" [label=""$stack5 = interfaceinvoke prefix.<java.lang.CharSequence: int length()>()""];\n	""4"" [label=""$stack6 = interfaceinvoke prefix.<java.lang.CharSequence: char charAt(int)>(i)""];\n	""5"" [label=""$stack7 = interfaceinvoke input.<java.lang.CharSequence: char charAt(int)>(i)""];\n	""6"" [label=""goto""];\n	""7"" [label=""i = 0""];\n	""8"" [label=""i = i + 1""];\n	""9"" [label=""if $stack4 <= $stack3""];\n	""10"" [label=""if $stack7 == $stack6""];\n	""11"" [label=""if i >= $stack5""];\n	""12"" [label=""input := @parameter0: java.lang.CharSequence""];\n	""13"" [label=""prefix := @parameter1: java.lang.CharSequence""];\n	""14"" [label=""return 0""];\n	""15"" [label=""return 0""];\n	""16"" [label=""return 1""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_false""];\n	""10"" -> ""8""[label=""cfg_true""];\n	""11"" -> ""16""[label=""cfg_true""];\n	""11"" -> ""5""[label=""cfg_false""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_goto""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""14""[label=""cfg_false""];\n	""9"" -> ""7""[label=""cfg_true""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Rule.stripQuotes(String),Method,No Comment,"private static String stripQuotes(String str) {\n    if (str.startsWith(DOUBLE_QUOTE)) {\n        str = str.substring(1);\n    }\n    if (str.endsWith(DOUBLE_QUOTE)) {\n        str = str.substring(0, str.length() - 1);\n    }\n    return str;\n}",java.lang.String stripQuotes(java.lang.String),"digraph cfg_stripQuotes {\n	""1"" [label=""$stack1 = virtualinvoke str.<java.lang.String: boolean startsWith(java.lang.String)>(\""\\""\"")""];\n	""2"" [label=""$stack2 = virtualinvoke str.<java.lang.String: boolean endsWith(java.lang.String)>(\""\\""\"")""];\n	""3"" [label=""$stack3 = virtualinvoke str.<java.lang.String: int length()>()""];\n	""4"" [label=""$stack4 = $stack3 - 1""];\n	""5"" [label=""if $stack1 == 0""];\n	""6"" [label=""if $stack2 == 0""];\n	""7"" [label=""return str""];\n	""8"" [label=""str := @parameter0: java.lang.String""];\n	""9"" [label=""str = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(1)""];\n	""10"" [label=""str = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(0, $stack4)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""9""[label=""cfg_false""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.bm.Rule.getLContext(),Method,* Gets the left context. This is a regular expression that must match to the left of the pattern.\n     *\n     * @return the left context Pattern,public RPattern getLContext() {\n    return this.lContext;\n},org.apache.commons.codec.language.bm.Rule$RPattern getLContext(),"digraph cfg_getLContext {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule.getPattern(),Method,* Gets the pattern. This is a string-literal that must exactly match.\n     *\n     * @return the pattern,public String getPattern() {\n    return this.pattern;\n},java.lang.String getPattern(),"digraph cfg_getPattern {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule.getPhoneme(),Method,"* Gets the phoneme. If the rule matches, this is the phoneme associated with the pattern match.\n     *\n     * @return the phoneme",public PhonemeExpr getPhoneme() {\n    return this.phoneme;\n},org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme(),"digraph cfg_getPhoneme {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule.getRContext(),Method,* Gets the right context. This is a regular expression that must match to the right of the pattern.\n     *\n     * @return the right context Pattern,public RPattern getRContext() {\n    return this.rContext;\n},org.apache.commons.codec.language.bm.Rule$RPattern getRContext(),"digraph cfg_getRContext {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(CharSequence,int)",Method,"* Decides if the pattern and context match the input starting at a position. It is a match if the\n     * {@code lContext} matches {@code input} up to {@code i}, {@code pattern} matches at i and\n     * {@code rContext} matches from the end of the match of {@code pattern} to the end of {@code input}.\n     *\n     * @param input\n     *            the input String\n     * @param i\n     *            the int position within the input\n     * @return true if the pattern and left/right context match, false otherwise","public boolean patternAndContextMatches(final CharSequence input, final int i) {\n    if (i < 0) {\n        throw new IndexOutOfBoundsException(""Can not match pattern at negative indexes"");\n    }\n    final int patternLength = this.pattern.length();\n    final int ipl = i + patternLength;\n    if (ipl > input.length()) {\n        // not enough room for the pattern to match\n        return false;\n    }\n    // evaluate the pattern, left context and right context\n    // fail early if any of the evaluations is not successful\n    if (!input.subSequence(i, ipl).equals(this.pattern)) {\n        return false;\n    }\n    if (!this.rContext.isMatch(input.subSequence(ipl, input.length()))) {\n        return false;\n    }\n    return this.lContext.isMatch(input.subSequence(0, i));\n}","boolean patternAndContextMatches(java.lang.CharSequence,int)","digraph cfg_patternAndContextMatches {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>""];\n	""2"" [label=""$stack11 = interfaceinvoke input.<java.lang.CharSequence: int length()>()""];\n	""3"" [label=""$stack12 = interfaceinvoke input.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(ipl, $stack11)""];\n	""4"" [label=""$stack13 = interfaceinvoke $stack10.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($stack12)""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>""];\n	""6"" [label=""$stack15 = interfaceinvoke input.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i)""];\n	""7"" [label=""$stack16 = interfaceinvoke $stack14.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($stack15)""];\n	""8"" [label=""$stack17 = new java.lang.IndexOutOfBoundsException""];\n	""9"" [label=""$stack5 = this.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>""];\n	""10"" [label=""$stack6 = interfaceinvoke input.<java.lang.CharSequence: int length()>()""];\n	""11"" [label=""$stack7 = this.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>""];\n	""12"" [label=""$stack8 = interfaceinvoke input.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i, ipl)""];\n	""13"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.Object: boolean equals(java.lang.Object)>($stack7)""];\n	""14"" [label=""i := @parameter1: int""];\n	""15"" [label=""if $stack13 != 0""];\n	""16"" [label=""if $stack9 != 0""];\n	""17"" [label=""if i >= 0""];\n	""18"" [label=""if ipl <= $stack6""];\n	""19"" [label=""input := @parameter0: java.lang.CharSequence""];\n	""20"" [label=""ipl = i + patternLength""];\n	""21"" [label=""patternLength = virtualinvoke $stack5.<java.lang.String: int length()>()""];\n	""22"" [label=""return $stack16""];\n	""23"" [label=""return 0""];\n	""24"" [label=""return 0""];\n	""25"" [label=""return 0""];\n	""26"" [label=""specialinvoke $stack17.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(\""Can not match pattern at negative indexes\"")""];\n	""27"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""28"" [label=""throw $stack17""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""16""[label=""cfg_next""];\n	""14"" -> ""17""[label=""cfg_next""];\n	""15"" -> ""25""[label=""cfg_false""];\n	""15"" -> ""5""[label=""cfg_true""];\n	""16"" -> ""1""[label=""cfg_true""];\n	""16"" -> ""24""[label=""cfg_false""];\n	""17"" -> ""8""[label=""cfg_false""];\n	""17"" -> ""9""[label=""cfg_true""];\n	""18"" -> ""12""[label=""cfg_true""];\n	""18"" -> ""23""[label=""cfg_false""];\n	""19"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""10""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""26"" -> ""28""[label=""cfg_next""];\n	""27"" -> ""19""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""15""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""22""[label=""cfg_next""];\n	""8"" -> ""26""[label=""cfg_next""];\n	""9"" -> ""21""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr)",Constructor,* Creates a new rule.\n     *\n     * @param pattern\n     *            the pattern\n     * @param lContext\n     *            the left context\n     * @param rContext\n     *            the right context\n     * @param phoneme\n     *            the resulting phoneme,"public Rule(final String pattern, final String lContext, final String rContext, final PhonemeExpr phoneme) {\n    this.pattern = pattern;\n    this.lContext = pattern(lContext + ""$"");\n    this.rContext = pattern(""^"" + rContext);\n    this.phoneme = phoneme;\n}","void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)","digraph cfg_init {\n	""1"" [label=""$stack10 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""^\"")""];\n	""3"" [label=""$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rContext)""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""5"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($stack13)""];\n	""6"" [label=""$stack5 = new java.lang.StringBuilder""];\n	""7"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lContext)""];\n	""8"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""$\"")""];\n	""9"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""10"" [label=""$stack9 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($stack8)""];\n	""11"" [label=""lContext := @parameter1: java.lang.String""];\n	""12"" [label=""pattern := @parameter0: java.lang.String""];\n	""13"" [label=""phoneme := @parameter3: org.apache.commons.codec.language.bm.Rule$PhonemeExpr""];\n	""14"" [label=""rContext := @parameter2: java.lang.String""];\n	""15"" [label=""return""];\n	""16"" [label=""specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>()""];\n	""17"" [label=""specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()""];\n	""18"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""19"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule""];\n	""20"" [label=""this.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern> = pattern""];\n	""21"" [label=""this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme> = phoneme""];\n	""22"" [label=""this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext> = $stack9""];\n	""23"" [label=""this.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext> = $stack14""];\n	""1"" -> ""16""[label=""cfg_next""];\n	""10"" -> ""22""[label=""cfg_next""];\n	""11"" -> ""14""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""18""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""20""[label=""cfg_next""];\n	""19"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""6""[label=""cfg_next""];\n	""21"" -> ""15""[label=""cfg_next""];\n	""22"" -> ""1""[label=""cfg_next""];\n	""23"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""23""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.append(CharSequence),Method,* Appends the sequence to the phone text.\n         *\n         * @param sequence The sequence to append.\n         * @return this instance.,public Phoneme append(final CharSequence sequence) {\n    this.phonemeText.append(sequence);\n    return this;\n},org.apache.commons.codec.language.bm.Rule$Phoneme append(java.lang.CharSequence),"digraph cfg_append {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""2"" [label=""return this""];\n	""3"" [label=""sequence := @parameter0: java.lang.CharSequence""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""5"" [label=""virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(sequence)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages(),Method,* Gets the language set.\n         *\n         * @return the language set.,public Languages.LanguageSet getLanguages() {\n    return this.languages;\n},org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages(),"digraph cfg_getLanguages {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemes(),Method,No Comment,@Override\npublic Iterable<Phoneme> getPhonemes() {\n    return Collections.singleton(this);\n},java.lang.Iterable getPhonemes(),"digraph cfg_getPhonemes {\n	""1"" [label=""$stack1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(this)""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText(),Method,* Gets the phoneme text sequence.\n         *\n         * @return the phoneme text sequence.,public CharSequence getPhonemeText() {\n    return this.phonemeText;\n},java.lang.CharSequence getPhonemeText(),"digraph cfg_getPhonemeText {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(LanguageSet),Method,* Returns a new Phoneme with the same text but a union of its\n         * current language set and the given one.\n         *\n         * @param lang the language set to merge\n         * @return a new Phoneme,"public Phoneme mergeWithLanguage(final LanguageSet lang) {\n    return new Phoneme(this.phonemeText.toString(), this.languages.merge(lang));\n}",org.apache.commons.codec.language.bm.Rule$Phoneme mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet),"digraph cfg_mergeWithLanguage {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)>(lang)""];\n	""4"" [label=""$stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""5"" [label=""$stack6 = new org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""6"" [label=""lang := @parameter0: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack5, $stack4)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.size(),Method,No Comment,@Override\npublic int size() {\n    return 1;\n},int size(),"digraph cfg_size {\n	""1"" [label=""return 1""];\n	""2"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$Phoneme.toString(),Method,No Comment,"@Override\npublic String toString() {\n    return phonemeText.toString() + ""["" + languages + ""]"";\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""3"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""4"" [label=""$stack4 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3)""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>""];\n	""6"" [label=""$stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""[\"")""];\n	""7"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack5)""];\n	""8"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""]\"")""];\n	""9"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""10"" [label=""return $stack9""];\n	""11"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""12"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(CharSequence,LanguageSet)",Constructor,* Constructs a new instance.\n         *\n         * @param phonemeText The phoneme text.\n         * @param languages A language set.,"public Phoneme(final CharSequence phonemeText, final Languages.LanguageSet languages) {\n    this.phonemeText = new StringBuilder(phonemeText);\n    this.languages = languages;\n}","void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)","digraph cfg_init {\n	""1"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""2"" [label=""languages := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""3"" [label=""phonemeText := @parameter0: java.lang.CharSequence""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(phonemeText)""];\n	""6"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""8"" [label=""this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText> = $stack3""];\n	""9"" [label=""this.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages> = languages""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme)",Constructor,* Constructs a new instance.\n         *\n         * @param phonemeLeft The left phoneme text.\n         * @param phonemeRight The right phoneme text.,"public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight) {\n    this(phonemeLeft.phonemeText, phonemeLeft.languages);\n    this.phonemeText.append(phonemeRight.phonemeText);\n}","void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)","digraph cfg_init {\n	""1"" [label=""$stack3 = phonemeLeft.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>""];\n	""2"" [label=""$stack4 = phonemeLeft.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""3"" [label=""$stack5 = phonemeRight.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""4"" [label=""$stack6 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""5"" [label=""phonemeLeft := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""6"" [label=""phonemeRight := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack4, $stack3)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""10"" [label=""virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($stack5)""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme,LanguageSet)",Constructor,* Constructs a new instance.\n         *\n         * @param phonemeLeft The left phoneme text.\n         * @param phonemeRight The right phoneme text.\n         * @param languages A language set.,"public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight, final Languages.LanguageSet languages) {\n    this(phonemeLeft.phonemeText, languages);\n    this.phonemeText.append(phonemeRight.phonemeText);\n}","void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Languages$LanguageSet)","digraph cfg_init {\n	""1"" [label=""$stack4 = phonemeLeft.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""2"" [label=""$stack5 = phonemeRight.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>""];\n	""4"" [label=""languages := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet""];\n	""5"" [label=""phonemeLeft := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""6"" [label=""phonemeRight := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($stack4, languages)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$Phoneme""];\n	""10"" [label=""virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($stack5)""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$PhonemeExpr.getPhonemes(),Abstract Method,* Gets an iteration of phonemes.\n         *\n         * @return an iteration of phonemes.,Iterable<Phoneme> getPhonemes();,java.lang.Iterable getPhonemes(),digraph cfg_getPhonemes {\n}\n,default
org.apache.commons.codec.language.bm.Rule$PhonemeExpr.size(),Abstract Method,* Gets the expression size in phonemes.\n         *\n         * @return the expression size in phonemes.\n         * @since 1.17.0,"default int size() {\n    // All implementations are int-bound.\n    return (int) Math.min(getPhonemes().spliterator().getExactSizeIfKnown(), Integer.MAX_VALUE);\n}",int size(),"digraph cfg_size {\n	""1"" [label=""$stack1 = interfaceinvoke this.<org.apache.commons.codec.language.bm.Rule$PhonemeExpr: java.lang.Iterable getPhonemes()>()""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.lang.Iterable: java.util.Spliterator spliterator()>()""];\n	""3"" [label=""$stack3 = interfaceinvoke $stack2.<java.util.Spliterator: long getExactSizeIfKnown()>()""];\n	""4"" [label=""$stack4 = staticinvoke <java.lang.Math: long min(long,long)>($stack3, 2147483647L)""];\n	""5"" [label=""$stack5 = (int) $stack4""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$PhonemeExpr""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",default 
org.apache.commons.codec.language.bm.Rule$PhonemeList.getPhonemes(),Method,No Comment,@Override\npublic List<Phoneme> getPhonemes() {\n    return phonemeList;\n},java.util.List getPhonemes(),"digraph cfg_getPhonemes {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule$PhonemeList: java.util.List phonemeList>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$PhonemeList""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$PhonemeList.size(),Method,No Comment,@Override\npublic int size() {\n    return phonemeList.size();\n},int size(),"digraph cfg_size {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.Rule$PhonemeList: java.util.List phonemeList>""];\n	""2"" [label=""$stack2 = interfaceinvoke $stack1.<java.util.List: int size()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$PhonemeList""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$PhonemeList.<init>(List),Constructor,* Constructs a new instance.\n         *\n         * @param phonemes the phoneme list.,public PhonemeList(final List<Phoneme> phonemes) {\n    this.phonemeList = phonemes;\n},void <init>(java.util.List),"digraph cfg_init {\n	""1"" [label=""phonemes := @parameter0: java.util.List""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.bm.Rule$PhonemeList""];\n	""5"" [label=""this.<org.apache.commons.codec.language.bm.Rule$PhonemeList: java.util.List phonemeList> = phonemes""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.bm.Rule$RPattern.isMatch(CharSequence),Abstract Method,* Tests whether the given input matches this instance.\n         *\n         * @param input the input to test.\n         * @return whether the given input matches this instance.,boolean isMatch(CharSequence input);,boolean isMatch(java.lang.CharSequence),digraph cfg_isMatch {\n}\n,default
org.apache.commons.codec.language.bm.RuleType.getName(),Method,* Gets the rule name.\n     *\n     * @return the rule name.,public String getName() {\n    return this.name;\n},java.lang.String getName(),"digraph cfg_getName {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.bm.RuleType: java.lang.String name>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.bm.RuleType""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(String),Method,"* Cleans up a name: 1. Upper-cases everything 2. Removes some common punctuation 3. Removes accents 4. Removes any\n     * spaces.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param name\n     *            The name to be cleaned\n     * @return The cleaned name","String cleanName(final String name) {\n    String upperName = name.toUpperCase(Locale.ENGLISH);\n    final String[] charsToTrim = { ""\\-"", ""[&]"", ""\\'"", ""\\."", ""[\\,]"" };\n    for (final String str : charsToTrim) {\n        upperName = upperName.replaceAll(str, EMPTY);\n    }\n    upperName = removeAccents(upperName);\n    return upperName.replaceAll(""\\s+"", EMPTY);\n}",java.lang.String cleanName(java.lang.String),"digraph cfg_cleanName {\n	""1"" [label=""$stack10 = virtualinvoke upperName.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""\\s+\"", \""\"")""];\n	""2"" [label=""$stack8 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""3"" [label=""$stack9 = newarray (java.lang.String)[5]""];\n	""4"" [label=""$stack9[0] = \""\\-\""""];\n	""5"" [label=""$stack9[1] = \""[&]\""""];\n	""6"" [label=""$stack9[2] = \""\\\'\""""];\n	""7"" [label=""$stack9[3] = \""\\.\""""];\n	""8"" [label=""$stack9[4] = \""[\\,]\""""];\n	""9"" [label=""charsToTrim = $stack9""];\n	""10"" [label=""goto""];\n	""11"" [label=""if l6 >= l5""];\n	""12"" [label=""l4 = charsToTrim""];\n	""13"" [label=""l5 = lengthof l4""];\n	""14"" [label=""l6 = 0""];\n	""15"" [label=""l6 = l6 + 1""];\n	""16"" [label=""name := @parameter0: java.lang.String""];\n	""17"" [label=""return $stack10""];\n	""18"" [label=""str = l4[l6]""];\n	""19"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""20"" [label=""upperName = virtualinvoke name.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack8)""];\n	""21"" [label=""upperName = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>(upperName)""];\n	""22"" [label=""upperName = virtualinvoke upperName.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(str, \""\"")""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_goto""];\n	""11"" -> ""18""[label=""cfg_false""];\n	""11"" -> ""21""[label=""cfg_true""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""22""[label=""cfg_next""];\n	""19"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""20""[label=""cfg_next""];\n	""20"" -> ""3""[label=""cfg_next""];\n	""21"" -> ""1""[label=""cfg_next""];\n	""22"" -> ""15""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(Object),Method,* Encodes an Object using the Match Rating Approach algorithm. Method is here to satisfy the requirements of the\n     * Encoder interface Throws an EncoderException if input object is not of type {@link String}.\n     *\n     * @param pObject\n     *            Object to encode\n     * @return An object (or type {@link String}) containing the Match Rating Approach code which corresponds to the\n     *         String supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type {@link String},"@Override\npublic final Object encode(final Object pObject) throws EncoderException {\n    if (!(pObject instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Match Rating Approach encoder is not of type java.lang.String"");\n    }\n    return encode((String) pObject);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = pObject instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) pObject""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""pObject := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(String),Method,* Encodes a String using the Match Rating Approach (MRA) algorithm.\n     *\n     * @param name\n     *            String object to encode\n     * @return The MRA code corresponding to the String supplied,@Override\npublic final String encode(String name) {\n    // Bulletproof for trivial input - NINO\n    if (name == null || EMPTY.equalsIgnoreCase(name) || SPACE.equalsIgnoreCase(name) || name.length() == 1) {\n        return EMPTY;\n    }\n    // Preprocessing\n    name = cleanName(name);\n    // Bulletproof if name becomes empty after cleanName(name)\n    if (SPACE.equals(name) || name.isEmpty()) {\n        return EMPTY;\n    }\n    // BEGIN: Actual encoding part of the algorithm...\n    // 1. Delete all vowels unless the vowel begins the word\n    name = removeVowels(name);\n    // Bulletproof if name becomes empty after removeVowels(name)\n    if (SPACE.equals(name) || name.isEmpty()) {\n        return EMPTY;\n    }\n    // 2. Remove second consonant from any double consonant\n    name = removeDoubleConsonants(name);\n    return getFirst3Last3(name);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack10 = \"" \""""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.String: boolean equals(java.lang.Object)>(name)""];\n	""3"" [label=""$stack12 = virtualinvoke name.<java.lang.String: boolean isEmpty()>()""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(name)""];\n	""5"" [label=""$stack2 = \""\""""];\n	""6"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name)""];\n	""7"" [label=""$stack4 = \"" \""""];\n	""8"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name)""];\n	""9"" [label=""$stack6 = virtualinvoke name.<java.lang.String: int length()>()""];\n	""10"" [label=""$stack7 = \"" \""""];\n	""11"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.String: boolean equals(java.lang.Object)>(name)""];\n	""12"" [label=""$stack9 = virtualinvoke name.<java.lang.String: boolean isEmpty()>()""];\n	""13"" [label=""if $stack11 != 0""];\n	""14"" [label=""if $stack12 == 0""];\n	""15"" [label=""if $stack3 != 0""];\n	""16"" [label=""if $stack5 != 0""];\n	""17"" [label=""if $stack6 != 1""];\n	""18"" [label=""if $stack8 != 0""];\n	""19"" [label=""if $stack9 == 0""];\n	""20"" [label=""if name == null""];\n	""21"" [label=""name := @parameter0: java.lang.String""];\n	""22"" [label=""name = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(name)""];\n	""23"" [label=""name = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(name)""];\n	""24"" [label=""name = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(name)""];\n	""25"" [label=""return \""\""""];\n	""26"" [label=""return \""\""""];\n	""27"" [label=""return \""\""""];\n	""28"" [label=""return $stack13""];\n	""29"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""18""[label=""cfg_next""];\n	""12"" -> ""19""[label=""cfg_next""];\n	""13"" -> ""27""[label=""cfg_true""];\n	""13"" -> ""3""[label=""cfg_false""];\n	""14"" -> ""23""[label=""cfg_true""];\n	""14"" -> ""27""[label=""cfg_false""];\n	""15"" -> ""25""[label=""cfg_true""];\n	""15"" -> ""7""[label=""cfg_false""];\n	""16"" -> ""25""[label=""cfg_true""];\n	""16"" -> ""9""[label=""cfg_false""];\n	""17"" -> ""22""[label=""cfg_true""];\n	""17"" -> ""25""[label=""cfg_false""];\n	""18"" -> ""12""[label=""cfg_false""];\n	""18"" -> ""26""[label=""cfg_true""];\n	""19"" -> ""24""[label=""cfg_true""];\n	""19"" -> ""26""[label=""cfg_false""];\n	""2"" -> ""13""[label=""cfg_next""];\n	""20"" -> ""25""[label=""cfg_true""];\n	""20"" -> ""5""[label=""cfg_false""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""10""[label=""cfg_next""];\n	""23"" -> ""4""[label=""cfg_next""];\n	""24"" -> ""1""[label=""cfg_next""];\n	""29"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""28""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""17""[label=""cfg_next""];\n}\n","public , final "
org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(String),Method,"* Gets the first and last 3 letters of a name (if &gt; 6 characters) Else just returns the name.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param name\n     *            The string to get the substrings from\n     * @return Annexed first and last 3 letters of input word.","String getFirst3Last3(final String name) {\n    final int nameLength = name.length();\n    if (nameLength > 6) {\n        final String firstThree = name.substring(0, 3);\n        final String lastThree = name.substring(nameLength - 3, nameLength);\n        return firstThree + lastThree;\n    }\n    return name;\n}",java.lang.String getFirst3Last3(java.lang.String),"digraph cfg_getFirst3Last3 {\n	""1"" [label=""$stack5 = nameLength - 3""];\n	""2"" [label=""$stack6 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(firstThree)""];\n	""4"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(lastThree)""];\n	""5"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""firstThree = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, 3)""];\n	""7"" [label=""if nameLength <= 6""];\n	""8"" [label=""lastThree = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack5, nameLength)""];\n	""9"" [label=""name := @parameter0: java.lang.String""];\n	""10"" [label=""nameLength = virtualinvoke name.<java.lang.String: int length()>()""];\n	""11"" [label=""return $stack9""];\n	""12"" [label=""return name""];\n	""13"" [label=""specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>()""];\n	""14"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""3""[label=""cfg_next""];\n	""14"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_true""];\n	""7"" -> ""6""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int),Method,"* Obtains the min rating of the length sum of the 2 names. In essence the larger the sum length the smaller the\n     * min rating. Values strictly from documentation.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param sumLength\n     *            The length of 2 strings sent down\n     * @return The min rating value",int getMinRating(final int sumLength) {\n    int minRating = 0;\n    if (sumLength <= 4) {\n        minRating = 5;\n    } else if (sumLength <= 7) {\n        // already know it is at least 5\n        minRating = 4;\n    } else if (sumLength <= 11) {\n        // already know it is at least 8\n        minRating = 3;\n    } else if (sumLength == 12) {\n        minRating = 2;\n    } else {\n        // docs said little here.\n        minRating = 1;\n    }\n    return minRating;\n},int getMinRating(int),"digraph cfg_getMinRating {\n	""1"" [label=""goto""];\n	""2"" [label=""goto""];\n	""3"" [label=""goto""];\n	""4"" [label=""goto""];\n	""5"" [label=""if sumLength != 12""];\n	""6"" [label=""if sumLength > 11""];\n	""7"" [label=""if sumLength > 4""];\n	""8"" [label=""if sumLength > 7""];\n	""9"" [label=""minRating = 0""];\n	""10"" [label=""minRating = 1""];\n	""11"" [label=""minRating = 2""];\n	""12"" [label=""minRating = 3""];\n	""13"" [label=""minRating = 4""];\n	""14"" [label=""minRating = 5""];\n	""15"" [label=""return minRating""];\n	""16"" [label=""sumLength := @parameter0: int""];\n	""17"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""15""[label=""cfg_goto""];\n	""10"" -> ""15""[label=""cfg_next""];\n	""11"" -> ""4""[label=""cfg_next""];\n	""12"" -> ""3""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""16"" -> ""9""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""2"" -> ""15""[label=""cfg_goto""];\n	""3"" -> ""15""[label=""cfg_goto""];\n	""4"" -> ""15""[label=""cfg_goto""];\n	""5"" -> ""10""[label=""cfg_true""];\n	""5"" -> ""11""[label=""cfg_false""];\n	""6"" -> ""12""[label=""cfg_false""];\n	""6"" -> ""5""[label=""cfg_true""];\n	""7"" -> ""14""[label=""cfg_false""];\n	""7"" -> ""8""[label=""cfg_true""];\n	""8"" -> ""13""[label=""cfg_false""];\n	""8"" -> ""6""[label=""cfg_true""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",default
"org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(String,String)",Method,* Determines if two names are homophonous via Match Rating Approach (MRA) algorithm. It should be noted that the\n     * strings are cleaned in the same way as {@link #encode(String)}.\n     *\n     * @param name1\n     *            First of the 2 strings (names) to compare\n     * @param name2\n     *            Second of the 2 names to compare\n     * @return {@code true} if the encodings are identical {@code false} otherwise.,"public boolean isEncodeEquals(String name1, String name2) {\n    // Bulletproof for trivial input - NINO\n    if (name1 == null || EMPTY.equalsIgnoreCase(name1) || SPACE.equalsIgnoreCase(name1)) {\n        return false;\n    }\n    if (name2 == null || EMPTY.equalsIgnoreCase(name2) || SPACE.equalsIgnoreCase(name2)) {\n        return false;\n    }\n    if (name1.length() == 1 || name2.length() == 1) {\n        return false;\n    }\n    if (name1.equalsIgnoreCase(name2)) {\n        return true;\n    }\n    // Preprocessing\n    name1 = cleanName(name1);\n    name2 = cleanName(name2);\n    // Actual MRA Algorithm\n    // 1. Remove vowels\n    name1 = removeVowels(name1);\n    name2 = removeVowels(name2);\n    // 2. Remove double consonants\n    name1 = removeDoubleConsonants(name1);\n    name2 = removeDoubleConsonants(name2);\n    // 3. Reduce down to 3 letters\n    name1 = getFirst3Last3(name1);\n    name2 = getFirst3Last3(name2);\n    // 4. Check for length difference - if 3 or greater, then no similarity\n    // comparison is done\n    if (Math.abs(name1.length() - name2.length()) >= 3) {\n        return false;\n    }\n    // 5. Obtain the minimum rating value by calculating the length sum of the\n    // encoded Strings and sending it down.\n    final int sumLength = Math.abs(name1.length() + name2.length());\n    final int minRating = getMinRating(sumLength);\n    // 6. Process the encoded Strings from left to right and remove any\n    // identical characters found from both Strings respectively.\n    final int count = leftToRightThenRightToLeftProcessing(name1, name2);\n    // 7. Each PNI item that has a similarity rating equal to or greater than\n    // the min is considered to be a good candidate match\n    return count >= minRating;\n}","boolean isEncodeEquals(java.lang.String,java.lang.String)","digraph cfg_isEncodeEquals {\n	""1"" [label=""$stack10 = \""\""""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2)""];\n	""3"" [label=""$stack12 = \"" \""""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2)""];\n	""5"" [label=""$stack14 = virtualinvoke name1.<java.lang.String: int length()>()""];\n	""6"" [label=""$stack15 = virtualinvoke name2.<java.lang.String: int length()>()""];\n	""7"" [label=""$stack16 = virtualinvoke name1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name2)""];\n	""8"" [label=""$stack17 = virtualinvoke name1.<java.lang.String: int length()>()""];\n	""9"" [label=""$stack18 = virtualinvoke name2.<java.lang.String: int length()>()""];\n	""10"" [label=""$stack19 = $stack17 - $stack18""];\n	""11"" [label=""$stack20 = staticinvoke <java.lang.Math: int abs(int)>($stack19)""];\n	""12"" [label=""$stack21 = virtualinvoke name1.<java.lang.String: int length()>()""];\n	""13"" [label=""$stack22 = virtualinvoke name2.<java.lang.String: int length()>()""];\n	""14"" [label=""$stack23 = $stack21 + $stack22""];\n	""15"" [label=""$stack24 = 0""];\n	""16"" [label=""$stack24 = 1""];\n	""17"" [label=""$stack6 = \""\""""];\n	""18"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name1)""];\n	""19"" [label=""$stack8 = \"" \""""];\n	""20"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(name1)""];\n	""21"" [label=""count = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>(name1, name2)""];\n	""22"" [label=""goto""];\n	""23"" [label=""if $stack11 != 0""];\n	""24"" [label=""if $stack13 == 0""];\n	""25"" [label=""if $stack14 == 1""];\n	""26"" [label=""if $stack15 != 1""];\n	""27"" [label=""if $stack16 == 0""];\n	""28"" [label=""if $stack20 < 3""];\n	""29"" [label=""if $stack7 != 0""];\n	""30"" [label=""if $stack9 == 0""];\n	""31"" [label=""if count < minRating""];\n	""32"" [label=""if name1 == null""];\n	""33"" [label=""if name2 == null""];\n	""34"" [label=""minRating = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(sumLength)""];\n	""35"" [label=""name1 := @parameter0: java.lang.String""];\n	""36"" [label=""name1 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(name1)""];\n	""37"" [label=""name1 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(name1)""];\n	""38"" [label=""name1 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(name1)""];\n	""39"" [label=""name1 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(name1)""];\n	""40"" [label=""name2 := @parameter1: java.lang.String""];\n	""41"" [label=""name2 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(name2)""];\n	""42"" [label=""name2 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(name2)""];\n	""43"" [label=""name2 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(name2)""];\n	""44"" [label=""name2 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(name2)""];\n	""45"" [label=""return $stack24""];\n	""46"" [label=""return 0""];\n	""47"" [label=""return 0""];\n	""48"" [label=""return 0""];\n	""49"" [label=""return 0""];\n	""50"" [label=""return 1""];\n	""51"" [label=""sumLength = staticinvoke <java.lang.Math: int abs(int)>($stack23)""];\n	""52"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""28""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""51""[label=""cfg_next""];\n	""15"" -> ""45""[label=""cfg_next""];\n	""16"" -> ""22""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""29""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""23""[label=""cfg_next""];\n	""20"" -> ""30""[label=""cfg_next""];\n	""21"" -> ""31""[label=""cfg_next""];\n	""22"" -> ""45""[label=""cfg_goto""];\n	""23"" -> ""3""[label=""cfg_false""];\n	""23"" -> ""47""[label=""cfg_true""];\n	""24"" -> ""47""[label=""cfg_false""];\n	""24"" -> ""5""[label=""cfg_true""];\n	""25"" -> ""48""[label=""cfg_true""];\n	""25"" -> ""6""[label=""cfg_false""];\n	""26"" -> ""48""[label=""cfg_false""];\n	""26"" -> ""7""[label=""cfg_true""];\n	""27"" -> ""36""[label=""cfg_true""];\n	""27"" -> ""50""[label=""cfg_false""];\n	""28"" -> ""12""[label=""cfg_true""];\n	""28"" -> ""49""[label=""cfg_false""];\n	""29"" -> ""19""[label=""cfg_false""];\n	""29"" -> ""46""[label=""cfg_true""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""33""[label=""cfg_true""];\n	""30"" -> ""46""[label=""cfg_false""];\n	""31"" -> ""15""[label=""cfg_true""];\n	""31"" -> ""16""[label=""cfg_false""];\n	""32"" -> ""17""[label=""cfg_false""];\n	""32"" -> ""46""[label=""cfg_true""];\n	""33"" -> ""1""[label=""cfg_false""];\n	""33"" -> ""47""[label=""cfg_true""];\n	""34"" -> ""21""[label=""cfg_next""];\n	""35"" -> ""40""[label=""cfg_next""];\n	""36"" -> ""41""[label=""cfg_next""];\n	""37"" -> ""42""[label=""cfg_next""];\n	""38"" -> ""43""[label=""cfg_next""];\n	""39"" -> ""44""[label=""cfg_next""];\n	""4"" -> ""24""[label=""cfg_next""];\n	""40"" -> ""32""[label=""cfg_next""];\n	""41"" -> ""39""[label=""cfg_next""];\n	""42"" -> ""8""[label=""cfg_next""];\n	""43"" -> ""37""[label=""cfg_next""];\n	""44"" -> ""38""[label=""cfg_next""];\n	""5"" -> ""25""[label=""cfg_next""];\n	""51"" -> ""34""[label=""cfg_next""];\n	""52"" -> ""35""[label=""cfg_next""];\n	""6"" -> ""26""[label=""cfg_next""];\n	""7"" -> ""27""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(String),Method,"* Determines if a letter is a vowel.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param letter\n     *            The letter under investigation\n     * @return True if a vowel, else false","boolean isVowel(final String letter) {\n    return letter.equalsIgnoreCase(""E"") || letter.equalsIgnoreCase(""A"") || letter.equalsIgnoreCase(""O"") || letter.equalsIgnoreCase(""I"") || letter.equalsIgnoreCase(""U"");\n}",boolean isVowel(java.lang.String),"digraph cfg_isVowel {\n	""1"" [label=""$stack2 = virtualinvoke letter.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""E\"")""];\n	""2"" [label=""$stack3 = virtualinvoke letter.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""A\"")""];\n	""3"" [label=""$stack4 = virtualinvoke letter.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""O\"")""];\n	""4"" [label=""$stack5 = virtualinvoke letter.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""I\"")""];\n	""5"" [label=""$stack6 = virtualinvoke letter.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""U\"")""];\n	""6"" [label=""$stack7 = 0""];\n	""7"" [label=""$stack7 = 1""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack2 != 0""];\n	""10"" [label=""if $stack3 != 0""];\n	""11"" [label=""if $stack4 != 0""];\n	""12"" [label=""if $stack5 != 0""];\n	""13"" [label=""if $stack6 == 0""];\n	""14"" [label=""letter := @parameter0: java.lang.String""];\n	""15"" [label=""return $stack7""];\n	""16"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""10"" -> ""7""[label=""cfg_true""];\n	""11"" -> ""4""[label=""cfg_false""];\n	""11"" -> ""7""[label=""cfg_true""];\n	""12"" -> ""5""[label=""cfg_false""];\n	""12"" -> ""7""[label=""cfg_true""];\n	""13"" -> ""6""[label=""cfg_true""];\n	""13"" -> ""7""[label=""cfg_false""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""15""[label=""cfg_goto""];\n	""9"" -> ""2""[label=""cfg_false""];\n	""9"" -> ""7""[label=""cfg_true""];\n}\n",default
"org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(String,String)",Method,"* Processes the names from left to right (first) then right to left removing identical letters in same positions.\n     * Then subtracts the longer string that remains from 6 and returns this.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param name1\n     *            name2\n     * @return the length as above","int leftToRightThenRightToLeftProcessing(final String name1, final String name2) {\n    final char[] name1Char = name1.toCharArray();\n    final char[] name2Char = name2.toCharArray();\n    final int name1Size = name1.length() - 1;\n    final int name2Size = name2.length() - 1;\n    String name1LtRStart = EMPTY;\n    String name1LtREnd = EMPTY;\n    String name2RtLStart = EMPTY;\n    String name2RtLEnd = EMPTY;\n    for (int i = 0; i < name1Char.length; i++) {\n        if (i > name2Size) {\n            break;\n        }\n        name1LtRStart = name1.substring(i, i + 1);\n        name1LtREnd = name1.substring(name1Size - i, name1Size - i + 1);\n        name2RtLStart = name2.substring(i, i + 1);\n        name2RtLEnd = name2.substring(name2Size - i, name2Size - i + 1);\n        // Left to right...\n        if (name1LtRStart.equals(name2RtLStart)) {\n            name1Char[i] = ' ';\n            name2Char[i] = ' ';\n        }\n        // Right to left...\n        if (name1LtREnd.equals(name2RtLEnd)) {\n            name1Char[name1Size - i] = ' ';\n            name2Char[name2Size - i] = ' ';\n        }\n    }\n    // Char arrays -> string & remove extraneous space\n    final String strA = new String(name1Char).replaceAll(""\\s+"", EMPTY);\n    final String strB = new String(name2Char).replaceAll(""\\s+"", EMPTY);\n    // Final bit - subtract the longest string from 6 and return this int value\n    if (strA.length() > strB.length()) {\n        return Math.abs(6 - strA.length());\n    }\n    return Math.abs(6 - strB.length());\n}","int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)","digraph cfg_leftToRightThenRightToLeftProcessing {\n	""1"" [label=""$stack13 = virtualinvoke name1.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack14 = virtualinvoke name2.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack15 = lengthof name1Char""];\n	""4"" [label=""$stack16 = new java.lang.String""];\n	""5"" [label=""$stack17 = new java.lang.String""];\n	""6"" [label=""$stack18 = virtualinvoke strB.<java.lang.String: int length()>()""];\n	""7"" [label=""$stack19 = virtualinvoke i.<java.lang.String: int length()>()""];\n	""8"" [label=""$stack20 = virtualinvoke strB.<java.lang.String: int length()>()""];\n	""9"" [label=""$stack21 = 6 - $stack20""];\n	""10"" [label=""$stack22 = staticinvoke <java.lang.Math: int abs(int)>($stack21)""];\n	""11"" [label=""$stack23 = virtualinvoke i.<java.lang.String: int length()>()""];\n	""12"" [label=""$stack24 = 6 - $stack23""];\n	""13"" [label=""$stack25 = staticinvoke <java.lang.Math: int abs(int)>($stack24)""];\n	""14"" [label=""$stack26 = i + 1""];\n	""15"" [label=""$stack27 = name1Size - i""];\n	""16"" [label=""$stack28 = $stack27 + 1""];\n	""17"" [label=""$stack29 = name1Size - i""];\n	""18"" [label=""$stack30 = i + 1""];\n	""19"" [label=""$stack31 = name2Size - i""];\n	""20"" [label=""$stack32 = $stack31 + 1""];\n	""21"" [label=""$stack33 = name2Size - i""];\n	""22"" [label=""$stack34 = virtualinvoke name1LtRStart.<java.lang.String: boolean equals(java.lang.Object)>(name2RtLStart)""];\n	""23"" [label=""$stack35 = virtualinvoke name1LtREnd.<java.lang.String: boolean equals(java.lang.Object)>(name2RtLEnd)""];\n	""24"" [label=""$stack36 = name1Size - i""];\n	""25"" [label=""$stack37 = name2Size - i""];\n	""26"" [label=""goto""];\n	""27"" [label=""goto""];\n	""28"" [label=""i = 0""];\n	""29"" [label=""i = i + 1""];\n	""30"" [label=""i = virtualinvoke $stack16.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""\\s+\"", \""\"")""];\n	""31"" [label=""if $stack19 <= $stack18""];\n	""32"" [label=""if $stack34 == 0""];\n	""33"" [label=""if $stack35 == 0""];\n	""34"" [label=""if i <= name2Size""];\n	""35"" [label=""if i >= $stack15""];\n	""36"" [label=""name1 := @parameter0: java.lang.String""];\n	""37"" [label=""name1Char = virtualinvoke name1.<java.lang.String: char[] toCharArray()>()""];\n	""38"" [label=""name1Char[$stack36] = 32""];\n	""39"" [label=""name1Char[i] = 32""];\n	""40"" [label=""name1LtREnd = \""\""""];\n	""41"" [label=""name1LtREnd = virtualinvoke name1.<java.lang.String: java.lang.String substring(int,int)>($stack29, $stack28)""];\n	""42"" [label=""name1LtRStart = \""\""""];\n	""43"" [label=""name1LtRStart = virtualinvoke name1.<java.lang.String: java.lang.String substring(int,int)>(i, $stack26)""];\n	""44"" [label=""name1Size = $stack13 - 1""];\n	""45"" [label=""name2 := @parameter1: java.lang.String""];\n	""46"" [label=""name2Char = virtualinvoke name2.<java.lang.String: char[] toCharArray()>()""];\n	""47"" [label=""name2Char[$stack37] = 32""];\n	""48"" [label=""name2Char[i] = 32""];\n	""49"" [label=""name2RtLEnd = \""\""""];\n	""50"" [label=""name2RtLEnd = virtualinvoke name2.<java.lang.String: java.lang.String substring(int,int)>($stack33, $stack32)""];\n	""51"" [label=""name2RtLStart = \""\""""];\n	""52"" [label=""name2RtLStart = virtualinvoke name2.<java.lang.String: java.lang.String substring(int,int)>(i, $stack30)""];\n	""53"" [label=""name2Size = $stack14 - 1""];\n	""54"" [label=""return $stack22""];\n	""55"" [label=""return $stack25""];\n	""56"" [label=""specialinvoke $stack16.<java.lang.String: void <init>(char[])>(name1Char)""];\n	""57"" [label=""specialinvoke $stack17.<java.lang.String: void <init>(char[])>(name2Char)""];\n	""58"" [label=""strB = virtualinvoke $stack17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""\\s+\"", \""\"")""];\n	""59"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""44""[label=""cfg_next""];\n	""10"" -> ""54""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""55""[label=""cfg_next""];\n	""14"" -> ""43""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""41""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""52""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""53""[label=""cfg_next""];\n	""20"" -> ""50""[label=""cfg_next""];\n	""21"" -> ""19""[label=""cfg_next""];\n	""22"" -> ""32""[label=""cfg_next""];\n	""23"" -> ""33""[label=""cfg_next""];\n	""24"" -> ""38""[label=""cfg_next""];\n	""25"" -> ""47""[label=""cfg_next""];\n	""26"" -> ""4""[label=""cfg_goto""];\n	""27"" -> ""3""[label=""cfg_goto""];\n	""28"" -> ""3""[label=""cfg_next""];\n	""29"" -> ""27""[label=""cfg_next""];\n	""3"" -> ""35""[label=""cfg_next""];\n	""30"" -> ""5""[label=""cfg_next""];\n	""31"" -> ""11""[label=""cfg_false""];\n	""31"" -> ""8""[label=""cfg_true""];\n	""32"" -> ""23""[label=""cfg_true""];\n	""32"" -> ""39""[label=""cfg_false""];\n	""33"" -> ""24""[label=""cfg_false""];\n	""33"" -> ""29""[label=""cfg_true""];\n	""34"" -> ""14""[label=""cfg_true""];\n	""34"" -> ""26""[label=""cfg_false""];\n	""35"" -> ""34""[label=""cfg_false""];\n	""35"" -> ""4""[label=""cfg_true""];\n	""36"" -> ""45""[label=""cfg_next""];\n	""37"" -> ""46""[label=""cfg_next""];\n	""38"" -> ""25""[label=""cfg_next""];\n	""39"" -> ""48""[label=""cfg_next""];\n	""4"" -> ""56""[label=""cfg_next""];\n	""40"" -> ""51""[label=""cfg_next""];\n	""41"" -> ""18""[label=""cfg_next""];\n	""42"" -> ""40""[label=""cfg_next""];\n	""43"" -> ""17""[label=""cfg_next""];\n	""44"" -> ""2""[label=""cfg_next""];\n	""45"" -> ""37""[label=""cfg_next""];\n	""46"" -> ""1""[label=""cfg_next""];\n	""47"" -> ""29""[label=""cfg_next""];\n	""48"" -> ""23""[label=""cfg_next""];\n	""49"" -> ""28""[label=""cfg_next""];\n	""5"" -> ""57""[label=""cfg_next""];\n	""50"" -> ""22""[label=""cfg_next""];\n	""51"" -> ""49""[label=""cfg_next""];\n	""52"" -> ""21""[label=""cfg_next""];\n	""53"" -> ""42""[label=""cfg_next""];\n	""56"" -> ""30""[label=""cfg_next""];\n	""57"" -> ""58""[label=""cfg_next""];\n	""58"" -> ""7""[label=""cfg_next""];\n	""59"" -> ""36""[label=""cfg_next""];\n	""6"" -> ""31""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(String),Method,* Removes accented letters and replaces with non-accented ASCII equivalent Case is preserved.\n     * http://www.codecodex.com/wiki/Remove_accent_from_letters_%28ex_.%C3%A9_to_e%29\n     *\n     * @param accentedWord\n     *            The word that may have accents in it.\n     * @return De-accented word,String removeAccents(final String accentedWord) {\n    if (accentedWord == null) {\n        return null;\n    }\n    final StringBuilder sb = new StringBuilder();\n    final int n = accentedWord.length();\n    for (int i = 0; i < n; i++) {\n        final char c = accentedWord.charAt(i);\n        final int pos = UNICODE.indexOf(c);\n        if (pos > -1) {\n            sb.append(PLAIN_ASCII.charAt(pos));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n},java.lang.String removeAccents(java.lang.String),"digraph cfg_removeAccents {\n	""1"" [label=""$stack10 = \""AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu\""""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.lang.String: char charAt(int)>(pos)""];\n	""3"" [label=""$stack7 = new java.lang.StringBuilder""];\n	""4"" [label=""$stack8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""5"" [label=""$stack9 = \""ÀàÈèÌìÒòÙùÁáÉéÍíÓóÚúÝýÂâÊêÎîÔôÛûŶŷÃãÕõÑñÄäËëÏïÖöÜüŸÿÅåÇçŐőŰű\""""];\n	""6"" [label=""accentedWord := @parameter0: java.lang.String""];\n	""7"" [label=""c = virtualinvoke accentedWord.<java.lang.String: char charAt(int)>(i)""];\n	""8"" [label=""goto""];\n	""9"" [label=""goto""];\n	""10"" [label=""i = 0""];\n	""11"" [label=""i = i + 1""];\n	""12"" [label=""if accentedWord != null""];\n	""13"" [label=""if i >= n""];\n	""14"" [label=""if pos <= -1""];\n	""15"" [label=""n = virtualinvoke accentedWord.<java.lang.String: int length()>()""];\n	""16"" [label=""pos = virtualinvoke $stack9.<java.lang.String: int indexOf(int)>(c)""];\n	""17"" [label=""return $stack8""];\n	""18"" [label=""return null""];\n	""19"" [label=""sb = $stack7""];\n	""20"" [label=""specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>()""];\n	""21"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""22"" [label=""virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack11)""];\n	""23"" [label=""virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""18""[label=""cfg_false""];\n	""12"" -> ""3""[label=""cfg_true""];\n	""13"" -> ""4""[label=""cfg_true""];\n	""13"" -> ""7""[label=""cfg_false""];\n	""14"" -> ""1""[label=""cfg_false""];\n	""14"" -> ""23""[label=""cfg_true""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""19"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""22""[label=""cfg_next""];\n	""20"" -> ""19""[label=""cfg_next""];\n	""21"" -> ""6""[label=""cfg_next""];\n	""22"" -> ""8""[label=""cfg_next""];\n	""23"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""20""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""16""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_goto""];\n	""9"" -> ""13""[label=""cfg_goto""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(String),Method,"* Replaces any double consonant pair with the single letter equivalent.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param name\n     *            String to have double consonants removed\n     * @return Single consonant word","String removeDoubleConsonants(final String name) {\n    String replacedName = name.toUpperCase(Locale.ENGLISH);\n    for (final String dc : DOUBLE_CONSONANT) {\n        if (replacedName.contains(dc)) {\n            final String singleLetter = dc.substring(0, 1);\n            replacedName = replacedName.replace(dc, singleLetter);\n        }\n    }\n    return replacedName;\n}",java.lang.String removeDoubleConsonants(java.lang.String),"digraph cfg_removeDoubleConsonants {\n	""1"" [label=""$stack8 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""2"" [label=""$stack9 = virtualinvoke replacedName.<java.lang.String: boolean contains(java.lang.CharSequence)>(dc)""];\n	""3"" [label=""dc = l3[l5]""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack9 == 0""];\n	""6"" [label=""if l5 >= l4""];\n	""7"" [label=""l3 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String[] DOUBLE_CONSONANT>""];\n	""8"" [label=""l4 = lengthof l3""];\n	""9"" [label=""l5 = 0""];\n	""10"" [label=""l5 = l5 + 1""];\n	""11"" [label=""name := @parameter0: java.lang.String""];\n	""12"" [label=""replacedName = virtualinvoke name.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack8)""];\n	""13"" [label=""replacedName = virtualinvoke replacedName.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(dc, singleLetter)""];\n	""14"" [label=""return replacedName""];\n	""15"" [label=""singleLetter = virtualinvoke dc.<java.lang.String: java.lang.String substring(int,int)>(0, 1)""];\n	""16"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""10""[label=""cfg_true""];\n	""5"" -> ""15""[label=""cfg_false""];\n	""6"" -> ""14""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(String),Method,"* Deletes all vowels unless the vowel begins the word.\n     *\n     * <h2>API Usage</h2>\n     * <p>\n     * Consider this method private, it is package protected for unit testing only.\n     * </p>\n     *\n     * @param name\n     *            The name to have vowels removed\n     * @return De-voweled word","String removeVowels(String name) {\n    // Extract first letter\n    final String firstLetter = name.substring(0, 1);\n    name = name.replace(""A"", EMPTY);\n    name = name.replace(""E"", EMPTY);\n    name = name.replace(""I"", EMPTY);\n    name = name.replace(""O"", EMPTY);\n    name = name.replace(""U"", EMPTY);\n    name = name.replaceAll(""\\s{2,}\\b"", SPACE);\n    // return isVowel(firstLetter) ? (firstLetter + name) : name;\n    if (isVowel(firstLetter)) {\n        return firstLetter + name;\n    }\n    return name;\n}",java.lang.String removeVowels(java.lang.String),"digraph cfg_removeVowels {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>(firstLetter)""];\n	""2"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(firstLetter)""];\n	""4"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)""];\n	""5"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""firstLetter = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, 1)""];\n	""7"" [label=""if $stack3 == 0""];\n	""8"" [label=""name := @parameter0: java.lang.String""];\n	""9"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""A\"", \""\"")""];\n	""10"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""E\"", \""\"")""];\n	""11"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""I\"", \""\"")""];\n	""12"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""O\"", \""\"")""];\n	""13"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""U\"", \""\"")""];\n	""14"" [label=""name = virtualinvoke name.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""\\s\{2,\}\\b\"", \"" \"")""];\n	""15"" [label=""return $stack7""];\n	""16"" [label=""return name""];\n	""17"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""17"" -> ""3""[label=""cfg_next""];\n	""18"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""16""[label=""cfg_true""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.language.MatchRatingApproachEncoder.<init>(),Constructor,* Constructs a new instance.,public MatchRatingApproachEncoder() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.Soundex.difference(String,String)",Method,"* Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=""https://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp""> MS\n     *          T-SQL DIFFERENCE</a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3","public int difference(final String s1, final String s2) throws EncoderException {\n    return SoundexUtils.difference(this, s1, s2);\n}","int difference(java.lang.String,java.lang.String)","digraph cfg_difference {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.language.SoundexUtils: int difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)>(this, s1, s2)""];\n	""2"" [label=""return $stack3""];\n	""3"" [label=""s1 := @parameter0: java.lang.String""];\n	""4"" [label=""s2 := @parameter1: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.encode(Object),Method,"* Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type {@link String}.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type {@link String}) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type {@link String}\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Soundex encode is not of type java.lang.String"");\n    }\n    return soundex((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Soundex: java.lang.String soundex(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Soundex encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.encode(String),Method,* Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped,@Override\npublic String encode(final String str) {\n    return soundex(str);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.Soundex: java.lang.String soundex(java.lang.String)>(str)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""str := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.getMaxLength(),Method,* Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int,@Deprecated\npublic int getMaxLength() {\n    return this.maxLength;\n},int getMaxLength(),"digraph cfg_getMaxLength {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.Soundex: int maxLength>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.hasMarker(char[]),Method,No Comment,private boolean hasMarker(final char[] mapping) {\n    for (final char ch : mapping) {\n        if (ch == SILENT_MARKER) {\n            return true;\n        }\n    }\n    return false;\n},boolean hasMarker(char[]),"digraph cfg_hasMarker {\n	""1"" [label=""ch = l2[l4]""];\n	""2"" [label=""goto""];\n	""3"" [label=""if ch != 45""];\n	""4"" [label=""if l4 >= l3""];\n	""5"" [label=""l2 = mapping""];\n	""6"" [label=""l3 = lengthof l2""];\n	""7"" [label=""l4 = 0""];\n	""8"" [label=""l4 = l4 + 1""];\n	""9"" [label=""mapping := @parameter0: char[]""];\n	""10"" [label=""return 0""];\n	""11"" [label=""return 1""];\n	""12"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_goto""];\n	""3"" -> ""11""[label=""cfg_false""];\n	""3"" -> ""8""[label=""cfg_true""];\n	""4"" -> ""1""[label=""cfg_false""];\n	""4"" -> ""10""[label=""cfg_true""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.Soundex.map(char),Method,* Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if {@code ch} is not mapped.,"private char map(final char ch) {\n    final int index = ch - 'A';\n    if (index < 0 || index >= this.soundexMapping.length) {\n        throw new IllegalArgumentException(""The character is not mapped: "" + ch + "" (index="" + index + "")"");\n    }\n    return this.soundexMapping[index];\n}",char map(char),"digraph cfg_map {\n	""1"" [label=""$stack10 = new java.lang.IllegalArgumentException""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping>""];\n	""3"" [label=""$stack12 = lengthof $stack11""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping>""];\n	""5"" [label=""$stack14 = $stack13[index]""];\n	""6"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""7"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""The character is not mapped: \"")""];\n	""8"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(ch)""];\n	""9"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" (index=\"")""];\n	""10"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index)""];\n	""11"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"")\"")""];\n	""12"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""13"" [label=""ch := @parameter0: char""];\n	""14"" [label=""if index < $stack12""];\n	""15"" [label=""if index < 0""];\n	""16"" [label=""index = ch - 65""];\n	""17"" [label=""return $stack14""];\n	""18"" [label=""specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)""];\n	""19"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""20"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""21"" [label=""throw $stack10""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""18""[label=""cfg_next""];\n	""13"" -> ""16""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_false""];\n	""14"" -> ""4""[label=""cfg_true""];\n	""15"" -> ""1""[label=""cfg_true""];\n	""15"" -> ""2""[label=""cfg_false""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""21""[label=""cfg_next""];\n	""19"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""17""[label=""cfg_next""];\n	""6"" -> ""19""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.Soundex.setMaxLength(int),Method,* Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set,@Deprecated\npublic void setMaxLength(final int maxLength) {\n    this.maxLength = maxLength;\n},void setMaxLength(int),"digraph cfg_setMaxLength {\n	""1"" [label=""maxLength := @parameter0: int""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""4"" [label=""this.<org.apache.commons.codec.language.Soundex: int maxLength> = maxLength""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.soundex(String),Method,* Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped,"public String soundex(String str) {\n    if (str == null) {\n        return null;\n    }\n    str = SoundexUtils.clean(str);\n    if (str.isEmpty()) {\n        return str;\n    }\n    final char[] out = { '0', '0', '0', '0' };\n    int count = 0;\n    final char first = str.charAt(0);\n    out[count++] = first;\n    // previous digit\n    char lastDigit = map(first);\n    for (int i = 1; i < str.length() && count < out.length; i++) {\n        final char ch = str.charAt(i);\n        if (this.specialCaseHW && (ch == 'H' || ch == 'W')) {\n            // these are ignored completely\n            continue;\n        }\n        final char digit = map(ch);\n        if (digit == SILENT_MARKER) {\n            continue;\n        }\n        if (digit != '0' && digit != lastDigit) {\n            // don't store vowels or repeats\n            out[count++] = digit;\n        }\n        lastDigit = digit;\n    }\n    return new String(out);\n}",java.lang.String soundex(java.lang.String),"digraph cfg_soundex {\n	""1"" [label=""$stack10 = newarray (char)[4]""];\n	""2"" [label=""$stack10[0] = 48""];\n	""3"" [label=""$stack10[1] = 48""];\n	""4"" [label=""$stack10[2] = 48""];\n	""5"" [label=""$stack10[3] = 48""];\n	""6"" [label=""$stack11 = count""];\n	""7"" [label=""$stack12 = virtualinvoke str.<java.lang.String: int length()>()""];\n	""8"" [label=""$stack13 = new java.lang.String""];\n	""9"" [label=""$stack14 = lengthof out""];\n	""10"" [label=""$stack15 = this.<org.apache.commons.codec.language.Soundex: boolean specialCaseHW>""];\n	""11"" [label=""$stack16 = count""];\n	""12"" [label=""$stack9 = virtualinvoke str.<java.lang.String: boolean isEmpty()>()""];\n	""13"" [label=""ch = virtualinvoke str.<java.lang.String: char charAt(int)>(i)""];\n	""14"" [label=""count = 0""];\n	""15"" [label=""count = count + 1""];\n	""16"" [label=""count = count + 1""];\n	""17"" [label=""digit = specialinvoke this.<org.apache.commons.codec.language.Soundex: char map(char)>(ch)""];\n	""18"" [label=""first = virtualinvoke str.<java.lang.String: char charAt(int)>(0)""];\n	""19"" [label=""goto""];\n	""20"" [label=""goto""];\n	""21"" [label=""goto""];\n	""22"" [label=""i = 1""];\n	""23"" [label=""i = i + 1""];\n	""24"" [label=""if $stack15 == 0""];\n	""25"" [label=""if $stack9 == 0""];\n	""26"" [label=""if ch != 87""];\n	""27"" [label=""if ch == 72""];\n	""28"" [label=""if count >= $stack14""];\n	""29"" [label=""if digit != 45""];\n	""30"" [label=""if digit == 48""];\n	""31"" [label=""if digit == lastDigit""];\n	""32"" [label=""if i >= $stack12""];\n	""33"" [label=""if str != null""];\n	""34"" [label=""lastDigit = digit""];\n	""35"" [label=""lastDigit = specialinvoke this.<org.apache.commons.codec.language.Soundex: char map(char)>(first)""];\n	""36"" [label=""out = $stack10""];\n	""37"" [label=""out[$stack11] = first""];\n	""38"" [label=""out[$stack16] = digit""];\n	""39"" [label=""return $stack13""];\n	""40"" [label=""return null""];\n	""41"" [label=""return str""];\n	""42"" [label=""specialinvoke $stack13.<java.lang.String: void <init>(char[])>(out)""];\n	""43"" [label=""str := @parameter0: java.lang.String""];\n	""44"" [label=""str = staticinvoke <org.apache.commons.codec.language.SoundexUtils: java.lang.String clean(java.lang.String)>(str)""];\n	""45"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""24""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""25""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""14"" -> ""18""[label=""cfg_next""];\n	""15"" -> ""37""[label=""cfg_next""];\n	""16"" -> ""38""[label=""cfg_next""];\n	""17"" -> ""29""[label=""cfg_next""];\n	""18"" -> ""6""[label=""cfg_next""];\n	""19"" -> ""23""[label=""cfg_goto""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""7""[label=""cfg_goto""];\n	""21"" -> ""23""[label=""cfg_goto""];\n	""22"" -> ""7""[label=""cfg_next""];\n	""23"" -> ""20""[label=""cfg_next""];\n	""24"" -> ""17""[label=""cfg_true""];\n	""24"" -> ""27""[label=""cfg_false""];\n	""25"" -> ""1""[label=""cfg_true""];\n	""25"" -> ""41""[label=""cfg_false""];\n	""26"" -> ""17""[label=""cfg_true""];\n	""26"" -> ""19""[label=""cfg_false""];\n	""27"" -> ""23""[label=""cfg_true""];\n	""27"" -> ""26""[label=""cfg_false""];\n	""28"" -> ""13""[label=""cfg_false""];\n	""28"" -> ""8""[label=""cfg_true""];\n	""29"" -> ""21""[label=""cfg_false""];\n	""29"" -> ""30""[label=""cfg_true""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_false""];\n	""30"" -> ""34""[label=""cfg_true""];\n	""31"" -> ""11""[label=""cfg_false""];\n	""31"" -> ""34""[label=""cfg_true""];\n	""32"" -> ""8""[label=""cfg_true""];\n	""32"" -> ""9""[label=""cfg_false""];\n	""33"" -> ""40""[label=""cfg_false""];\n	""33"" -> ""44""[label=""cfg_true""];\n	""34"" -> ""23""[label=""cfg_next""];\n	""35"" -> ""22""[label=""cfg_next""];\n	""36"" -> ""14""[label=""cfg_next""];\n	""37"" -> ""35""[label=""cfg_next""];\n	""38"" -> ""34""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""42"" -> ""39""[label=""cfg_next""];\n	""43"" -> ""33""[label=""cfg_next""];\n	""44"" -> ""12""[label=""cfg_next""];\n	""45"" -> ""43""[label=""cfg_next""];\n	""5"" -> ""36""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""32""[label=""cfg_next""];\n	""8"" -> ""42""[label=""cfg_next""];\n	""9"" -> ""28""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.<init>(),Constructor,* Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING_STRING,public Soundex() {\n    this.soundexMapping = US_ENGLISH_MAPPING;\n    this.specialCaseHW = true;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.language.Soundex: char[] US_ENGLISH_MAPPING>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""5"" [label=""this.<org.apache.commons.codec.language.Soundex: boolean specialCaseHW> = 1""];\n	""6"" [label=""this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping> = $stack1""];\n	""7"" [label=""this.<org.apache.commons.codec.language.Soundex: int maxLength> = 4""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.<init>(char[]),Constructor,"* Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     * <p>\n     * Every letter of the alphabet is ""mapped"" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     * </p>\n     * <p>\n     * If the mapping contains an instance of {@link #SILENT_MARKER} then H and W are not given special treatment\n     * </p>\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character",public Soundex(final char[] mapping) {\n    this.soundexMapping = mapping.clone();\n    this.specialCaseHW = !hasMarker(this.soundexMapping);\n},void <init>(char[]),"digraph cfg_init {\n	""1"" [label=""$stack2 = virtualinvoke mapping.<java.lang.Object: java.lang.Object clone()>()""];\n	""2"" [label=""$stack3 = (char[]) $stack2""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping>""];\n	""4"" [label=""$stack5 = specialinvoke this.<org.apache.commons.codec.language.Soundex: boolean hasMarker(char[])>($stack4)""];\n	""5"" [label=""$stack6 = 0""];\n	""6"" [label=""$stack6 = 1""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack5 != 0""];\n	""9"" [label=""mapping := @parameter0: char[]""];\n	""10"" [label=""return""];\n	""11"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""12"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""13"" [label=""this.<org.apache.commons.codec.language.Soundex: boolean specialCaseHW> = $stack6""];\n	""14"" [label=""this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping> = $stack3""];\n	""15"" [label=""this.<org.apache.commons.codec.language.Soundex: int maxLength> = 4""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""15""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""10""[label=""cfg_next""];\n	""14"" -> ""3""[label=""cfg_next""];\n	""15"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""14""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_goto""];\n	""8"" -> ""5""[label=""cfg_true""];\n	""8"" -> ""6""[label=""cfg_false""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Soundex.<init>(String),Constructor,"* Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     * <p>\n     * If the mapping contains an instance of {@link #SILENT_MARKER} then H and W are not given special treatment\n     * </p>\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4",public Soundex(final String mapping) {\n    this.soundexMapping = mapping.toCharArray();\n    this.specialCaseHW = !hasMarker(this.soundexMapping);\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = virtualinvoke mapping.<java.lang.String: char[] toCharArray()>()""];\n	""2"" [label=""$stack3 = this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping>""];\n	""3"" [label=""$stack4 = specialinvoke this.<org.apache.commons.codec.language.Soundex: boolean hasMarker(char[])>($stack3)""];\n	""4"" [label=""$stack5 = 0""];\n	""5"" [label=""$stack5 = 1""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack4 != 0""];\n	""8"" [label=""mapping := @parameter0: java.lang.String""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""12"" [label=""this.<org.apache.commons.codec.language.Soundex: boolean specialCaseHW> = $stack5""];\n	""13"" [label=""this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping> = $stack2""];\n	""14"" [label=""this.<org.apache.commons.codec.language.Soundex: int maxLength> = 4""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_goto""];\n	""7"" -> ""4""[label=""cfg_true""];\n	""7"" -> ""5""[label=""cfg_false""];\n	""8"" -> ""10""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.Soundex.<init>(String,boolean)",Constructor,"* Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @param specialCaseHW if true, then\n     * @since 1.11","public Soundex(final String mapping, final boolean specialCaseHW) {\n    this.soundexMapping = mapping.toCharArray();\n    this.specialCaseHW = specialCaseHW;\n}","void <init>(java.lang.String,boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = virtualinvoke mapping.<java.lang.String: char[] toCharArray()>()""];\n	""2"" [label=""mapping := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialCaseHW := @parameter1: boolean""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.language.Soundex""];\n	""7"" [label=""this.<org.apache.commons.codec.language.Soundex: boolean specialCaseHW> = specialCaseHW""];\n	""8"" [label=""this.<org.apache.commons.codec.language.Soundex: char[] soundexMapping> = $stack3""];\n	""9"" [label=""this.<org.apache.commons.codec.language.Soundex: int maxLength> = 4""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map)",Method,No Comment,"private static void parseRules(final Scanner scanner, final String location, final Map<Character, List<Rule>> ruleMapping, final Map<Character, Character> asciiFoldings) {\n    int currentLine = 0;\n    boolean inMultilineComment = false;\n    while (scanner.hasNextLine()) {\n        currentLine++;\n        final String rawLine = scanner.nextLine();\n        String line = rawLine;\n        if (inMultilineComment) {\n            if (line.endsWith(MULTILINE_COMMENT_END)) {\n                inMultilineComment = false;\n            }\n            continue;\n        }\n        if (line.startsWith(MULTILINE_COMMENT_START)) {\n            inMultilineComment = true;\n        } else {\n            // discard comments\n            final int cmtI = line.indexOf(COMMENT);\n            if (cmtI >= 0) {\n                line = line.substring(0, cmtI);\n            }\n            // trim leading-trailing whitespace\n            line = line.trim();\n            if (line.isEmpty()) {\n                // empty lines can be safely skipped\n                continue;\n            }\n            if (line.contains(""="")) {\n                // folding\n                final String[] parts = line.split(""="");\n                if (parts.length != 2) {\n                    throw new IllegalArgumentException(""Malformed folding statement split into "" + parts.length + "" parts: "" + rawLine + "" in "" + location);\n                }\n                final String leftCharacter = parts[0];\n                final String rightCharacter = parts[1];\n                if (leftCharacter.length() != 1 || rightCharacter.length() != 1) {\n                    throw new IllegalArgumentException(""Malformed folding statement - "" + ""patterns are not single characters: "" + rawLine + "" in "" + location);\n                }\n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            } else {\n                // rule\n                final String[] parts = line.split(""\\s+"");\n                if (parts.length != 4) {\n                    throw new IllegalArgumentException(""Malformed rule statement split into "" + parts.length + "" parts: "" + rawLine + "" in "" + location);\n                }\n                try {\n                    final String pattern = stripQuotes(parts[0]);\n                    final String replacement1 = stripQuotes(parts[1]);\n                    final String replacement2 = stripQuotes(parts[2]);\n                    final String replacement3 = stripQuotes(parts[3]);\n                    final Rule r = new Rule(pattern, replacement1, replacement2, replacement3);\n                    final char patternKey = r.pattern.charAt(0);\n                    final List<Rule> rules = ruleMapping.computeIfAbsent(patternKey, k -> new ArrayList<>());\n                    rules.add(r);\n                } catch (final IllegalArgumentException e) {\n                    throw new IllegalStateException(""Problem parsing line '"" + currentLine + ""' in "" + location, e);\n                }\n            }\n        }\n    }\n}","void parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)","digraph cfg_parseRules {\n	""1"" [label=""$stack17 = virtualinvoke scanner.<java.util.Scanner: boolean hasNextLine()>()""];\n	""2"" [label=""$stack18 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>(\""/*\"")""];\n	""3"" [label=""$stack19 = virtualinvoke line.<java.lang.String: boolean isEmpty()>()""];\n	""4"" [label=""$stack20 = virtualinvoke line.<java.lang.String: boolean contains(java.lang.CharSequence)>(\""=\"")""];\n	""5"" [label=""$stack21 = lengthof parts""];\n	""6"" [label=""$stack22 = parts[0]""];\n	""7"" [label=""$stack23 = parts[1]""];\n	""8"" [label=""$stack24 = parts[2]""];\n	""9"" [label=""$stack25 = parts[3]""];\n	""10"" [label=""$stack26 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""11"" [label=""$stack27 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String access$000(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule)>(r)""];\n	""12"" [label=""$stack28 = dynamicinvoke \""apply\"" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: \""REF_INVOKE_STATIC\"" <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.List lambda$parseRules$2(java.lang.Character)>, methodtype: java.util.List __METHODTYPE__(java.lang.Character))""];\n	""13"" [label=""$stack29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(patternKey)""];\n	""14"" [label=""$stack30 = interfaceinvoke ruleMapping.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($stack29, $stack28)""];\n	""15"" [label=""$stack31 = new java.lang.StringBuilder""];\n	""16"" [label=""$stack32 = lengthof parts""];\n	""17"" [label=""$stack33 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed rule statement split into \"")""];\n	""18"" [label=""$stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack32)""];\n	""19"" [label=""$stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" parts: \"")""];\n	""20"" [label=""$stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""21"" [label=""$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" in \"")""];\n	""22"" [label=""$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""23"" [label=""$stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""24"" [label=""$stack40 = new java.lang.IllegalArgumentException""];\n	""25"" [label=""$stack41 = lengthof parts""];\n	""26"" [label=""$stack42 = virtualinvoke leftCharacter.<java.lang.String: int length()>()""];\n	""27"" [label=""$stack43 = new java.lang.StringBuilder""];\n	""28"" [label=""$stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed folding statement - patterns are not single characters: \"")""];\n	""29"" [label=""$stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""30"" [label=""$stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" in \"")""];\n	""31"" [label=""$stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""32"" [label=""$stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""33"" [label=""$stack49 = new java.lang.IllegalArgumentException""];\n	""34"" [label=""$stack50 = virtualinvoke rightCharacter.<java.lang.String: int length()>()""];\n	""35"" [label=""$stack51 = virtualinvoke leftCharacter.<java.lang.String: char charAt(int)>(0)""];\n	""36"" [label=""$stack52 = virtualinvoke rightCharacter.<java.lang.String: char charAt(int)>(0)""];\n	""37"" [label=""$stack53 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($stack52)""];\n	""38"" [label=""$stack54 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($stack51)""];\n	""39"" [label=""$stack55 = new java.lang.StringBuilder""];\n	""40"" [label=""$stack56 = lengthof parts""];\n	""41"" [label=""$stack57 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Malformed folding statement split into \"")""];\n	""42"" [label=""$stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack56)""];\n	""43"" [label=""$stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" parts: \"")""];\n	""44"" [label=""$stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(rawLine)""];\n	""45"" [label=""$stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" in \"")""];\n	""46"" [label=""$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""47"" [label=""$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""48"" [label=""$stack64 = new java.lang.IllegalArgumentException""];\n	""49"" [label=""$stack65 = virtualinvoke line.<java.lang.String: boolean endsWith(java.lang.String)>(\""*/\"")""];\n	""50"" [label=""$stack66 := @caughtexception""];\n	""51"" [label=""$stack67 = new java.lang.StringBuilder""];\n	""52"" [label=""$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Problem parsing line \'\"")""];\n	""53"" [label=""$stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currentLine)""];\n	""54"" [label=""$stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""\' in \"")""];\n	""55"" [label=""$stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location)""];\n	""56"" [label=""$stack72 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""57"" [label=""$stack73 = new java.lang.IllegalStateException""];\n	""58"" [label=""asciiFoldings := @parameter3: java.util.Map""];\n	""59"" [label=""cmtI = virtualinvoke line.<java.lang.String: int indexOf(java.lang.String)>(\""//\"")""];\n	""60"" [label=""currentLine = 0""];\n	""61"" [label=""currentLine = currentLine + 1""];\n	""62"" [label=""goto""];\n	""63"" [label=""goto""];\n	""64"" [label=""goto""];\n	""65"" [label=""goto""];\n	""66"" [label=""goto""];\n	""67"" [label=""goto""];\n	""68"" [label=""if $stack17 == 0""];\n	""69"" [label=""if $stack18 == 0""];\n	""70"" [label=""if $stack19 == 0""];\n	""71"" [label=""if $stack20 == 0""];\n	""72"" [label=""if $stack21 == 4""];\n	""73"" [label=""if $stack41 == 2""];\n	""74"" [label=""if $stack42 != 1""];\n	""75"" [label=""if $stack50 == 1""];\n	""76"" [label=""if $stack65 == 0""];\n	""77"" [label=""if cmtI < 0""];\n	""78"" [label=""if inMultilineComment == 0""];\n	""79"" [label=""inMultilineComment = 0""];\n	""80"" [label=""inMultilineComment = 0""];\n	""81"" [label=""inMultilineComment = 1""];\n	""82"" [label=""interfaceinvoke asciiFoldings.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack54, $stack53)""];\n	""83"" [label=""interfaceinvoke rules.<java.util.List: boolean add(java.lang.Object)>(r)""];\n	""84"" [label=""leftCharacter = $stack66""];\n	""85"" [label=""leftCharacter = parts[0]""];\n	""86"" [label=""leftCharacter = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($stack22)""];\n	""87"" [label=""line = rawLine""];\n	""88"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String substring(int,int)>(0, cmtI)""];\n	""89"" [label=""line = virtualinvoke line.<java.lang.String: java.lang.String trim()>()""];\n	""90"" [label=""location := @parameter1: java.lang.String""];\n	""91"" [label=""parts = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""=\"")""];\n	""92"" [label=""parts = virtualinvoke line.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\s+\"")""];\n	""93"" [label=""patternKey = virtualinvoke $stack27.<java.lang.String: char charAt(int)>(0)""];\n	""94"" [label=""r = $stack26""];\n	""95"" [label=""rawLine = virtualinvoke scanner.<java.util.Scanner: java.lang.String nextLine()>()""];\n	""96"" [label=""replacement2 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($stack24)""];\n	""97"" [label=""replacement3 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($stack25)""];\n	""98"" [label=""return""];\n	""99"" [label=""rightCharacter = parts[1]""];\n	""100"" [label=""rightCharacter = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($stack23)""];\n	""101"" [label=""ruleMapping := @parameter2: java.util.Map""];\n	""102"" [label=""rules = (java.util.List) $stack30""];\n	""103"" [label=""scanner := @parameter0: java.util.Scanner""];\n	""104"" [label=""specialinvoke $stack26.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(leftCharacter, rightCharacter, replacement2, replacement3)""];\n	""105"" [label=""specialinvoke $stack31.<java.lang.StringBuilder: void <init>()>()""];\n	""106"" [label=""specialinvoke $stack40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)""];\n	""107"" [label=""specialinvoke $stack43.<java.lang.StringBuilder: void <init>()>()""];\n	""108"" [label=""specialinvoke $stack49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack48)""];\n	""109"" [label=""specialinvoke $stack55.<java.lang.StringBuilder: void <init>()>()""];\n	""110"" [label=""specialinvoke $stack64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack63)""];\n	""111"" [label=""specialinvoke $stack67.<java.lang.StringBuilder: void <init>()>()""];\n	""112"" [label=""specialinvoke $stack73.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($stack72, leftCharacter)""];\n	""113"" [label=""throw $stack40""];\n	""114"" [label=""throw $stack49""];\n	""115"" [label=""throw $stack64""];\n	""116"" [label=""throw $stack73""];\n	""1"" -> ""68""[label=""cfg_next""];\n	""10"" -> ""104""[label=""cfg_next""];\n	""10"" -> ""50""[label=""cfg_except""];\n	""100"" -> ""50""[label=""cfg_except""];\n	""100"" -> ""8""[label=""cfg_next""];\n	""101"" -> ""58""[label=""cfg_next""];\n	""102"" -> ""50""[label=""cfg_except""];\n	""102"" -> ""83""[label=""cfg_next""];\n	""103"" -> ""90""[label=""cfg_next""];\n	""104"" -> ""50""[label=""cfg_except""];\n	""104"" -> ""94""[label=""cfg_next""];\n	""105"" -> ""17""[label=""cfg_next""];\n	""106"" -> ""113""[label=""cfg_next""];\n	""107"" -> ""28""[label=""cfg_next""];\n	""108"" -> ""114""[label=""cfg_next""];\n	""109"" -> ""41""[label=""cfg_next""];\n	""11"" -> ""50""[label=""cfg_except""];\n	""11"" -> ""93""[label=""cfg_next""];\n	""110"" -> ""115""[label=""cfg_next""];\n	""111"" -> ""52""[label=""cfg_next""];\n	""112"" -> ""116""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""12"" -> ""50""[label=""cfg_except""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""13"" -> ""50""[label=""cfg_except""];\n	""14"" -> ""102""[label=""cfg_next""];\n	""14"" -> ""50""[label=""cfg_except""];\n	""15"" -> ""105""[label=""cfg_next""];\n	""16"" -> ""18""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""69""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""23""[label=""cfg_next""];\n	""23"" -> ""106""[label=""cfg_next""];\n	""24"" -> ""15""[label=""cfg_next""];\n	""25"" -> ""73""[label=""cfg_next""];\n	""26"" -> ""74""[label=""cfg_next""];\n	""27"" -> ""107""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""70""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""108""[label=""cfg_next""];\n	""33"" -> ""27""[label=""cfg_next""];\n	""34"" -> ""75""[label=""cfg_next""];\n	""35"" -> ""38""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""82""[label=""cfg_next""];\n	""38"" -> ""36""[label=""cfg_next""];\n	""39"" -> ""109""[label=""cfg_next""];\n	""4"" -> ""71""[label=""cfg_next""];\n	""40"" -> ""42""[label=""cfg_next""];\n	""41"" -> ""40""[label=""cfg_next""];\n	""42"" -> ""43""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""110""[label=""cfg_next""];\n	""48"" -> ""39""[label=""cfg_next""];\n	""49"" -> ""76""[label=""cfg_next""];\n	""5"" -> ""72""[label=""cfg_next""];\n	""50"" -> ""84""[label=""cfg_next""];\n	""51"" -> ""111""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""112""[label=""cfg_next""];\n	""57"" -> ""51""[label=""cfg_next""];\n	""58"" -> ""60""[label=""cfg_next""];\n	""59"" -> ""77""[label=""cfg_next""];\n	""6"" -> ""50""[label=""cfg_except""];\n	""6"" -> ""86""[label=""cfg_next""];\n	""60"" -> ""79""[label=""cfg_next""];\n	""61"" -> ""95""[label=""cfg_next""];\n	""62"" -> ""1""[label=""cfg_goto""];\n	""63"" -> ""64""[label=""cfg_goto""];\n	""64"" -> ""1""[label=""cfg_goto""];\n	""65"" -> ""1""[label=""cfg_goto""];\n	""66"" -> ""64""[label=""cfg_goto""];\n	""67"" -> ""64""[label=""cfg_goto""];\n	""68"" -> ""61""[label=""cfg_false""];\n	""68"" -> ""98""[label=""cfg_true""];\n	""69"" -> ""59""[label=""cfg_true""];\n	""69"" -> ""81""[label=""cfg_false""];\n	""7"" -> ""100""[label=""cfg_next""];\n	""7"" -> ""50""[label=""cfg_except""];\n	""70"" -> ""4""[label=""cfg_true""];\n	""70"" -> ""65""[label=""cfg_false""];\n	""71"" -> ""91""[label=""cfg_false""];\n	""71"" -> ""92""[label=""cfg_true""];\n	""72"" -> ""24""[label=""cfg_false""];\n	""72"" -> ""6""[label=""cfg_true""];\n	""73"" -> ""48""[label=""cfg_false""];\n	""73"" -> ""85""[label=""cfg_true""];\n	""74"" -> ""33""[label=""cfg_true""];\n	""74"" -> ""34""[label=""cfg_false""];\n	""75"" -> ""33""[label=""cfg_false""];\n	""75"" -> ""35""[label=""cfg_true""];\n	""76"" -> ""1""[label=""cfg_true""];\n	""76"" -> ""80""[label=""cfg_false""];\n	""77"" -> ""88""[label=""cfg_false""];\n	""77"" -> ""89""[label=""cfg_true""];\n	""78"" -> ""2""[label=""cfg_true""];\n	""78"" -> ""49""[label=""cfg_false""];\n	""79"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""50""[label=""cfg_except""];\n	""8"" -> ""96""[label=""cfg_next""];\n	""80"" -> ""62""[label=""cfg_next""];\n	""81"" -> ""63""[label=""cfg_next""];\n	""82"" -> ""66""[label=""cfg_next""];\n	""83"" -> ""50""[label=""cfg_except""];\n	""83"" -> ""67""[label=""cfg_next""];\n	""84"" -> ""57""[label=""cfg_next""];\n	""85"" -> ""99""[label=""cfg_next""];\n	""86"" -> ""50""[label=""cfg_except""];\n	""86"" -> ""7""[label=""cfg_next""];\n	""87"" -> ""78""[label=""cfg_next""];\n	""88"" -> ""89""[label=""cfg_next""];\n	""89"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""50""[label=""cfg_except""];\n	""9"" -> ""97""[label=""cfg_next""];\n	""90"" -> ""101""[label=""cfg_next""];\n	""91"" -> ""25""[label=""cfg_next""];\n	""92"" -> ""5""[label=""cfg_next""];\n	""93"" -> ""13""[label=""cfg_next""];\n	""93"" -> ""50""[label=""cfg_except""];\n	""94"" -> ""11""[label=""cfg_next""];\n	""94"" -> ""50""[label=""cfg_except""];\n	""95"" -> ""87""[label=""cfg_next""];\n	""96"" -> ""50""[label=""cfg_except""];\n	""96"" -> ""9""[label=""cfg_next""];\n	""97"" -> ""10""[label=""cfg_next""];\n	""97"" -> ""50""[label=""cfg_except""];\n	""99"" -> ""26""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(String),Method,No Comment,"private static String stripQuotes(String str) {\n    if (str.startsWith(DOUBLE_QUOTE)) {\n        str = str.substring(1);\n    }\n    if (str.endsWith(DOUBLE_QUOTE)) {\n        str = str.substring(0, str.length() - 1);\n    }\n    return str;\n}",java.lang.String stripQuotes(java.lang.String),"digraph cfg_stripQuotes {\n	""1"" [label=""$stack1 = virtualinvoke str.<java.lang.String: boolean startsWith(java.lang.String)>(\""\\""\"")""];\n	""2"" [label=""$stack2 = virtualinvoke str.<java.lang.String: boolean endsWith(java.lang.String)>(\""\\""\"")""];\n	""3"" [label=""$stack3 = virtualinvoke str.<java.lang.String: int length()>()""];\n	""4"" [label=""$stack4 = $stack3 - 1""];\n	""5"" [label=""if $stack1 == 0""];\n	""6"" [label=""if $stack2 == 0""];\n	""7"" [label=""return str""];\n	""8"" [label=""str := @parameter0: java.lang.String""];\n	""9"" [label=""str = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(1)""];\n	""10"" [label=""str = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(0, $stack4)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""9""[label=""cfg_false""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""7""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(String),Method,* Performs a cleanup of the input string before the actual soundex transformation.\n     * <p>\n     * Removes all whitespace characters and performs ASCII folding if enabled.\n     * </p>\n     *\n     * @param input\n     *            the input string to clean up\n     * @return a cleaned up string,private String cleanup(final String input) {\n    final StringBuilder sb = new StringBuilder();\n    for (char ch : input.toCharArray()) {\n        if (Character.isWhitespace(ch)) {\n            continue;\n        }\n        ch = Character.toLowerCase(ch);\n        final Character character = FOLDINGS.get(ch);\n        if (folding && character != null) {\n            ch = character;\n        }\n        sb.append(ch);\n    }\n    return sb.toString();\n},java.lang.String cleanup(java.lang.String),"digraph cfg_cleanup {\n	""1"" [label=""$stack10 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch)""];\n	""2"" [label=""$stack11 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>""];\n	""3"" [label=""$stack12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(ch)""];\n	""4"" [label=""$stack13 = interfaceinvoke $stack11.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack12)""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: boolean folding>""];\n	""6"" [label=""$stack8 = new java.lang.StringBuilder""];\n	""7"" [label=""$stack9 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""8"" [label=""ch = l3[l5]""];\n	""9"" [label=""ch = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch)""];\n	""10"" [label=""ch = virtualinvoke character.<java.lang.Character: char charValue()>()""];\n	""11"" [label=""character = (java.lang.Character) $stack13""];\n	""12"" [label=""goto""];\n	""13"" [label=""goto""];\n	""14"" [label=""if $stack10 == 0""];\n	""15"" [label=""if $stack14 == 0""];\n	""16"" [label=""if character == null""];\n	""17"" [label=""if l5 >= l4""];\n	""18"" [label=""input := @parameter0: java.lang.String""];\n	""19"" [label=""l3 = virtualinvoke input.<java.lang.String: char[] toCharArray()>()""];\n	""20"" [label=""l4 = lengthof l3""];\n	""21"" [label=""l5 = 0""];\n	""22"" [label=""l5 = l5 + 1""];\n	""23"" [label=""return $stack9""];\n	""24"" [label=""sb = $stack8""];\n	""25"" [label=""specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>()""];\n	""26"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""27"" [label=""virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(ch)""];\n	""1"" -> ""14""[label=""cfg_next""];\n	""10"" -> ""27""[label=""cfg_next""];\n	""11"" -> ""5""[label=""cfg_next""];\n	""12"" -> ""22""[label=""cfg_goto""];\n	""13"" -> ""17""[label=""cfg_goto""];\n	""14"" -> ""12""[label=""cfg_false""];\n	""14"" -> ""9""[label=""cfg_true""];\n	""15"" -> ""16""[label=""cfg_false""];\n	""15"" -> ""27""[label=""cfg_true""];\n	""16"" -> ""10""[label=""cfg_false""];\n	""16"" -> ""27""[label=""cfg_true""];\n	""17"" -> ""7""[label=""cfg_true""];\n	""17"" -> ""8""[label=""cfg_false""];\n	""18"" -> ""6""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""22"" -> ""13""[label=""cfg_next""];\n	""24"" -> ""19""[label=""cfg_next""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""26"" -> ""18""[label=""cfg_next""];\n	""27"" -> ""22""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""25""[label=""cfg_next""];\n	""7"" -> ""23""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""2""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(Object),Method,"* Encodes an Object using the Daitch-Mokotoff soundex algorithm without branching.\n     * <p>\n     * This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an\n     * EncoderException if the supplied object is not of type {@link String}.\n     * </p>\n     *\n     * @see #soundex(String)\n     * @param obj\n     *            Object to encode\n     * @return An object (of type {@link String}) containing the DM soundex code, which corresponds to the String\n     *         supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type {@link String}\n     * @throws IllegalArgumentException\n     *             if a character is not mapped","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String"");\n    }\n    return encode((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String encode(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(String),Method,* Encodes a String using the Daitch-Mokotoff soundex algorithm without branching.\n     *\n     * @see #soundex(String)\n     * @param source\n     *            A String object to encode\n     * @return A DM Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *             if a character is not mapped,"@Override\npublic String encode(final String source) {\n    if (source == null) {\n        return null;\n    }\n    return soundex(source, false)[0];\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = specialinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String[] soundex(java.lang.String,boolean)>(source, 0)""];\n	""2"" [label=""$stack3 = $stack2[0]""];\n	""3"" [label=""if source != null""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""return null""];\n	""6"" [label=""source := @parameter0: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_true""];\n	""3"" -> ""5""[label=""cfg_false""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String),Method,"* Encodes a String using the Daitch-Mokotoff soundex algorithm with branching.\n     * <p>\n     * In case a string is encoded into multiple codes (see branching rules), the result will contain all codes,\n     * separated by '|'.\n     * </p>\n     * <p>\n     * Example: the name ""AUERBACH"" is encoded as both\n     * </p>\n     * <ul>\n     * <li>097400</li>\n     * <li>097500</li>\n     * </ul>\n     * <p>\n     * Thus the result will be ""097400|097500"".\n     * </p>\n     *\n     * @param source\n     *            A String object to encode\n     * @return A string containing a set of DM Soundex codes corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *             if a character is not mapped","public String soundex(final String source) {\n    return String.join(""|"", soundex(source, true));\n}",java.lang.String soundex(java.lang.String),"digraph cfg_soundex {\n	""1"" [label=""$stack2 = specialinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String[] soundex(java.lang.String,boolean)>(source, 1)""];\n	""2"" [label=""$stack3 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(\""|\"", $stack2)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""source := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String,boolean)",Method,* Perform the actual DM Soundex algorithm on the input string.\n     *\n     * @param source\n     *            A String object to encode\n     * @param branching\n     *            If branching shall be performed\n     * @return A string array containing all DM Soundex codes corresponding to the String supplied depending on the\n     *         selected branching mode,"private String[] soundex(final String source, final boolean branching) {\n    if (source == null) {\n        return null;\n    }\n    final String input = cleanup(source);\n    final Set<Branch> currentBranches = new LinkedHashSet<>();\n    currentBranches.add(new Branch());\n    char lastChar = NUL;\n    for (int index = 0; index < input.length(); index++) {\n        final char ch = input.charAt(index);\n        // ignore whitespace inside a name\n        if (Character.isWhitespace(ch)) {\n            continue;\n        }\n        final String inputContext = input.substring(index);\n        final List<Rule> rules = RULES.get(ch);\n        if (rules == null) {\n            continue;\n        }\n        // use an EMPTY_LIST to avoid false positive warnings wrt potential null pointer access\n        final List<Branch> nextBranches = branching ? new ArrayList<>() : Collections.emptyList();\n        for (final Rule rule : rules) {\n            if (rule.matches(inputContext)) {\n                if (branching) {\n                    nextBranches.clear();\n                }\n                final String[] replacements = rule.getReplacements(inputContext, lastChar == '\0');\n                final boolean branchingRequired = replacements.length > 1 && branching;\n                for (final Branch branch : currentBranches) {\n                    for (final String nextReplacement : replacements) {\n                        // if we have multiple replacements, always create a new branch\n                        final Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                        // special rule: occurrences of mn or nm are treated differently\n                        final boolean force = lastChar == 'm' && ch == 'n' || lastChar == 'n' && ch == 'm';\n                        nextBranch.processNextReplacement(nextReplacement, force);\n                        if (!branching) {\n                            break;\n                        }\n                        nextBranches.add(nextBranch);\n                    }\n                }\n                if (branching) {\n                    currentBranches.clear();\n                    currentBranches.addAll(nextBranches);\n                }\n                index += rule.getPatternLength() - 1;\n                break;\n            }\n        }\n        lastChar = ch;\n    }\n    final String[] result = new String[currentBranches.size()];\n    int index = 0;\n    for (final Branch branch : currentBranches) {\n        branch.finish();\n        result[index++] = branch.toString();\n    }\n    return result;\n}","java.lang.String[] soundex(java.lang.String,boolean)","digraph cfg_soundex {\n	""1"" [label=""$stack23 = new java.util.LinkedHashSet""];\n	""2"" [label=""$stack24 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""3"" [label=""$stack25 = virtualinvoke input.<java.lang.String: int length()>()""];\n	""4"" [label=""$stack26 = interfaceinvoke currentBranches.<java.util.Set: int size()>()""];\n	""5"" [label=""$stack27 = interfaceinvoke inputContext.<java.util.Iterator: boolean hasNext()>()""];\n	""6"" [label=""$stack28 = interfaceinvoke inputContext.<java.util.Iterator: java.lang.Object next()>()""];\n	""7"" [label=""$stack29 = ch""];\n	""8"" [label=""$stack30 = virtualinvoke rules.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>()""];\n	""9"" [label=""$stack31 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch)""];\n	""10"" [label=""$stack32 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map RULES>""];\n	""11"" [label=""$stack33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(ch)""];\n	""12"" [label=""$stack34 = interfaceinvoke $stack32.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack33)""];\n	""13"" [label=""$stack35 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>()""];\n	""14"" [label=""$stack36 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>()""];\n	""15"" [label=""$stack37 = virtualinvoke rule.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: boolean matches(java.lang.String)>(inputContext)""];\n	""16"" [label=""$stack38 = lengthof replacements""];\n	""17"" [label=""$stack39 = interfaceinvoke l15.<java.util.Iterator: boolean hasNext()>()""];\n	""18"" [label=""$stack40 = virtualinvoke rule.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: int getPatternLength()>()""];\n	""19"" [label=""$stack41 = $stack40 - 1""];\n	""20"" [label=""$stack42 = interfaceinvoke l15.<java.util.Iterator: java.lang.Object next()>()""];\n	""21"" [label=""$stack43 = 0""];\n	""22"" [label=""$stack43 = 1""];\n	""23"" [label=""branch = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch) $stack42""];\n	""24"" [label=""branching := @parameter1: boolean""];\n	""25"" [label=""branchingRequired = 0""];\n	""26"" [label=""branchingRequired = 1""];\n	""27"" [label=""ch = 0""];\n	""28"" [label=""ch = ch + 1""];\n	""29"" [label=""ch = virtualinvoke input.<java.lang.String: char charAt(int)>(index)""];\n	""30"" [label=""currentBranches = $stack23""];\n	""31"" [label=""force = 0""];\n	""32"" [label=""force = 1""];\n	""33"" [label=""goto""];\n	""34"" [label=""goto""];\n	""35"" [label=""goto""];\n	""36"" [label=""goto""];\n	""37"" [label=""goto""];\n	""38"" [label=""goto""];\n	""39"" [label=""goto""];\n	""40"" [label=""goto""];\n	""41"" [label=""goto""];\n	""42"" [label=""goto""];\n	""43"" [label=""goto""];\n	""44"" [label=""goto""];\n	""45"" [label=""goto""];\n	""46"" [label=""goto""];\n	""47"" [label=""if $stack27 == 0""];\n	""48"" [label=""if $stack31 == 0""];\n	""49"" [label=""if $stack35 == 0""];\n	""50"" [label=""if $stack37 == 0""];\n	""51"" [label=""if $stack38 <= 1""];\n	""52"" [label=""if $stack39 == 0""];\n	""53"" [label=""if branching != 0""];\n	""54"" [label=""if branching == 0""];\n	""55"" [label=""if branching == 0""];\n	""56"" [label=""if branching == 0""];\n	""57"" [label=""if branching == 0""];\n	""58"" [label=""if branchingRequired == 0""];\n	""59"" [label=""if ch != 109""];\n	""60"" [label=""if ch == 110""];\n	""61"" [label=""if index >= $stack25""];\n	""62"" [label=""if l19 >= l18""];\n	""63"" [label=""if lastChar != 0""];\n	""64"" [label=""if lastChar != 109""];\n	""65"" [label=""if lastChar != 110""];\n	""66"" [label=""if rules != null""];\n	""67"" [label=""if source != null""];\n	""68"" [label=""index = 0""];\n	""69"" [label=""index = index + $stack41""];\n	""70"" [label=""index = index + 1""];\n	""71"" [label=""index = newarray (java.lang.String)[$stack26]""];\n	""72"" [label=""index[$stack29] = $stack30""];\n	""73"" [label=""input = specialinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String cleanup(java.lang.String)>(source)""];\n	""74"" [label=""inputContext = interfaceinvoke currentBranches.<java.util.Set: java.util.Iterator iterator()>()""];\n	""75"" [label=""inputContext = virtualinvoke input.<java.lang.String: java.lang.String substring(int)>(index)""];\n	""76"" [label=""interfaceinvoke currentBranches.<java.util.Set: boolean add(java.lang.Object)>($stack24)""];\n	""77"" [label=""interfaceinvoke currentBranches.<java.util.Set: boolean addAll(java.util.Collection)>(nextBranches)""];\n	""78"" [label=""interfaceinvoke currentBranches.<java.util.Set: void clear()>()""];\n	""79"" [label=""interfaceinvoke nextBranches.<java.util.List: boolean add(java.lang.Object)>(nextBranch)""];\n	""80"" [label=""interfaceinvoke nextBranches.<java.util.List: void clear()>()""];\n	""81"" [label=""l11 = interfaceinvoke rules.<java.util.List: java.util.Iterator iterator()>()""];\n	""82"" [label=""l15 = interfaceinvoke currentBranches.<java.util.Set: java.util.Iterator iterator()>()""];\n	""83"" [label=""l17 = replacements""];\n	""84"" [label=""l18 = lengthof l17""];\n	""85"" [label=""l19 = 0""];\n	""86"" [label=""l19 = l19 + 1""];\n	""87"" [label=""lastChar = 0""];\n	""88"" [label=""lastChar = ch""];\n	""89"" [label=""nextBranch = branch""];\n	""90"" [label=""nextBranch = virtualinvoke branch.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch createBranch()>()""];\n	""91"" [label=""nextBranches = new java.util.ArrayList""];\n	""92"" [label=""nextBranches = staticinvoke <java.util.Collections: java.util.List emptyList()>()""];\n	""93"" [label=""nextReplacement = l17[l19]""];\n	""94"" [label=""replacements = virtualinvoke rule.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] getReplacements(java.lang.String,boolean)>(inputContext, $stack43)""];\n	""95"" [label=""return index""];\n	""96"" [label=""return null""];\n	""97"" [label=""rule = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule) $stack36""];\n	""98"" [label=""rules = (java.util.List) $stack34""];\n	""99"" [label=""rules = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch) $stack28""];\n	""100"" [label=""source := @parameter0: java.lang.String""];\n	""101"" [label=""specialinvoke $stack23.<java.util.LinkedHashSet: void <init>()>()""];\n	""102"" [label=""specialinvoke $stack24.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void <init>(org.apache.commons.codec.language.DaitchMokotoffSoundex$1)>(null)""];\n	""103"" [label=""specialinvoke nextBranches.<java.util.ArrayList: void <init>()>()""];\n	""104"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""105"" [label=""virtualinvoke nextBranch.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void processNextReplacement(java.lang.String,boolean)>(nextReplacement, force)""];\n	""106"" [label=""virtualinvoke rules.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void finish()>()""];\n	""1"" -> ""101""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""24""[label=""cfg_next""];\n	""101"" -> ""30""[label=""cfg_next""];\n	""102"" -> ""76""[label=""cfg_next""];\n	""103"" -> ""35""[label=""cfg_next""];\n	""104"" -> ""100""[label=""cfg_next""];\n	""105"" -> ""53""[label=""cfg_next""];\n	""106"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""98""[label=""cfg_next""];\n	""13"" -> ""49""[label=""cfg_next""];\n	""14"" -> ""97""[label=""cfg_next""];\n	""15"" -> ""50""[label=""cfg_next""];\n	""16"" -> ""51""[label=""cfg_next""];\n	""17"" -> ""52""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""69""[label=""cfg_next""];\n	""2"" -> ""102""[label=""cfg_next""];\n	""20"" -> ""23""[label=""cfg_next""];\n	""21"" -> ""94""[label=""cfg_next""];\n	""22"" -> ""37""[label=""cfg_next""];\n	""23"" -> ""83""[label=""cfg_next""];\n	""24"" -> ""67""[label=""cfg_next""];\n	""25"" -> ""82""[label=""cfg_next""];\n	""26"" -> ""38""[label=""cfg_next""];\n	""27"" -> ""74""[label=""cfg_next""];\n	""28"" -> ""8""[label=""cfg_next""];\n	""29"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""61""[label=""cfg_next""];\n	""30"" -> ""2""[label=""cfg_next""];\n	""31"" -> ""105""[label=""cfg_next""];\n	""32"" -> ""41""[label=""cfg_next""];\n	""33"" -> ""70""[label=""cfg_goto""];\n	""34"" -> ""70""[label=""cfg_goto""];\n	""35"" -> ""81""[label=""cfg_goto""];\n	""36"" -> ""13""[label=""cfg_goto""];\n	""37"" -> ""94""[label=""cfg_goto""];\n	""38"" -> ""82""[label=""cfg_goto""];\n	""39"" -> ""17""[label=""cfg_goto""];\n	""4"" -> ""71""[label=""cfg_next""];\n	""40"" -> ""64""[label=""cfg_goto""];\n	""41"" -> ""105""[label=""cfg_goto""];\n	""42"" -> ""39""[label=""cfg_goto""];\n	""43"" -> ""62""[label=""cfg_goto""];\n	""44"" -> ""88""[label=""cfg_goto""];\n	""45"" -> ""3""[label=""cfg_goto""];\n	""46"" -> ""5""[label=""cfg_goto""];\n	""47"" -> ""6""[label=""cfg_false""];\n	""47"" -> ""95""[label=""cfg_true""];\n	""48"" -> ""33""[label=""cfg_false""];\n	""48"" -> ""75""[label=""cfg_true""];\n	""49"" -> ""14""[label=""cfg_false""];\n	""49"" -> ""88""[label=""cfg_true""];\n	""5"" -> ""47""[label=""cfg_next""];\n	""50"" -> ""36""[label=""cfg_true""];\n	""50"" -> ""55""[label=""cfg_false""];\n	""51"" -> ""25""[label=""cfg_true""];\n	""51"" -> ""56""[label=""cfg_false""];\n	""52"" -> ""20""[label=""cfg_false""];\n	""52"" -> ""57""[label=""cfg_true""];\n	""53"" -> ""42""[label=""cfg_false""];\n	""53"" -> ""79""[label=""cfg_true""];\n	""54"" -> ""91""[label=""cfg_false""];\n	""54"" -> ""92""[label=""cfg_true""];\n	""55"" -> ""63""[label=""cfg_true""];\n	""55"" -> ""80""[label=""cfg_false""];\n	""56"" -> ""25""[label=""cfg_true""];\n	""56"" -> ""26""[label=""cfg_false""];\n	""57"" -> ""18""[label=""cfg_true""];\n	""57"" -> ""78""[label=""cfg_false""];\n	""58"" -> ""89""[label=""cfg_true""];\n	""58"" -> ""90""[label=""cfg_false""];\n	""59"" -> ""31""[label=""cfg_true""];\n	""59"" -> ""32""[label=""cfg_false""];\n	""6"" -> ""99""[label=""cfg_next""];\n	""60"" -> ""32""[label=""cfg_true""];\n	""60"" -> ""65""[label=""cfg_false""];\n	""61"" -> ""29""[label=""cfg_false""];\n	""61"" -> ""4""[label=""cfg_true""];\n	""62"" -> ""39""[label=""cfg_true""];\n	""62"" -> ""93""[label=""cfg_false""];\n	""63"" -> ""21""[label=""cfg_true""];\n	""63"" -> ""22""[label=""cfg_false""];\n	""64"" -> ""60""[label=""cfg_false""];\n	""64"" -> ""65""[label=""cfg_true""];\n	""65"" -> ""31""[label=""cfg_true""];\n	""65"" -> ""59""[label=""cfg_false""];\n	""66"" -> ""34""[label=""cfg_false""];\n	""66"" -> ""54""[label=""cfg_true""];\n	""67"" -> ""73""[label=""cfg_true""];\n	""67"" -> ""96""[label=""cfg_false""];\n	""68"" -> ""3""[label=""cfg_next""];\n	""69"" -> ""44""[label=""cfg_next""];\n	""7"" -> ""28""[label=""cfg_next""];\n	""70"" -> ""45""[label=""cfg_next""];\n	""71"" -> ""27""[label=""cfg_next""];\n	""72"" -> ""46""[label=""cfg_next""];\n	""73"" -> ""1""[label=""cfg_next""];\n	""74"" -> ""5""[label=""cfg_next""];\n	""75"" -> ""10""[label=""cfg_next""];\n	""76"" -> ""87""[label=""cfg_next""];\n	""77"" -> ""18""[label=""cfg_next""];\n	""78"" -> ""77""[label=""cfg_next""];\n	""79"" -> ""86""[label=""cfg_next""];\n	""8"" -> ""72""[label=""cfg_next""];\n	""80"" -> ""63""[label=""cfg_next""];\n	""81"" -> ""13""[label=""cfg_next""];\n	""82"" -> ""17""[label=""cfg_next""];\n	""83"" -> ""84""[label=""cfg_next""];\n	""84"" -> ""85""[label=""cfg_next""];\n	""85"" -> ""62""[label=""cfg_next""];\n	""86"" -> ""43""[label=""cfg_next""];\n	""87"" -> ""68""[label=""cfg_next""];\n	""88"" -> ""70""[label=""cfg_next""];\n	""89"" -> ""64""[label=""cfg_next""];\n	""9"" -> ""48""[label=""cfg_next""];\n	""90"" -> ""40""[label=""cfg_next""];\n	""91"" -> ""103""[label=""cfg_next""];\n	""92"" -> ""81""[label=""cfg_next""];\n	""93"" -> ""58""[label=""cfg_next""];\n	""94"" -> ""16""[label=""cfg_next""];\n	""97"" -> ""15""[label=""cfg_next""];\n	""98"" -> ""66""[label=""cfg_next""];\n	""99"" -> ""106""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DaitchMokotoffSoundex.<init>(),Constructor,* Creates a new instance with ASCII-folding enabled.,public DaitchMokotoffSoundex() {\n    this(true);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: void <init>(boolean)>(1)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex.<init>(boolean),Constructor,"* Creates a new instance.\n     * <p>\n     * With ASCII-folding enabled, certain accented characters will be transformed to equivalent ASCII characters, for example\n     * è -&gt; e.\n     * </p>\n     *\n     * @param folding\n     *            if ASCII-folding shall be performed before encoding",public DaitchMokotoffSoundex(final boolean folding) {\n    this.folding = folding;\n},void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""folding := @parameter0: boolean""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex""];\n	""5"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex: boolean folding> = folding""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch(),Method,"* Creates a new branch, identical to this branch.\n         *\n         * @return a new, identical branch",public Branch createBranch() {\n    final Branch branch = new Branch();\n    branch.builder.append(toString());\n    branch.lastReplacement = this.lastReplacement;\n    return branch;\n},org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch createBranch(),"digraph cfg_createBranch {\n	""1"" [label=""$stack2 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""2"" [label=""$stack3 = branch.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>()""];\n	""4"" [label=""$stack5 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement>""];\n	""5"" [label=""branch = $stack2""];\n	""6"" [label=""branch.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement> = $stack5""];\n	""7"" [label=""return branch""];\n	""8"" [label=""specialinvoke $stack2.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void <init>()>()""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""10"" [label=""virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4)""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.equals(Object),Method,No Comment,@Override\npublic boolean equals(final Object other) {\n    if (this == other) {\n        return true;\n    }\n    if (!(other instanceof Branch)) {\n        return false;\n    }\n    return toString().equals(((Branch) other).toString());\n},boolean equals(java.lang.Object),"digraph cfg_equals {\n	""1"" [label=""$stack2 = other instanceof org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""2"" [label=""$stack3 = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch) other""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>()""];\n	""4"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>()""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack4)""];\n	""6"" [label=""if $stack2 != 0""];\n	""7"" [label=""if this != other""];\n	""8"" [label=""other := @parameter0: java.lang.Object""];\n	""9"" [label=""return $stack6""];\n	""10"" [label=""return 0""];\n	""11"" [label=""return 1""];\n	""12"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""12"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_true""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""11""[label=""cfg_false""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.finish(),Method,* Finish this branch by appending '0's until the maximum code length has been reached.,public void finish() {\n    while (builder.length() < MAX_LENGTH) {\n        builder.append('0');\n        cachedString = null;\n    }\n},void finish(),"digraph cfg_finish {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: int length()>()""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""4"" [label=""goto""];\n	""5"" [label=""if $stack2 >= 6""];\n	""6"" [label=""return""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""8"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString> = null""];\n	""9"" [label=""virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_goto""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""5"" -> ""6""[label=""cfg_true""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.hashCode(),Method,No Comment,@Override\npublic int hashCode() {\n    return toString().hashCode();\n},int hashCode(),"digraph cfg_hashCode {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>()""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.lang.String: int hashCode()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(String,boolean)",Method,* Process the next replacement to be added to this branch.\n         *\n         * @param replacement\n         *            the next replacement to append\n         * @param forceAppend\n         *            indicates if the default processing shall be overridden,"public void processNextReplacement(final String replacement, final boolean forceAppend) {\n    final boolean append = lastReplacement == null || !lastReplacement.endsWith(replacement) || forceAppend;\n    if (append && builder.length() < MAX_LENGTH) {\n        builder.append(replacement);\n        // remove all characters after the maximum length\n        if (builder.length() > MAX_LENGTH) {\n            builder.delete(MAX_LENGTH, builder.length());\n        }\n        cachedString = null;\n    }\n    lastReplacement = replacement;\n}","void processNextReplacement(java.lang.String,boolean)","digraph cfg_processNextReplacement {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""3"" [label=""$stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: int length()>()""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement>""];\n	""5"" [label=""$stack14 = virtualinvoke $stack13.<java.lang.String: boolean endsWith(java.lang.String)>(replacement)""];\n	""6"" [label=""$stack4 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement>""];\n	""7"" [label=""$stack5 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""8"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: int length()>()""];\n	""9"" [label=""$stack7 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""10"" [label=""$stack8 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""11"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: int length()>()""];\n	""12"" [label=""append = 0""];\n	""13"" [label=""append = 1""];\n	""14"" [label=""forceAppend := @parameter1: boolean""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack14 == 0""];\n	""17"" [label=""if $stack4 == null""];\n	""18"" [label=""if $stack6 >= 6""];\n	""19"" [label=""if $stack9 <= 6""];\n	""20"" [label=""if append == 0""];\n	""21"" [label=""if forceAppend == 0""];\n	""22"" [label=""replacement := @parameter0: java.lang.String""];\n	""23"" [label=""return""];\n	""24"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""25"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString> = null""];\n	""26"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement> = replacement""];\n	""27"" [label=""virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(6, $stack12)""];\n	""28"" [label=""virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(replacement)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""19""[label=""cfg_next""];\n	""12"" -> ""20""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""6""[label=""cfg_next""];\n	""15"" -> ""20""[label=""cfg_goto""];\n	""16"" -> ""13""[label=""cfg_true""];\n	""16"" -> ""21""[label=""cfg_false""];\n	""17"" -> ""13""[label=""cfg_true""];\n	""17"" -> ""4""[label=""cfg_false""];\n	""18"" -> ""26""[label=""cfg_true""];\n	""18"" -> ""9""[label=""cfg_false""];\n	""19"" -> ""2""[label=""cfg_false""];\n	""19"" -> ""25""[label=""cfg_true""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""26""[label=""cfg_true""];\n	""20"" -> ""7""[label=""cfg_false""];\n	""21"" -> ""12""[label=""cfg_true""];\n	""21"" -> ""13""[label=""cfg_false""];\n	""22"" -> ""14""[label=""cfg_next""];\n	""24"" -> ""22""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""23""[label=""cfg_next""];\n	""27"" -> ""25""[label=""cfg_next""];\n	""28"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""27""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""16""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""18""[label=""cfg_next""];\n	""9"" -> ""28""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString(),Method,No Comment,@Override\npublic String toString() {\n    if (cachedString == null) {\n        cachedString = builder.toString();\n    }\n    return cachedString;\n},java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder>""];\n	""4"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""5"" [label=""if $stack1 != null""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""8"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString> = $stack4""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.<init>(),Constructor,No Comment,private Branch() {\n    builder = new StringBuilder();\n    lastReplacement = null;\n    cachedString = null;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch""];\n	""6"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String cachedString> = null""];\n	""7"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String lastReplacement> = null""];\n	""8"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.StringBuilder builder> = $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength(),Method,No Comment,public int getPatternLength() {\n    return pattern.length();\n},int getPatternLength(),"digraph cfg_getPatternLength {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String pattern>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.lang.String: int length()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(String,boolean)",Method,No Comment,"public String[] getReplacements(final String context, final boolean atStart) {\n    if (atStart) {\n        return replacementAtStart;\n    }\n    final int nextIndex = getPatternLength();\n    final boolean nextCharIsVowel = nextIndex < context.length() && isVowel(context.charAt(nextIndex));\n    if (nextCharIsVowel) {\n        return replacementBeforeVowel;\n    }\n    return replacementDefault;\n}","java.lang.String[] getReplacements(java.lang.String,boolean)","digraph cfg_getReplacements {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementAtStart>""];\n	""2"" [label=""$stack5 = virtualinvoke context.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementDefault>""];\n	""4"" [label=""$stack7 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementBeforeVowel>""];\n	""5"" [label=""$stack8 = virtualinvoke context.<java.lang.String: char charAt(int)>(nextIndex)""];\n	""6"" [label=""$stack9 = specialinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: boolean isVowel(char)>($stack8)""];\n	""7"" [label=""atStart := @parameter1: boolean""];\n	""8"" [label=""context := @parameter0: java.lang.String""];\n	""9"" [label=""goto""];\n	""10"" [label=""if $stack9 == 0""];\n	""11"" [label=""if atStart == 0""];\n	""12"" [label=""if nextCharIsVowel == 0""];\n	""13"" [label=""if nextIndex >= $stack5""];\n	""14"" [label=""nextCharIsVowel = 0""];\n	""15"" [label=""nextCharIsVowel = 1""];\n	""16"" [label=""nextIndex = virtualinvoke this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: int getPatternLength()>()""];\n	""17"" [label=""return $stack10""];\n	""18"" [label=""return $stack6""];\n	""19"" [label=""return $stack7""];\n	""20"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""14""[label=""cfg_true""];\n	""10"" -> ""15""[label=""cfg_false""];\n	""11"" -> ""1""[label=""cfg_false""];\n	""11"" -> ""16""[label=""cfg_true""];\n	""12"" -> ""3""[label=""cfg_true""];\n	""12"" -> ""4""[label=""cfg_false""];\n	""13"" -> ""14""[label=""cfg_true""];\n	""13"" -> ""5""[label=""cfg_false""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""15"" -> ""9""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""13""[label=""cfg_next""];\n	""20"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""19""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_goto""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.isVowel(char),Method,No Comment,private boolean isVowel(final char ch) {\n    return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n},boolean isVowel(char),"digraph cfg_isVowel {\n	""1"" [label=""$stack2 = 0""];\n	""2"" [label=""$stack2 = 1""];\n	""3"" [label=""ch := @parameter0: char""];\n	""4"" [label=""goto""];\n	""5"" [label=""if ch != 117""];\n	""6"" [label=""if ch == 101""];\n	""7"" [label=""if ch == 105""];\n	""8"" [label=""if ch == 111""];\n	""9"" [label=""if ch == 97""];\n	""10"" [label=""return $stack2""];\n	""11"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""7""[label=""cfg_false""];\n	""7"" -> ""2""[label=""cfg_true""];\n	""7"" -> ""8""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""5""[label=""cfg_false""];\n	""9"" -> ""2""[label=""cfg_true""];\n	""9"" -> ""6""[label=""cfg_false""];\n}\n",private 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.matches(String),Method,No Comment,public boolean matches(final String context) {\n    return context.startsWith(pattern);\n},boolean matches(java.lang.String),"digraph cfg_matches {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String pattern>""];\n	""2"" [label=""$stack3 = virtualinvoke context.<java.lang.String: boolean startsWith(java.lang.String)>($stack2)""];\n	""3"" [label=""context := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.toString(),Method,No Comment,"@Override\npublic String toString() {\n    return String.format(""%s=(%s,%s,%s)"", pattern, Arrays.asList(replacementAtStart), Arrays.asList(replacementBeforeVowel), Arrays.asList(replacementDefault));\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = newarray (java.lang.Object)[4]""];\n	""2"" [label=""$stack1[0] = $stack2""];\n	""3"" [label=""$stack1[1] = $stack4""];\n	""4"" [label=""$stack1[2] = $stack6""];\n	""5"" [label=""$stack1[3] = $stack8""];\n	""6"" [label=""$stack2 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String pattern>""];\n	""7"" [label=""$stack3 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementAtStart>""];\n	""8"" [label=""$stack4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack3)""];\n	""9"" [label=""$stack5 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementBeforeVowel>""];\n	""10"" [label=""$stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack5)""];\n	""11"" [label=""$stack7 = this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementDefault>""];\n	""12"" [label=""$stack8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack7)""];\n	""13"" [label=""$stack9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""%s=(%s,%s,%s)\"", $stack1)""];\n	""14"" [label=""return $stack9""];\n	""15"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""15"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String)",Constructor,No Comment,"protected Rule(final String pattern, final String replacementAtStart, final String replacementBeforeVowel, final String replacementDefault) {\n    this.pattern = pattern;\n    this.replacementAtStart = replacementAtStart.split(""\\|"");\n    this.replacementBeforeVowel = replacementBeforeVowel.split(""\\|"");\n    this.replacementDefault = replacementDefault.split(""\\|"");\n}","void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","digraph cfg_init {\n	""1"" [label=""$stack5 = virtualinvoke replacementAtStart.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\|\"")""];\n	""2"" [label=""$stack6 = virtualinvoke replacementBeforeVowel.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\|\"")""];\n	""3"" [label=""$stack7 = virtualinvoke replacementDefault.<java.lang.String: java.lang.String[] split(java.lang.String)>(\""\\|\"")""];\n	""4"" [label=""pattern := @parameter0: java.lang.String""];\n	""5"" [label=""replacementAtStart := @parameter1: java.lang.String""];\n	""6"" [label=""replacementBeforeVowel := @parameter2: java.lang.String""];\n	""7"" [label=""replacementDefault := @parameter3: java.lang.String""];\n	""8"" [label=""return""];\n	""9"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""10"" [label=""this := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule""];\n	""11"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String pattern> = pattern""];\n	""12"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementAtStart> = $stack5""];\n	""13"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementBeforeVowel> = $stack6""];\n	""14"" [label=""this.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] replacementDefault> = $stack7""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""13"" -> ""3""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.language.Nysiis.isVowel(char),Method,"* Tests if the given character is a vowel.\n     *\n     * @param c\n     *            the character to test\n     * @return {@code true} if the character is a vowel, {@code false} otherwise",private static boolean isVowel(final char c) {\n    return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n},boolean isVowel(char),"digraph cfg_isVowel {\n	""1"" [label=""$stack1 = 0""];\n	""2"" [label=""$stack1 = 1""];\n	""3"" [label=""c := @parameter0: char""];\n	""4"" [label=""goto""];\n	""5"" [label=""if c != 85""];\n	""6"" [label=""if c == 65""];\n	""7"" [label=""if c == 69""];\n	""8"" [label=""if c == 73""];\n	""9"" [label=""if c == 79""];\n	""10"" [label=""return $stack1""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""7""[label=""cfg_false""];\n	""7"" -> ""2""[label=""cfg_true""];\n	""7"" -> ""8""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""9""[label=""cfg_false""];\n	""9"" -> ""2""[label=""cfg_true""];\n	""9"" -> ""5""[label=""cfg_false""];\n}\n","private , static "
"org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char)",Method,"* Transcodes the remaining parts of the String. The method operates on a sliding window, looking at 4 characters at\n     * a time: [i-1, i, i+1, i+2].\n     *\n     * @param prev\n     *            the previous character\n     * @param curr\n     *            the current character\n     * @param next\n     *            the next character\n     * @param aNext\n     *            the after next character\n     * @return a transcoded array of characters, starting from the current position","private static char[] transcodeRemaining(final char prev, final char curr, final char next, final char aNext) {\n    // 1. EV -> AF\n    if (curr == 'E' && next == 'V') {\n        return CHARS_AF;\n    }\n    // A, E, I, O, U -> A\n    if (isVowel(curr)) {\n        return CHARS_A;\n    }\n    // 2. Q -> G, Z -> S, M -> N\n    // 3. KN -> NN else K -> C\n    switch(curr) {\n        case 'Q':\n            return CHARS_G;\n        case 'Z':\n            return CHARS_S;\n        case 'M':\n            return CHARS_N;\n        case 'K':\n            if (next == 'N') {\n                return CHARS_NN;\n            }\n            return CHARS_C;\n        default:\n            break;\n    }\n    // 4. SCH -> SSS\n    if (curr == 'S' && next == 'C' && aNext == 'H') {\n        return CHARS_SSS;\n    }\n    // PH -> FF\n    if (curr == 'P' && next == 'H') {\n        return CHARS_FF;\n    }\n    // 5. H -> If previous or next is a non vowel, previous.\n    if (curr == 'H' && (!isVowel(prev) || !isVowel(next))) {\n        return new char[] { prev };\n    }\n    // 6. W -> If previous is vowel, previous.\n    if (curr == 'W' && isVowel(prev)) {\n        return new char[] { prev };\n    }\n    return new char[] { curr };\n}","char[] transcodeRemaining(char,char,char,char)","digraph cfg_transcodeRemaining {\n	""1"" [label=""$stack10 = newarray (char)[1]""];\n	""2"" [label=""$stack10[0] = curr""];\n	""3"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.language.Nysiis: boolean isVowel(char)>(prev)""];\n	""4"" [label=""$stack12 = newarray (char)[1]""];\n	""5"" [label=""$stack12[0] = prev""];\n	""6"" [label=""$stack13 = staticinvoke <org.apache.commons.codec.language.Nysiis: boolean isVowel(char)>(prev)""];\n	""7"" [label=""$stack14 = newarray (char)[1]""];\n	""8"" [label=""$stack14[0] = prev""];\n	""9"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.language.Nysiis: boolean isVowel(char)>(next)""];\n	""10"" [label=""$stack16 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_FF>""];\n	""11"" [label=""$stack17 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_SSS>""];\n	""12"" [label=""$stack18 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_A>""];\n	""13"" [label=""$stack19 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_AF>""];\n	""14"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.language.Nysiis: boolean isVowel(char)>(curr)""];\n	""15"" [label=""$stack5 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_S>""];\n	""16"" [label=""$stack6 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_G>""];\n	""17"" [label=""$stack7 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_N>""];\n	""18"" [label=""$stack8 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_C>""];\n	""19"" [label=""$stack9 = <org.apache.commons.codec.language.Nysiis: char[] CHARS_NN>""];\n	""20"" [label=""aNext := @parameter3: char""];\n	""21"" [label=""curr := @parameter1: char""];\n	""22"" [label=""if $stack11 == 0""];\n	""23"" [label=""if $stack13 == 0""];\n	""24"" [label=""if $stack15 != 0""];\n	""25"" [label=""if $stack4 == 0""];\n	""26"" [label=""if aNext != 72""];\n	""27"" [label=""if curr != 69""];\n	""28"" [label=""if curr != 72""];\n	""29"" [label=""if curr != 80""];\n	""30"" [label=""if curr != 83""];\n	""31"" [label=""if curr != 87""];\n	""32"" [label=""if next != 67""];\n	""33"" [label=""if next != 72""];\n	""34"" [label=""if next != 78""];\n	""35"" [label=""if next != 86""];\n	""36"" [label=""next := @parameter2: char""];\n	""37"" [label=""prev := @parameter0: char""];\n	""38"" [label=""return $stack10""];\n	""39"" [label=""return $stack12""];\n	""40"" [label=""return $stack14""];\n	""41"" [label=""return $stack16""];\n	""42"" [label=""return $stack17""];\n	""43"" [label=""return $stack18""];\n	""44"" [label=""return $stack19""];\n	""45"" [label=""return $stack5""];\n	""46"" [label=""return $stack6""];\n	""47"" [label=""return $stack7""];\n	""48"" [label=""return $stack8""];\n	""49"" [label=""return $stack9""];\n	""50"" [label=""switch(curr) \{     case 75:     case 77:     case 81:     case 90:     default:  \}""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""41""[label=""cfg_next""];\n	""11"" -> ""42""[label=""cfg_next""];\n	""12"" -> ""43""[label=""cfg_next""];\n	""13"" -> ""44""[label=""cfg_next""];\n	""14"" -> ""25""[label=""cfg_next""];\n	""15"" -> ""45""[label=""cfg_next""];\n	""16"" -> ""46""[label=""cfg_next""];\n	""17"" -> ""47""[label=""cfg_next""];\n	""18"" -> ""48""[label=""cfg_next""];\n	""19"" -> ""49""[label=""cfg_next""];\n	""2"" -> ""38""[label=""cfg_next""];\n	""20"" -> ""27""[label=""cfg_next""];\n	""21"" -> ""36""[label=""cfg_next""];\n	""22"" -> ""1""[label=""cfg_true""];\n	""22"" -> ""4""[label=""cfg_false""];\n	""23"" -> ""7""[label=""cfg_true""];\n	""23"" -> ""9""[label=""cfg_false""];\n	""24"" -> ""31""[label=""cfg_true""];\n	""24"" -> ""7""[label=""cfg_false""];\n	""25"" -> ""12""[label=""cfg_false""];\n	""25"" -> ""50""[label=""cfg_true""];\n	""26"" -> ""11""[label=""cfg_false""];\n	""26"" -> ""29""[label=""cfg_true""];\n	""27"" -> ""14""[label=""cfg_true""];\n	""27"" -> ""35""[label=""cfg_false""];\n	""28"" -> ""31""[label=""cfg_true""];\n	""28"" -> ""6""[label=""cfg_false""];\n	""29"" -> ""28""[label=""cfg_true""];\n	""29"" -> ""33""[label=""cfg_false""];\n	""3"" -> ""22""[label=""cfg_next""];\n	""30"" -> ""29""[label=""cfg_true""];\n	""30"" -> ""32""[label=""cfg_false""];\n	""31"" -> ""1""[label=""cfg_true""];\n	""31"" -> ""3""[label=""cfg_false""];\n	""32"" -> ""26""[label=""cfg_false""];\n	""32"" -> ""29""[label=""cfg_true""];\n	""33"" -> ""10""[label=""cfg_false""];\n	""33"" -> ""28""[label=""cfg_true""];\n	""34"" -> ""18""[label=""cfg_true""];\n	""34"" -> ""19""[label=""cfg_false""];\n	""35"" -> ""13""[label=""cfg_false""];\n	""35"" -> ""14""[label=""cfg_true""];\n	""36"" -> ""20""[label=""cfg_next""];\n	""37"" -> ""21""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""39""[label=""cfg_next""];\n	""50"" -> ""15""[label=""cfg_switch""];\n	""50"" -> ""16""[label=""cfg_switch""];\n	""50"" -> ""17""[label=""cfg_switch""];\n	""50"" -> ""30""[label=""cfg_switch""];\n	""50"" -> ""34""[label=""cfg_switch""];\n	""6"" -> ""23""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""40""[label=""cfg_next""];\n	""9"" -> ""24""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.language.Nysiis.encode(Object),Method,"* Encodes an Object using the NYSIIS algorithm. This method is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an {@link EncoderException} if the supplied object is not of type\n     * {@link String}.\n     *\n     * @param obj\n     *            Object to encode\n     * @return An object (or a {@link String}) containing the NYSIIS code which corresponds to the given String.\n     * @throws EncoderException\n     *            if the parameter supplied is not of a {@link String}\n     * @throws IllegalArgumentException\n     *            if a character is not mapped","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Nysiis encode is not of type java.lang.String"");\n    }\n    return nysiis((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Nysiis: java.lang.String nysiis(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Nysiis encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Nysiis.encode(String),Method,* Encodes a String using the NYSIIS algorithm.\n     *\n     * @param str\n     *            A String object to encode\n     * @return A Nysiis code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *            if a character is not mapped,@Override\npublic String encode(final String str) {\n    return nysiis(str);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.Nysiis: java.lang.String nysiis(java.lang.String)>(str)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""str := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Nysiis.isStrict(),Method,"* Indicates the strict mode for this {@link Nysiis} encoder.\n     *\n     * @return {@code true} if the encoder is configured for strict mode, {@code false} otherwise",public boolean isStrict() {\n    return this.strict;\n},boolean isStrict(),"digraph cfg_isStrict {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.language.Nysiis: boolean strict>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Nysiis.nysiis(String),Method,* Retrieves the NYSIIS code for a given String object.\n     *\n     * @param str\n     *            String to encode using the NYSIIS algorithm\n     * @return A NYSIIS code for the String supplied,"public String nysiis(String str) {\n    if (str == null) {\n        return null;\n    }\n    // Use the same clean rules as Soundex\n    str = SoundexUtils.clean(str);\n    if (str.isEmpty()) {\n        return str;\n    }\n    // Translate first characters of name:\n    // MAC -> MCC, KN -> NN, K -> C, PH | PF -> FF, SCH -> SSS\n    str = PAT_MAC.matcher(str).replaceFirst(""MCC"");\n    str = PAT_KN.matcher(str).replaceFirst(""NN"");\n    str = PAT_K.matcher(str).replaceFirst(""C"");\n    str = PAT_PH_PF.matcher(str).replaceFirst(""FF"");\n    str = PAT_SCH.matcher(str).replaceFirst(""SSS"");\n    // Translate last characters of name:\n    // EE -> Y, IE -> Y, DT | RT | RD | NT | ND -> D\n    str = PAT_EE_IE.matcher(str).replaceFirst(""Y"");\n    str = PAT_DT_ETC.matcher(str).replaceFirst(""D"");\n    // First character of key = first character of name.\n    final StringBuilder key = new StringBuilder(str.length());\n    key.append(str.charAt(0));\n    // Transcode remaining characters, incrementing by one character each time\n    final char[] chars = str.toCharArray();\n    final int len = chars.length;\n    for (int i = 1; i < len; i++) {\n        final char next = i < len - 1 ? chars[i + 1] : SPACE;\n        final char aNext = i < len - 2 ? chars[i + 2] : SPACE;\n        final char[] transcoded = transcodeRemaining(chars[i - 1], chars[i], next, aNext);\n        System.arraycopy(transcoded, 0, chars, i, transcoded.length);\n        // only append the current char to the key if it is different from the last one\n        if (chars[i] != chars[i - 1]) {\n            key.append(chars[i]);\n        }\n    }\n    if (key.length() > 1) {\n        char lastChar = key.charAt(key.length() - 1);\n        // If last character is S, remove it.\n        if (lastChar == 'S') {\n            key.deleteCharAt(key.length() - 1);\n            lastChar = key.charAt(key.length() - 1);\n        }\n        if (key.length() > 2) {\n            final char last2Char = key.charAt(key.length() - 2);\n            // If last characters are AY, replace with Y.\n            if (last2Char == 'A' && lastChar == 'Y') {\n                key.deleteCharAt(key.length() - 2);\n            }\n        }\n        // If last character is A, remove it.\n        if (lastChar == 'A') {\n            key.deleteCharAt(key.length() - 1);\n        }\n    }\n    final String string = key.toString();\n    return isStrict() ? string.substring(0, Math.min(TRUE_LENGTH, string.length())) : string;\n}",java.lang.String nysiis(java.lang.String),"digraph cfg_nysiis {\n	""1"" [label=""$stack10 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_MAC>""];\n	""2"" [label=""$stack11 = virtualinvoke $stack10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""3"" [label=""$stack12 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_KN>""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""5"" [label=""$stack14 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_K>""];\n	""6"" [label=""$stack15 = virtualinvoke $stack14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""7"" [label=""$stack16 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_PH_PF>""];\n	""8"" [label=""$stack17 = virtualinvoke $stack16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""9"" [label=""$stack18 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_SCH>""];\n	""10"" [label=""$stack19 = virtualinvoke $stack18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""11"" [label=""$stack20 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_EE_IE>""];\n	""12"" [label=""$stack21 = virtualinvoke $stack20.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""13"" [label=""$stack22 = <org.apache.commons.codec.language.Nysiis: java.util.regex.Pattern PAT_DT_ETC>""];\n	""14"" [label=""$stack23 = virtualinvoke $stack22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(str)""];\n	""15"" [label=""$stack24 = virtualinvoke str.<java.lang.String: int length()>()""];\n	""16"" [label=""$stack25 = new java.lang.StringBuilder""];\n	""17"" [label=""$stack26 = virtualinvoke str.<java.lang.String: char charAt(int)>(0)""];\n	""18"" [label=""$stack27 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""19"" [label=""$stack28 = virtualinvoke this.<org.apache.commons.codec.language.Nysiis: boolean isStrict()>()""];\n	""20"" [label=""$stack29 = virtualinvoke i.<java.lang.String: int length()>()""];\n	""21"" [label=""$stack30 = staticinvoke <java.lang.Math: int min(int,int)>(6, $stack29)""];\n	""22"" [label=""$stack31 = i""];\n	""23"" [label=""$stack31 = virtualinvoke i.<java.lang.String: java.lang.String substring(int,int)>(0, $stack30)""];\n	""24"" [label=""$stack32 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""25"" [label=""$stack33 = $stack32 - 1""];\n	""26"" [label=""$stack34 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""27"" [label=""$stack35 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""28"" [label=""$stack36 = $stack35 - 1""];\n	""29"" [label=""$stack37 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""30"" [label=""$stack38 = $stack37 - 2""];\n	""31"" [label=""$stack39 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""32"" [label=""$stack40 = $stack39 - 2""];\n	""33"" [label=""$stack41 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""34"" [label=""$stack42 = $stack41 - 1""];\n	""35"" [label=""$stack43 = virtualinvoke key.<java.lang.StringBuilder: int length()>()""];\n	""36"" [label=""$stack44 = $stack43 - 1""];\n	""37"" [label=""$stack45 = len - 1""];\n	""38"" [label=""$stack46 = len - 2""];\n	""39"" [label=""$stack47 = i - 1""];\n	""40"" [label=""$stack48 = chars[i]""];\n	""41"" [label=""$stack49 = chars[$stack47]""];\n	""42"" [label=""$stack50 = lengthof transcoded""];\n	""43"" [label=""$stack51 = i - 1""];\n	""44"" [label=""$stack52 = chars[$stack51]""];\n	""45"" [label=""$stack53 = chars[i]""];\n	""46"" [label=""$stack54 = chars[i]""];\n	""47"" [label=""$stack55 = i + 2""];\n	""48"" [label=""$stack56 = i + 1""];\n	""49"" [label=""$stack9 = virtualinvoke str.<java.lang.String: boolean isEmpty()>()""];\n	""50"" [label=""aNext = 32""];\n	""51"" [label=""aNext = chars[$stack55]""];\n	""52"" [label=""chars = virtualinvoke str.<java.lang.String: char[] toCharArray()>()""];\n	""53"" [label=""goto""];\n	""54"" [label=""goto""];\n	""55"" [label=""goto""];\n	""56"" [label=""goto""];\n	""57"" [label=""i = 1""];\n	""58"" [label=""i = i + 1""];\n	""59"" [label=""i = virtualinvoke key.<java.lang.StringBuilder: char charAt(int)>($stack33)""];\n	""60"" [label=""i = virtualinvoke key.<java.lang.StringBuilder: char charAt(int)>($stack44)""];\n	""61"" [label=""i = virtualinvoke key.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""62"" [label=""if $stack27 <= 1""];\n	""63"" [label=""if $stack28 == 0""];\n	""64"" [label=""if $stack34 <= 2""];\n	""65"" [label=""if $stack53 == $stack52""];\n	""66"" [label=""if $stack9 == 0""];\n	""67"" [label=""if i != 65""];\n	""68"" [label=""if i != 83""];\n	""69"" [label=""if i != 89""];\n	""70"" [label=""if i >= $stack45""];\n	""71"" [label=""if i >= $stack46""];\n	""72"" [label=""if i >= len""];\n	""73"" [label=""if next != 65""];\n	""74"" [label=""if str != null""];\n	""75"" [label=""key = $stack25""];\n	""76"" [label=""len = lengthof chars""];\n	""77"" [label=""next = 32""];\n	""78"" [label=""next = chars[$stack56]""];\n	""79"" [label=""next = virtualinvoke key.<java.lang.StringBuilder: char charAt(int)>($stack38)""];\n	""80"" [label=""return $stack31""];\n	""81"" [label=""return null""];\n	""82"" [label=""return str""];\n	""83"" [label=""specialinvoke $stack25.<java.lang.StringBuilder: void <init>(int)>($stack24)""];\n	""84"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(transcoded, 0, chars, i, $stack50)""];\n	""85"" [label=""str := @parameter0: java.lang.String""];\n	""86"" [label=""str = staticinvoke <org.apache.commons.codec.language.SoundexUtils: java.lang.String clean(java.lang.String)>(str)""];\n	""87"" [label=""str = virtualinvoke $stack11.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""MCC\"")""];\n	""88"" [label=""str = virtualinvoke $stack13.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""NN\"")""];\n	""89"" [label=""str = virtualinvoke $stack15.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""C\"")""];\n	""90"" [label=""str = virtualinvoke $stack17.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""FF\"")""];\n	""91"" [label=""str = virtualinvoke $stack19.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""SSS\"")""];\n	""92"" [label=""str = virtualinvoke $stack21.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""Y\"")""];\n	""93"" [label=""str = virtualinvoke $stack23.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(\""D\"")""];\n	""94"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""95"" [label=""transcoded = staticinvoke <org.apache.commons.codec.language.Nysiis: char[] transcodeRemaining(char,char,char,char)>($stack49, $stack48, next, aNext)""];\n	""96"" [label=""virtualinvoke key.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack26)""];\n	""97"" [label=""virtualinvoke key.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack54)""];\n	""98"" [label=""virtualinvoke key.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($stack36)""];\n	""99"" [label=""virtualinvoke key.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($stack40)""];\n	""100"" [label=""virtualinvoke key.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($stack42)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""91""[label=""cfg_next""];\n	""100"" -> ""35""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""92""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""93""[label=""cfg_next""];\n	""15"" -> ""83""[label=""cfg_next""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""17"" -> ""96""[label=""cfg_next""];\n	""18"" -> ""62""[label=""cfg_next""];\n	""19"" -> ""63""[label=""cfg_next""];\n	""2"" -> ""87""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""80""[label=""cfg_next""];\n	""23"" -> ""56""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""59""[label=""cfg_next""];\n	""26"" -> ""64""[label=""cfg_next""];\n	""27"" -> ""28""[label=""cfg_next""];\n	""28"" -> ""98""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""79""[label=""cfg_next""];\n	""31"" -> ""32""[label=""cfg_next""];\n	""32"" -> ""99""[label=""cfg_next""];\n	""33"" -> ""34""[label=""cfg_next""];\n	""34"" -> ""100""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""60""[label=""cfg_next""];\n	""37"" -> ""70""[label=""cfg_next""];\n	""38"" -> ""71""[label=""cfg_next""];\n	""39"" -> ""41""[label=""cfg_next""];\n	""4"" -> ""88""[label=""cfg_next""];\n	""40"" -> ""95""[label=""cfg_next""];\n	""41"" -> ""40""[label=""cfg_next""];\n	""42"" -> ""84""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""65""[label=""cfg_next""];\n	""45"" -> ""43""[label=""cfg_next""];\n	""46"" -> ""97""[label=""cfg_next""];\n	""47"" -> ""51""[label=""cfg_next""];\n	""48"" -> ""78""[label=""cfg_next""];\n	""49"" -> ""66""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""39""[label=""cfg_next""];\n	""51"" -> ""54""[label=""cfg_next""];\n	""52"" -> ""76""[label=""cfg_next""];\n	""53"" -> ""38""[label=""cfg_goto""];\n	""54"" -> ""39""[label=""cfg_goto""];\n	""55"" -> ""72""[label=""cfg_goto""];\n	""56"" -> ""80""[label=""cfg_goto""];\n	""57"" -> ""72""[label=""cfg_next""];\n	""58"" -> ""55""[label=""cfg_next""];\n	""59"" -> ""68""[label=""cfg_next""];\n	""6"" -> ""89""[label=""cfg_next""];\n	""60"" -> ""26""[label=""cfg_next""];\n	""61"" -> ""19""[label=""cfg_next""];\n	""62"" -> ""24""[label=""cfg_false""];\n	""62"" -> ""61""[label=""cfg_true""];\n	""63"" -> ""20""[label=""cfg_false""];\n	""63"" -> ""22""[label=""cfg_true""];\n	""64"" -> ""29""[label=""cfg_false""];\n	""64"" -> ""67""[label=""cfg_true""];\n	""65"" -> ""46""[label=""cfg_false""];\n	""65"" -> ""58""[label=""cfg_true""];\n	""66"" -> ""1""[label=""cfg_true""];\n	""66"" -> ""82""[label=""cfg_false""];\n	""67"" -> ""27""[label=""cfg_false""];\n	""67"" -> ""61""[label=""cfg_true""];\n	""68"" -> ""26""[label=""cfg_true""];\n	""68"" -> ""33""[label=""cfg_false""];\n	""69"" -> ""31""[label=""cfg_false""];\n	""69"" -> ""67""[label=""cfg_true""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""48""[label=""cfg_false""];\n	""70"" -> ""77""[label=""cfg_true""];\n	""71"" -> ""47""[label=""cfg_false""];\n	""71"" -> ""50""[label=""cfg_true""];\n	""72"" -> ""18""[label=""cfg_true""];\n	""72"" -> ""37""[label=""cfg_false""];\n	""73"" -> ""67""[label=""cfg_true""];\n	""73"" -> ""69""[label=""cfg_false""];\n	""74"" -> ""81""[label=""cfg_false""];\n	""74"" -> ""86""[label=""cfg_true""];\n	""75"" -> ""17""[label=""cfg_next""];\n	""76"" -> ""57""[label=""cfg_next""];\n	""77"" -> ""38""[label=""cfg_next""];\n	""78"" -> ""53""[label=""cfg_next""];\n	""79"" -> ""73""[label=""cfg_next""];\n	""8"" -> ""90""[label=""cfg_next""];\n	""83"" -> ""75""[label=""cfg_next""];\n	""84"" -> ""45""[label=""cfg_next""];\n	""85"" -> ""74""[label=""cfg_next""];\n	""86"" -> ""49""[label=""cfg_next""];\n	""87"" -> ""3""[label=""cfg_next""];\n	""88"" -> ""5""[label=""cfg_next""];\n	""89"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""9""[label=""cfg_next""];\n	""91"" -> ""11""[label=""cfg_next""];\n	""92"" -> ""13""[label=""cfg_next""];\n	""93"" -> ""16""[label=""cfg_next""];\n	""94"" -> ""85""[label=""cfg_next""];\n	""95"" -> ""42""[label=""cfg_next""];\n	""96"" -> ""52""[label=""cfg_next""];\n	""97"" -> ""58""[label=""cfg_next""];\n	""98"" -> ""61""[label=""cfg_next""];\n	""99"" -> ""67""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Nysiis.<init>(),Constructor,"* Creates an instance of the {@link Nysiis} encoder with strict mode (original form),\n     * i.e. encoded strings have a maximum length of 6.",public Nysiis() {\n    this(true);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.language.Nysiis: void <init>(boolean)>(1)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Nysiis.<init>(boolean),Constructor,* Create an instance of the {@link Nysiis} encoder with the specified strict mode:\n     *\n     * <ul>\n     *  <li>{@code true}: encoded strings have a maximum length of 6</li>\n     *  <li>{@code false}: encoded strings may have arbitrary length</li>\n     * </ul>\n     *\n     * @param strict\n     *            the strict mode,public Nysiis(final boolean strict) {\n    this.strict = strict;\n},void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""strict := @parameter0: boolean""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Nysiis""];\n	""5"" [label=""this.<org.apache.commons.codec.language.Nysiis: boolean strict> = strict""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Caverphone.caverphone(String),Method,* Encodes the given String into a Caverphone value.\n     *\n     * @param source\n     *            String the source string\n     * @return A Caverphone code for the given String,public String caverphone(final String source) {\n    return this.encoder.encode(source);\n},java.lang.String caverphone(java.lang.String),"digraph cfg_caverphone {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.language.Caverphone: org.apache.commons.codec.language.Caverphone2 encoder>""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<org.apache.commons.codec.language.Caverphone2: java.lang.String encode(java.lang.String)>(source)""];\n	""3"" [label=""return $stack3""];\n	""4"" [label=""source := @parameter0: java.lang.String""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.Caverphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Caverphone.encode(Object),Method,"* Encodes an Object using the Caverphone algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type {@link String}.\n     *\n     * @param obj\n     *            Object to encode\n     * @return An object (or type {@link String}) containing the Caverphone code which corresponds to the String\n     *         supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type {@link String}.","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof String)) {\n        throw new EncoderException(""Parameter supplied to Caverphone encode is not of type java.lang.String"");\n    }\n    return caverphone((String) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof java.lang.String""];\n	""2"" [label=""$stack3 = (java.lang.String) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Caverphone: java.lang.String caverphone(java.lang.String)>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Caverphone encode is not of type java.lang.String\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.language.Caverphone""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Caverphone.encode(String),Method,* Encodes a String using the Caverphone algorithm.\n     *\n     * @param str\n     *            String object to encode\n     * @return The Caverphone code corresponding to the String supplied,@Override\npublic String encode(final String str) {\n    return caverphone(str);\n},java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.language.Caverphone: java.lang.String caverphone(java.lang.String)>(str)""];\n	""2"" [label=""return $stack2""];\n	""3"" [label=""str := @parameter0: java.lang.String""];\n	""4"" [label=""this := @this: org.apache.commons.codec.language.Caverphone""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(String,String)",Method,"* Tests if the Caverphones of two strings are identical.\n     *\n     * @param str1\n     *            First of two strings to compare\n     * @param str2\n     *            Second of two strings to compare\n     * @return {@code true} if the Caverphones of these strings are identical, {@code false} otherwise.","public boolean isCaverphoneEqual(final String str1, final String str2) {\n    return caverphone(str1).equals(caverphone(str2));\n}","boolean isCaverphoneEqual(java.lang.String,java.lang.String)","digraph cfg_isCaverphoneEqual {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.language.Caverphone: java.lang.String caverphone(java.lang.String)>(str2)""];\n	""2"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.language.Caverphone: java.lang.String caverphone(java.lang.String)>(str1)""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack3)""];\n	""4"" [label=""return $stack5""];\n	""5"" [label=""str1 := @parameter0: java.lang.String""];\n	""6"" [label=""str2 := @parameter1: java.lang.String""];\n	""7"" [label=""this := @this: org.apache.commons.codec.language.Caverphone""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Caverphone.<init>(),Constructor,* Constructs a new instance.,public Caverphone() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = new org.apache.commons.codec.language.Caverphone2""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke $stack1.<org.apache.commons.codec.language.Caverphone2: void <init>()>()""];\n	""4"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""5"" [label=""this := @this: org.apache.commons.codec.language.Caverphone""];\n	""6"" [label=""this.<org.apache.commons.codec.language.Caverphone: org.apache.commons.codec.language.Caverphone2 encoder> = $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.Caverphone1.encode(String),Method,* Encodes the given String into a Caverphone value.\n     *\n     * @param source\n     *            String the source string\n     * @return A Caverphone code for the given String,"@Override\npublic String encode(final String source) {\n    String txt = source;\n    if (txt == null || txt.isEmpty()) {\n        return SIX_1;\n    }\n    // 1. Convert to lowercase\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    // 2. Remove anything not A-Z\n    txt = txt.replaceAll(""[^a-z]"", """");\n    // 3. Handle various start options\n    // 2 is a temporary placeholder to indicate a consonant which we are no longer interested in.\n    txt = txt.replaceAll(""^cough"", ""cou2f"");\n    txt = txt.replaceAll(""^rough"", ""rou2f"");\n    txt = txt.replaceAll(""^tough"", ""tou2f"");\n    txt = txt.replaceAll(""^enough"", ""enou2f"");\n    txt = txt.replaceAll(""^gn"", ""2n"");\n    // End\n    txt = txt.replaceAll(""mb$"", ""m2"");\n    // 4. Handle replacements\n    txt = txt.replace(""cq"", ""2q"");\n    txt = txt.replace(""ci"", ""si"");\n    txt = txt.replace(""ce"", ""se"");\n    txt = txt.replace(""cy"", ""sy"");\n    txt = txt.replace(""tch"", ""2ch"");\n    txt = txt.replace(""c"", ""k"");\n    txt = txt.replace(""q"", ""k"");\n    txt = txt.replace(""x"", ""k"");\n    txt = txt.replace(""v"", ""f"");\n    txt = txt.replace(""dg"", ""2g"");\n    txt = txt.replace(""tio"", ""sio"");\n    txt = txt.replace(""tia"", ""sia"");\n    txt = txt.replace(""d"", ""t"");\n    txt = txt.replace(""ph"", ""fh"");\n    txt = txt.replace(""b"", ""p"");\n    txt = txt.replace(""sh"", ""s2"");\n    txt = txt.replace(""z"", ""s"");\n    txt = txt.replaceAll(""^[aeiou]"", ""A"");\n    // 3 is a temporary placeholder marking a vowel\n    txt = txt.replaceAll(""[aeiou]"", ""3"");\n    txt = txt.replace(""3gh3"", ""3kh3"");\n    txt = txt.replace(""gh"", ""22"");\n    txt = txt.replace(""g"", ""k"");\n    txt = txt.replaceAll(""s+"", ""S"");\n    txt = txt.replaceAll(""t+"", ""T"");\n    txt = txt.replaceAll(""p+"", ""P"");\n    txt = txt.replaceAll(""k+"", ""K"");\n    txt = txt.replaceAll(""f+"", ""F"");\n    txt = txt.replaceAll(""m+"", ""M"");\n    txt = txt.replaceAll(""n+"", ""N"");\n    txt = txt.replace(""w3"", ""W3"");\n    // 1.0 only\n    txt = txt.replace(""wy"", ""Wy"");\n    txt = txt.replace(""wh3"", ""Wh3"");\n    // 1.0 only\n    txt = txt.replace(""why"", ""Why"");\n    txt = txt.replace(""w"", ""2"");\n    txt = txt.replaceAll(""^h"", ""A"");\n    txt = txt.replace(""h"", ""2"");\n    txt = txt.replace(""r3"", ""R3"");\n    // 1.0 only\n    txt = txt.replace(""ry"", ""Ry"");\n    txt = txt.replace(""r"", ""2"");\n    txt = txt.replace(""l3"", ""L3"");\n    // 1.0 only\n    txt = txt.replace(""ly"", ""Ly"");\n    txt = txt.replace(""l"", ""2"");\n    // 1.0 only\n    txt = txt.replace(""j"", ""y"");\n    // 1.0 only\n    txt = txt.replace(""y3"", ""Y3"");\n    // 1.0 only\n    txt = txt.replace(""y"", ""2"");\n    // 5. Handle removals\n    txt = txt.replace(""2"", """");\n    txt = txt.replace(""3"", """");\n    // 6. put six 1s on the end\n    txt += SIX_1;\n    // 7. take the first six characters as the code\n    return txt.substring(0, SIX_1.length());\n}",java.lang.String encode(java.lang.String),"digraph cfg_encode {\n	""1"" [label=""$stack10 = virtualinvoke txt.<java.lang.String: java.lang.String substring(int,int)>(0, $stack9)""];\n	""2"" [label=""$stack3 = virtualinvoke txt.<java.lang.String: boolean isEmpty()>()""];\n	""3"" [label=""$stack4 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""4"" [label=""$stack5 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(txt)""];\n	""6"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""111111\"")""];\n	""7"" [label=""$stack8 = \""111111\""""];\n	""8"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.String: int length()>()""];\n	""9"" [label=""if $stack3 == 0""];\n	""10"" [label=""if txt == null""];\n	""11"" [label=""return \""111111\""""];\n	""12"" [label=""return $stack10""];\n	""13"" [label=""source := @parameter0: java.lang.String""];\n	""14"" [label=""specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()""];\n	""15"" [label=""this := @this: org.apache.commons.codec.language.Caverphone1""];\n	""16"" [label=""txt = source""];\n	""17"" [label=""txt = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""18"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""2\"", \""\"")""];\n	""19"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""3\"", \""\"")""];\n	""20"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""3gh3\"", \""3kh3\"")""];\n	""21"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""b\"", \""p\"")""];\n	""22"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""c\"", \""k\"")""];\n	""23"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ce\"", \""se\"")""];\n	""24"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ci\"", \""si\"")""];\n	""25"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""cq\"", \""2q\"")""];\n	""26"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""cy\"", \""sy\"")""];\n	""27"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""d\"", \""t\"")""];\n	""28"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""dg\"", \""2g\"")""];\n	""29"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""g\"", \""k\"")""];\n	""30"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""gh\"", \""22\"")""];\n	""31"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""h\"", \""2\"")""];\n	""32"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""j\"", \""y\"")""];\n	""33"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""l\"", \""2\"")""];\n	""34"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""l3\"", \""L3\"")""];\n	""35"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ly\"", \""Ly\"")""];\n	""36"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ph\"", \""fh\"")""];\n	""37"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""q\"", \""k\"")""];\n	""38"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""r\"", \""2\"")""];\n	""39"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""r3\"", \""R3\"")""];\n	""40"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""ry\"", \""Ry\"")""];\n	""41"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""sh\"", \""s2\"")""];\n	""42"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tch\"", \""2ch\"")""];\n	""43"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tia\"", \""sia\"")""];\n	""44"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""tio\"", \""sio\"")""];\n	""45"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""v\"", \""f\"")""];\n	""46"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""w\"", \""2\"")""];\n	""47"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""w3\"", \""W3\"")""];\n	""48"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""wh3\"", \""Wh3\"")""];\n	""49"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""why\"", \""Why\"")""];\n	""50"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""wy\"", \""Wy\"")""];\n	""51"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""x\"", \""k\"")""];\n	""52"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""y\"", \""2\"")""];\n	""53"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""y3\"", \""Y3\"")""];\n	""54"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(\""z\"", \""s\"")""];\n	""55"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""[^a-z]\"", \""\"")""];\n	""56"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""[aeiou]\"", \""3\"")""];\n	""57"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^[aeiou]\"", \""A\"")""];\n	""58"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^cough\"", \""cou2f\"")""];\n	""59"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^enough\"", \""enou2f\"")""];\n	""60"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^gn\"", \""2n\"")""];\n	""61"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^h\"", \""A\"")""];\n	""62"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^rough\"", \""rou2f\"")""];\n	""63"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""^tough\"", \""tou2f\"")""];\n	""64"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""f+\"", \""F\"")""];\n	""65"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""k+\"", \""K\"")""];\n	""66"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""m+\"", \""M\"")""];\n	""67"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""mb$\"", \""m2\"")""];\n	""68"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""n+\"", \""N\"")""];\n	""69"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""p+\"", \""P\"")""];\n	""70"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""s+\"", \""S\"")""];\n	""71"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(\""t+\"", \""T\"")""];\n	""72"" [label=""txt = virtualinvoke txt.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack4)""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_true""];\n	""10"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""16""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""10""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""20"" -> ""30""[label=""cfg_next""];\n	""21"" -> ""41""[label=""cfg_next""];\n	""22"" -> ""37""[label=""cfg_next""];\n	""23"" -> ""26""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""26"" -> ""42""[label=""cfg_next""];\n	""27"" -> ""36""[label=""cfg_next""];\n	""28"" -> ""44""[label=""cfg_next""];\n	""29"" -> ""70""[label=""cfg_next""];\n	""3"" -> ""72""[label=""cfg_next""];\n	""30"" -> ""29""[label=""cfg_next""];\n	""31"" -> ""39""[label=""cfg_next""];\n	""32"" -> ""53""[label=""cfg_next""];\n	""33"" -> ""32""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""33""[label=""cfg_next""];\n	""36"" -> ""21""[label=""cfg_next""];\n	""37"" -> ""51""[label=""cfg_next""];\n	""38"" -> ""34""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""40"" -> ""38""[label=""cfg_next""];\n	""41"" -> ""54""[label=""cfg_next""];\n	""42"" -> ""22""[label=""cfg_next""];\n	""43"" -> ""27""[label=""cfg_next""];\n	""44"" -> ""43""[label=""cfg_next""];\n	""45"" -> ""28""[label=""cfg_next""];\n	""46"" -> ""61""[label=""cfg_next""];\n	""47"" -> ""50""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""46""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""48""[label=""cfg_next""];\n	""51"" -> ""45""[label=""cfg_next""];\n	""52"" -> ""18""[label=""cfg_next""];\n	""53"" -> ""52""[label=""cfg_next""];\n	""54"" -> ""57""[label=""cfg_next""];\n	""55"" -> ""58""[label=""cfg_next""];\n	""56"" -> ""20""[label=""cfg_next""];\n	""57"" -> ""56""[label=""cfg_next""];\n	""58"" -> ""62""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""60"" -> ""67""[label=""cfg_next""];\n	""61"" -> ""31""[label=""cfg_next""];\n	""62"" -> ""63""[label=""cfg_next""];\n	""63"" -> ""59""[label=""cfg_next""];\n	""64"" -> ""66""[label=""cfg_next""];\n	""65"" -> ""64""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""25""[label=""cfg_next""];\n	""68"" -> ""47""[label=""cfg_next""];\n	""69"" -> ""65""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""71""[label=""cfg_next""];\n	""71"" -> ""69""[label=""cfg_next""];\n	""72"" -> ""55""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_false""];\n	""9"" -> ""3""[label=""cfg_true""];\n}\n",public 
org.apache.commons.codec.language.Caverphone1.<init>(),Constructor,* Constructs a new instance.,public Caverphone1() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.language.AbstractCaverphone: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.language.Caverphone1""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.language.SoundexUtils.clean(String),Method,* Cleans up the input string before Soundex processing by only returning\n     * upper case letters.\n     *\n     * @param str\n     *                  The String to clean.\n     * @return A clean String.,"static String clean(final String str) {\n    if (isEmpty(str)) {\n        return str;\n    }\n    final int len = str.length();\n    final char[] chars = new char[len];\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isLetter(str.charAt(i))) {\n            chars[count++] = str.charAt(i);\n        }\n    }\n    if (count == len) {\n        return str.toUpperCase(java.util.Locale.ENGLISH);\n    }\n    return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n}",java.lang.String clean(java.lang.String),"digraph cfg_clean {\n	""1"" [label=""$stack10 = virtualinvoke str.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack9)""];\n	""2"" [label=""$stack11 = virtualinvoke str.<java.lang.String: char charAt(int)>(i)""];\n	""3"" [label=""$stack12 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack11)""];\n	""4"" [label=""$stack13 = count""];\n	""5"" [label=""$stack14 = virtualinvoke str.<java.lang.String: char charAt(int)>(i)""];\n	""6"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.SoundexUtils: boolean isEmpty(java.lang.CharSequence)>(str)""];\n	""7"" [label=""$stack6 = new java.lang.String""];\n	""8"" [label=""$stack7 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""9"" [label=""$stack8 = virtualinvoke $stack6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack7)""];\n	""10"" [label=""$stack9 = <java.util.Locale: java.util.Locale ENGLISH>""];\n	""11"" [label=""chars = newarray (char)[len]""];\n	""12"" [label=""chars[$stack13] = $stack14""];\n	""13"" [label=""count = 0""];\n	""14"" [label=""count = count + 1""];\n	""15"" [label=""goto""];\n	""16"" [label=""i = 0""];\n	""17"" [label=""i = i + 1""];\n	""18"" [label=""if $stack12 == 0""];\n	""19"" [label=""if $stack5 == 0""];\n	""20"" [label=""if count != len""];\n	""21"" [label=""if i >= len""];\n	""22"" [label=""len = virtualinvoke str.<java.lang.String: int length()>()""];\n	""23"" [label=""return $stack10""];\n	""24"" [label=""return $stack8""];\n	""25"" [label=""return str""];\n	""26"" [label=""specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>(chars, 0, count)""];\n	""27"" [label=""str := @parameter0: java.lang.String""];\n	""1"" -> ""23""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""17""[label=""cfg_next""];\n	""13"" -> ""16""[label=""cfg_next""];\n	""14"" -> ""5""[label=""cfg_next""];\n	""15"" -> ""21""[label=""cfg_goto""];\n	""16"" -> ""21""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_true""];\n	""18"" -> ""4""[label=""cfg_false""];\n	""19"" -> ""22""[label=""cfg_true""];\n	""19"" -> ""25""[label=""cfg_false""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""10""[label=""cfg_false""];\n	""20"" -> ""7""[label=""cfg_true""];\n	""21"" -> ""2""[label=""cfg_false""];\n	""21"" -> ""20""[label=""cfg_true""];\n	""22"" -> ""11""[label=""cfg_next""];\n	""26"" -> ""8""[label=""cfg_next""];\n	""27"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""19""[label=""cfg_next""];\n	""7"" -> ""26""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""24""[label=""cfg_next""];\n}\n",static 
"org.apache.commons.codec.language.SoundexUtils.difference(StringEncoder,String,String)",Method,"* Encodes the Strings and returns the number of characters in the two\n     * encoded Strings that are the same.\n     * <ul>\n     * <li>For Soundex, this return value ranges from 0 through 4: 0 indicates\n     * little or no similarity, and 4 indicates strong similarity or identical\n     * values.</li>\n     * <li>For refined Soundex, the return value can be greater than 4.</li>\n     * </ul>\n     *\n     * @param encoder\n     *                  The encoder to use to encode the Strings.\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two Soundex encoded Strings that\n     *             are the same.\n     *\n     * @see #differenceEncoded(String,String)\n     * @see <a href=""https://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"">\n     *          MS T-SQL DIFFERENCE</a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings","static int difference(final StringEncoder encoder, final String s1, final String s2) throws EncoderException {\n    return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n}","int difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String)","digraph cfg_difference {\n	""1"" [label=""$stack3 = interfaceinvoke encoder.<org.apache.commons.codec.StringEncoder: java.lang.String encode(java.lang.String)>(s2)""];\n	""2"" [label=""$stack4 = interfaceinvoke encoder.<org.apache.commons.codec.StringEncoder: java.lang.String encode(java.lang.String)>(s1)""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.language.SoundexUtils: int differenceEncoded(java.lang.String,java.lang.String)>($stack4, $stack3)""];\n	""4"" [label=""encoder := @parameter0: org.apache.commons.codec.StringEncoder""];\n	""5"" [label=""return $stack5""];\n	""6"" [label=""s1 := @parameter1: java.lang.String""];\n	""7"" [label=""s2 := @parameter2: java.lang.String""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n",static 
"org.apache.commons.codec.language.SoundexUtils.differenceEncoded(String,String)",Method,"* Returns the number of characters in the two Soundex encoded Strings that\n     * are the same.\n     * <ul>\n     * <li>For Soundex, this return value ranges from 0 through 4: 0 indicates\n     * little or no similarity, and 4 indicates strong similarity or identical\n     * values.</li>\n     * <li>For refined Soundex, the return value can be greater than 4.</li>\n     * </ul>\n     *\n     * @param es1\n     *                  An encoded String.\n     * @param es2\n     *                  An encoded String.\n     * @return The number of characters in the two Soundex encoded Strings that\n     *             are the same.\n     *\n     * @see <a href=""https://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"">\n     *          MS T-SQL DIFFERENCE</a>","static int differenceEncoded(final String es1, final String es2) {\n    if (es1 == null || es2 == null) {\n        return 0;\n    }\n    final int lengthToMatch = Math.min(es1.length(), es2.length());\n    int diff = 0;\n    for (int i = 0; i < lengthToMatch; i++) {\n        if (es1.charAt(i) == es2.charAt(i)) {\n            diff++;\n        }\n    }\n    return diff;\n}","int differenceEncoded(java.lang.String,java.lang.String)","digraph cfg_differenceEncoded {\n	""1"" [label=""$stack5 = virtualinvoke es2.<java.lang.String: int length()>()""];\n	""2"" [label=""$stack6 = virtualinvoke es1.<java.lang.String: int length()>()""];\n	""3"" [label=""$stack7 = virtualinvoke es2.<java.lang.String: char charAt(int)>(i)""];\n	""4"" [label=""$stack8 = virtualinvoke es1.<java.lang.String: char charAt(int)>(i)""];\n	""5"" [label=""diff = 0""];\n	""6"" [label=""diff = diff + 1""];\n	""7"" [label=""es1 := @parameter0: java.lang.String""];\n	""8"" [label=""es2 := @parameter1: java.lang.String""];\n	""9"" [label=""goto""];\n	""10"" [label=""i = 0""];\n	""11"" [label=""i = i + 1""];\n	""12"" [label=""if $stack8 != $stack7""];\n	""13"" [label=""if es1 == null""];\n	""14"" [label=""if es2 != null""];\n	""15"" [label=""if i >= lengthToMatch""];\n	""16"" [label=""lengthToMatch = staticinvoke <java.lang.Math: int min(int,int)>($stack6, $stack5)""];\n	""17"" [label=""return 0""];\n	""18"" [label=""return diff""];\n	""1"" -> ""16""[label=""cfg_next""];\n	""10"" -> ""15""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_true""];\n	""12"" -> ""6""[label=""cfg_false""];\n	""13"" -> ""14""[label=""cfg_false""];\n	""13"" -> ""17""[label=""cfg_true""];\n	""14"" -> ""17""[label=""cfg_false""];\n	""14"" -> ""2""[label=""cfg_true""];\n	""15"" -> ""18""[label=""cfg_true""];\n	""15"" -> ""4""[label=""cfg_false""];\n	""16"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""11""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""13""[label=""cfg_next""];\n	""9"" -> ""15""[label=""cfg_goto""];\n}\n",static 
org.apache.commons.codec.language.SoundexUtils.isEmpty(CharSequence),Method,"* <p>Checks if a CharSequence is empty ("""") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty("""")        = true\n     * StringUtils.isEmpty("" "")       = false\n     * StringUtils.isEmpty(""bob"")     = false\n     * StringUtils.isEmpty(""  bob  "") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is empty or null",static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n},boolean isEmpty(java.lang.CharSequence),"digraph cfg_isEmpty {\n	""1"" [label=""$stack1 = interfaceinvoke cs.<java.lang.CharSequence: int length()>()""];\n	""2"" [label=""$stack2 = 0""];\n	""3"" [label=""$stack2 = 1""];\n	""4"" [label=""cs := @parameter0: java.lang.CharSequence""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack1 != 0""];\n	""7"" [label=""if cs == null""];\n	""8"" [label=""return $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_goto""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n}\n",static 
org.apache.commons.codec.cli.Digest.main(String[]),Method,"* Runs the digest algorithm in {@code args[0]} on the file in {@code args[1]}. If there is no {@code args[1]}, use\n     * standard input.\n     *\n     * <p>\n     * The algorithm can also be {@code ALL} or {@code *} to output one line for each known algorithm.\n     * </p>\n     *\n     * @param args\n     *            {@code args[0]} is one of {@link MessageDigestAlgorithms} name,\n     *            {@link MessageDigest} name, {@code ALL}, or {@code *}.\n     *            {@code args[1+]} is a FILE/DIRECTORY/String.\n     * @throws IOException if an error occurs",public static void main(final String[] args) throws IOException {\n    new Digest(args).run();\n},void main(java.lang.String[]),"digraph cfg_main {\n	""1"" [label=""$stack1 = new org.apache.commons.codec.cli.Digest""];\n	""2"" [label=""args := @parameter0: java.lang.String[]""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke $stack1.<org.apache.commons.codec.cli.Digest: void <init>(java.lang.String[])>(args)""];\n	""5"" [label=""specialinvoke $stack1.<org.apache.commons.codec.cli.Digest: void run()>()""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.cli.Digest.println(String,byte[])",Method,No Comment,"private void println(final String prefix, final byte[] digest) {\n    println(prefix, digest, null);\n}","void println(java.lang.String,byte[])","digraph cfg_println {\n	""1"" [label=""digest := @parameter1: byte[]""];\n	""2"" [label=""prefix := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void println(java.lang.String,byte[],java.lang.String)>(prefix, digest, null)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.cli.Digest.println(String,byte[],String)",Method,No Comment,"private void println(final String prefix, final byte[] digest, final String fileName) {\n    // The standard appears to be to print\n    // hex, space, then either space or '*' followed by file name\n    // where '*' is used for binary files\n    // shasum(1) has a -b option which generates "" *"" separator\n    // we don't distinguish binary files at present\n    System.out.println(prefix + Hex.encodeHexString(digest) + (fileName != null ? ""  "" + fileName : """"));\n}","void println(java.lang.String,byte[],java.lang.String)","digraph cfg_println {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack11 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""  \"")""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName)""];\n	""5"" [label=""$stack14 = \""\""""];\n	""6"" [label=""$stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""7"" [label=""$stack4 = new java.lang.StringBuilder""];\n	""8"" [label=""$stack5 = <java.lang.System: java.io.PrintStream out>""];\n	""9"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>(digest)""];\n	""10"" [label=""$stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix)""];\n	""11"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6)""];\n	""12"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14)""];\n	""13"" [label=""digest := @parameter1: byte[]""];\n	""14"" [label=""fileName := @parameter2: java.lang.String""];\n	""15"" [label=""goto""];\n	""16"" [label=""if fileName == null""];\n	""17"" [label=""prefix := @parameter0: java.lang.String""];\n	""18"" [label=""return""];\n	""19"" [label=""specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>()""];\n	""20"" [label=""specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()""];\n	""21"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""22"" [label=""virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.String)>($stack10)""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""16""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""8""[label=""cfg_next""];\n	""15"" -> ""12""[label=""cfg_goto""];\n	""16"" -> ""2""[label=""cfg_false""];\n	""16"" -> ""5""[label=""cfg_true""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""19"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""19""[label=""cfg_next""];\n	""20"" -> ""10""[label=""cfg_next""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""22"" -> ""18""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""20""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.cli.Digest.run(),Method,No Comment,"private void run() throws IOException {\n    if (algorithm.equalsIgnoreCase(""ALL"") || algorithm.equals(""*"")) {\n        run(MessageDigestAlgorithms.values());\n        return;\n    }\n    final MessageDigest messageDigest = DigestUtils.getDigest(algorithm, null);\n    if (messageDigest != null) {\n        run("""", messageDigest);\n    } else {\n        run("""", DigestUtils.getDigest(algorithm.toUpperCase(Locale.ROOT)));\n    }\n}",void run(),"digraph cfg_run {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack8)""];\n	""2"" [label=""$stack11 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($stack10)""];\n	""3"" [label=""$stack2 = this.<org.apache.commons.codec.cli.Digest: java.lang.String algorithm>""];\n	""4"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(\""ALL\"")""];\n	""5"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>()""];\n	""6"" [label=""$stack5 = this.<org.apache.commons.codec.cli.Digest: java.lang.String algorithm>""];\n	""7"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>(\""*\"")""];\n	""8"" [label=""$stack7 = this.<org.apache.commons.codec.cli.Digest: java.lang.String algorithm>""];\n	""9"" [label=""$stack8 = <java.util.Locale: java.util.Locale ROOT>""];\n	""10"" [label=""$stack9 = this.<org.apache.commons.codec.cli.Digest: java.lang.String algorithm>""];\n	""11"" [label=""goto""];\n	""12"" [label=""if $stack3 != 0""];\n	""13"" [label=""if $stack6 == 0""];\n	""14"" [label=""if messageDigest == null""];\n	""15"" [label=""messageDigest = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String,java.security.MessageDigest)>($stack7, null)""];\n	""16"" [label=""return""];\n	""17"" [label=""return""];\n	""18"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.security.MessageDigest)>(\""\"", $stack11)""];\n	""19"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.security.MessageDigest)>(\""\"", messageDigest)""];\n	""20"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String[])>($stack4)""];\n	""21"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_goto""];\n	""12"" -> ""5""[label=""cfg_true""];\n	""12"" -> ""6""[label=""cfg_false""];\n	""13"" -> ""5""[label=""cfg_false""];\n	""13"" -> ""8""[label=""cfg_true""];\n	""14"" -> ""10""[label=""cfg_true""];\n	""14"" -> ""19""[label=""cfg_false""];\n	""15"" -> ""14""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""18""[label=""cfg_next""];\n	""20"" -> ""16""[label=""cfg_next""];\n	""21"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""20""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_next""];\n	""8"" -> ""15""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest)",Method,No Comment,"private void run(final String prefix, final MessageDigest messageDigest) throws IOException {\n    if (inputs == null) {\n        println(prefix, DigestUtils.digest(messageDigest, System.in));\n        return;\n    }\n    for (final String source : inputs) {\n        final File file = new File(source);\n        if (file.isFile()) {\n            println(prefix, DigestUtils.digest(messageDigest, file), source);\n        } else if (file.isDirectory()) {\n            final File[] listFiles = file.listFiles();\n            if (listFiles != null) {\n                run(prefix, messageDigest, listFiles);\n            }\n        } else {\n            // use the default charset for the command-line parameter\n            final byte[] bytes = source.getBytes(Charset.defaultCharset());\n            println(prefix, DigestUtils.digest(messageDigest, bytes));\n        }\n    }\n}","void run(java.lang.String,java.security.MessageDigest)","digraph cfg_run {\n	""1"" [label=""$stack10 = new java.io.File""];\n	""2"" [label=""$stack11 = virtualinvoke file.<java.io.File: boolean isFile()>()""];\n	""3"" [label=""$stack12 = virtualinvoke file.<java.io.File: boolean isDirectory()>()""];\n	""4"" [label=""$stack13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>()""];\n	""5"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,byte[])>(messageDigest, listFiles)""];\n	""6"" [label=""$stack15 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.File)>(messageDigest, file)""];\n	""7"" [label=""$stack16 = <java.lang.System: java.io.InputStream in>""];\n	""8"" [label=""$stack17 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.InputStream)>(messageDigest, $stack16)""];\n	""9"" [label=""$stack9 = this.<org.apache.commons.codec.cli.Digest: java.lang.String[] inputs>""];\n	""10"" [label=""file = $stack10""];\n	""11"" [label=""goto""];\n	""12"" [label=""goto""];\n	""13"" [label=""goto""];\n	""14"" [label=""if $stack11 == 0""];\n	""15"" [label=""if $stack12 == 0""];\n	""16"" [label=""if $stack9 != null""];\n	""17"" [label=""if l5 >= l4""];\n	""18"" [label=""if listFiles == null""];\n	""19"" [label=""l3 = this.<org.apache.commons.codec.cli.Digest: java.lang.String[] inputs>""];\n	""20"" [label=""l4 = lengthof l3""];\n	""21"" [label=""l5 = 0""];\n	""22"" [label=""l5 = l5 + 1""];\n	""23"" [label=""listFiles = virtualinvoke file.<java.io.File: java.io.File[] listFiles()>()""];\n	""24"" [label=""listFiles = virtualinvoke source.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack13)""];\n	""25"" [label=""messageDigest := @parameter1: java.security.MessageDigest""];\n	""26"" [label=""prefix := @parameter0: java.lang.String""];\n	""27"" [label=""return""];\n	""28"" [label=""return""];\n	""29"" [label=""source = l3[l5]""];\n	""30"" [label=""specialinvoke $stack10.<java.io.File: void <init>(java.lang.String)>(source)""];\n	""31"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void println(java.lang.String,byte[])>(prefix, $stack14)""];\n	""32"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void println(java.lang.String,byte[])>(prefix, $stack17)""];\n	""33"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void println(java.lang.String,byte[],java.lang.String)>(prefix, $stack15, source)""];\n	""34"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.security.MessageDigest,java.io.File[])>(prefix, messageDigest, listFiles)""];\n	""35"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""30""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_goto""];\n	""12"" -> ""22""[label=""cfg_goto""];\n	""13"" -> ""17""[label=""cfg_goto""];\n	""14"" -> ""3""[label=""cfg_true""];\n	""14"" -> ""6""[label=""cfg_false""];\n	""15"" -> ""23""[label=""cfg_false""];\n	""15"" -> ""4""[label=""cfg_true""];\n	""16"" -> ""19""[label=""cfg_true""];\n	""16"" -> ""7""[label=""cfg_false""];\n	""17"" -> ""28""[label=""cfg_true""];\n	""17"" -> ""29""[label=""cfg_false""];\n	""18"" -> ""12""[label=""cfg_true""];\n	""18"" -> ""34""[label=""cfg_false""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""14""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""17""[label=""cfg_next""];\n	""22"" -> ""13""[label=""cfg_next""];\n	""23"" -> ""18""[label=""cfg_next""];\n	""24"" -> ""5""[label=""cfg_next""];\n	""25"" -> ""9""[label=""cfg_next""];\n	""26"" -> ""25""[label=""cfg_next""];\n	""29"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""30"" -> ""10""[label=""cfg_next""];\n	""31"" -> ""22""[label=""cfg_next""];\n	""32"" -> ""27""[label=""cfg_next""];\n	""33"" -> ""11""[label=""cfg_next""];\n	""34"" -> ""12""[label=""cfg_next""];\n	""35"" -> ""26""[label=""cfg_next""];\n	""4"" -> ""24""[label=""cfg_next""];\n	""5"" -> ""31""[label=""cfg_next""];\n	""6"" -> ""33""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""32""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest,File[])",Method,No Comment,"private void run(final String prefix, final MessageDigest messageDigest, final File[] files) throws IOException {\n    for (final File file : files) {\n        if (file.isFile()) {\n            println(prefix, DigestUtils.digest(messageDigest, file), file.getName());\n        }\n    }\n}","void run(java.lang.String,java.security.MessageDigest,java.io.File[])","digraph cfg_run {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] digest(java.security.MessageDigest,java.io.File)>(messageDigest, file)""];\n	""2"" [label=""$stack8 = virtualinvoke file.<java.io.File: boolean isFile()>()""];\n	""3"" [label=""$stack9 = virtualinvoke file.<java.io.File: java.lang.String getName()>()""];\n	""4"" [label=""file = l4[l6]""];\n	""5"" [label=""files := @parameter2: java.io.File[]""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack8 == 0""];\n	""8"" [label=""if l6 >= l5""];\n	""9"" [label=""l4 = files""];\n	""10"" [label=""l5 = lengthof l4""];\n	""11"" [label=""l6 = 0""];\n	""12"" [label=""l6 = l6 + 1""];\n	""13"" [label=""messageDigest := @parameter1: java.security.MessageDigest""];\n	""14"" [label=""prefix := @parameter0: java.lang.String""];\n	""15"" [label=""return""];\n	""16"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void println(java.lang.String,byte[],java.lang.String)>(prefix, $stack10, $stack9)""];\n	""17"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_next""];\n	""13"" -> ""5""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_goto""];\n	""7"" -> ""1""[label=""cfg_false""];\n	""7"" -> ""12""[label=""cfg_true""];\n	""8"" -> ""15""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.cli.Digest.run(String,String)",Method,No Comment,"private void run(final String prefix, final String messageDigestAlgorithm) throws IOException {\n    run(prefix, DigestUtils.getDigest(messageDigestAlgorithm));\n}","void run(java.lang.String,java.lang.String)","digraph cfg_run {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(messageDigestAlgorithm)""];\n	""2"" [label=""messageDigestAlgorithm := @parameter1: java.lang.String""];\n	""3"" [label=""prefix := @parameter0: java.lang.String""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.security.MessageDigest)>(prefix, $stack3)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.cli.Digest.run(String[]),Method,No Comment,"private void run(final String[] digestAlgorithms) throws IOException {\n    for (final String messageDigestAlgorithm : digestAlgorithms) {\n        if (DigestUtils.isAvailable(messageDigestAlgorithm)) {\n            run(messageDigestAlgorithm + "" "", messageDigestAlgorithm);\n        }\n    }\n}",void run(java.lang.String[]),"digraph cfg_run {\n	""1"" [label=""$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""2"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: boolean isAvailable(java.lang.String)>(messageDigestAlgorithm)""];\n	""3"" [label=""$stack7 = new java.lang.StringBuilder""];\n	""4"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(messageDigestAlgorithm)""];\n	""5"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" \"")""];\n	""6"" [label=""digestAlgorithms := @parameter0: java.lang.String[]""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack6 == 0""];\n	""9"" [label=""if l4 >= l3""];\n	""10"" [label=""l2 = digestAlgorithms""];\n	""11"" [label=""l3 = lengthof l2""];\n	""12"" [label=""l4 = 0""];\n	""13"" [label=""l4 = l4 + 1""];\n	""14"" [label=""messageDigestAlgorithm = l2[l4]""];\n	""15"" [label=""return""];\n	""16"" [label=""specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>()""];\n	""17"" [label=""specialinvoke this.<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.lang.String)>($stack10, messageDigestAlgorithm)""];\n	""18"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""14"" -> ""2""[label=""cfg_next""];\n	""16"" -> ""4""[label=""cfg_next""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""18"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_goto""];\n	""8"" -> ""13""[label=""cfg_true""];\n	""8"" -> ""3""[label=""cfg_false""];\n	""9"" -> ""14""[label=""cfg_false""];\n	""9"" -> ""15""[label=""cfg_true""];\n}\n",private 
org.apache.commons.codec.cli.Digest.toString(),Method,No Comment,"@Override\npublic String toString() {\n    return String.format(""%s %s"", super.toString(), Arrays.toString(args));\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = newarray (java.lang.Object)[2]""];\n	""2"" [label=""$stack1[0] = $stack2""];\n	""3"" [label=""$stack1[1] = $stack4""];\n	""4"" [label=""$stack2 = specialinvoke this.<java.lang.Object: java.lang.String toString()>()""];\n	""5"" [label=""$stack3 = this.<org.apache.commons.codec.cli.Digest: java.lang.String[] args>""];\n	""6"" [label=""$stack4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack3)""];\n	""7"" [label=""$stack5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""%s %s\"", $stack1)""];\n	""8"" [label=""return $stack5""];\n	""9"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.cli.Digest.<init>(String[]),Constructor,No Comment,"private Digest(final String[] args) {\n    Objects.requireNonNull(args);\n    final int argsLength = args.length;\n    if (argsLength == 0) {\n        throw new IllegalArgumentException(String.format(""Usage: java %s [algorithm] [FILE|DIRECTORY|string] ..."", Digest.class.getName()));\n    }\n    this.args = args;\n    this.algorithm = args[0];\n    if (argsLength <= 1) {\n        this.inputs = null;\n    } else {\n        this.inputs = Arrays.copyOfRange(args, 1, argsLength);\n    }\n}",void <init>(java.lang.String[]),"digraph cfg_init {\n	""1"" [label=""$stack10 = new java.lang.IllegalArgumentException""];\n	""2"" [label=""$stack3 = args[0]""];\n	""3"" [label=""$stack4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(args, 1, argsLength)""];\n	""4"" [label=""$stack5 = (java.lang.String[]) $stack4""];\n	""5"" [label=""$stack6 = class \""Lorg/apache/commons/codec/cli/Digest;\""""];\n	""6"" [label=""$stack7 = newarray (java.lang.Object)[1]""];\n	""7"" [label=""$stack7[0] = $stack8""];\n	""8"" [label=""$stack8 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>()""];\n	""9"" [label=""$stack9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""Usage: java %s [algorithm] [FILE|DIRECTORY|string] ...\"", $stack7)""];\n	""10"" [label=""args := @parameter0: java.lang.String[]""];\n	""11"" [label=""argsLength = lengthof args""];\n	""12"" [label=""goto""];\n	""13"" [label=""if argsLength != 0""];\n	""14"" [label=""if argsLength > 1""];\n	""15"" [label=""return""];\n	""16"" [label=""specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)""];\n	""17"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""18"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(args)""];\n	""19"" [label=""this := @this: org.apache.commons.codec.cli.Digest""];\n	""20"" [label=""this.<org.apache.commons.codec.cli.Digest: java.lang.String algorithm> = $stack3""];\n	""21"" [label=""this.<org.apache.commons.codec.cli.Digest: java.lang.String[] args> = args""];\n	""22"" [label=""this.<org.apache.commons.codec.cli.Digest: java.lang.String[] inputs> = $stack5""];\n	""23"" [label=""this.<org.apache.commons.codec.cli.Digest: java.lang.String[] inputs> = null""];\n	""24"" [label=""throw $stack10""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""17""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""15""[label=""cfg_goto""];\n	""13"" -> ""1""[label=""cfg_false""];\n	""13"" -> ""21""[label=""cfg_true""];\n	""14"" -> ""23""[label=""cfg_false""];\n	""14"" -> ""3""[label=""cfg_true""];\n	""16"" -> ""24""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""11""[label=""cfg_next""];\n	""19"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""20""[label=""cfg_next""];\n	""20"" -> ""14""[label=""cfg_next""];\n	""21"" -> ""2""[label=""cfg_next""];\n	""22"" -> ""15""[label=""cfg_next""];\n	""23"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""22""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.Resources.getInputStream(String),Method,* Gets a read-only stream on the contents of the resource specified by resName. The mapping between the resource name and the stream is managed by this\n     * class's class loader.\n     *\n     * @param name The resource name.\n     * @return An input stream.\n     * @see ClassLoader#getResourceAsStream(String),"public static InputStream getInputStream(final String name) {\n    // Use java.lang.Class.getResourceAsStream(String) to make JPMS happy\n    final InputStream inputStream = Resources.class.getResourceAsStream(name);\n    if (inputStream == null) {\n        throw new IllegalArgumentException(""Unable to resolve required resource: "" + name);\n    }\n    return inputStream;\n}",java.io.InputStream getInputStream(java.lang.String),"digraph cfg_getInputStream {\n	""1"" [label=""$stack2 = class \""Lorg/apache/commons/codec/Resources;\""""];\n	""2"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Unable to resolve required resource: \"")""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack7 = new java.lang.IllegalArgumentException""];\n	""7"" [label=""if inputStream != null""];\n	""8"" [label=""inputStream = virtualinvoke $stack2.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(name)""];\n	""9"" [label=""name := @parameter0: java.lang.String""];\n	""10"" [label=""return inputStream""];\n	""11"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""12"" [label=""specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)""];\n	""13"" [label=""throw $stack7""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_true""];\n	""7"" -> ""6""[label=""cfg_false""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.Resources.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic Resources() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.Resources""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.CharEncoding.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic CharEncoding() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.CharEncoding""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.BinaryEncoder.encode(byte[]),Abstract Method,* Encodes a byte array and return the encoded data as a byte array.\n     *\n     * @param source\n     *            Data to be encoded\n     * @return A byte array containing the encoded data\n     * @throws EncoderException\n     *             thrown if the Encoder encounters a failure condition during the encoding process.,byte[] encode(byte[] source) throws EncoderException;,byte[] encode(byte[]),digraph cfg_encode {\n}\n,default
"org.apache.commons.codec.StringEncoderComparator.compare(Object,Object)",Method,"* Compares two strings based not on the strings themselves, but on an encoding of the two strings using the\n     * StringEncoder this Comparator was created with.\n     *\n     * If an {@link EncoderException} is encountered, return {@code 0}.\n     *\n     * @param o1\n     *            the object to compare\n     * @param o2\n     *            the object to compare to\n     * @return the Comparable.compareTo() return code or 0 if an encoding error was caught.\n     * @see Comparable","@Override\npublic int compare(final Object o1, final Object o2) {\n    int compareCode = 0;\n    try {\n        // May fail with CCE if encode returns something that is not Comparable\n        @SuppressWarnings(""unchecked"")\n        final Comparable<Comparable<?>> // However this was always the case.\n        s1 = (Comparable<Comparable<?>>) this.stringEncoder.encode(o1);\n        final Comparable<?> s2 = (Comparable<?>) this.stringEncoder.encode(o2);\n        compareCode = s1.compareTo(s2);\n    } catch (final EncoderException ee) {\n        compareCode = 0;\n    }\n    return compareCode;\n}","int compare(java.lang.Object,java.lang.Object)","digraph cfg_compare {\n	""1"" [label=""$stack10 := @caughtexception""];\n	""2"" [label=""$stack6 = this.<org.apache.commons.codec.StringEncoderComparator: org.apache.commons.codec.StringEncoder stringEncoder>""];\n	""3"" [label=""$stack7 = interfaceinvoke $stack6.<org.apache.commons.codec.StringEncoder: java.lang.Object encode(java.lang.Object)>(o1)""];\n	""4"" [label=""$stack8 = this.<org.apache.commons.codec.StringEncoderComparator: org.apache.commons.codec.StringEncoder stringEncoder>""];\n	""5"" [label=""$stack9 = interfaceinvoke $stack8.<org.apache.commons.codec.StringEncoder: java.lang.Object encode(java.lang.Object)>(o2)""];\n	""6"" [label=""compareCode = 0""];\n	""7"" [label=""compareCode = 0""];\n	""8"" [label=""compareCode = interfaceinvoke s1.<java.lang.Comparable: int compareTo(java.lang.Object)>(s2)""];\n	""9"" [label=""goto""];\n	""10"" [label=""o1 := @parameter0: java.lang.Object""];\n	""11"" [label=""o2 := @parameter1: java.lang.Object""];\n	""12"" [label=""return compareCode""];\n	""13"" [label=""s1 = $stack10""];\n	""14"" [label=""s1 = (java.lang.Comparable) $stack7""];\n	""15"" [label=""s2 = (java.lang.Comparable) $stack9""];\n	""16"" [label=""this := @this: org.apache.commons.codec.StringEncoderComparator""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_except""];\n	""14"" -> ""4""[label=""cfg_next""];\n	""15"" -> ""1""[label=""cfg_except""];\n	""15"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_except""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_except""];\n	""3"" -> ""14""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_except""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_except""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_except""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""12""[label=""cfg_goto""];\n}\n",public 
org.apache.commons.codec.StringEncoderComparator.<init>(),Constructor,* Constructs a new instance.\n     *\n     * @deprecated Creating an instance without a {@link StringEncoder} leads to a {@link NullPointerException}. Will be\n     *             removed in 2.0.,@Deprecated\npublic StringEncoderComparator() {\n    // Trying to use this will cause things to break\n    this.stringEncoder = null;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.StringEncoderComparator""];\n	""4"" [label=""this.<org.apache.commons.codec.StringEncoderComparator: org.apache.commons.codec.StringEncoder stringEncoder> = null""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.StringEncoderComparator.<init>(StringEncoder),Constructor,* Constructs a new instance with the given algorithm.\n     *\n     * @param stringEncoder\n     *            the StringEncoder used for comparisons.,public StringEncoderComparator(final StringEncoder stringEncoder) {\n    this.stringEncoder = stringEncoder;\n},void <init>(org.apache.commons.codec.StringEncoder),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""stringEncoder := @parameter0: org.apache.commons.codec.StringEncoder""];\n	""4"" [label=""this := @this: org.apache.commons.codec.StringEncoderComparator""];\n	""5"" [label=""this.<org.apache.commons.codec.StringEncoderComparator: org.apache.commons.codec.StringEncoder stringEncoder> = stringEncoder""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream),Constructor,* Constructs a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.,"public Base64OutputStream(final OutputStream outputStream) {\n    this(outputStream, true);\n}",void <init>(java.io.OutputStream),"digraph cfg_init {\n	""1"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>(outputStream, 1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base64OutputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean)",Constructor,"* Constructs a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.","public Base64OutputStream(final OutputStream outputStream, final boolean doEncode) {\n    super(outputStream, new Base64(false), doEncode);\n}","void <init>(java.io.OutputStream,boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(0)""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack3, doEncode)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base64OutputStream""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[])",Constructor,"* Constructs a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.","public Base64OutputStream(final OutputStream outputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator) {\n    super(outputStream, new Base64(lineLength, lineSeparator), doEncode);\n}","void <init>(java.io.OutputStream,boolean,int,byte[])","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""lineLength := @parameter2: int""];\n	""4"" [label=""lineSeparator := @parameter3: byte[]""];\n	""5"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(lineLength, lineSeparator)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base64OutputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy)",Constructor,"* Constructs a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.\n     * @param decodingPolicy The decoding policy.\n     * @since 1.15","public Base64OutputStream(final OutputStream outputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator, final CodecPolicy decodingPolicy) {\n    super(outputStream, new Base64(lineLength, lineSeparator, false, decodingPolicy), doEncode);\n}","void <init>(java.io.OutputStream,boolean,int,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack6 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""lineLength := @parameter2: int""];\n	""5"" [label=""lineSeparator := @parameter3: byte[]""];\n	""6"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 0, decodingPolicy)""];\n	""9"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack6, doEncode)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.binary.Base64OutputStream""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32.builder(),Method,* Creates a new Builder.\n     *\n     * @return a new Builder.\n     * @since 1.17.0,public static Builder builder() {\n    return new Builder();\n},org.apache.commons.codec.binary.Base32$Builder builder(),"digraph cfg_builder {\n	""1"" [label=""$stack0 = new org.apache.commons.codec.binary.Base32$Builder""];\n	""2"" [label=""return $stack0""];\n	""3"" [label=""specialinvoke $stack0.<org.apache.commons.codec.binary.Base32$Builder: void <init>()>()""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base32.decodeTable(boolean),Method,No Comment,private static byte[] decodeTable(final boolean useHex) {\n    return useHex ? HEX_DECODE_TABLE : DECODE_TABLE;\n},byte[] decodeTable(boolean),"digraph cfg_decodeTable {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE>""];\n	""2"" [label=""$stack1 = <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE>""];\n	""3"" [label=""goto""];\n	""4"" [label=""if useHex == 0""];\n	""5"" [label=""return $stack1""];\n	""6"" [label=""useHex := @parameter0: boolean""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.Base32.encodeTable(boolean),Method,No Comment,private static byte[] encodeTable(final boolean useHex) {\n    return useHex ? HEX_ENCODE_TABLE : ENCODE_TABLE;\n},byte[] encodeTable(boolean),"digraph cfg_encodeTable {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.binary.Base32: byte[] ENCODE_TABLE>""];\n	""2"" [label=""$stack1 = <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE>""];\n	""3"" [label=""goto""];\n	""4"" [label=""if useHex == 0""];\n	""5"" [label=""return $stack1""];\n	""6"" [label=""useHex := @parameter0: boolean""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context)",Method,"* <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once with the data to decode, and once with\n     * inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"" call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-Base32 characters. This is how chunked (for example 76 character) data is handled, since CR and LF are silently ignored, but has implications\n     * for other bytes, too. This method subscribes to the garbage-in, garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Output is written to {@link org.apache.commons.codec.binary.BaseNCodec.Context#buffer Context#buffer} as 8-bit octets, using\n     * {@link org.apache.commons.codec.binary.BaseNCodec.Context#pos Context#pos} as the buffer position\n     * </p>\n     *\n     * @param input   byte[] array of ASCII data to Base32 decode.\n     * @param inPos   Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for decoding.\n     * @param context the context to be used","@Override\nvoid decode(final byte[] input, int inPos, final int inAvail, final Context context) {\n    // package protected for access from I/O streams\n    if (context.eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        context.eof = true;\n    }\n    final int decodeSize = this.encodeSize - 1;\n    for (int i = 0; i < inAvail; i++) {\n        final byte b = input[inPos++];\n        if (b == pad) {\n            // We're done.\n            context.eof = true;\n            break;\n        }\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        if (b >= 0 && b < this.decodeTable.length) {\n            final int result = this.decodeTable[b];\n            if (result >= 0) {\n                context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;\n                // collect decoded bytes\n                context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n                if (context.modulus == 0) {\n                    // we can output the 5 bytes\n                    buffer[context.pos++] = (byte) (context.lbitWorkArea >> 32 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.lbitWorkArea >> 24 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.lbitWorkArea >> 16 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.lbitWorkArea >> 8 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                }\n            }\n        }\n    }\n    // Two forms of EOF as far as Base32 decoder is concerned: actual\n    // EOF (-1) and first time '=' character is encountered in stream.\n    // This approach makes the '=' padding characters completely optional.\n    if (context.eof && context.modulus > 0) {\n        // if modulus == 0, nothing to do\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        // We ignore partial bytes, i.e. only multiples of 8 count.\n        // Any combination not part of a valid encoding is either partially decoded\n        // or will raise an exception. Possible trailing characters are 2, 4, 5, 7.\n        // It is not possible to encode with 1, 3, 6 trailing characters.\n        // For backwards compatibility 3 & 6 chars are decoded anyway rather than discarded.\n        // See the encode(byte[]) method EOF section.\n        switch(context.modulus) {\n            //              case 0 : // impossible, as excluded above\n            case // 5 bits - either ignore entirely, or raise an exception\n            1:\n                validateTrailingCharacters();\n            // falls-through\n            case // 10 bits, drop 2 and output one byte\n            2:\n                validateCharacter(MASK_2BITS, context);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 2 & MASK_8BITS);\n                break;\n            case // 15 bits, drop 7 and output 1 byte, or raise an exception\n            3:\n                validateTrailingCharacters();\n                // Not possible from a valid encoding but decode anyway\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 7 & MASK_8BITS);\n                break;\n            case // 20 bits = 2*8 + 4\n            4:\n                validateCharacter(MASK_4BITS, context);\n                // drop 4 bits\n                context.lbitWorkArea = context.lbitWorkArea >> 4;\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 8 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                break;\n            case // 25 bits = 3*8 + 1\n            5:\n                validateCharacter(MASK_1BITS, context);\n                context.lbitWorkArea = context.lbitWorkArea >> 1;\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 16 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 8 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                break;\n            case // 30 bits = 3*8 + 6, or raise an exception\n            6:\n                validateTrailingCharacters();\n                // Not possible from a valid encoding but decode anyway\n                context.lbitWorkArea = context.lbitWorkArea >> 6;\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 16 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 8 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                break;\n            case // 35 bits = 4*8 +3\n            7:\n                validateCharacter(MASK_3BITS, context);\n                context.lbitWorkArea = context.lbitWorkArea >> 3;\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 24 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 16 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea >> 8 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                break;\n            default:\n                // modulus can be 0-7, and we excluded 0,1 already\n                throw new IllegalStateException(""Impossible modulus "" + context.modulus);\n        }\n    }\n}","void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_decode {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""2"" [label=""$stack100 = $stack99 & 255L""];\n	""3"" [label=""$stack101 = (int) $stack100""];\n	""4"" [label=""$stack102 = (byte) $stack101""];\n	""5"" [label=""$stack103 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""6"" [label=""$stack104 = $stack103 + 1""];\n	""7"" [label=""$stack105 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""8"" [label=""$stack106 = $stack105 >> 7""];\n	""9"" [label=""$stack107 = $stack106 & 255L""];\n	""10"" [label=""$stack108 = (int) $stack107""];\n	""11"" [label=""$stack109 = (byte) $stack108""];\n	""12"" [label=""$stack11 = this.<org.apache.commons.codec.binary.Base32: int encodeSize>""];\n	""13"" [label=""$stack110 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""14"" [label=""$stack111 = $stack110 + 1""];\n	""15"" [label=""$stack112 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""16"" [label=""$stack113 = $stack112 >> 2""];\n	""17"" [label=""$stack114 = $stack113 & 255L""];\n	""18"" [label=""$stack115 = (int) $stack114""];\n	""19"" [label=""$stack116 = (byte) $stack115""];\n	""20"" [label=""$stack117 = new java.lang.StringBuilder""];\n	""21"" [label=""$stack118 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""22"" [label=""$stack119 = virtualinvoke $stack117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Impossible modulus \"")""];\n	""23"" [label=""$stack12 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""24"" [label=""$stack120 = virtualinvoke $stack119.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack118)""];\n	""25"" [label=""$stack121 = virtualinvoke $stack120.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""26"" [label=""$stack122 = new java.lang.IllegalStateException""];\n	""27"" [label=""$stack123 = inPos""];\n	""28"" [label=""$stack124 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""29"" [label=""$stack125 = this.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>""];\n	""30"" [label=""$stack126 = lengthof $stack125""];\n	""31"" [label=""$stack127 = this.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>""];\n	""32"" [label=""$stack128 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""33"" [label=""$stack129 = $stack128 + 1""];\n	""34"" [label=""$stack13 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""35"" [label=""$stack130 = $stack129 % 8""];\n	""36"" [label=""$stack131 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""37"" [label=""$stack132 = $stack131 << 5""];\n	""38"" [label=""$stack133 = (long) result""];\n	""39"" [label=""$stack134 = $stack132 + $stack133""];\n	""40"" [label=""$stack135 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""41"" [label=""$stack136 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""42"" [label=""$stack137 = $stack136 + 1""];\n	""43"" [label=""$stack138 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""44"" [label=""$stack139 = $stack138 >> 32""];\n	""45"" [label=""$stack14 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""46"" [label=""$stack140 = $stack139 & 255L""];\n	""47"" [label=""$stack141 = (int) $stack140""];\n	""48"" [label=""$stack142 = (byte) $stack141""];\n	""49"" [label=""$stack143 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""50"" [label=""$stack144 = $stack143 + 1""];\n	""51"" [label=""$stack145 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""52"" [label=""$stack146 = $stack145 >> 24""];\n	""53"" [label=""$stack147 = $stack146 & 255L""];\n	""54"" [label=""$stack148 = (int) $stack147""];\n	""55"" [label=""$stack149 = (byte) $stack148""];\n	""56"" [label=""$stack15 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""57"" [label=""$stack150 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""58"" [label=""$stack151 = $stack150 + 1""];\n	""59"" [label=""$stack152 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""60"" [label=""$stack153 = $stack152 >> 16""];\n	""61"" [label=""$stack154 = $stack153 & 255L""];\n	""62"" [label=""$stack155 = (int) $stack154""];\n	""63"" [label=""$stack156 = (byte) $stack155""];\n	""64"" [label=""$stack157 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""65"" [label=""$stack158 = $stack157 + 1""];\n	""66"" [label=""$stack159 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""67"" [label=""$stack16 = $stack15 >> 3""];\n	""68"" [label=""$stack160 = $stack159 >> 8""];\n	""69"" [label=""$stack161 = $stack160 & 255L""];\n	""70"" [label=""$stack162 = (int) $stack161""];\n	""71"" [label=""$stack163 = (byte) $stack162""];\n	""72"" [label=""$stack164 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""73"" [label=""$stack165 = $stack164 + 1""];\n	""74"" [label=""$stack166 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""75"" [label=""$stack167 = $stack166 & 255L""];\n	""76"" [label=""$stack168 = (int) $stack167""];\n	""77"" [label=""$stack169 = (byte) $stack168""];\n	""78"" [label=""$stack17 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""79"" [label=""$stack18 = $stack17 + 1""];\n	""80"" [label=""$stack19 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""81"" [label=""$stack20 = $stack19 >> 24""];\n	""82"" [label=""$stack21 = $stack20 & 255L""];\n	""83"" [label=""$stack22 = (int) $stack21""];\n	""84"" [label=""$stack23 = (byte) $stack22""];\n	""85"" [label=""$stack24 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""86"" [label=""$stack25 = $stack24 + 1""];\n	""87"" [label=""$stack26 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""88"" [label=""$stack27 = $stack26 >> 16""];\n	""89"" [label=""$stack28 = $stack27 & 255L""];\n	""90"" [label=""$stack29 = (int) $stack28""];\n	""91"" [label=""$stack30 = (byte) $stack29""];\n	""92"" [label=""$stack31 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""93"" [label=""$stack32 = $stack31 + 1""];\n	""94"" [label=""$stack33 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""95"" [label=""$stack34 = $stack33 >> 8""];\n	""96"" [label=""$stack35 = $stack34 & 255L""];\n	""97"" [label=""$stack36 = (int) $stack35""];\n	""98"" [label=""$stack37 = (byte) $stack36""];\n	""99"" [label=""$stack38 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""100"" [label=""$stack39 = $stack38 + 1""];\n	""101"" [label=""$stack40 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""102"" [label=""$stack41 = $stack40 & 255L""];\n	""103"" [label=""$stack42 = (int) $stack41""];\n	""104"" [label=""$stack43 = (byte) $stack42""];\n	""105"" [label=""$stack44 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""106"" [label=""$stack45 = $stack44 >> 6""];\n	""107"" [label=""$stack46 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""108"" [label=""$stack47 = $stack46 + 1""];\n	""109"" [label=""$stack48 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""110"" [label=""$stack49 = $stack48 >> 16""];\n	""111"" [label=""$stack50 = $stack49 & 255L""];\n	""112"" [label=""$stack51 = (int) $stack50""];\n	""113"" [label=""$stack52 = (byte) $stack51""];\n	""114"" [label=""$stack53 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""115"" [label=""$stack54 = $stack53 + 1""];\n	""116"" [label=""$stack55 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""117"" [label=""$stack56 = $stack55 >> 8""];\n	""118"" [label=""$stack57 = $stack56 & 255L""];\n	""119"" [label=""$stack58 = (int) $stack57""];\n	""120"" [label=""$stack59 = (byte) $stack58""];\n	""121"" [label=""$stack60 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""122"" [label=""$stack61 = $stack60 + 1""];\n	""123"" [label=""$stack62 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""124"" [label=""$stack63 = $stack62 & 255L""];\n	""125"" [label=""$stack64 = (int) $stack63""];\n	""126"" [label=""$stack65 = (byte) $stack64""];\n	""127"" [label=""$stack66 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""128"" [label=""$stack67 = $stack66 >> 1""];\n	""129"" [label=""$stack68 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""130"" [label=""$stack69 = $stack68 + 1""];\n	""131"" [label=""$stack70 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""132"" [label=""$stack71 = $stack70 >> 16""];\n	""133"" [label=""$stack72 = $stack71 & 255L""];\n	""134"" [label=""$stack73 = (int) $stack72""];\n	""135"" [label=""$stack74 = (byte) $stack73""];\n	""136"" [label=""$stack75 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""137"" [label=""$stack76 = $stack75 + 1""];\n	""138"" [label=""$stack77 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""139"" [label=""$stack78 = $stack77 >> 8""];\n	""140"" [label=""$stack79 = $stack78 & 255L""];\n	""141"" [label=""$stack80 = (int) $stack79""];\n	""142"" [label=""$stack81 = (byte) $stack80""];\n	""143"" [label=""$stack82 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""144"" [label=""$stack83 = $stack82 + 1""];\n	""145"" [label=""$stack84 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""146"" [label=""$stack85 = $stack84 & 255L""];\n	""147"" [label=""$stack86 = (int) $stack85""];\n	""148"" [label=""$stack87 = (byte) $stack86""];\n	""149"" [label=""$stack88 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""150"" [label=""$stack89 = $stack88 >> 4""];\n	""151"" [label=""$stack90 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""152"" [label=""$stack91 = $stack90 + 1""];\n	""153"" [label=""$stack92 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""154"" [label=""$stack93 = $stack92 >> 8""];\n	""155"" [label=""$stack94 = $stack93 & 255L""];\n	""156"" [label=""$stack95 = (int) $stack94""];\n	""157"" [label=""$stack96 = (byte) $stack95""];\n	""158"" [label=""$stack97 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""159"" [label=""$stack98 = $stack97 + 1""];\n	""160"" [label=""$stack99 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""161"" [label=""b = input[$stack123]""];\n	""162"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(decodeSize, context)""];\n	""163"" [label=""buffer[$stack136] = $stack142""];\n	""164"" [label=""buffer[$stack143] = $stack149""];\n	""165"" [label=""buffer[$stack150] = $stack156""];\n	""166"" [label=""buffer[$stack157] = $stack163""];\n	""167"" [label=""buffer[$stack164] = $stack169""];\n	""168"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""169"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""170"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""171"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = $stack130""];\n	""172"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack104""];\n	""173"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack111""];\n	""174"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack137""];\n	""175"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack144""];\n	""176"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack151""];\n	""177"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack158""];\n	""178"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack165""];\n	""179"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack18""];\n	""180"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack25""];\n	""181"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack32""];\n	""182"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack39""];\n	""183"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack47""];\n	""184"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack54""];\n	""185"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack61""];\n	""186"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack69""];\n	""187"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack76""];\n	""188"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack83""];\n	""189"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack91""];\n	""190"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack98""];\n	""191"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack134""];\n	""192"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack16""];\n	""193"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack45""];\n	""194"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack67""];\n	""195"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack89""];\n	""196"" [label=""decodeSize = $stack11 - 1""];\n	""197"" [label=""goto""];\n	""198"" [label=""goto""];\n	""199"" [label=""goto""];\n	""200"" [label=""goto""];\n	""201"" [label=""goto""];\n	""202"" [label=""goto""];\n	""203"" [label=""goto""];\n	""204"" [label=""goto""];\n	""205"" [label=""i = 0""];\n	""206"" [label=""i = i + 1""];\n	""207"" [label=""i = virtualinvoke this.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(decodeSize, context)""];\n	""208"" [label=""i[$stack103] = $stack109""];\n	""209"" [label=""i[$stack110] = $stack116""];\n	""210"" [label=""i[$stack17] = $stack23""];\n	""211"" [label=""i[$stack24] = $stack30""];\n	""212"" [label=""i[$stack31] = $stack37""];\n	""213"" [label=""i[$stack38] = $stack43""];\n	""214"" [label=""i[$stack46] = $stack52""];\n	""215"" [label=""i[$stack53] = $stack59""];\n	""216"" [label=""i[$stack60] = $stack65""];\n	""217"" [label=""i[$stack68] = $stack74""];\n	""218"" [label=""i[$stack75] = $stack81""];\n	""219"" [label=""i[$stack82] = $stack87""];\n	""220"" [label=""i[$stack90] = $stack96""];\n	""221"" [label=""i[$stack97] = $stack102""];\n	""222"" [label=""if $stack10 == 0""];\n	""223"" [label=""if $stack12 == 0""];\n	""224"" [label=""if $stack13 <= 0""];\n	""225"" [label=""if $stack135 != 0""];\n	""226"" [label=""if b != $stack124""];\n	""227"" [label=""if b < 0""];\n	""228"" [label=""if b >= $stack126""];\n	""229"" [label=""if i >= inAvail""];\n	""230"" [label=""if inAvail >= 0""];\n	""231"" [label=""if result < 0""];\n	""232"" [label=""inAvail := @parameter2: int""];\n	""233"" [label=""inPos := @parameter1: int""];\n	""234"" [label=""inPos = inPos + 1""];\n	""235"" [label=""input := @parameter0: byte[]""];\n	""236"" [label=""result = $stack127[b]""];\n	""237"" [label=""return""];\n	""238"" [label=""return""];\n	""239"" [label=""specialinvoke $stack117.<java.lang.StringBuilder: void <init>()>()""];\n	""240"" [label=""specialinvoke $stack122.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack121)""];\n	""241"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateCharacter(long,org.apache.commons.codec.binary.BaseNCodec$Context)>(15L, context)""];\n	""242"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateCharacter(long,org.apache.commons.codec.binary.BaseNCodec$Context)>(1L, context)""];\n	""243"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateCharacter(long,org.apache.commons.codec.binary.BaseNCodec$Context)>(3L, context)""];\n	""244"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateCharacter(long,org.apache.commons.codec.binary.BaseNCodec$Context)>(7L, context)""];\n	""245"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateTrailingCharacters()>()""];\n	""246"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateTrailingCharacters()>()""];\n	""247"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void validateTrailingCharacters()>()""];\n	""248"" [label=""switch($stack14) \{     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     default:  \}""];\n	""249"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""250"" [label=""throw $stack122""];\n	""1"" -> ""222""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""182""[label=""cfg_next""];\n	""101"" -> ""102""[label=""cfg_next""];\n	""102"" -> ""103""[label=""cfg_next""];\n	""103"" -> ""104""[label=""cfg_next""];\n	""104"" -> ""213""[label=""cfg_next""];\n	""105"" -> ""106""[label=""cfg_next""];\n	""106"" -> ""193""[label=""cfg_next""];\n	""107"" -> ""108""[label=""cfg_next""];\n	""108"" -> ""183""[label=""cfg_next""];\n	""109"" -> ""110""[label=""cfg_next""];\n	""11"" -> ""208""[label=""cfg_next""];\n	""110"" -> ""111""[label=""cfg_next""];\n	""111"" -> ""112""[label=""cfg_next""];\n	""112"" -> ""113""[label=""cfg_next""];\n	""113"" -> ""214""[label=""cfg_next""];\n	""114"" -> ""115""[label=""cfg_next""];\n	""115"" -> ""184""[label=""cfg_next""];\n	""116"" -> ""117""[label=""cfg_next""];\n	""117"" -> ""118""[label=""cfg_next""];\n	""118"" -> ""119""[label=""cfg_next""];\n	""119"" -> ""120""[label=""cfg_next""];\n	""12"" -> ""196""[label=""cfg_next""];\n	""120"" -> ""215""[label=""cfg_next""];\n	""121"" -> ""122""[label=""cfg_next""];\n	""122"" -> ""185""[label=""cfg_next""];\n	""123"" -> ""124""[label=""cfg_next""];\n	""124"" -> ""125""[label=""cfg_next""];\n	""125"" -> ""126""[label=""cfg_next""];\n	""126"" -> ""216""[label=""cfg_next""];\n	""127"" -> ""128""[label=""cfg_next""];\n	""128"" -> ""194""[label=""cfg_next""];\n	""129"" -> ""130""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""130"" -> ""186""[label=""cfg_next""];\n	""131"" -> ""132""[label=""cfg_next""];\n	""132"" -> ""133""[label=""cfg_next""];\n	""133"" -> ""134""[label=""cfg_next""];\n	""134"" -> ""135""[label=""cfg_next""];\n	""135"" -> ""217""[label=""cfg_next""];\n	""136"" -> ""137""[label=""cfg_next""];\n	""137"" -> ""187""[label=""cfg_next""];\n	""138"" -> ""139""[label=""cfg_next""];\n	""139"" -> ""140""[label=""cfg_next""];\n	""14"" -> ""173""[label=""cfg_next""];\n	""140"" -> ""141""[label=""cfg_next""];\n	""141"" -> ""142""[label=""cfg_next""];\n	""142"" -> ""218""[label=""cfg_next""];\n	""143"" -> ""144""[label=""cfg_next""];\n	""144"" -> ""188""[label=""cfg_next""];\n	""145"" -> ""146""[label=""cfg_next""];\n	""146"" -> ""147""[label=""cfg_next""];\n	""147"" -> ""148""[label=""cfg_next""];\n	""148"" -> ""219""[label=""cfg_next""];\n	""149"" -> ""150""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""150"" -> ""195""[label=""cfg_next""];\n	""151"" -> ""152""[label=""cfg_next""];\n	""152"" -> ""189""[label=""cfg_next""];\n	""153"" -> ""154""[label=""cfg_next""];\n	""154"" -> ""155""[label=""cfg_next""];\n	""155"" -> ""156""[label=""cfg_next""];\n	""156"" -> ""157""[label=""cfg_next""];\n	""157"" -> ""220""[label=""cfg_next""];\n	""158"" -> ""159""[label=""cfg_next""];\n	""159"" -> ""190""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""160"" -> ""2""[label=""cfg_next""];\n	""161"" -> ""28""[label=""cfg_next""];\n	""162"" -> ""227""[label=""cfg_next""];\n	""163"" -> ""49""[label=""cfg_next""];\n	""164"" -> ""57""[label=""cfg_next""];\n	""165"" -> ""64""[label=""cfg_next""];\n	""166"" -> ""72""[label=""cfg_next""];\n	""167"" -> ""206""[label=""cfg_next""];\n	""168"" -> ""1""[label=""cfg_next""];\n	""169"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""170"" -> ""197""[label=""cfg_next""];\n	""171"" -> ""36""[label=""cfg_next""];\n	""172"" -> ""7""[label=""cfg_next""];\n	""173"" -> ""15""[label=""cfg_next""];\n	""174"" -> ""43""[label=""cfg_next""];\n	""175"" -> ""51""[label=""cfg_next""];\n	""176"" -> ""59""[label=""cfg_next""];\n	""177"" -> ""66""[label=""cfg_next""];\n	""178"" -> ""74""[label=""cfg_next""];\n	""179"" -> ""80""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""180"" -> ""87""[label=""cfg_next""];\n	""181"" -> ""94""[label=""cfg_next""];\n	""182"" -> ""101""[label=""cfg_next""];\n	""183"" -> ""109""[label=""cfg_next""];\n	""184"" -> ""116""[label=""cfg_next""];\n	""185"" -> ""123""[label=""cfg_next""];\n	""186"" -> ""131""[label=""cfg_next""];\n	""187"" -> ""138""[label=""cfg_next""];\n	""188"" -> ""145""[label=""cfg_next""];\n	""189"" -> ""153""[label=""cfg_next""];\n	""19"" -> ""209""[label=""cfg_next""];\n	""190"" -> ""160""[label=""cfg_next""];\n	""191"" -> ""40""[label=""cfg_next""];\n	""192"" -> ""78""[label=""cfg_next""];\n	""193"" -> ""107""[label=""cfg_next""];\n	""194"" -> ""129""[label=""cfg_next""];\n	""195"" -> ""151""[label=""cfg_next""];\n	""196"" -> ""205""[label=""cfg_next""];\n	""197"" -> ""23""[label=""cfg_goto""];\n	""198"" -> ""229""[label=""cfg_goto""];\n	""199"" -> ""238""[label=""cfg_goto""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""239""[label=""cfg_next""];\n	""200"" -> ""238""[label=""cfg_goto""];\n	""201"" -> ""238""[label=""cfg_goto""];\n	""202"" -> ""238""[label=""cfg_goto""];\n	""203"" -> ""238""[label=""cfg_goto""];\n	""204"" -> ""238""[label=""cfg_goto""];\n	""205"" -> ""229""[label=""cfg_next""];\n	""206"" -> ""198""[label=""cfg_next""];\n	""207"" -> ""45""[label=""cfg_next""];\n	""208"" -> ""200""[label=""cfg_next""];\n	""209"" -> ""199""[label=""cfg_next""];\n	""21"" -> ""24""[label=""cfg_next""];\n	""210"" -> ""85""[label=""cfg_next""];\n	""211"" -> ""92""[label=""cfg_next""];\n	""212"" -> ""99""[label=""cfg_next""];\n	""213"" -> ""204""[label=""cfg_next""];\n	""214"" -> ""114""[label=""cfg_next""];\n	""215"" -> ""121""[label=""cfg_next""];\n	""216"" -> ""203""[label=""cfg_next""];\n	""217"" -> ""136""[label=""cfg_next""];\n	""218"" -> ""143""[label=""cfg_next""];\n	""219"" -> ""202""[label=""cfg_next""];\n	""22"" -> ""21""[label=""cfg_next""];\n	""220"" -> ""158""[label=""cfg_next""];\n	""221"" -> ""201""[label=""cfg_next""];\n	""222"" -> ""230""[label=""cfg_true""];\n	""222"" -> ""237""[label=""cfg_false""];\n	""223"" -> ""238""[label=""cfg_true""];\n	""223"" -> ""34""[label=""cfg_false""];\n	""224"" -> ""207""[label=""cfg_false""];\n	""224"" -> ""238""[label=""cfg_true""];\n	""225"" -> ""206""[label=""cfg_true""];\n	""225"" -> ""41""[label=""cfg_false""];\n	""226"" -> ""162""[label=""cfg_true""];\n	""226"" -> ""170""[label=""cfg_false""];\n	""227"" -> ""206""[label=""cfg_true""];\n	""227"" -> ""29""[label=""cfg_false""];\n	""228"" -> ""206""[label=""cfg_true""];\n	""228"" -> ""31""[label=""cfg_false""];\n	""229"" -> ""23""[label=""cfg_true""];\n	""229"" -> ""27""[label=""cfg_false""];\n	""23"" -> ""223""[label=""cfg_next""];\n	""230"" -> ""12""[label=""cfg_true""];\n	""230"" -> ""169""[label=""cfg_false""];\n	""231"" -> ""206""[label=""cfg_true""];\n	""231"" -> ""32""[label=""cfg_false""];\n	""232"" -> ""168""[label=""cfg_next""];\n	""233"" -> ""232""[label=""cfg_next""];\n	""234"" -> ""161""[label=""cfg_next""];\n	""235"" -> ""233""[label=""cfg_next""];\n	""236"" -> ""231""[label=""cfg_next""];\n	""239"" -> ""22""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""240"" -> ""250""[label=""cfg_next""];\n	""241"" -> ""149""[label=""cfg_next""];\n	""242"" -> ""127""[label=""cfg_next""];\n	""243"" -> ""13""[label=""cfg_next""];\n	""244"" -> ""56""[label=""cfg_next""];\n	""245"" -> ""243""[label=""cfg_next""];\n	""246"" -> ""5""[label=""cfg_next""];\n	""247"" -> ""105""[label=""cfg_next""];\n	""248"" -> ""241""[label=""cfg_switch""];\n	""248"" -> ""242""[label=""cfg_switch""];\n	""248"" -> ""243""[label=""cfg_switch""];\n	""248"" -> ""244""[label=""cfg_switch""];\n	""248"" -> ""245""[label=""cfg_switch""];\n	""248"" -> ""246""[label=""cfg_switch""];\n	""248"" -> ""247""[label=""cfg_switch""];\n	""248"" -> ""26""[label=""cfg_switch""];\n	""249"" -> ""235""[label=""cfg_next""];\n	""25"" -> ""240""[label=""cfg_next""];\n	""26"" -> ""20""[label=""cfg_next""];\n	""27"" -> ""234""[label=""cfg_next""];\n	""28"" -> ""226""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""228""[label=""cfg_next""];\n	""31"" -> ""236""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""33"" -> ""35""[label=""cfg_next""];\n	""34"" -> ""224""[label=""cfg_next""];\n	""35"" -> ""171""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""191""[label=""cfg_next""];\n	""4"" -> ""221""[label=""cfg_next""];\n	""40"" -> ""225""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""174""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""46""[label=""cfg_next""];\n	""45"" -> ""248""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""48""[label=""cfg_next""];\n	""48"" -> ""163""[label=""cfg_next""];\n	""49"" -> ""50""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""175""[label=""cfg_next""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""164""[label=""cfg_next""];\n	""56"" -> ""67""[label=""cfg_next""];\n	""57"" -> ""58""[label=""cfg_next""];\n	""58"" -> ""176""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""172""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""62""[label=""cfg_next""];\n	""62"" -> ""63""[label=""cfg_next""];\n	""63"" -> ""165""[label=""cfg_next""];\n	""64"" -> ""65""[label=""cfg_next""];\n	""65"" -> ""177""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""192""[label=""cfg_next""];\n	""68"" -> ""69""[label=""cfg_next""];\n	""69"" -> ""70""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""70"" -> ""71""[label=""cfg_next""];\n	""71"" -> ""166""[label=""cfg_next""];\n	""72"" -> ""73""[label=""cfg_next""];\n	""73"" -> ""178""[label=""cfg_next""];\n	""74"" -> ""75""[label=""cfg_next""];\n	""75"" -> ""76""[label=""cfg_next""];\n	""76"" -> ""77""[label=""cfg_next""];\n	""77"" -> ""167""[label=""cfg_next""];\n	""78"" -> ""79""[label=""cfg_next""];\n	""79"" -> ""179""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""81""[label=""cfg_next""];\n	""81"" -> ""82""[label=""cfg_next""];\n	""82"" -> ""83""[label=""cfg_next""];\n	""83"" -> ""84""[label=""cfg_next""];\n	""84"" -> ""210""[label=""cfg_next""];\n	""85"" -> ""86""[label=""cfg_next""];\n	""86"" -> ""180""[label=""cfg_next""];\n	""87"" -> ""88""[label=""cfg_next""];\n	""88"" -> ""89""[label=""cfg_next""];\n	""89"" -> ""90""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n	""90"" -> ""91""[label=""cfg_next""];\n	""91"" -> ""211""[label=""cfg_next""];\n	""92"" -> ""93""[label=""cfg_next""];\n	""93"" -> ""181""[label=""cfg_next""];\n	""94"" -> ""95""[label=""cfg_next""];\n	""95"" -> ""96""[label=""cfg_next""];\n	""96"" -> ""97""[label=""cfg_next""];\n	""97"" -> ""98""[label=""cfg_next""];\n	""98"" -> ""212""[label=""cfg_next""];\n	""99"" -> ""100""[label=""cfg_next""];\n}\n",default
"org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context)",Method,"* <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with the data to encode, and once with\n     * inAvail set to ""-1"" to alert encoder that EOF has been reached, so flush last remaining bytes (if not multiple of 5).\n     * </p>\n     *\n     * @param input   byte[] array of binary data to Base32 encode.\n     * @param inPos   Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     * @param context the context to be used","@Override\nvoid encode(final byte[] input, int inPos, final int inAvail, final Context context) {\n    // package protected for access from I/O streams\n    if (context.eof) {\n        return;\n    }\n    // inAvail < 0 is how we're informed of EOF in the underlying data we're\n    // encoding.\n    if (inAvail < 0) {\n        context.eof = true;\n        if (0 == context.modulus && lineLength == 0) {\n            // no leftovers to process and not using chunking\n            return;\n        }\n        final byte[] buffer = ensureBufferSize(encodeSize, context);\n        final int savedPos = context.pos;\n        switch(// % 5\n        context.modulus) {\n            case 0:\n                break;\n            case // Only 1 octet; take top 5 bits then remainder\n            1:\n                // 8-1*5 = 3\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 3) & MASK_5BITS];\n                // 5-3=2\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 2) & MASK_5BITS];\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                break;\n            case // 2 octets = 16 bits to use\n            2:\n                // 16-1*5 = 11\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 11) & MASK_5BITS];\n                // 16-2*5 = 6\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 6) & MASK_5BITS];\n                // 16-3*5 = 1\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 1) & MASK_5BITS];\n                // 5-1 = 4\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 4) & MASK_5BITS];\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                break;\n            case // 3 octets = 24 bits to use\n            3:\n                // 24-1*5 = 19\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 19) & MASK_5BITS];\n                // 24-2*5 = 14\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 14) & MASK_5BITS];\n                // 24-3*5 = 9\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 9) & MASK_5BITS];\n                // 24-4*5 = 4\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 4) & MASK_5BITS];\n                // 5-4 = 1\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 1) & MASK_5BITS];\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                buffer[context.pos++] = pad;\n                break;\n            case // 4 octets = 32 bits to use\n            4:\n                // 32-1*5 = 27\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 27) & MASK_5BITS];\n                // 32-2*5 = 22\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 22) & MASK_5BITS];\n                // 32-3*5 = 17\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 17) & MASK_5BITS];\n                // 32-4*5 = 12\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 12) & MASK_5BITS];\n                // 32-5*5 = 7\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 7) & MASK_5BITS];\n                // 32-6*5 = 2\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 2) & MASK_5BITS];\n                // 5-2 = 3\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 3) & MASK_5BITS];\n                buffer[context.pos++] = pad;\n                break;\n            default:\n                throw new IllegalStateException(""Impossible modulus "" + context.modulus);\n        }\n        // keep track of current line position\n        context.currentLinePos += context.pos - savedPos;\n        // if currentPos == 0 we are at the start of a line, so don't add CRLF\n        if (lineLength > 0 && context.currentLinePos > 0) {\n            // add chunk separator if required\n            System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n            context.pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            final byte[] buffer = ensureBufferSize(encodeSize, context);\n            context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;\n            int b = input[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            // BITS_PER_BYTE\n            context.lbitWorkArea = (context.lbitWorkArea << 8) + b;\n            if (0 == context.modulus) {\n                // we have enough bytes to create our output\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 35) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 30) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 25) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 20) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 15) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 10) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 5) & MASK_5BITS];\n                buffer[context.pos++] = encodeTable[(int) context.lbitWorkArea & MASK_5BITS];\n                context.currentLinePos += BYTES_PER_ENCODED_BLOCK;\n                if (lineLength > 0 && lineLength <= context.currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                    context.pos += lineSeparator.length;\n                    context.currentLinePos = 0;\n                }\n            }\n        }\n    }\n}","void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_encode {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""2"" [label=""$stack100 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""3"" [label=""$stack101 = $stack100 >> 27""];\n	""4"" [label=""$stack102 = (int) $stack101""];\n	""5"" [label=""$stack103 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""6"" [label=""$stack104 = $stack102 & 31""];\n	""7"" [label=""$stack105 = $stack103[$stack104]""];\n	""8"" [label=""$stack106 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""9"" [label=""$stack107 = $stack106 + 1""];\n	""10"" [label=""$stack108 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""11"" [label=""$stack109 = $stack108 >> 22""];\n	""12"" [label=""$stack11 = $stack10 + 1""];\n	""13"" [label=""$stack110 = (int) $stack109""];\n	""14"" [label=""$stack111 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""15"" [label=""$stack112 = $stack110 & 31""];\n	""16"" [label=""$stack113 = $stack111[$stack112]""];\n	""17"" [label=""$stack114 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""18"" [label=""$stack115 = $stack114 + 1""];\n	""19"" [label=""$stack116 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""20"" [label=""$stack117 = $stack116 >> 17""];\n	""21"" [label=""$stack118 = (int) $stack117""];\n	""22"" [label=""$stack119 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""23"" [label=""$stack12 = $stack11 % 5""];\n	""24"" [label=""$stack120 = $stack118 & 31""];\n	""25"" [label=""$stack121 = $stack119[$stack120]""];\n	""26"" [label=""$stack122 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""27"" [label=""$stack123 = $stack122 + 1""];\n	""28"" [label=""$stack124 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""29"" [label=""$stack125 = $stack124 >> 12""];\n	""30"" [label=""$stack126 = (int) $stack125""];\n	""31"" [label=""$stack127 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""32"" [label=""$stack128 = $stack126 & 31""];\n	""33"" [label=""$stack129 = $stack127[$stack128]""];\n	""34"" [label=""$stack13 = inPos""];\n	""35"" [label=""$stack130 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""36"" [label=""$stack131 = $stack130 + 1""];\n	""37"" [label=""$stack132 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""38"" [label=""$stack133 = $stack132 >> 7""];\n	""39"" [label=""$stack134 = (int) $stack133""];\n	""40"" [label=""$stack135 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""41"" [label=""$stack136 = $stack134 & 31""];\n	""42"" [label=""$stack137 = $stack135[$stack136]""];\n	""43"" [label=""$stack138 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""44"" [label=""$stack139 = $stack138 + 1""];\n	""45"" [label=""$stack14 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""46"" [label=""$stack140 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""47"" [label=""$stack141 = $stack140 >> 2""];\n	""48"" [label=""$stack142 = (int) $stack141""];\n	""49"" [label=""$stack143 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""50"" [label=""$stack144 = $stack142 & 31""];\n	""51"" [label=""$stack145 = $stack143[$stack144]""];\n	""52"" [label=""$stack146 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""53"" [label=""$stack147 = $stack146 + 1""];\n	""54"" [label=""$stack148 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""55"" [label=""$stack149 = $stack148 << 3""];\n	""56"" [label=""$stack15 = $stack14 << 8""];\n	""57"" [label=""$stack150 = (int) $stack149""];\n	""58"" [label=""$stack151 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""59"" [label=""$stack152 = $stack150 & 31""];\n	""60"" [label=""$stack153 = $stack151[$stack152]""];\n	""61"" [label=""$stack154 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""62"" [label=""$stack155 = $stack154 + 1""];\n	""63"" [label=""$stack156 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""64"" [label=""$stack157 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""65"" [label=""$stack158 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""66"" [label=""$stack159 = $stack157 - savedPos""];\n	""67"" [label=""$stack16 = (long) b""];\n	""68"" [label=""$stack160 = $stack158 + $stack159""];\n	""69"" [label=""$stack161 = this.<org.apache.commons.codec.binary.Base32: int lineLength>""];\n	""70"" [label=""$stack162 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""71"" [label=""$stack163 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""72"" [label=""$stack164 = lengthof $stack163""];\n	""73"" [label=""$stack165 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""74"" [label=""$stack166 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""75"" [label=""$stack167 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""76"" [label=""$stack168 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""77"" [label=""$stack169 = lengthof $stack167""];\n	""78"" [label=""$stack17 = $stack15 + $stack16""];\n	""79"" [label=""$stack170 = $stack168 + $stack169""];\n	""80"" [label=""$stack171 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""81"" [label=""$stack172 = $stack171 + 1""];\n	""82"" [label=""$stack173 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""83"" [label=""$stack174 = $stack173 >> 19""];\n	""84"" [label=""$stack175 = (int) $stack174""];\n	""85"" [label=""$stack176 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""86"" [label=""$stack177 = $stack175 & 31""];\n	""87"" [label=""$stack178 = $stack176[$stack177]""];\n	""88"" [label=""$stack179 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""89"" [label=""$stack18 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""90"" [label=""$stack180 = $stack179 + 1""];\n	""91"" [label=""$stack181 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""92"" [label=""$stack182 = $stack181 >> 14""];\n	""93"" [label=""$stack183 = (int) $stack182""];\n	""94"" [label=""$stack184 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""95"" [label=""$stack185 = $stack183 & 31""];\n	""96"" [label=""$stack186 = $stack184[$stack185]""];\n	""97"" [label=""$stack187 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""98"" [label=""$stack188 = $stack187 + 1""];\n	""99"" [label=""$stack189 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""100"" [label=""$stack19 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""101"" [label=""$stack190 = $stack189 >> 9""];\n	""102"" [label=""$stack191 = (int) $stack190""];\n	""103"" [label=""$stack192 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""104"" [label=""$stack193 = $stack191 & 31""];\n	""105"" [label=""$stack194 = $stack192[$stack193]""];\n	""106"" [label=""$stack195 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""107"" [label=""$stack196 = $stack195 + 1""];\n	""108"" [label=""$stack197 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""109"" [label=""$stack198 = $stack197 >> 4""];\n	""110"" [label=""$stack199 = (int) $stack198""];\n	""111"" [label=""$stack20 = $stack19 + 1""];\n	""112"" [label=""$stack200 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""113"" [label=""$stack201 = $stack199 & 31""];\n	""114"" [label=""$stack202 = $stack200[$stack201]""];\n	""115"" [label=""$stack203 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""116"" [label=""$stack204 = $stack203 + 1""];\n	""117"" [label=""$stack205 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""118"" [label=""$stack206 = $stack205 << 1""];\n	""119"" [label=""$stack207 = (int) $stack206""];\n	""120"" [label=""$stack208 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""121"" [label=""$stack209 = $stack207 & 31""];\n	""122"" [label=""$stack21 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""123"" [label=""$stack210 = $stack208[$stack209]""];\n	""124"" [label=""$stack211 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""125"" [label=""$stack212 = $stack211 + 1""];\n	""126"" [label=""$stack213 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""127"" [label=""$stack214 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""128"" [label=""$stack215 = $stack214 + 1""];\n	""129"" [label=""$stack216 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""130"" [label=""$stack217 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""131"" [label=""$stack218 = $stack217 + 1""];\n	""132"" [label=""$stack219 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""133"" [label=""$stack22 = $stack21 >> 35""];\n	""134"" [label=""$stack220 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""135"" [label=""$stack221 = $stack220 + 1""];\n	""136"" [label=""$stack222 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""137"" [label=""$stack223 = $stack222 >> 11""];\n	""138"" [label=""$stack224 = (int) $stack223""];\n	""139"" [label=""$stack225 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""140"" [label=""$stack226 = $stack224 & 31""];\n	""141"" [label=""$stack227 = $stack225[$stack226]""];\n	""142"" [label=""$stack228 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""143"" [label=""$stack229 = $stack228 + 1""];\n	""144"" [label=""$stack23 = (int) $stack22""];\n	""145"" [label=""$stack230 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""146"" [label=""$stack231 = $stack230 >> 6""];\n	""147"" [label=""$stack232 = (int) $stack231""];\n	""148"" [label=""$stack233 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""149"" [label=""$stack234 = $stack232 & 31""];\n	""150"" [label=""$stack235 = $stack233[$stack234]""];\n	""151"" [label=""$stack236 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""152"" [label=""$stack237 = $stack236 + 1""];\n	""153"" [label=""$stack238 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""154"" [label=""$stack239 = $stack238 >> 1""];\n	""155"" [label=""$stack24 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""156"" [label=""$stack240 = (int) $stack239""];\n	""157"" [label=""$stack241 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""158"" [label=""$stack242 = $stack240 & 31""];\n	""159"" [label=""$stack243 = $stack241[$stack242]""];\n	""160"" [label=""$stack244 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""161"" [label=""$stack245 = $stack244 + 1""];\n	""162"" [label=""$stack246 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""163"" [label=""$stack247 = $stack246 << 4""];\n	""164"" [label=""$stack248 = (int) $stack247""];\n	""165"" [label=""$stack249 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""166"" [label=""$stack25 = $stack23 & 31""];\n	""167"" [label=""$stack250 = $stack248 & 31""];\n	""168"" [label=""$stack251 = $stack249[$stack250]""];\n	""169"" [label=""$stack252 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""170"" [label=""$stack253 = $stack252 + 1""];\n	""171"" [label=""$stack254 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""172"" [label=""$stack255 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""173"" [label=""$stack256 = $stack255 + 1""];\n	""174"" [label=""$stack257 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""175"" [label=""$stack258 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""176"" [label=""$stack259 = $stack258 + 1""];\n	""177"" [label=""$stack26 = $stack24[$stack25]""];\n	""178"" [label=""$stack260 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""179"" [label=""$stack261 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""180"" [label=""$stack262 = $stack261 + 1""];\n	""181"" [label=""$stack263 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""182"" [label=""$stack264 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""183"" [label=""$stack265 = $stack264 + 1""];\n	""184"" [label=""$stack266 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""185"" [label=""$stack267 = $stack266 >> 3""];\n	""186"" [label=""$stack268 = (int) $stack267""];\n	""187"" [label=""$stack269 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""188"" [label=""$stack27 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""189"" [label=""$stack270 = $stack268 & 31""];\n	""190"" [label=""$stack271 = $stack269[$stack270]""];\n	""191"" [label=""$stack272 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""192"" [label=""$stack273 = $stack272 + 1""];\n	""193"" [label=""$stack274 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""194"" [label=""$stack275 = $stack274 << 2""];\n	""195"" [label=""$stack276 = (int) $stack275""];\n	""196"" [label=""$stack277 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""197"" [label=""$stack278 = $stack276 & 31""];\n	""198"" [label=""$stack279 = $stack277[$stack278]""];\n	""199"" [label=""$stack28 = $stack27 + 1""];\n	""200"" [label=""$stack280 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""201"" [label=""$stack281 = $stack280 + 1""];\n	""202"" [label=""$stack282 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""203"" [label=""$stack283 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""204"" [label=""$stack284 = $stack283 + 1""];\n	""205"" [label=""$stack285 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""206"" [label=""$stack286 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""207"" [label=""$stack287 = $stack286 + 1""];\n	""208"" [label=""$stack288 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""209"" [label=""$stack289 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""210"" [label=""$stack29 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""211"" [label=""$stack290 = $stack289 + 1""];\n	""212"" [label=""$stack291 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""213"" [label=""$stack292 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""214"" [label=""$stack293 = $stack292 + 1""];\n	""215"" [label=""$stack294 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""216"" [label=""$stack295 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""217"" [label=""$stack296 = $stack295 + 1""];\n	""218"" [label=""$stack297 = this.<org.apache.commons.codec.binary.Base32: byte pad>""];\n	""219"" [label=""$stack298 = new java.lang.StringBuilder""];\n	""220"" [label=""$stack299 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""221"" [label=""$stack30 = $stack29 >> 30""];\n	""222"" [label=""$stack300 = virtualinvoke $stack298.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Impossible modulus \"")""];\n	""223"" [label=""$stack301 = virtualinvoke $stack300.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack299)""];\n	""224"" [label=""$stack302 = virtualinvoke $stack301.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""225"" [label=""$stack303 = new java.lang.IllegalStateException""];\n	""226"" [label=""$stack304 = this.<org.apache.commons.codec.binary.Base32: int lineLength>""];\n	""227"" [label=""$stack31 = (int) $stack30""];\n	""228"" [label=""$stack32 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""229"" [label=""$stack33 = $stack31 & 31""];\n	""230"" [label=""$stack34 = $stack32[$stack33]""];\n	""231"" [label=""$stack35 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""232"" [label=""$stack36 = $stack35 + 1""];\n	""233"" [label=""$stack37 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""234"" [label=""$stack38 = $stack37 >> 25""];\n	""235"" [label=""$stack39 = (int) $stack38""];\n	""236"" [label=""$stack40 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""237"" [label=""$stack41 = $stack39 & 31""];\n	""238"" [label=""$stack42 = $stack40[$stack41]""];\n	""239"" [label=""$stack43 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""240"" [label=""$stack44 = $stack43 + 1""];\n	""241"" [label=""$stack45 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""242"" [label=""$stack46 = $stack45 >> 20""];\n	""243"" [label=""$stack47 = (int) $stack46""];\n	""244"" [label=""$stack48 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""245"" [label=""$stack49 = $stack47 & 31""];\n	""246"" [label=""$stack50 = $stack48[$stack49]""];\n	""247"" [label=""$stack51 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""248"" [label=""$stack52 = $stack51 + 1""];\n	""249"" [label=""$stack53 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""250"" [label=""$stack54 = $stack53 >> 15""];\n	""251"" [label=""$stack55 = (int) $stack54""];\n	""252"" [label=""$stack56 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""253"" [label=""$stack57 = $stack55 & 31""];\n	""254"" [label=""$stack58 = $stack56[$stack57]""];\n	""255"" [label=""$stack59 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""256"" [label=""$stack60 = $stack59 + 1""];\n	""257"" [label=""$stack61 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""258"" [label=""$stack62 = $stack61 >> 10""];\n	""259"" [label=""$stack63 = (int) $stack62""];\n	""260"" [label=""$stack64 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""261"" [label=""$stack65 = $stack63 & 31""];\n	""262"" [label=""$stack66 = $stack64[$stack65]""];\n	""263"" [label=""$stack67 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""264"" [label=""$stack68 = $stack67 + 1""];\n	""265"" [label=""$stack69 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""266"" [label=""$stack70 = $stack69 >> 5""];\n	""267"" [label=""$stack71 = (int) $stack70""];\n	""268"" [label=""$stack72 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""269"" [label=""$stack73 = $stack71 & 31""];\n	""270"" [label=""$stack74 = $stack72[$stack73]""];\n	""271"" [label=""$stack75 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""272"" [label=""$stack76 = $stack75 + 1""];\n	""273"" [label=""$stack77 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""274"" [label=""$stack78 = (int) $stack77""];\n	""275"" [label=""$stack79 = this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>""];\n	""276"" [label=""$stack8 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""277"" [label=""$stack80 = $stack78 & 31""];\n	""278"" [label=""$stack81 = $stack79[$stack80]""];\n	""279"" [label=""$stack82 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""280"" [label=""$stack83 = $stack82 + 8""];\n	""281"" [label=""$stack84 = this.<org.apache.commons.codec.binary.Base32: int lineLength>""];\n	""282"" [label=""$stack85 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""283"" [label=""$stack86 = this.<org.apache.commons.codec.binary.Base32: int lineLength>""];\n	""284"" [label=""$stack87 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""285"" [label=""$stack88 = lengthof $stack87""];\n	""286"" [label=""$stack89 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""287"" [label=""$stack9 = this.<org.apache.commons.codec.binary.Base32: int encodeSize>""];\n	""288"" [label=""$stack90 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""289"" [label=""$stack91 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""290"" [label=""$stack92 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""291"" [label=""$stack93 = lengthof $stack91""];\n	""292"" [label=""$stack94 = $stack92 + $stack93""];\n	""293"" [label=""$stack95 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""294"" [label=""$stack96 = this.<org.apache.commons.codec.binary.Base32: int encodeSize>""];\n	""295"" [label=""$stack97 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""296"" [label=""$stack98 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""297"" [label=""$stack99 = $stack98 + 1""];\n	""298"" [label=""b = b + 256""];\n	""299"" [label=""b = input[$stack13]""];\n	""300"" [label=""buffer = 0""];\n	""301"" [label=""buffer = buffer + 1""];\n	""302"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack96, context)""];\n	""303"" [label=""buffer[$stack106] = $stack113""];\n	""304"" [label=""buffer[$stack114] = $stack121""];\n	""305"" [label=""buffer[$stack122] = $stack129""];\n	""306"" [label=""buffer[$stack130] = $stack137""];\n	""307"" [label=""buffer[$stack138] = $stack145""];\n	""308"" [label=""buffer[$stack146] = $stack153""];\n	""309"" [label=""buffer[$stack154] = $stack156""];\n	""310"" [label=""buffer[$stack171] = $stack178""];\n	""311"" [label=""buffer[$stack179] = $stack186""];\n	""312"" [label=""buffer[$stack187] = $stack194""];\n	""313"" [label=""buffer[$stack195] = $stack202""];\n	""314"" [label=""buffer[$stack203] = $stack210""];\n	""315"" [label=""buffer[$stack211] = $stack213""];\n	""316"" [label=""buffer[$stack214] = $stack216""];\n	""317"" [label=""buffer[$stack217] = $stack219""];\n	""318"" [label=""buffer[$stack220] = $stack227""];\n	""319"" [label=""buffer[$stack228] = $stack235""];\n	""320"" [label=""buffer[$stack236] = $stack243""];\n	""321"" [label=""buffer[$stack244] = $stack251""];\n	""322"" [label=""buffer[$stack252] = $stack254""];\n	""323"" [label=""buffer[$stack255] = $stack257""];\n	""324"" [label=""buffer[$stack258] = $stack260""];\n	""325"" [label=""buffer[$stack261] = $stack263""];\n	""326"" [label=""buffer[$stack264] = $stack271""];\n	""327"" [label=""buffer[$stack272] = $stack279""];\n	""328"" [label=""buffer[$stack280] = $stack282""];\n	""329"" [label=""buffer[$stack283] = $stack285""];\n	""330"" [label=""buffer[$stack286] = $stack288""];\n	""331"" [label=""buffer[$stack289] = $stack291""];\n	""332"" [label=""buffer[$stack292] = $stack294""];\n	""333"" [label=""buffer[$stack295] = $stack297""];\n	""334"" [label=""buffer[$stack98] = $stack105""];\n	""335"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""336"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""337"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = $stack160""];\n	""338"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = $stack83""];\n	""339"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = 0""];\n	""340"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = $stack12""];\n	""341"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack107""];\n	""342"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack115""];\n	""343"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack123""];\n	""344"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack131""];\n	""345"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack139""];\n	""346"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack147""];\n	""347"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack155""];\n	""348"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack170""];\n	""349"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack172""];\n	""350"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack180""];\n	""351"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack188""];\n	""352"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack196""];\n	""353"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack20""];\n	""354"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack204""];\n	""355"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack212""];\n	""356"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack215""];\n	""357"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack218""];\n	""358"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack221""];\n	""359"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack229""];\n	""360"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack237""];\n	""361"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack245""];\n	""362"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack253""];\n	""363"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack256""];\n	""364"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack259""];\n	""365"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack262""];\n	""366"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack265""];\n	""367"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack273""];\n	""368"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack28""];\n	""369"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack281""];\n	""370"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack284""];\n	""371"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack287""];\n	""372"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack290""];\n	""373"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack293""];\n	""374"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack296""];\n	""375"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack36""];\n	""376"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack44""];\n	""377"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack52""];\n	""378"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack60""];\n	""379"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack68""];\n	""380"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack76""];\n	""381"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack94""];\n	""382"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack99""];\n	""383"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $stack17""];\n	""384"" [label=""goto""];\n	""385"" [label=""goto""];\n	""386"" [label=""goto""];\n	""387"" [label=""goto""];\n	""388"" [label=""goto""];\n	""389"" [label=""goto""];\n	""390"" [label=""goto""];\n	""391"" [label=""if $stack161 <= 0""];\n	""392"" [label=""if $stack162 <= 0""];\n	""393"" [label=""if $stack304 != 0""];\n	""394"" [label=""if $stack8 == 0""];\n	""395"" [label=""if $stack84 <= 0""];\n	""396"" [label=""if $stack86 > $stack85""];\n	""397"" [label=""if 0 != $stack18""];\n	""398"" [label=""if 0 != $stack95""];\n	""399"" [label=""if b >= 0""];\n	""400"" [label=""if buffer >= inAvail""];\n	""401"" [label=""if inAvail >= 0""];\n	""402"" [label=""inAvail := @parameter2: int""];\n	""403"" [label=""inPos := @parameter1: int""];\n	""404"" [label=""inPos = inPos + 1""];\n	""405"" [label=""input := @parameter0: byte[]""];\n	""406"" [label=""return""];\n	""407"" [label=""return""];\n	""408"" [label=""return""];\n	""409"" [label=""savedPos = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""410"" [label=""savedPos = virtualinvoke this.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack9, context)""];\n	""411"" [label=""savedPos[$stack19] = $stack26""];\n	""412"" [label=""savedPos[$stack27] = $stack34""];\n	""413"" [label=""savedPos[$stack35] = $stack42""];\n	""414"" [label=""savedPos[$stack43] = $stack50""];\n	""415"" [label=""savedPos[$stack51] = $stack58""];\n	""416"" [label=""savedPos[$stack59] = $stack66""];\n	""417"" [label=""savedPos[$stack67] = $stack74""];\n	""418"" [label=""savedPos[$stack75] = $stack81""];\n	""419"" [label=""specialinvoke $stack298.<java.lang.StringBuilder: void <init>()>()""];\n	""420"" [label=""specialinvoke $stack303.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack302)""];\n	""421"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack166, 0, buffer, $stack165, $stack164)""];\n	""422"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack90, 0, savedPos, $stack89, $stack88)""];\n	""423"" [label=""switch($stack97) \{     case 0:     case 1:     case 2:     case 3:     case 4:     default:  \}""];\n	""424"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""425"" [label=""throw $stack303""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""111""[label=""cfg_next""];\n	""101"" -> ""102""[label=""cfg_next""];\n	""102"" -> ""104""[label=""cfg_next""];\n	""103"" -> ""99""[label=""cfg_next""];\n	""104"" -> ""105""[label=""cfg_next""];\n	""105"" -> ""312""[label=""cfg_next""];\n	""106"" -> ""107""[label=""cfg_next""];\n	""107"" -> ""352""[label=""cfg_next""];\n	""108"" -> ""109""[label=""cfg_next""];\n	""109"" -> ""110""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""110"" -> ""113""[label=""cfg_next""];\n	""111"" -> ""353""[label=""cfg_next""];\n	""112"" -> ""108""[label=""cfg_next""];\n	""113"" -> ""114""[label=""cfg_next""];\n	""114"" -> ""313""[label=""cfg_next""];\n	""115"" -> ""116""[label=""cfg_next""];\n	""116"" -> ""354""[label=""cfg_next""];\n	""117"" -> ""118""[label=""cfg_next""];\n	""118"" -> ""119""[label=""cfg_next""];\n	""119"" -> ""121""[label=""cfg_next""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""120"" -> ""117""[label=""cfg_next""];\n	""121"" -> ""123""[label=""cfg_next""];\n	""122"" -> ""133""[label=""cfg_next""];\n	""123"" -> ""314""[label=""cfg_next""];\n	""124"" -> ""125""[label=""cfg_next""];\n	""125"" -> ""355""[label=""cfg_next""];\n	""126"" -> ""315""[label=""cfg_next""];\n	""127"" -> ""128""[label=""cfg_next""];\n	""128"" -> ""356""[label=""cfg_next""];\n	""129"" -> ""316""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""130"" -> ""131""[label=""cfg_next""];\n	""131"" -> ""357""[label=""cfg_next""];\n	""132"" -> ""317""[label=""cfg_next""];\n	""133"" -> ""144""[label=""cfg_next""];\n	""134"" -> ""135""[label=""cfg_next""];\n	""135"" -> ""358""[label=""cfg_next""];\n	""136"" -> ""137""[label=""cfg_next""];\n	""137"" -> ""138""[label=""cfg_next""];\n	""138"" -> ""140""[label=""cfg_next""];\n	""139"" -> ""136""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""140"" -> ""141""[label=""cfg_next""];\n	""141"" -> ""318""[label=""cfg_next""];\n	""142"" -> ""143""[label=""cfg_next""];\n	""143"" -> ""359""[label=""cfg_next""];\n	""144"" -> ""166""[label=""cfg_next""];\n	""145"" -> ""146""[label=""cfg_next""];\n	""146"" -> ""147""[label=""cfg_next""];\n	""147"" -> ""149""[label=""cfg_next""];\n	""148"" -> ""145""[label=""cfg_next""];\n	""149"" -> ""150""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""150"" -> ""319""[label=""cfg_next""];\n	""151"" -> ""152""[label=""cfg_next""];\n	""152"" -> ""360""[label=""cfg_next""];\n	""153"" -> ""154""[label=""cfg_next""];\n	""154"" -> ""156""[label=""cfg_next""];\n	""155"" -> ""122""[label=""cfg_next""];\n	""156"" -> ""158""[label=""cfg_next""];\n	""157"" -> ""153""[label=""cfg_next""];\n	""158"" -> ""159""[label=""cfg_next""];\n	""159"" -> ""320""[label=""cfg_next""];\n	""16"" -> ""303""[label=""cfg_next""];\n	""160"" -> ""161""[label=""cfg_next""];\n	""161"" -> ""361""[label=""cfg_next""];\n	""162"" -> ""163""[label=""cfg_next""];\n	""163"" -> ""164""[label=""cfg_next""];\n	""164"" -> ""167""[label=""cfg_next""];\n	""165"" -> ""162""[label=""cfg_next""];\n	""166"" -> ""177""[label=""cfg_next""];\n	""167"" -> ""168""[label=""cfg_next""];\n	""168"" -> ""321""[label=""cfg_next""];\n	""169"" -> ""170""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""170"" -> ""362""[label=""cfg_next""];\n	""171"" -> ""322""[label=""cfg_next""];\n	""172"" -> ""173""[label=""cfg_next""];\n	""173"" -> ""363""[label=""cfg_next""];\n	""174"" -> ""323""[label=""cfg_next""];\n	""175"" -> ""176""[label=""cfg_next""];\n	""176"" -> ""364""[label=""cfg_next""];\n	""177"" -> ""411""[label=""cfg_next""];\n	""178"" -> ""324""[label=""cfg_next""];\n	""179"" -> ""180""[label=""cfg_next""];\n	""18"" -> ""342""[label=""cfg_next""];\n	""180"" -> ""365""[label=""cfg_next""];\n	""181"" -> ""325""[label=""cfg_next""];\n	""182"" -> ""183""[label=""cfg_next""];\n	""183"" -> ""366""[label=""cfg_next""];\n	""184"" -> ""185""[label=""cfg_next""];\n	""185"" -> ""186""[label=""cfg_next""];\n	""186"" -> ""189""[label=""cfg_next""];\n	""187"" -> ""184""[label=""cfg_next""];\n	""188"" -> ""199""[label=""cfg_next""];\n	""189"" -> ""190""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""190"" -> ""326""[label=""cfg_next""];\n	""191"" -> ""192""[label=""cfg_next""];\n	""192"" -> ""367""[label=""cfg_next""];\n	""193"" -> ""194""[label=""cfg_next""];\n	""194"" -> ""195""[label=""cfg_next""];\n	""195"" -> ""197""[label=""cfg_next""];\n	""196"" -> ""193""[label=""cfg_next""];\n	""197"" -> ""198""[label=""cfg_next""];\n	""198"" -> ""327""[label=""cfg_next""];\n	""199"" -> ""368""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""200"" -> ""201""[label=""cfg_next""];\n	""201"" -> ""369""[label=""cfg_next""];\n	""202"" -> ""328""[label=""cfg_next""];\n	""203"" -> ""204""[label=""cfg_next""];\n	""204"" -> ""370""[label=""cfg_next""];\n	""205"" -> ""329""[label=""cfg_next""];\n	""206"" -> ""207""[label=""cfg_next""];\n	""207"" -> ""371""[label=""cfg_next""];\n	""208"" -> ""330""[label=""cfg_next""];\n	""209"" -> ""211""[label=""cfg_next""];\n	""21"" -> ""24""[label=""cfg_next""];\n	""210"" -> ""221""[label=""cfg_next""];\n	""211"" -> ""372""[label=""cfg_next""];\n	""212"" -> ""331""[label=""cfg_next""];\n	""213"" -> ""214""[label=""cfg_next""];\n	""214"" -> ""373""[label=""cfg_next""];\n	""215"" -> ""332""[label=""cfg_next""];\n	""216"" -> ""217""[label=""cfg_next""];\n	""217"" -> ""374""[label=""cfg_next""];\n	""218"" -> ""333""[label=""cfg_next""];\n	""219"" -> ""419""[label=""cfg_next""];\n	""22"" -> ""19""[label=""cfg_next""];\n	""220"" -> ""223""[label=""cfg_next""];\n	""221"" -> ""227""[label=""cfg_next""];\n	""222"" -> ""220""[label=""cfg_next""];\n	""223"" -> ""224""[label=""cfg_next""];\n	""224"" -> ""420""[label=""cfg_next""];\n	""225"" -> ""219""[label=""cfg_next""];\n	""226"" -> ""393""[label=""cfg_next""];\n	""227"" -> ""229""[label=""cfg_next""];\n	""228"" -> ""210""[label=""cfg_next""];\n	""229"" -> ""230""[label=""cfg_next""];\n	""23"" -> ""340""[label=""cfg_next""];\n	""230"" -> ""412""[label=""cfg_next""];\n	""231"" -> ""232""[label=""cfg_next""];\n	""232"" -> ""375""[label=""cfg_next""];\n	""233"" -> ""234""[label=""cfg_next""];\n	""234"" -> ""235""[label=""cfg_next""];\n	""235"" -> ""237""[label=""cfg_next""];\n	""236"" -> ""233""[label=""cfg_next""];\n	""237"" -> ""238""[label=""cfg_next""];\n	""238"" -> ""413""[label=""cfg_next""];\n	""239"" -> ""240""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""240"" -> ""376""[label=""cfg_next""];\n	""241"" -> ""242""[label=""cfg_next""];\n	""242"" -> ""243""[label=""cfg_next""];\n	""243"" -> ""245""[label=""cfg_next""];\n	""244"" -> ""241""[label=""cfg_next""];\n	""245"" -> ""246""[label=""cfg_next""];\n	""246"" -> ""414""[label=""cfg_next""];\n	""247"" -> ""248""[label=""cfg_next""];\n	""248"" -> ""377""[label=""cfg_next""];\n	""249"" -> ""250""[label=""cfg_next""];\n	""25"" -> ""304""[label=""cfg_next""];\n	""250"" -> ""251""[label=""cfg_next""];\n	""251"" -> ""253""[label=""cfg_next""];\n	""252"" -> ""249""[label=""cfg_next""];\n	""253"" -> ""254""[label=""cfg_next""];\n	""254"" -> ""415""[label=""cfg_next""];\n	""255"" -> ""256""[label=""cfg_next""];\n	""256"" -> ""378""[label=""cfg_next""];\n	""257"" -> ""258""[label=""cfg_next""];\n	""258"" -> ""259""[label=""cfg_next""];\n	""259"" -> ""261""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""260"" -> ""257""[label=""cfg_next""];\n	""261"" -> ""262""[label=""cfg_next""];\n	""262"" -> ""416""[label=""cfg_next""];\n	""263"" -> ""264""[label=""cfg_next""];\n	""264"" -> ""379""[label=""cfg_next""];\n	""265"" -> ""266""[label=""cfg_next""];\n	""266"" -> ""267""[label=""cfg_next""];\n	""267"" -> ""269""[label=""cfg_next""];\n	""268"" -> ""265""[label=""cfg_next""];\n	""269"" -> ""270""[label=""cfg_next""];\n	""27"" -> ""343""[label=""cfg_next""];\n	""270"" -> ""417""[label=""cfg_next""];\n	""271"" -> ""272""[label=""cfg_next""];\n	""272"" -> ""380""[label=""cfg_next""];\n	""273"" -> ""274""[label=""cfg_next""];\n	""274"" -> ""277""[label=""cfg_next""];\n	""275"" -> ""273""[label=""cfg_next""];\n	""276"" -> ""394""[label=""cfg_next""];\n	""277"" -> ""278""[label=""cfg_next""];\n	""278"" -> ""418""[label=""cfg_next""];\n	""279"" -> ""280""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""280"" -> ""338""[label=""cfg_next""];\n	""281"" -> ""395""[label=""cfg_next""];\n	""282"" -> ""396""[label=""cfg_next""];\n	""283"" -> ""282""[label=""cfg_next""];\n	""284"" -> ""285""[label=""cfg_next""];\n	""285"" -> ""422""[label=""cfg_next""];\n	""286"" -> ""284""[label=""cfg_next""];\n	""287"" -> ""410""[label=""cfg_next""];\n	""288"" -> ""286""[label=""cfg_next""];\n	""289"" -> ""291""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""290"" -> ""289""[label=""cfg_next""];\n	""291"" -> ""292""[label=""cfg_next""];\n	""292"" -> ""381""[label=""cfg_next""];\n	""293"" -> ""398""[label=""cfg_next""];\n	""294"" -> ""302""[label=""cfg_next""];\n	""295"" -> ""423""[label=""cfg_next""];\n	""296"" -> ""297""[label=""cfg_next""];\n	""297"" -> ""382""[label=""cfg_next""];\n	""298"" -> ""45""[label=""cfg_next""];\n	""299"" -> ""399""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""300"" -> ""400""[label=""cfg_next""];\n	""301"" -> ""389""[label=""cfg_next""];\n	""302"" -> ""409""[label=""cfg_next""];\n	""303"" -> ""17""[label=""cfg_next""];\n	""304"" -> ""26""[label=""cfg_next""];\n	""305"" -> ""35""[label=""cfg_next""];\n	""306"" -> ""43""[label=""cfg_next""];\n	""307"" -> ""52""[label=""cfg_next""];\n	""308"" -> ""61""[label=""cfg_next""];\n	""309"" -> ""388""[label=""cfg_next""];\n	""31"" -> ""28""[label=""cfg_next""];\n	""310"" -> ""88""[label=""cfg_next""];\n	""311"" -> ""97""[label=""cfg_next""];\n	""312"" -> ""106""[label=""cfg_next""];\n	""313"" -> ""115""[label=""cfg_next""];\n	""314"" -> ""124""[label=""cfg_next""];\n	""315"" -> ""127""[label=""cfg_next""];\n	""316"" -> ""130""[label=""cfg_next""];\n	""317"" -> ""387""[label=""cfg_next""];\n	""318"" -> ""142""[label=""cfg_next""];\n	""319"" -> ""151""[label=""cfg_next""];\n	""32"" -> ""33""[label=""cfg_next""];\n	""320"" -> ""160""[label=""cfg_next""];\n	""321"" -> ""169""[label=""cfg_next""];\n	""322"" -> ""172""[label=""cfg_next""];\n	""323"" -> ""175""[label=""cfg_next""];\n	""324"" -> ""179""[label=""cfg_next""];\n	""325"" -> ""386""[label=""cfg_next""];\n	""326"" -> ""191""[label=""cfg_next""];\n	""327"" -> ""200""[label=""cfg_next""];\n	""328"" -> ""203""[label=""cfg_next""];\n	""329"" -> ""206""[label=""cfg_next""];\n	""33"" -> ""305""[label=""cfg_next""];\n	""330"" -> ""209""[label=""cfg_next""];\n	""331"" -> ""213""[label=""cfg_next""];\n	""332"" -> ""216""[label=""cfg_next""];\n	""333"" -> ""385""[label=""cfg_next""];\n	""334"" -> ""8""[label=""cfg_next""];\n	""335"" -> ""276""[label=""cfg_next""];\n	""336"" -> ""293""[label=""cfg_next""];\n	""337"" -> ""69""[label=""cfg_next""];\n	""338"" -> ""281""[label=""cfg_next""];\n	""339"" -> ""301""[label=""cfg_next""];\n	""34"" -> ""404""[label=""cfg_next""];\n	""340"" -> ""34""[label=""cfg_next""];\n	""341"" -> ""14""[label=""cfg_next""];\n	""342"" -> ""22""[label=""cfg_next""];\n	""343"" -> ""31""[label=""cfg_next""];\n	""344"" -> ""40""[label=""cfg_next""];\n	""345"" -> ""49""[label=""cfg_next""];\n	""346"" -> ""58""[label=""cfg_next""];\n	""347"" -> ""63""[label=""cfg_next""];\n	""348"" -> ""390""[label=""cfg_next""];\n	""349"" -> ""85""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""350"" -> ""94""[label=""cfg_next""];\n	""351"" -> ""103""[label=""cfg_next""];\n	""352"" -> ""112""[label=""cfg_next""];\n	""353"" -> ""155""[label=""cfg_next""];\n	""354"" -> ""120""[label=""cfg_next""];\n	""355"" -> ""126""[label=""cfg_next""];\n	""356"" -> ""129""[label=""cfg_next""];\n	""357"" -> ""132""[label=""cfg_next""];\n	""358"" -> ""139""[label=""cfg_next""];\n	""359"" -> ""148""[label=""cfg_next""];\n	""36"" -> ""344""[label=""cfg_next""];\n	""360"" -> ""157""[label=""cfg_next""];\n	""361"" -> ""165""[label=""cfg_next""];\n	""362"" -> ""171""[label=""cfg_next""];\n	""363"" -> ""174""[label=""cfg_next""];\n	""364"" -> ""178""[label=""cfg_next""];\n	""365"" -> ""181""[label=""cfg_next""];\n	""366"" -> ""187""[label=""cfg_next""];\n	""367"" -> ""196""[label=""cfg_next""];\n	""368"" -> ""228""[label=""cfg_next""];\n	""369"" -> ""202""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""370"" -> ""205""[label=""cfg_next""];\n	""371"" -> ""208""[label=""cfg_next""];\n	""372"" -> ""212""[label=""cfg_next""];\n	""373"" -> ""215""[label=""cfg_next""];\n	""374"" -> ""218""[label=""cfg_next""];\n	""375"" -> ""236""[label=""cfg_next""];\n	""376"" -> ""244""[label=""cfg_next""];\n	""377"" -> ""252""[label=""cfg_next""];\n	""378"" -> ""260""[label=""cfg_next""];\n	""379"" -> ""268""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""380"" -> ""275""[label=""cfg_next""];\n	""381"" -> ""339""[label=""cfg_next""];\n	""382"" -> ""5""[label=""cfg_next""];\n	""383"" -> ""89""[label=""cfg_next""];\n	""384"" -> ""65""[label=""cfg_goto""];\n	""385"" -> ""65""[label=""cfg_goto""];\n	""386"" -> ""65""[label=""cfg_goto""];\n	""387"" -> ""65""[label=""cfg_goto""];\n	""388"" -> ""65""[label=""cfg_goto""];\n	""389"" -> ""400""[label=""cfg_goto""];\n	""39"" -> ""41""[label=""cfg_next""];\n	""390"" -> ""408""[label=""cfg_goto""];\n	""391"" -> ""390""[label=""cfg_true""];\n	""391"" -> ""70""[label=""cfg_false""];\n	""392"" -> ""390""[label=""cfg_true""];\n	""392"" -> ""74""[label=""cfg_false""];\n	""393"" -> ""294""[label=""cfg_true""];\n	""393"" -> ""407""[label=""cfg_false""];\n	""394"" -> ""401""[label=""cfg_true""];\n	""394"" -> ""406""[label=""cfg_false""];\n	""395"" -> ""283""[label=""cfg_false""];\n	""395"" -> ""301""[label=""cfg_true""];\n	""396"" -> ""288""[label=""cfg_false""];\n	""396"" -> ""301""[label=""cfg_true""];\n	""397"" -> ""100""[label=""cfg_false""];\n	""397"" -> ""301""[label=""cfg_true""];\n	""398"" -> ""226""[label=""cfg_false""];\n	""398"" -> ""294""[label=""cfg_true""];\n	""399"" -> ""298""[label=""cfg_false""];\n	""399"" -> ""45""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""40"" -> ""37""[label=""cfg_next""];\n	""400"" -> ""287""[label=""cfg_false""];\n	""400"" -> ""408""[label=""cfg_true""];\n	""401"" -> ""300""[label=""cfg_true""];\n	""401"" -> ""336""[label=""cfg_false""];\n	""402"" -> ""335""[label=""cfg_next""];\n	""403"" -> ""402""[label=""cfg_next""];\n	""404"" -> ""299""[label=""cfg_next""];\n	""405"" -> ""403""[label=""cfg_next""];\n	""409"" -> ""295""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""410"" -> ""1""[label=""cfg_next""];\n	""411"" -> ""188""[label=""cfg_next""];\n	""412"" -> ""231""[label=""cfg_next""];\n	""413"" -> ""239""[label=""cfg_next""];\n	""414"" -> ""247""[label=""cfg_next""];\n	""415"" -> ""255""[label=""cfg_next""];\n	""416"" -> ""263""[label=""cfg_next""];\n	""417"" -> ""271""[label=""cfg_next""];\n	""418"" -> ""279""[label=""cfg_next""];\n	""419"" -> ""222""[label=""cfg_next""];\n	""42"" -> ""306""[label=""cfg_next""];\n	""420"" -> ""425""[label=""cfg_next""];\n	""421"" -> ""76""[label=""cfg_next""];\n	""422"" -> ""290""[label=""cfg_next""];\n	""423"" -> ""134""[label=""cfg_switch""];\n	""423"" -> ""182""[label=""cfg_switch""];\n	""423"" -> ""225""[label=""cfg_switch""];\n	""423"" -> ""296""[label=""cfg_switch""];\n	""423"" -> ""384""[label=""cfg_switch""];\n	""423"" -> ""80""[label=""cfg_switch""];\n	""424"" -> ""405""[label=""cfg_next""];\n	""43"" -> ""44""[label=""cfg_next""];\n	""44"" -> ""345""[label=""cfg_next""];\n	""45"" -> ""56""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""48""[label=""cfg_next""];\n	""48"" -> ""50""[label=""cfg_next""];\n	""49"" -> ""46""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""307""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""346""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""57""[label=""cfg_next""];\n	""56"" -> ""67""[label=""cfg_next""];\n	""57"" -> ""59""[label=""cfg_next""];\n	""58"" -> ""54""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""308""[label=""cfg_next""];\n	""61"" -> ""62""[label=""cfg_next""];\n	""62"" -> ""347""[label=""cfg_next""];\n	""63"" -> ""309""[label=""cfg_next""];\n	""64"" -> ""66""[label=""cfg_next""];\n	""65"" -> ""64""[label=""cfg_next""];\n	""66"" -> ""68""[label=""cfg_next""];\n	""67"" -> ""78""[label=""cfg_next""];\n	""68"" -> ""337""[label=""cfg_next""];\n	""69"" -> ""391""[label=""cfg_next""];\n	""7"" -> ""334""[label=""cfg_next""];\n	""70"" -> ""392""[label=""cfg_next""];\n	""71"" -> ""72""[label=""cfg_next""];\n	""72"" -> ""421""[label=""cfg_next""];\n	""73"" -> ""71""[label=""cfg_next""];\n	""74"" -> ""73""[label=""cfg_next""];\n	""75"" -> ""77""[label=""cfg_next""];\n	""76"" -> ""75""[label=""cfg_next""];\n	""77"" -> ""79""[label=""cfg_next""];\n	""78"" -> ""383""[label=""cfg_next""];\n	""79"" -> ""348""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""81""[label=""cfg_next""];\n	""81"" -> ""349""[label=""cfg_next""];\n	""82"" -> ""83""[label=""cfg_next""];\n	""83"" -> ""84""[label=""cfg_next""];\n	""84"" -> ""86""[label=""cfg_next""];\n	""85"" -> ""82""[label=""cfg_next""];\n	""86"" -> ""87""[label=""cfg_next""];\n	""87"" -> ""310""[label=""cfg_next""];\n	""88"" -> ""90""[label=""cfg_next""];\n	""89"" -> ""397""[label=""cfg_next""];\n	""9"" -> ""341""[label=""cfg_next""];\n	""90"" -> ""350""[label=""cfg_next""];\n	""91"" -> ""92""[label=""cfg_next""];\n	""92"" -> ""93""[label=""cfg_next""];\n	""93"" -> ""95""[label=""cfg_next""];\n	""94"" -> ""91""[label=""cfg_next""];\n	""95"" -> ""96""[label=""cfg_next""];\n	""96"" -> ""311""[label=""cfg_next""];\n	""97"" -> ""98""[label=""cfg_next""];\n	""98"" -> ""351""[label=""cfg_next""];\n	""99"" -> ""101""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base32.getLineSeparator(),Method,* Gets the line separator (for testing only).\n     *\n     * @return the line separator.,byte[] getLineSeparator() {\n    return lineSeparator;\n},byte[] getLineSeparator(),"digraph cfg_getLineSeparator {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base32.isInAlphabet(byte),Method,* Returns whether or not the {@code octet} is in the Base32 alphabet.\n     *\n     * @param octet The value to test\n     * @return {@code true} if the value is defined in the Base32 alphabet {@code false} otherwise.,@Override\npublic boolean isInAlphabet(final byte octet) {\n    return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;\n},boolean isInAlphabet(byte),"digraph cfg_isInAlphabet {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>""];\n	""2"" [label=""$stack3 = lengthof $stack2""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>""];\n	""4"" [label=""$stack5 = $stack4[octet]""];\n	""5"" [label=""$stack6 = 0""];\n	""6"" [label=""$stack6 = 1""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack5 == -1""];\n	""9"" [label=""if octet < 0""];\n	""10"" [label=""if octet >= $stack3""];\n	""11"" [label=""octet := @parameter0: byte""];\n	""12"" [label=""return $stack6""];\n	""13"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""10"" -> ""5""[label=""cfg_true""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_goto""];\n	""8"" -> ""5""[label=""cfg_true""];\n	""8"" -> ""6""[label=""cfg_false""];\n	""9"" -> ""1""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_true""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.validateCharacter(long,Context)",Method,* Validates whether decoding the final trailing character is possible in the context of the set of possible base 32 values.\n     * <p>\n     * The character is valid if the lower bits within the provided mask are zero. This is used to test the final trailing base-32 digit is zero in the bits\n     * that will be discarded.\n     * </p>\n     *\n     * @param emptyBitsMask The mask of the lower bits that should be empty\n     * @param context       the context to be used\n     * @throws IllegalArgumentException if the bits being checked contain any non-zero value,"private void validateCharacter(final long emptyBitsMask, final Context context) {\n    // Use the long bit work area\n    if (isStrictDecoding() && (context.lbitWorkArea & emptyBitsMask) != 0) {\n        throw new IllegalArgumentException(""Strict decoding: Last encoded character (before the paddings if any) is a valid "" + ""base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero."");\n    }\n}","void validateCharacter(long,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_validateCharacter {\n	""1"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.binary.Base32: boolean isStrictDecoding()>()""];\n	""2"" [label=""$stack5 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""3"" [label=""$stack6 = $stack5 & emptyBitsMask""];\n	""4"" [label=""$stack7 = $stack6 cmp 0L""];\n	""5"" [label=""$stack8 = new java.lang.IllegalArgumentException""];\n	""6"" [label=""context := @parameter1: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""7"" [label=""emptyBitsMask := @parameter0: long""];\n	""8"" [label=""if $stack4 == 0""];\n	""9"" [label=""if $stack7 == 0""];\n	""10"" [label=""return""];\n	""11"" [label=""specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Strict decoding: Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\"")""];\n	""12"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""13"" [label=""throw $stack8""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_true""];\n	""8"" -> ""2""[label=""cfg_false""];\n	""9"" -> ""10""[label=""cfg_true""];\n	""9"" -> ""5""[label=""cfg_false""];\n}\n",private 
org.apache.commons.codec.binary.Base32.validateTrailingCharacters(),Method,* Validates whether decoding allows final trailing characters that cannot be created during encoding.\n     *\n     * @throws IllegalArgumentException if strict decoding is enabled,"private void validateTrailingCharacters() {\n    if (isStrictDecoding()) {\n        throw new IllegalArgumentException(""Strict decoding: Last encoded character(s) (before the paddings if any) are valid "" + ""base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes."");\n    }\n}",void validateTrailingCharacters(),"digraph cfg_validateTrailingCharacters {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.binary.Base32: boolean isStrictDecoding()>()""];\n	""2"" [label=""$stack2 = new java.lang.IllegalArgumentException""];\n	""3"" [label=""if $stack1 == 0""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\"")""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""7"" [label=""throw $stack2""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_false""];\n	""3"" -> ""4""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.Base32.<init>(),Constructor,* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length is 0 (no chunking).\n     * </p>,public Base32() {\n    this(false);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(boolean)>(0)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32.<init>(boolean),Constructor,* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length is 0 (no chunking).\n     * </p>\n     *\n     * @param useHex if {@code true} then use Base32 Hex alphabet,"public Base32(final boolean useHex) {\n    this(0, null, useHex, PAD_DEFAULT);\n}",void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte)>(0, null, useHex, 61)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""4"" [label=""useHex := @parameter0: boolean""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(boolean,byte)",Constructor,* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length is 0 (no chunking).\n     * </p>\n     *\n     * @param useHex  if {@code true} then use Base32 Hex alphabet\n     * @param padding byte used as padding byte.,"public Base32(final boolean useHex, final byte padding) {\n    this(0, null, useHex, padding);\n}","void <init>(boolean,byte)","digraph cfg_init {\n	""1"" [label=""padding := @parameter1: byte""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte)>(0, null, useHex, padding)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""5"" [label=""useHex := @parameter0: boolean""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32.<init>(byte),Constructor,* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length is 0 (no chunking).\n     * </p>\n     *\n     * @param pad byte used as padding byte.,"public Base32(final byte pad) {\n    this(false, pad);\n}",void <init>(byte),"digraph cfg_init {\n	""1"" [label=""pad := @parameter0: byte""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(boolean,byte)>(0, pad)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32.<init>(int),Constructor,"* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length is given in the constructor, the line separator is CRLF.\n     * </p>\n     *\n     * @param lineLength Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0, then\n     *                   the output will not be divided into lines (chunks). Ignored when decoding.","public Base32(final int lineLength) {\n    this(lineLength, CHUNK_SEPARATOR);\n}",void <init>(int),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.Base32: byte[] CHUNK_SEPARATOR>""];\n	""2"" [label=""lineLength := @parameter0: int""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[])>(lineLength, $stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(int,byte[])",Constructor,"* Constructs a Base32 codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n     * </p>\n     *\n     * @param lineLength    Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0,\n     *                      then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator Each line of encoded data will end with this sequence of bytes.\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base32 characters.","public Base32(final int lineLength, final byte[] lineSeparator) {\n    this(lineLength, lineSeparator, false, PAD_DEFAULT);\n}","void <init>(int,byte[])","digraph cfg_init {\n	""1"" [label=""lineLength := @parameter0: int""];\n	""2"" [label=""lineSeparator := @parameter1: byte[]""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte)>(lineLength, lineSeparator, 0, 61)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean)",Constructor,"* Constructs a Base32 / Base32 Hex codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n     * </p>\n     *\n     * @param lineLength    Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0,\n     *                      then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator Each line of encoded data will end with this sequence of bytes.\n     * @param useHex        if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base32 characters. Or the lineLength &gt; 0 and lineSeparator is null.","public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex) {\n    this(lineLength, lineSeparator, useHex, PAD_DEFAULT);\n}","void <init>(int,byte[],boolean)","digraph cfg_init {\n	""1"" [label=""lineLength := @parameter0: int""];\n	""2"" [label=""lineSeparator := @parameter1: byte[]""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte)>(lineLength, lineSeparator, useHex, 61)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""6"" [label=""useHex := @parameter2: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte)",Constructor,"* Constructs a Base32 / Base32 Hex codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n     * </p>\n     *\n     * @param lineLength    Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0,\n     *                      then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator Each line of encoded data will end with this sequence of bytes.\n     * @param useHex        if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n     * @param padding       padding byte.\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base32 characters. Or the lineLength &gt; 0 and lineSeparator is null.","public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte padding) {\n    this(lineLength, lineSeparator, useHex, padding, DECODING_POLICY_DEFAULT);\n}","void <init>(int,byte[],boolean,byte)","digraph cfg_init {\n	""1"" [label=""$stack5 = <org.apache.commons.codec.binary.Base32: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""lineLength := @parameter0: int""];\n	""3"" [label=""lineSeparator := @parameter1: byte[]""];\n	""4"" [label=""padding := @parameter3: byte""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, useHex, padding, $stack5)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""8"" [label=""useHex := @parameter2: boolean""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy)",Constructor,"* Constructs a Base32 / Base32 Hex codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n     * </p>\n     *\n     * @param lineLength     Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0,\n     *                       then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator  Each line of encoded data will end with this sequence of bytes.\n     * @param useHex         use Base32 hexadecimal if {@code true}, otherwise use the Base32 alphabet.\n     * @param padding        padding byte.\n     * @param decodingPolicy The decoding policy.\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base32 characters. Or the lineLength &gt; 0 and lineSeparator is null.\n     * @since 1.15","public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte padding, final CodecPolicy decodingPolicy) {\n    this(lineLength, lineSeparator, encodeTable(useHex), padding, decodingPolicy);\n}","void <init>(int,byte[],boolean,byte,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Base32: byte[] encodeTable(boolean)>(useHex)""];\n	""2"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""lineLength := @parameter0: int""];\n	""4"" [label=""lineSeparator := @parameter1: byte[]""];\n	""5"" [label=""padding := @parameter3: byte""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],byte[],byte,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, $stack6, padding, decodingPolicy)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""9"" [label=""useHex := @parameter2: boolean""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy)",Constructor,"* Constructs a Base32 / Base32 Hex codec used for decoding and encoding.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n     * </p>\n     *\n     * @param lineLength     Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 8). If lineLength &lt;= 0,\n     *                       then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator  Each line of encoded data will end with this sequence of bytes.\n     * @param encodeTable    A Base32 alphabet.\n     * @param padding        padding byte.\n     * @param decodingPolicy The decoding policy.\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base32 characters. Or the lineLength &gt; 0 and lineSeparator is null.","private Base32(final int lineLength, final byte[] lineSeparator, final byte[] encodeTable, final byte padding, final CodecPolicy decodingPolicy) {\n    super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, toLength(lineSeparator), padding, decodingPolicy);\n    Objects.requireNonNull(encodeTable, ""encodeTable"");\n    this.encodeTable = encodeTable;\n    this.decodeTable = encodeTable == HEX_ENCODE_TABLE ? HEX_DECODE_TABLE : DECODE_TABLE;\n    if (lineLength > 0) {\n        if (lineSeparator == null) {\n            throw new IllegalArgumentException(""lineLength "" + lineLength + "" > 0, but lineSeparator is null"");\n        }\n        final byte[] lineSeparatorCopy = lineSeparator.clone();\n        // Must be done after initializing the tables\n        if (containsAlphabetOrPad(lineSeparatorCopy)) {\n            final String sep = StringUtils.newStringUtf8(lineSeparatorCopy);\n            throw new IllegalArgumentException(""lineSeparator must not contain Base32 characters: ["" + sep + ""]"");\n        }\n        this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparatorCopy.length;\n        this.lineSeparator = lineSeparatorCopy;\n    } else {\n        this.encodeSize = BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n    if (isInAlphabet(padding) || Character.isWhitespace(padding)) {\n        throw new IllegalArgumentException(""pad must not be in alphabet or whitespace"");\n    }\n}","void <init>(int,byte[],byte[],byte,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack10 = <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE>""];\n	""2"" [label=""$stack10 = <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE>""];\n	""3"" [label=""$stack11 = virtualinvoke this.<org.apache.commons.codec.binary.Base32: boolean isInAlphabet(byte)>(padding)""];\n	""4"" [label=""$stack12 = new java.lang.IllegalArgumentException""];\n	""5"" [label=""$stack13 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(padding)""];\n	""6"" [label=""$stack14 = virtualinvoke lineSeparator.<java.lang.Object: java.lang.Object clone()>()""];\n	""7"" [label=""$stack15 = virtualinvoke this.<org.apache.commons.codec.binary.Base32: boolean containsAlphabetOrPad(byte[])>(lineSeparatorCopy)""];\n	""8"" [label=""$stack16 = lengthof lineSeparatorCopy""];\n	""9"" [label=""$stack17 = 8 + $stack16""];\n	""10"" [label=""$stack18 = new java.lang.StringBuilder""];\n	""11"" [label=""$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""lineSeparator must not contain Base32 characters: [\"")""];\n	""12"" [label=""$stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sep)""];\n	""13"" [label=""$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""]\"")""];\n	""14"" [label=""$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""15"" [label=""$stack23 = new java.lang.IllegalArgumentException""];\n	""16"" [label=""$stack24 = new java.lang.StringBuilder""];\n	""17"" [label=""$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""lineLength \"")""];\n	""18"" [label=""$stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lineLength)""];\n	""19"" [label=""$stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" > 0, but lineSeparator is null\"")""];\n	""20"" [label=""$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""21"" [label=""$stack29 = new java.lang.IllegalArgumentException""];\n	""22"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.binary.Base32: int toLength(byte[])>(lineSeparator)""];\n	""23"" [label=""$stack9 = <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE>""];\n	""24"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""25"" [label=""encodeTable := @parameter2: byte[]""];\n	""26"" [label=""goto""];\n	""27"" [label=""goto""];\n	""28"" [label=""if $stack11 != 0""];\n	""29"" [label=""if $stack13 == 0""];\n	""30"" [label=""if $stack15 == 0""];\n	""31"" [label=""if encodeTable != $stack9""];\n	""32"" [label=""if lineLength <= 0""];\n	""33"" [label=""if lineSeparator != null""];\n	""34"" [label=""lineLength := @parameter0: int""];\n	""35"" [label=""lineSeparator := @parameter1: byte[]""];\n	""36"" [label=""lineSeparatorCopy = (byte[]) $stack14""];\n	""37"" [label=""padding := @parameter3: byte""];\n	""38"" [label=""return""];\n	""39"" [label=""sep = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(lineSeparatorCopy)""];\n	""40"" [label=""specialinvoke $stack12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""pad must not be in alphabet or whitespace\"")""];\n	""41"" [label=""specialinvoke $stack18.<java.lang.StringBuilder: void <init>()>()""];\n	""42"" [label=""specialinvoke $stack23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack22)""];\n	""43"" [label=""specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>()""];\n	""44"" [label=""specialinvoke $stack29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack28)""];\n	""45"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte,org.apache.commons.codec.CodecPolicy)>(5, 8, lineLength, $stack8, padding, decodingPolicy)""];\n	""46"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(encodeTable, \""encodeTable\"")""];\n	""47"" [label=""this := @this: org.apache.commons.codec.binary.Base32""];\n	""48"" [label=""this.<org.apache.commons.codec.binary.Base32: byte[] decodeTable> = $stack10""];\n	""49"" [label=""this.<org.apache.commons.codec.binary.Base32: byte[] encodeTable> = encodeTable""];\n	""50"" [label=""this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = lineSeparatorCopy""];\n	""51"" [label=""this.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = null""];\n	""52"" [label=""this.<org.apache.commons.codec.binary.Base32: int encodeSize> = $stack17""];\n	""53"" [label=""this.<org.apache.commons.codec.binary.Base32: int encodeSize> = 8""];\n	""54"" [label=""throw $stack12""];\n	""55"" [label=""throw $stack23""];\n	""56"" [label=""throw $stack29""];\n	""1"" -> ""48""[label=""cfg_next""];\n	""10"" -> ""41""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""42""[label=""cfg_next""];\n	""15"" -> ""10""[label=""cfg_next""];\n	""16"" -> ""43""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""26""[label=""cfg_next""];\n	""20"" -> ""44""[label=""cfg_next""];\n	""21"" -> ""16""[label=""cfg_next""];\n	""22"" -> ""45""[label=""cfg_next""];\n	""23"" -> ""31""[label=""cfg_next""];\n	""24"" -> ""22""[label=""cfg_next""];\n	""25"" -> ""37""[label=""cfg_next""];\n	""26"" -> ""48""[label=""cfg_goto""];\n	""27"" -> ""3""[label=""cfg_goto""];\n	""28"" -> ""4""[label=""cfg_true""];\n	""28"" -> ""5""[label=""cfg_false""];\n	""29"" -> ""38""[label=""cfg_true""];\n	""29"" -> ""4""[label=""cfg_false""];\n	""3"" -> ""28""[label=""cfg_next""];\n	""30"" -> ""39""[label=""cfg_false""];\n	""30"" -> ""8""[label=""cfg_true""];\n	""31"" -> ""1""[label=""cfg_true""];\n	""31"" -> ""2""[label=""cfg_false""];\n	""32"" -> ""33""[label=""cfg_false""];\n	""32"" -> ""53""[label=""cfg_true""];\n	""33"" -> ""21""[label=""cfg_false""];\n	""33"" -> ""6""[label=""cfg_true""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""25""[label=""cfg_next""];\n	""36"" -> ""7""[label=""cfg_next""];\n	""37"" -> ""24""[label=""cfg_next""];\n	""39"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""40""[label=""cfg_next""];\n	""40"" -> ""54""[label=""cfg_next""];\n	""41"" -> ""11""[label=""cfg_next""];\n	""42"" -> ""55""[label=""cfg_next""];\n	""43"" -> ""17""[label=""cfg_next""];\n	""44"" -> ""56""[label=""cfg_next""];\n	""45"" -> ""46""[label=""cfg_next""];\n	""46"" -> ""49""[label=""cfg_next""];\n	""47"" -> ""34""[label=""cfg_next""];\n	""48"" -> ""32""[label=""cfg_next""];\n	""49"" -> ""23""[label=""cfg_next""];\n	""5"" -> ""29""[label=""cfg_next""];\n	""50"" -> ""27""[label=""cfg_next""];\n	""51"" -> ""3""[label=""cfg_next""];\n	""52"" -> ""50""[label=""cfg_next""];\n	""53"" -> ""51""[label=""cfg_next""];\n	""6"" -> ""36""[label=""cfg_next""];\n	""7"" -> ""30""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""52""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.Base32$Builder.get(),Method,No Comment,"@Override\npublic Base32 get() {\n    return new Base32(getLineLength(), getLineSeparator(), getEncodeTable(), getPadding(), getDecodingPolicy());\n}",org.apache.commons.codec.binary.Base32 get(),"digraph cfg_get {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: org.apache.commons.codec.CodecPolicy getDecodingPolicy()>()""];\n	""2"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: byte getPadding()>()""];\n	""3"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: byte[] getEncodeTable()>()""];\n	""4"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: byte[] getLineSeparator()>()""];\n	""5"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: int getLineLength()>()""];\n	""6"" [label=""$stack6 = new org.apache.commons.codec.binary.Base32""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],byte[],byte,org.apache.commons.codec.CodecPolicy,org.apache.commons.codec.binary.Base32$1)>($stack5, $stack4, $stack3, $stack2, $stack1, null)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base32$Builder""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32$Builder.setHexDecodeTable(boolean),Method,"* Sets the decode table to use Base32 hexadecimal if {@code true}, otherwise use the Base32 alphabet.\n         * <p>\n         * This overrides a value previously set with {@link #setEncodeTable(byte...)}.\n         * </p>\n         *\n         * @param useHex use Base32 hexadecimal if {@code true}, otherwise use the Base32 alphabet.\n         * @return this instance.\n         * @since 1.18.0",public Builder setHexDecodeTable(final boolean useHex) {\n    return setEncodeTable(decodeTable(useHex));\n},org.apache.commons.codec.binary.Base32$Builder setHexDecodeTable(boolean),"digraph cfg_setHexDecodeTable {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base32: byte[] access$200(boolean)>(useHex)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setEncodeTable(byte[])>($stack2)""];\n	""3"" [label=""$stack4 = (org.apache.commons.codec.binary.Base32$Builder) $stack3""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base32$Builder""];\n	""6"" [label=""useHex := @parameter0: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32$Builder.setHexEncodeTable(boolean),Method,"* Sets the encode table to use Base32 hexadecimal if {@code true}, otherwise use the Base32 alphabet.\n         * <p>\n         * This overrides a value previously set with {@link #setEncodeTable(byte...)}.\n         * </p>\n         *\n         * @param useHex use Base32 hexadecimal if {@code true}, otherwise use the Base32 alphabet.\n         * @return this instance.\n         * @since 1.18.0",public Builder setHexEncodeTable(final boolean useHex) {\n    return setEncodeTable(encodeTable(useHex));\n},org.apache.commons.codec.binary.Base32$Builder setHexEncodeTable(boolean),"digraph cfg_setHexEncodeTable {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base32: byte[] access$300(boolean)>(useHex)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base32$Builder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setEncodeTable(byte[])>($stack2)""];\n	""3"" [label=""$stack4 = (org.apache.commons.codec.binary.Base32$Builder) $stack3""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base32$Builder""];\n	""6"" [label=""useHex := @parameter0: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32$Builder.<init>(),Constructor,* Constructs a new instance.,public Builder() {\n    super(ENCODE_TABLE);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base32: byte[] access$000()>()""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: void <init>(byte[])>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base32$Builder""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.StringUtils.equals(CharSequence,CharSequence)",Method,"* <p>\n     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n     * </p>\n     *\n     * <p>\n     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal.\n     * The comparison is case sensitive.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, ""abc"")  = false\n     * StringUtils.equals(""abc"", null)  = false\n     * StringUtils.equals(""abc"", ""abc"") = true\n     * StringUtils.equals(""abc"", ""ABC"") = false\n     * </pre>\n     *\n     * <p>\n     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n     * </p>\n     *\n     * @see Object#equals(Object)\n     * @param cs1\n     *            the first CharSequence, may be {@code null}\n     * @param cs2\n     *            the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 1.10","public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n    return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n}","boolean equals(java.lang.CharSequence,java.lang.CharSequence)","digraph cfg_equals {\n	""1"" [label=""$stack2 = cs1 instanceof java.lang.String""];\n	""2"" [label=""$stack3 = interfaceinvoke cs2.<java.lang.CharSequence: int length()>()""];\n	""3"" [label=""$stack4 = interfaceinvoke cs1.<java.lang.CharSequence: int length()>()""];\n	""4"" [label=""$stack5 = interfaceinvoke cs1.<java.lang.CharSequence: int length()>()""];\n	""5"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(cs1, 0, 0, cs2, 0, $stack5)""];\n	""6"" [label=""$stack7 = 0""];\n	""7"" [label=""$stack7 = 1""];\n	""8"" [label=""$stack8 = cs2 instanceof java.lang.String""];\n	""9"" [label=""$stack9 = virtualinvoke cs1.<java.lang.Object: boolean equals(java.lang.Object)>(cs2)""];\n	""10"" [label=""cs1 := @parameter0: java.lang.CharSequence""];\n	""11"" [label=""cs2 := @parameter1: java.lang.CharSequence""];\n	""12"" [label=""goto""];\n	""13"" [label=""if $stack2 == 0""];\n	""14"" [label=""if $stack4 != $stack3""];\n	""15"" [label=""if $stack6 == 0""];\n	""16"" [label=""if $stack8 == 0""];\n	""17"" [label=""if cs1 != cs2""];\n	""18"" [label=""if cs1 == null""];\n	""19"" [label=""if cs2 != null""];\n	""20"" [label=""return $stack7""];\n	""21"" [label=""return $stack9""];\n	""22"" [label=""return 0""];\n	""23"" [label=""return 1""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""20""[label=""cfg_goto""];\n	""13"" -> ""3""[label=""cfg_true""];\n	""13"" -> ""8""[label=""cfg_false""];\n	""14"" -> ""4""[label=""cfg_false""];\n	""14"" -> ""6""[label=""cfg_true""];\n	""15"" -> ""6""[label=""cfg_true""];\n	""15"" -> ""7""[label=""cfg_false""];\n	""16"" -> ""3""[label=""cfg_true""];\n	""16"" -> ""9""[label=""cfg_false""];\n	""17"" -> ""18""[label=""cfg_true""];\n	""17"" -> ""23""[label=""cfg_false""];\n	""18"" -> ""19""[label=""cfg_false""];\n	""18"" -> ""22""[label=""cfg_true""];\n	""19"" -> ""1""[label=""cfg_true""];\n	""19"" -> ""22""[label=""cfg_false""];\n	""2"" -> ""14""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""15""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_next""];\n	""8"" -> ""16""[label=""cfg_next""];\n	""9"" -> ""21""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.StringUtils.getByteBuffer(String,Charset)",Method,"* Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the {@code String}\n     * @return the encoded bytes","private static ByteBuffer getByteBuffer(final String string, final Charset charset) {\n    if (string == null) {\n        return null;\n    }\n    return ByteBuffer.wrap(string.getBytes(charset));\n}","java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.charset.Charset)","digraph cfg_getByteBuffer {\n	""1"" [label=""$stack2 = virtualinvoke string.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(charset)""];\n	""2"" [label=""$stack3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($stack2)""];\n	""3"" [label=""charset := @parameter1: java.nio.charset.Charset""];\n	""4"" [label=""if string != null""];\n	""5"" [label=""return $stack3""];\n	""6"" [label=""return null""];\n	""7"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""6""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(String),Method,"* Encodes the given string into a byte buffer using the UTF-8 charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)\n     * @since 1.11","public static ByteBuffer getByteBufferUtf8(final String string) {\n    return getByteBuffer(string, StandardCharsets.UTF_8);\n}",java.nio.ByteBuffer getByteBufferUtf8(java.lang.String),"digraph cfg_getByteBufferUtf8 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.StringUtils.getBytes(String,Charset)",Method,"* Calls {@link String#getBytes(Charset)}\n     *\n     * @param string\n     *            The string to encode (if null, return null).\n     * @param charset\n     *            The {@link Charset} to encode the {@code String}\n     * @return the encoded bytes","private static byte[] getBytes(final String string, final Charset charset) {\n    return string == null ? null : string.getBytes(charset);\n}","byte[] getBytes(java.lang.String,java.nio.charset.Charset)","digraph cfg_getBytes {\n	""1"" [label=""$stack2 = null""];\n	""2"" [label=""$stack2 = virtualinvoke string.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(charset)""];\n	""3"" [label=""charset := @parameter1: java.nio.charset.Charset""];\n	""4"" [label=""goto""];\n	""5"" [label=""if string != null""];\n	""6"" [label=""return $stack2""];\n	""7"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(String),Method,"* Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new\n     * byte array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#ISO_8859_1} is not initialized, which should never happen\n     *             since it is required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesIso8859_1(final String string) {\n    return getBytes(string, StandardCharsets.ISO_8859_1);\n}",byte[] getBytesIso8859_1(java.lang.String),"digraph cfg_getBytesIso8859_1 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(String,String)",Method,"* Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n     * array.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#getBytes(String)","public static byte[] getBytesUnchecked(final String string, final String charsetName) {\n    if (string == null) {\n        return null;\n    }\n    try {\n        return string.getBytes(charsetName);\n    } catch (final UnsupportedEncodingException e) {\n        throw StringUtils.newIllegalStateException(charsetName, e);\n    }\n}","byte[] getBytesUnchecked(java.lang.String,java.lang.String)","digraph cfg_getBytesUnchecked {\n	""1"" [label=""$stack3 = virtualinvoke string.<java.lang.String: byte[] getBytes(java.lang.String)>(charsetName)""];\n	""2"" [label=""$stack4 := @caughtexception""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(charsetName, e)""];\n	""4"" [label=""charsetName := @parameter1: java.lang.String""];\n	""5"" [label=""e = $stack4""];\n	""6"" [label=""if string != null""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""return null""];\n	""9"" [label=""string := @parameter0: java.lang.String""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""8""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(String),Method,"* Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#US_ASCII} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesUsAscii(final String string) {\n    return getBytes(string, StandardCharsets.US_ASCII);\n}",byte[] getBytesUsAscii(java.lang.String),"digraph cfg_getBytesUsAscii {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.getBytesUtf16(String),Method,"* Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesUtf16(final String string) {\n    return getBytes(string, StandardCharsets.UTF_16);\n}",byte[] getBytesUtf16(java.lang.String),"digraph cfg_getBytesUtf16 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(String),Method,"* Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16BE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesUtf16Be(final String string) {\n    return getBytes(string, StandardCharsets.UTF_16BE);\n}",byte[] getBytesUtf16Be(java.lang.String),"digraph cfg_getBytesUtf16Be {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(String),Method,"* Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16LE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesUtf16Le(final String string) {\n    return getBytes(string, StandardCharsets.UTF_16LE);\n}",byte[] getBytesUtf16Le(java.lang.String),"digraph cfg_getBytesUtf16Le {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.getBytesUtf8(String),Method,"* Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte\n     * array.\n     *\n     * @param string\n     *            the String to encode, may be {@code null}\n     * @return encoded bytes, or {@code null} if the input string was {@code null}\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n     * @see Charset\n     * @see #getBytesUnchecked(String, String)","public static byte[] getBytesUtf8(final String string) {\n    return getBytes(string, StandardCharsets.UTF_8);\n}",byte[] getBytesUtf8(java.lang.String),"digraph cfg_getBytesUtf8 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(string, $stack1)""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""string := @parameter0: java.lang.String""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.StringUtils.newIllegalStateException(String,UnsupportedEncodingException)",Method,No Comment,"private static IllegalStateException newIllegalStateException(final String charsetName, final UnsupportedEncodingException e) {\n    return new IllegalStateException(charsetName + "": "" + e);\n}","java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)","digraph cfg_newIllegalStateException {\n	""1"" [label=""$stack2 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(charsetName)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"": \"")""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e)""];\n	""5"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""6"" [label=""$stack7 = new java.lang.IllegalStateException""];\n	""7"" [label=""charsetName := @parameter0: java.lang.String""];\n	""8"" [label=""e := @parameter1: java.io.UnsupportedEncodingException""];\n	""9"" [label=""return $stack7""];\n	""10"" [label=""specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>()""];\n	""11"" [label=""specialinvoke $stack7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack6)""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.binary.StringUtils.newString(byte[],Charset)",Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the given charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @param charset\n     *            The {@link Charset} to encode the {@code String}; not {@code null}\n     * @return A new {@code String} decoded from the specified array of bytes using the given charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if charset is {@code null}","private static String newString(final byte[] bytes, final Charset charset) {\n    return bytes == null ? null : new String(bytes, charset);\n}","java.lang.String newString(byte[],java.nio.charset.Charset)","digraph cfg_newString {\n	""1"" [label=""$stack2 = new java.lang.String""];\n	""2"" [label=""$stack2 = null""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""charset := @parameter1: java.nio.charset.Charset""];\n	""5"" [label=""goto""];\n	""6"" [label=""if bytes != null""];\n	""7"" [label=""return $stack2""];\n	""8"" [label=""specialinvoke $stack2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(bytes, charset)""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""7""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.binary.StringUtils.newString(byte[],String)",Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the given charset.\n     * <p>\n     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n     * </p>\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be {@code null}\n     * @param charsetName\n     *            The name of a required {@link java.nio.charset.Charset}\n     * @return A new {@code String} decoded from the specified array of bytes using the given charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws IllegalStateException\n     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n     *             required charset name.\n     * @see CharEncoding\n     * @see String#String(byte[], String)","public static String newString(final byte[] bytes, final String charsetName) {\n    if (bytes == null) {\n        return null;\n    }\n    try {\n        return new String(bytes, charsetName);\n    } catch (final UnsupportedEncodingException e) {\n        throw StringUtils.newIllegalStateException(charsetName, e);\n    }\n}","java.lang.String newString(byte[],java.lang.String)","digraph cfg_newString {\n	""1"" [label=""$stack3 = new java.lang.String""];\n	""2"" [label=""$stack4 := @caughtexception""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(charsetName, e)""];\n	""4"" [label=""bytes := @parameter0: byte[]""];\n	""5"" [label=""charsetName := @parameter1: java.lang.String""];\n	""6"" [label=""e = $stack4""];\n	""7"" [label=""if bytes != null""];\n	""8"" [label=""return $stack3""];\n	""9"" [label=""return null""];\n	""10"" [label=""specialinvoke $stack3.<java.lang.String: void <init>(byte[],java.lang.String)>(bytes, charsetName)""];\n	""11"" [label=""throw $stack5""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""1"" -> ""2""[label=""cfg_except""];\n	""10"" -> ""2""[label=""cfg_except""];\n	""10"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_true""];\n	""7"" -> ""9""[label=""cfg_false""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the ISO-8859-1 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters, may be {@code null}\n     * @return A new {@code String} decoded from the specified array of bytes using the ISO-8859-1 charset, or\n     *         {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#ISO_8859_1} is not initialized, which should never happen\n     *             since it is required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringIso8859_1(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.ISO_8859_1);\n}",java.lang.String newStringIso8859_1(byte[]),"digraph cfg_newStringIso8859_1 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the US-ASCII charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new {@code String} decoded from the specified array of bytes using the US-ASCII charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#US_ASCII} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringUsAscii(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.US_ASCII);\n}",java.lang.String newStringUsAscii(byte[]),"digraph cfg_newStringUsAscii {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new {@code String} decoded from the specified array of bytes using the UTF-16 charset\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringUtf16(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.UTF_16);\n}",java.lang.String newStringUtf16(byte[]),"digraph cfg_newStringUtf16 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16BE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new {@code String} decoded from the specified array of bytes using the UTF-16BE charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16BE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringUtf16Be(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.UTF_16BE);\n}",java.lang.String newStringUtf16Be(byte[]),"digraph cfg_newStringUtf16Be {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16LE charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new {@code String} decoded from the specified array of bytes using the UTF-16LE charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_16LE} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringUtf16Le(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.UTF_16LE);\n}",java.lang.String newStringUtf16Le(byte[]),"digraph cfg_newStringUtf16Le {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]),Method,"* Constructs a new {@code String} by decoding the specified array of bytes using the UTF-8 charset.\n     *\n     * @param bytes\n     *            The bytes to be decoded into characters\n     * @return A new {@code String} decoded from the specified array of bytes using the UTF-8 charset,\n     *         or {@code null} if the input byte array was {@code null}.\n     * @throws NullPointerException\n     *             Thrown if {@link StandardCharsets#UTF_8} is not initialized, which should never happen since it is\n     *             required by the Java platform specification.\n     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException","public static String newStringUtf8(final byte[] bytes) {\n    return newString(bytes, StandardCharsets.UTF_8);\n}",java.lang.String newStringUtf8(byte[]),"digraph cfg_newStringUtf8 {\n	""1"" [label=""$stack1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(bytes, $stack1)""];\n	""3"" [label=""bytes := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.StringUtils.<init>(),Constructor,* TODO Make private in 2.0.\n     *\n     * @deprecated TODO Make private in 2.0.,@Deprecated\npublic StringUtils() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.StringUtils""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64.builder(),Method,* Creates a new Builder.\n     *\n     * @return a new Builder.\n     * @since 1.17.0,public static Builder builder() {\n    return new Builder();\n},org.apache.commons.codec.binary.Base64$Builder builder(),"digraph cfg_builder {\n	""1"" [label=""$stack0 = new org.apache.commons.codec.binary.Base64$Builder""];\n	""2"" [label=""return $stack0""];\n	""3"" [label=""specialinvoke $stack0.<org.apache.commons.codec.binary.Base64$Builder: void <init>()>()""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.decodeBase64(byte[]),Method,* Decodes Base64 data into octets.\n     * <p>\n     * <strong>Note:</strong> this method seamlessly handles data encoded in URL-safe or normal mode.\n     * </p>\n     *\n     * @param base64Data\n     *            Byte array containing Base64 data\n     * @return Array containing decoded data.,public static byte[] decodeBase64(final byte[] base64Data) {\n    return new Base64().decode(base64Data);\n},byte[] decodeBase64(byte[]),"digraph cfg_decodeBase64 {\n	""1"" [label=""$stack1 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>(base64Data)""];\n	""3"" [label=""base64Data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack1.<org.apache.commons.codec.binary.Base64: void <init>()>()""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.decodeBase64(String),Method,* Decodes a Base64 String into octets.\n     * <p>\n     * <strong>Note:</strong> this method seamlessly handles data encoded in URL-safe or normal mode.\n     * </p>\n     *\n     * @param base64String\n     *            String containing Base64 data\n     * @return Array containing decoded data.\n     * @since 1.4,public static byte[] decodeBase64(final String base64String) {\n    return new Base64().decode(base64String);\n},byte[] decodeBase64(java.lang.String),"digraph cfg_decodeBase64 {\n	""1"" [label=""$stack1 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>(base64String)""];\n	""3"" [label=""base64String := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack1.<org.apache.commons.codec.binary.Base64: void <init>()>()""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.decodeInteger(byte[]),Method,* Decodes a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.\n     *\n     * @param pArray\n     *            a byte array containing base64 character data\n     * @return A BigInteger\n     * @since 1.4,"public static BigInteger decodeInteger(final byte[] pArray) {\n    return new BigInteger(1, decodeBase64(pArray));\n}",java.math.BigInteger decodeInteger(byte[]),"digraph cfg_decodeInteger {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(pArray)""];\n	""2"" [label=""$stack2 = new java.math.BigInteger""];\n	""3"" [label=""pArray := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack2.<java.math.BigInteger: void <init>(int,byte[])>(1, $stack1)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeBase64(byte[]),Method,* Encodes binary data using the base64 algorithm but does not chunk the output.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.,"public static byte[] encodeBase64(final byte[] binaryData) {\n    return encodeBase64(binaryData, false);\n}",byte[] encodeBase64(byte[]),"digraph cfg_encodeBase64 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(binaryData, 0)""];\n	""2"" [label=""binaryData := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)",Method,"* Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     *\n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}","public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked) {\n    return encodeBase64(binaryData, isChunked, false);\n}","byte[] encodeBase64(byte[],boolean)","digraph cfg_encodeBase64 {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(binaryData, isChunked, 0)""];\n	""2"" [label=""binaryData := @parameter0: byte[]""];\n	""3"" [label=""isChunked := @parameter1: boolean""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)",Method,"* Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     *\n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n     *            <strong>Note: No padding is added when encoding using the URL-safe alphabet.</strong>\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     * @since 1.4","public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe) {\n    return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);\n}","byte[] encodeBase64(byte[],boolean,boolean)","digraph cfg_encodeBase64 {\n	""1"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean,int)>(binaryData, isChunked, urlSafe, 2147483647)""];\n	""2"" [label=""binaryData := @parameter0: byte[]""];\n	""3"" [label=""isChunked := @parameter1: boolean""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""urlSafe := @parameter2: boolean""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)",Method,"* Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     *\n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n     *            <strong>Note: No padding is added when encoding using the URL-safe alphabet.</strong>\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4","public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {\n    if (BinaryCodec.isEmpty(binaryData)) {\n        return binaryData;\n    }\n    // Create this so can use the super-class method\n    // Also ensures that the same roundings are performed by the ctor and the code\n    final Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    final long len = b64.getEncodedLength(binaryData);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(""Input array too big, the output array would be bigger ("" + len + "") than the specified maximum size of "" + maxResultSize);\n    }\n    return b64.encode(binaryData);\n}","byte[] encodeBase64(byte[],boolean,boolean,int)","digraph cfg_encodeBase64 {\n	""1"" [label=""$stack10 = (long) maxResultSize""];\n	""2"" [label=""$stack11 = len cmp $stack10""];\n	""3"" [label=""$stack12 = virtualinvoke b64.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>(binaryData)""];\n	""4"" [label=""$stack13 = new java.lang.StringBuilder""];\n	""5"" [label=""$stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Input array too big, the output array would be bigger (\"")""];\n	""6"" [label=""$stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(len)""];\n	""7"" [label=""$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"") than the specified maximum size of \"")""];\n	""8"" [label=""$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(maxResultSize)""];\n	""9"" [label=""$stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""10"" [label=""$stack19 = new java.lang.IllegalArgumentException""];\n	""11"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(binaryData)""];\n	""12"" [label=""$stack8 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>""];\n	""13"" [label=""$stack9 = new org.apache.commons.codec.binary.Base64""];\n	""14"" [label=""$stack9 = new org.apache.commons.codec.binary.Base64""];\n	""15"" [label=""b64 = $stack9""];\n	""16"" [label=""binaryData := @parameter0: byte[]""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack11 <= 0""];\n	""19"" [label=""if $stack7 == 0""];\n	""20"" [label=""if isChunked == 0""];\n	""21"" [label=""isChunked := @parameter1: boolean""];\n	""22"" [label=""len = virtualinvoke b64.<org.apache.commons.codec.binary.Base64: long getEncodedLength(byte[])>(binaryData)""];\n	""23"" [label=""maxResultSize := @parameter3: int""];\n	""24"" [label=""return $stack12""];\n	""25"" [label=""return binaryData""];\n	""26"" [label=""specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>()""];\n	""27"" [label=""specialinvoke $stack19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack18)""];\n	""28"" [label=""specialinvoke $stack9.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(urlSafe)""];\n	""29"" [label=""specialinvoke $stack9.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(0, $stack8, urlSafe)""];\n	""30"" [label=""throw $stack19""];\n	""31"" [label=""urlSafe := @parameter2: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""11"" -> ""19""[label=""cfg_next""];\n	""12"" -> ""29""[label=""cfg_next""];\n	""13"" -> ""28""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""15"" -> ""22""[label=""cfg_next""];\n	""16"" -> ""21""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_goto""];\n	""18"" -> ""10""[label=""cfg_false""];\n	""18"" -> ""3""[label=""cfg_true""];\n	""19"" -> ""20""[label=""cfg_true""];\n	""19"" -> ""25""[label=""cfg_false""];\n	""2"" -> ""18""[label=""cfg_next""];\n	""20"" -> ""13""[label=""cfg_false""];\n	""20"" -> ""14""[label=""cfg_true""];\n	""21"" -> ""31""[label=""cfg_next""];\n	""22"" -> ""1""[label=""cfg_next""];\n	""23"" -> ""11""[label=""cfg_next""];\n	""26"" -> ""5""[label=""cfg_next""];\n	""27"" -> ""30""[label=""cfg_next""];\n	""28"" -> ""17""[label=""cfg_next""];\n	""29"" -> ""15""[label=""cfg_next""];\n	""3"" -> ""24""[label=""cfg_next""];\n	""31"" -> ""23""[label=""cfg_next""];\n	""4"" -> ""26""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""27""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[]),Method,* Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return Base64 characters chunked in 76 character blocks,"public static byte[] encodeBase64Chunked(final byte[] binaryData) {\n    return encodeBase64(binaryData, true);\n}",byte[] encodeBase64Chunked(byte[]),"digraph cfg_encodeBase64Chunked {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(binaryData, 1)""];\n	""2"" [label=""binaryData := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeBase64String(byte[]),Method,"* Encodes binary data using the base64 algorithm but does not chunk the output.\n     *\n     * NOTE:  We changed the behavior of this method from multi-line chunking (commons-codec-1.4) to\n     * single-line non-chunking (commons-codec-1.5).\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).","public static String encodeBase64String(final byte[] binaryData) {\n    return StringUtils.newStringUsAscii(encodeBase64(binaryData, false));\n}",java.lang.String encodeBase64String(byte[]),"digraph cfg_encodeBase64String {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(binaryData, 0)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack1)""];\n	""3"" [label=""binaryData := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[]),Method,* Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n     * url-safe variation emits - and _ instead of + and / characters.\n     * <strong>Note: No padding is added.</strong>\n     * @param binaryData\n     *            binary data to encode\n     * @return byte[] containing Base64 characters in their UTF-8 representation.\n     * @since 1.4,"public static byte[] encodeBase64URLSafe(final byte[] binaryData) {\n    return encodeBase64(binaryData, false, true);\n}",byte[] encodeBase64URLSafe(byte[]),"digraph cfg_encodeBase64URLSafe {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(binaryData, 0, 1)""];\n	""2"" [label=""binaryData := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[]),Method,* Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n     * url-safe variation emits - and _ instead of + and / characters.\n     * <strong>Note: No padding is added.</strong>\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters\n     * @since 1.4,"public static String encodeBase64URLSafeString(final byte[] binaryData) {\n    return StringUtils.newStringUsAscii(encodeBase64(binaryData, false, true));\n}",java.lang.String encodeBase64URLSafeString(byte[]),"digraph cfg_encodeBase64URLSafeString {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(binaryData, 0, 1)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($stack1)""];\n	""3"" [label=""binaryData := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.encodeInteger(BigInteger),Method,* Encodes to a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.\n     *\n     * @param bigInteger\n     *            a BigInteger\n     * @return A byte array containing base64 character data\n     * @throws NullPointerException\n     *             if null is passed in\n     * @since 1.4,"public static byte[] encodeInteger(final BigInteger bigInteger) {\n    Objects.requireNonNull(bigInteger, ""bigInteger"");\n    return encodeBase64(toIntegerBytes(bigInteger), false);\n}",byte[] encodeInteger(java.math.BigInteger),"digraph cfg_encodeInteger {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] toIntegerBytes(java.math.BigInteger)>(bigInteger)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($stack1, 0)""];\n	""3"" [label=""bigInteger := @parameter0: java.math.BigInteger""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(bigInteger, \""bigInteger\"")""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[]),Method,"* Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n     * method treats whitespace as valid.\n     *\n     * @param arrayOctet\n     *            byte array to test\n     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n     *         {@code false}, otherwise\n     * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.",@Deprecated\npublic static boolean isArrayByteBase64(final byte[] arrayOctet) {\n    return isBase64(arrayOctet);\n},boolean isArrayByteBase64(byte[]),"digraph cfg_isArrayByteBase64 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>(arrayOctet)""];\n	""2"" [label=""arrayOctet := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.isBase64(byte),Method,"* Returns whether or not the {@code octet} is in the base 64 alphabet.\n     *\n     * @param octet\n     *            The value to test\n     * @return {@code true} if the value is defined in the base 64 alphabet, {@code false} otherwise.\n     * @since 1.4",public static boolean isBase64(final byte octet) {\n    return octet == PAD_DEFAULT || octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1;\n},boolean isBase64(byte),"digraph cfg_isBase64 {\n	""1"" [label=""$stack1 = 0""];\n	""2"" [label=""$stack1 = 1""];\n	""3"" [label=""$stack2 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>""];\n	""4"" [label=""$stack3 = lengthof $stack2""];\n	""5"" [label=""$stack4 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>""];\n	""6"" [label=""$stack5 = $stack4[octet]""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack5 == -1""];\n	""9"" [label=""if octet < 0""];\n	""10"" [label=""if octet == 61""];\n	""11"" [label=""if octet >= $stack3""];\n	""12"" [label=""octet := @parameter0: byte""];\n	""13"" [label=""return $stack1""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_true""];\n	""10"" -> ""9""[label=""cfg_false""];\n	""11"" -> ""1""[label=""cfg_true""];\n	""11"" -> ""5""[label=""cfg_false""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""11""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_goto""];\n	""8"" -> ""1""[label=""cfg_true""];\n	""8"" -> ""2""[label=""cfg_false""];\n	""9"" -> ""1""[label=""cfg_true""];\n	""9"" -> ""3""[label=""cfg_false""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.isBase64(byte[]),Method,"* Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n     * method treats whitespace as valid.\n     *\n     * @param arrayOctet\n     *            byte array to test\n     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n     *         {@code false}, otherwise\n     * @since 1.5",public static boolean isBase64(final byte[] arrayOctet) {\n    for (final byte element : arrayOctet) {\n        if (!isBase64(element) && !Character.isWhitespace(element)) {\n            return false;\n        }\n    }\n    return true;\n},boolean isBase64(byte[]),"digraph cfg_isBase64 {\n	""1"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>(element)""];\n	""2"" [label=""$stack6 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(element)""];\n	""3"" [label=""arrayOctet := @parameter0: byte[]""];\n	""4"" [label=""element = l1[l3]""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack5 != 0""];\n	""7"" [label=""if $stack6 != 0""];\n	""8"" [label=""if l3 >= l2""];\n	""9"" [label=""l1 = arrayOctet""];\n	""10"" [label=""l2 = lengthof l1""];\n	""11"" [label=""l3 = 0""];\n	""12"" [label=""l3 = l3 + 1""];\n	""13"" [label=""return 0""];\n	""14"" [label=""return 1""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""8""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_goto""];\n	""6"" -> ""12""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""12""[label=""cfg_true""];\n	""7"" -> ""13""[label=""cfg_false""];\n	""8"" -> ""14""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.isBase64(String),Method,"* Tests a given String to see if it contains only valid characters within the Base64 alphabet. Currently the\n     * method treats whitespace as valid.\n     *\n     * @param base64\n     *            String to test\n     * @return {@code true} if all characters in the String are valid characters in the Base64 alphabet or if\n     *         the String is empty; {@code false}, otherwise\n     *  @since 1.5",public static boolean isBase64(final String base64) {\n    return isBase64(StringUtils.getBytesUtf8(base64));\n},boolean isBase64(java.lang.String),"digraph cfg_isBase64 {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(base64)""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($stack1)""];\n	""3"" [label=""base64 := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Base64.toIntegerBytes(BigInteger),Method,* Returns a byte-array representation of a {@code BigInteger} without sign bit.\n     *\n     * @param bigInt\n     *            {@code BigInteger} to be converted\n     * @return a byte array representation of the BigInteger parameter,"static byte[] toIntegerBytes(final BigInteger bigInt) {\n    int bitlen = bigInt.bitLength();\n    // round bitlen\n    bitlen = bitlen + 7 >> 3 << 3;\n    final byte[] bigBytes = bigInt.toByteArray();\n    if (bigInt.bitLength() % 8 != 0 && bigInt.bitLength() / 8 + 1 == bitlen / 8) {\n        return bigBytes;\n    }\n    // set up params for copying everything but sign bit\n    int startSrc = 0;\n    int len = bigBytes.length;\n    // if bigInt is exactly byte-aligned, just skip signbit in copy\n    if (bigInt.bitLength() % 8 == 0) {\n        startSrc = 1;\n        len--;\n    }\n    // to pad w/ nulls as per spec\n    final int startDst = bitlen / 8 - len;\n    final byte[] resizedBytes = new byte[bitlen / 8];\n    System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n    return resizedBytes;\n}",byte[] toIntegerBytes(java.math.BigInteger),"digraph cfg_toIntegerBytes {\n	""1"" [label=""$stack10 = $stack9 % 8""];\n	""2"" [label=""$stack11 = virtualinvoke bigInt.<java.math.BigInteger: int bitLength()>()""];\n	""3"" [label=""$stack12 = $stack11 % 8""];\n	""4"" [label=""$stack13 = bitlen / 8""];\n	""5"" [label=""$stack14 = bitlen / 8""];\n	""6"" [label=""$stack15 = virtualinvoke bigInt.<java.math.BigInteger: int bitLength()>()""];\n	""7"" [label=""$stack16 = $stack15 / 8""];\n	""8"" [label=""$stack17 = bitlen / 8""];\n	""9"" [label=""$stack18 = $stack16 + 1""];\n	""10"" [label=""$stack7 = bitlen + 7""];\n	""11"" [label=""$stack8 = $stack7 >> 3""];\n	""12"" [label=""$stack9 = virtualinvoke bigInt.<java.math.BigInteger: int bitLength()>()""];\n	""13"" [label=""bigBytes = virtualinvoke bigInt.<java.math.BigInteger: byte[] toByteArray()>()""];\n	""14"" [label=""bigInt := @parameter0: java.math.BigInteger""];\n	""15"" [label=""bitlen = $stack8 << 3""];\n	""16"" [label=""bitlen = virtualinvoke bigInt.<java.math.BigInteger: int bitLength()>()""];\n	""17"" [label=""if $stack10 == 0""];\n	""18"" [label=""if $stack12 != 0""];\n	""19"" [label=""if $stack18 != $stack17""];\n	""20"" [label=""len = len + -1""];\n	""21"" [label=""len = lengthof bigBytes""];\n	""22"" [label=""resizedBytes = newarray (byte)[$stack14]""];\n	""23"" [label=""return bigBytes""];\n	""24"" [label=""return resizedBytes""];\n	""25"" [label=""startDst = $stack13 - len""];\n	""26"" [label=""startSrc = 0""];\n	""27"" [label=""startSrc = 1""];\n	""28"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(bigBytes, startSrc, resizedBytes, startDst, len)""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""15""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""10""[label=""cfg_next""];\n	""17"" -> ""26""[label=""cfg_true""];\n	""17"" -> ""6""[label=""cfg_false""];\n	""18"" -> ""27""[label=""cfg_false""];\n	""18"" -> ""4""[label=""cfg_true""];\n	""19"" -> ""23""[label=""cfg_false""];\n	""19"" -> ""26""[label=""cfg_true""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""4""[label=""cfg_next""];\n	""21"" -> ""2""[label=""cfg_next""];\n	""22"" -> ""28""[label=""cfg_next""];\n	""25"" -> ""5""[label=""cfg_next""];\n	""26"" -> ""21""[label=""cfg_next""];\n	""27"" -> ""20""[label=""cfg_next""];\n	""28"" -> ""24""[label=""cfg_next""];\n	""3"" -> ""18""[label=""cfg_next""];\n	""4"" -> ""25""[label=""cfg_next""];\n	""5"" -> ""22""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""19""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",static 
org.apache.commons.codec.binary.Base64.toUrlSafeEncodeTable(boolean),Method,No Comment,private static byte[] toUrlSafeEncodeTable(final boolean urlSafe) {\n    return urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n},byte[] toUrlSafeEncodeTable(boolean),"digraph cfg_toUrlSafeEncodeTable {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>""];\n	""2"" [label=""$stack1 = <org.apache.commons.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>""];\n	""3"" [label=""goto""];\n	""4"" [label=""if urlSafe == 0""];\n	""5"" [label=""return $stack1""];\n	""6"" [label=""urlSafe := @parameter0: boolean""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""1""[label=""cfg_true""];\n	""4"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.Base64.calculateDecodeTable(byte[]),Method,* Calculates a decode table for a given encode table.\n     *\n     * @param encodeTable that is used to determine decode lookup table\n     * @return decodeTable,"private byte[] calculateDecodeTable(final byte[] encodeTable) {\n    final byte[] decodeTable = new byte[DECODING_TABLE_LENGTH];\n    Arrays.fill(decodeTable, (byte) -1);\n    for (int i = 0; i < encodeTable.length; i++) {\n        decodeTable[encodeTable[i]] = (byte) i;\n    }\n    return decodeTable;\n}",byte[] calculateDecodeTable(byte[]),"digraph cfg_calculateDecodeTable {\n	""1"" [label=""$stack4 = lengthof encodeTable""];\n	""2"" [label=""$stack5 = encodeTable[i]""];\n	""3"" [label=""$stack6 = (byte) i""];\n	""4"" [label=""decodeTable = newarray (byte)[256]""];\n	""5"" [label=""decodeTable[$stack5] = $stack6""];\n	""6"" [label=""encodeTable := @parameter0: byte[]""];\n	""7"" [label=""goto""];\n	""8"" [label=""i = 0""];\n	""9"" [label=""i = i + 1""];\n	""10"" [label=""if i >= $stack4""];\n	""11"" [label=""return decodeTable""];\n	""12"" [label=""staticinvoke <java.util.Arrays: void fill(byte[],byte)>(decodeTable, -1)""];\n	""13"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_true""];\n	""10"" -> ""2""[label=""cfg_false""];\n	""12"" -> ""8""[label=""cfg_next""];\n	""13"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_goto""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context)",Method,"* <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1""\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-base64 characters. This is how chunked (for example 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Thanks to ""commons"" project in ws.apache.org for the bitwise operations, and general approach.\n     * https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param input\n     *            byte[] array of ASCII data to base64 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for decoding.\n     * @param context\n     *            the context to be used","@Override\nvoid decode(final byte[] input, int inPos, final int inAvail, final Context context) {\n    if (context.eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        context.eof = true;\n    }\n    final int decodeSize = this.encodeSize - 1;\n    for (int i = 0; i < inAvail; i++) {\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        final byte b = input[inPos++];\n        if (b == pad) {\n            // We're done.\n            context.eof = true;\n            break;\n        }\n        if (b >= 0 && b < decodeTable.length) {\n            final int result = decodeTable[b];\n            if (result >= 0) {\n                context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;\n                context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n                if (context.modulus == 0) {\n                    buffer[context.pos++] = (byte) (context.ibitWorkArea >> 16 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.ibitWorkArea >> 8 & MASK_8BITS);\n                    buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);\n                }\n            }\n        }\n    }\n    // Two forms of EOF as far as base64 decoder is concerned: actual\n    // EOF (-1) and first time '=' character is encountered in stream.\n    // This approach makes the '=' padding characters completely optional.\n    if (context.eof && context.modulus != 0) {\n        final byte[] buffer = ensureBufferSize(decodeSize, context);\n        // We have some spare bits remaining\n        // Output all whole multiples of 8 bits and ignore the rest\n        switch(context.modulus) {\n            //              case 0 : // impossible, as excluded above\n            case // 6 bits - either ignore entirely, or raise an exception\n            1:\n                validateTrailingCharacter();\n                break;\n            case // 12 bits = 8 + 4\n            2:\n                validateCharacter(MASK_4BITS, context);\n                // dump the extra 4 bits\n                context.ibitWorkArea = context.ibitWorkArea >> 4;\n                buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);\n                break;\n            case // 18 bits = 8 + 8 + 2\n            3:\n                validateCharacter(MASK_2BITS, context);\n                // dump 2 bits\n                context.ibitWorkArea = context.ibitWorkArea >> 2;\n                buffer[context.pos++] = (byte) (context.ibitWorkArea >> 8 & MASK_8BITS);\n                buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);\n                break;\n            default:\n                throw new IllegalStateException(""Impossible modulus "" + context.modulus);\n        }\n    }\n}","void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_decode {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.binary.Base64: int encodeSize>""];\n	""3"" [label=""$stack12 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""4"" [label=""$stack13 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""5"" [label=""$stack14 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""6"" [label=""$stack15 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""7"" [label=""$stack16 = $stack15 >> 2""];\n	""8"" [label=""$stack17 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""9"" [label=""$stack18 = $stack17 + 1""];\n	""10"" [label=""$stack19 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""11"" [label=""$stack20 = $stack19 >> 8""];\n	""12"" [label=""$stack21 = $stack20 & 255""];\n	""13"" [label=""$stack22 = (byte) $stack21""];\n	""14"" [label=""$stack23 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""15"" [label=""$stack24 = $stack23 + 1""];\n	""16"" [label=""$stack25 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""17"" [label=""$stack26 = $stack25 & 255""];\n	""18"" [label=""$stack27 = (byte) $stack26""];\n	""19"" [label=""$stack28 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""20"" [label=""$stack29 = $stack28 >> 4""];\n	""21"" [label=""$stack30 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""22"" [label=""$stack31 = $stack30 + 1""];\n	""23"" [label=""$stack32 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""24"" [label=""$stack33 = $stack32 & 255""];\n	""25"" [label=""$stack34 = (byte) $stack33""];\n	""26"" [label=""$stack35 = new java.lang.StringBuilder""];\n	""27"" [label=""$stack36 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""28"" [label=""$stack37 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Impossible modulus \"")""];\n	""29"" [label=""$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack36)""];\n	""30"" [label=""$stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""31"" [label=""$stack40 = new java.lang.IllegalStateException""];\n	""32"" [label=""$stack41 = inPos""];\n	""33"" [label=""$stack42 = this.<org.apache.commons.codec.binary.Base64: byte pad>""];\n	""34"" [label=""$stack43 = this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>""];\n	""35"" [label=""$stack44 = lengthof $stack43""];\n	""36"" [label=""$stack45 = this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>""];\n	""37"" [label=""$stack46 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""38"" [label=""$stack47 = $stack46 + 1""];\n	""39"" [label=""$stack48 = $stack47 % 4""];\n	""40"" [label=""$stack49 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""41"" [label=""$stack50 = $stack49 << 6""];\n	""42"" [label=""$stack51 = $stack50 + result""];\n	""43"" [label=""$stack52 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""44"" [label=""$stack53 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""45"" [label=""$stack54 = $stack53 + 1""];\n	""46"" [label=""$stack55 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""47"" [label=""$stack56 = $stack55 >> 16""];\n	""48"" [label=""$stack57 = $stack56 & 255""];\n	""49"" [label=""$stack58 = (byte) $stack57""];\n	""50"" [label=""$stack59 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""51"" [label=""$stack60 = $stack59 + 1""];\n	""52"" [label=""$stack61 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""53"" [label=""$stack62 = $stack61 >> 8""];\n	""54"" [label=""$stack63 = $stack62 & 255""];\n	""55"" [label=""$stack64 = (byte) $stack63""];\n	""56"" [label=""$stack65 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""57"" [label=""$stack66 = $stack65 + 1""];\n	""58"" [label=""$stack67 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""59"" [label=""$stack68 = $stack67 & 255""];\n	""60"" [label=""$stack69 = (byte) $stack68""];\n	""61"" [label=""b = input[$stack41]""];\n	""62"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(decodeSize, context)""];\n	""63"" [label=""buffer[$stack53] = $stack58""];\n	""64"" [label=""buffer[$stack59] = $stack64""];\n	""65"" [label=""buffer[$stack65] = $stack69""];\n	""66"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""67"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""68"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""69"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack16""];\n	""70"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack29""];\n	""71"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack51""];\n	""72"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = $stack48""];\n	""73"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack18""];\n	""74"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack24""];\n	""75"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack31""];\n	""76"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack54""];\n	""77"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack60""];\n	""78"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack66""];\n	""79"" [label=""decodeSize = $stack11 - 1""];\n	""80"" [label=""goto""];\n	""81"" [label=""goto""];\n	""82"" [label=""goto""];\n	""83"" [label=""goto""];\n	""84"" [label=""goto""];\n	""85"" [label=""i = 0""];\n	""86"" [label=""i = i + 1""];\n	""87"" [label=""i = virtualinvoke this.<org.apache.commons.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(decodeSize, context)""];\n	""88"" [label=""i[$stack17] = $stack22""];\n	""89"" [label=""i[$stack23] = $stack27""];\n	""90"" [label=""i[$stack30] = $stack34""];\n	""91"" [label=""if $stack10 == 0""];\n	""92"" [label=""if $stack12 == 0""];\n	""93"" [label=""if $stack13 == 0""];\n	""94"" [label=""if $stack52 != 0""];\n	""95"" [label=""if b != $stack42""];\n	""96"" [label=""if b < 0""];\n	""97"" [label=""if b >= $stack44""];\n	""98"" [label=""if i >= inAvail""];\n	""99"" [label=""if inAvail >= 0""];\n	""100"" [label=""if result < 0""];\n	""101"" [label=""inAvail := @parameter2: int""];\n	""102"" [label=""inPos := @parameter1: int""];\n	""103"" [label=""inPos = inPos + 1""];\n	""104"" [label=""input := @parameter0: byte[]""];\n	""105"" [label=""result = $stack45[b]""];\n	""106"" [label=""return""];\n	""107"" [label=""return""];\n	""108"" [label=""specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>()""];\n	""109"" [label=""specialinvoke $stack40.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack39)""];\n	""110"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void validateCharacter(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(15, context)""];\n	""111"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void validateCharacter(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(3, context)""];\n	""112"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void validateTrailingCharacter()>()""];\n	""113"" [label=""switch($stack14) \{     case 1:     case 2:     case 3:     default:  \}""];\n	""114"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""115"" [label=""throw $stack40""];\n	""1"" -> ""91""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""37""[label=""cfg_false""];\n	""100"" -> ""86""[label=""cfg_true""];\n	""101"" -> ""66""[label=""cfg_next""];\n	""102"" -> ""101""[label=""cfg_next""];\n	""103"" -> ""61""[label=""cfg_next""];\n	""104"" -> ""102""[label=""cfg_next""];\n	""105"" -> ""100""[label=""cfg_next""];\n	""108"" -> ""28""[label=""cfg_next""];\n	""109"" -> ""115""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""110"" -> ""19""[label=""cfg_next""];\n	""111"" -> ""6""[label=""cfg_next""];\n	""112"" -> ""82""[label=""cfg_next""];\n	""113"" -> ""110""[label=""cfg_switch""];\n	""113"" -> ""111""[label=""cfg_switch""];\n	""113"" -> ""112""[label=""cfg_switch""];\n	""113"" -> ""31""[label=""cfg_switch""];\n	""114"" -> ""104""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""88""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""74""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""89""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""79""[label=""cfg_next""];\n	""20"" -> ""70""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""75""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""90""[label=""cfg_next""];\n	""26"" -> ""108""[label=""cfg_next""];\n	""27"" -> ""29""[label=""cfg_next""];\n	""28"" -> ""27""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""92""[label=""cfg_next""];\n	""30"" -> ""109""[label=""cfg_next""];\n	""31"" -> ""26""[label=""cfg_next""];\n	""32"" -> ""103""[label=""cfg_next""];\n	""33"" -> ""95""[label=""cfg_next""];\n	""34"" -> ""35""[label=""cfg_next""];\n	""35"" -> ""97""[label=""cfg_next""];\n	""36"" -> ""105""[label=""cfg_next""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""39""[label=""cfg_next""];\n	""39"" -> ""72""[label=""cfg_next""];\n	""4"" -> ""93""[label=""cfg_next""];\n	""40"" -> ""41""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""71""[label=""cfg_next""];\n	""43"" -> ""94""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""76""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""48""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""63""[label=""cfg_next""];\n	""5"" -> ""113""[label=""cfg_next""];\n	""50"" -> ""51""[label=""cfg_next""];\n	""51"" -> ""77""[label=""cfg_next""];\n	""52"" -> ""53""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""55""[label=""cfg_next""];\n	""55"" -> ""64""[label=""cfg_next""];\n	""56"" -> ""57""[label=""cfg_next""];\n	""57"" -> ""78""[label=""cfg_next""];\n	""58"" -> ""59""[label=""cfg_next""];\n	""59"" -> ""60""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""60"" -> ""65""[label=""cfg_next""];\n	""61"" -> ""33""[label=""cfg_next""];\n	""62"" -> ""32""[label=""cfg_next""];\n	""63"" -> ""50""[label=""cfg_next""];\n	""64"" -> ""56""[label=""cfg_next""];\n	""65"" -> ""86""[label=""cfg_next""];\n	""66"" -> ""1""[label=""cfg_next""];\n	""67"" -> ""2""[label=""cfg_next""];\n	""68"" -> ""80""[label=""cfg_next""];\n	""69"" -> ""8""[label=""cfg_next""];\n	""7"" -> ""69""[label=""cfg_next""];\n	""70"" -> ""21""[label=""cfg_next""];\n	""71"" -> ""43""[label=""cfg_next""];\n	""72"" -> ""40""[label=""cfg_next""];\n	""73"" -> ""10""[label=""cfg_next""];\n	""74"" -> ""16""[label=""cfg_next""];\n	""75"" -> ""23""[label=""cfg_next""];\n	""76"" -> ""46""[label=""cfg_next""];\n	""77"" -> ""52""[label=""cfg_next""];\n	""78"" -> ""58""[label=""cfg_next""];\n	""79"" -> ""85""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""3""[label=""cfg_goto""];\n	""81"" -> ""98""[label=""cfg_goto""];\n	""82"" -> ""107""[label=""cfg_goto""];\n	""83"" -> ""107""[label=""cfg_goto""];\n	""84"" -> ""107""[label=""cfg_goto""];\n	""85"" -> ""98""[label=""cfg_next""];\n	""86"" -> ""81""[label=""cfg_next""];\n	""87"" -> ""5""[label=""cfg_next""];\n	""88"" -> ""14""[label=""cfg_next""];\n	""89"" -> ""84""[label=""cfg_next""];\n	""9"" -> ""73""[label=""cfg_next""];\n	""90"" -> ""83""[label=""cfg_next""];\n	""91"" -> ""106""[label=""cfg_false""];\n	""91"" -> ""99""[label=""cfg_true""];\n	""92"" -> ""107""[label=""cfg_true""];\n	""92"" -> ""4""[label=""cfg_false""];\n	""93"" -> ""107""[label=""cfg_true""];\n	""93"" -> ""87""[label=""cfg_false""];\n	""94"" -> ""44""[label=""cfg_false""];\n	""94"" -> ""86""[label=""cfg_true""];\n	""95"" -> ""68""[label=""cfg_false""];\n	""95"" -> ""96""[label=""cfg_true""];\n	""96"" -> ""34""[label=""cfg_false""];\n	""96"" -> ""86""[label=""cfg_true""];\n	""97"" -> ""36""[label=""cfg_false""];\n	""97"" -> ""86""[label=""cfg_true""];\n	""98"" -> ""3""[label=""cfg_true""];\n	""98"" -> ""62""[label=""cfg_false""];\n	""99"" -> ""2""[label=""cfg_true""];\n	""99"" -> ""67""[label=""cfg_false""];\n}\n",default
"org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context)",Method,"* <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with\n     * the data to encode, and once with inAvail set to ""-1"" to alert encoder that EOF has been reached, to flush last\n     * remaining bytes (if not multiple of 3).\n     * </p>\n     * <p><strong>Note: No padding is added when encoding using the URL-safe alphabet.</strong></p>\n     * <p>\n     * Thanks to ""commons"" project in ws.apache.org for the bitwise operations, and general approach.\n     * https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in\n     *            byte[] array of binary data to base64 encode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     * @param context\n     *            the context to be used","@Override\nvoid encode(final byte[] in, int inPos, final int inAvail, final Context context) {\n    if (context.eof) {\n        return;\n    }\n    // inAvail < 0 is how we're informed of EOF in the underlying data we're\n    // encoding.\n    if (inAvail < 0) {\n        context.eof = true;\n        if (0 == context.modulus && lineLength == 0) {\n            // no leftovers to process and not using chunking\n            return;\n        }\n        final byte[] buffer = ensureBufferSize(encodeSize, context);\n        final int savedPos = context.pos;\n        switch(// 0-2\n        context.modulus) {\n            case // nothing to do here\n            0:\n                break;\n            case // 8 bits = 6 + 2\n            1:\n                // top 6 bits:\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 2 & MASK_6BITS];\n                // remaining 2:\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea << 4 & MASK_6BITS];\n                // URL-SAFE skips the padding to further reduce size.\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                }\n                break;\n            case // 16 bits = 6 + 6 + 4\n            2:\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 10 & MASK_6BITS];\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 4 & MASK_6BITS];\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea << 2 & MASK_6BITS];\n                // URL-SAFE skips the padding to further reduce size.\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buffer[context.pos++] = pad;\n                }\n                break;\n            default:\n                throw new IllegalStateException(""Impossible modulus "" + context.modulus);\n        }\n        // keep track of current line position\n        context.currentLinePos += context.pos - savedPos;\n        // if currentPos == 0 we are at the start of a line, so don't add CRLF\n        if (lineLength > 0 && context.currentLinePos > 0) {\n            System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n            context.pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            final byte[] buffer = ensureBufferSize(encodeSize, context);\n            context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            // BITS_PER_BYTE\n            context.ibitWorkArea = (context.ibitWorkArea << 8) + b;\n            if (0 == context.modulus) {\n                // 3 bytes = 24 bits = 4 * 6 bits to extract\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 18 & MASK_6BITS];\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 12 & MASK_6BITS];\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea >> 6 & MASK_6BITS];\n                buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];\n                context.currentLinePos += BYTES_PER_ENCODED_BLOCK;\n                if (lineLength > 0 && lineLength <= context.currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                    context.pos += lineSeparator.length;\n                    context.currentLinePos = 0;\n                }\n            }\n        }\n    }\n}","void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_encode {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""2"" [label=""$stack100 = this.<org.apache.commons.codec.binary.Base64: byte pad>""];\n	""3"" [label=""$stack101 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""4"" [label=""$stack102 = $stack101 + 1""];\n	""5"" [label=""$stack103 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""6"" [label=""$stack104 = $stack103 >> 2""];\n	""7"" [label=""$stack105 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""8"" [label=""$stack106 = $stack104 & 63""];\n	""9"" [label=""$stack107 = $stack105[$stack106]""];\n	""10"" [label=""$stack108 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""11"" [label=""$stack109 = $stack108 + 1""];\n	""12"" [label=""$stack11 = $stack10 + 1""];\n	""13"" [label=""$stack110 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""14"" [label=""$stack111 = $stack110 << 4""];\n	""15"" [label=""$stack112 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""16"" [label=""$stack113 = $stack111 & 63""];\n	""17"" [label=""$stack114 = $stack112[$stack113]""];\n	""18"" [label=""$stack115 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>""];\n	""19"" [label=""$stack116 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""20"" [label=""$stack117 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""21"" [label=""$stack118 = $stack117 + 1""];\n	""22"" [label=""$stack119 = this.<org.apache.commons.codec.binary.Base64: byte pad>""];\n	""23"" [label=""$stack12 = $stack11 % 3""];\n	""24"" [label=""$stack120 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""25"" [label=""$stack121 = $stack120 + 1""];\n	""26"" [label=""$stack122 = this.<org.apache.commons.codec.binary.Base64: byte pad>""];\n	""27"" [label=""$stack123 = new java.lang.StringBuilder""];\n	""28"" [label=""$stack124 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""29"" [label=""$stack125 = virtualinvoke $stack123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Impossible modulus \"")""];\n	""30"" [label=""$stack126 = virtualinvoke $stack125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack124)""];\n	""31"" [label=""$stack127 = virtualinvoke $stack126.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""32"" [label=""$stack128 = new java.lang.IllegalStateException""];\n	""33"" [label=""$stack129 = this.<org.apache.commons.codec.binary.Base64: int lineLength>""];\n	""34"" [label=""$stack13 = inPos""];\n	""35"" [label=""$stack14 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""36"" [label=""$stack15 = $stack14 << 8""];\n	""37"" [label=""$stack16 = $stack15 + b""];\n	""38"" [label=""$stack17 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""39"" [label=""$stack18 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""40"" [label=""$stack19 = $stack18 + 1""];\n	""41"" [label=""$stack20 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""42"" [label=""$stack21 = $stack20 >> 18""];\n	""43"" [label=""$stack22 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""44"" [label=""$stack23 = $stack21 & 63""];\n	""45"" [label=""$stack24 = $stack22[$stack23]""];\n	""46"" [label=""$stack25 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""47"" [label=""$stack26 = $stack25 + 1""];\n	""48"" [label=""$stack27 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""49"" [label=""$stack28 = $stack27 >> 12""];\n	""50"" [label=""$stack29 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""51"" [label=""$stack30 = $stack28 & 63""];\n	""52"" [label=""$stack31 = $stack29[$stack30]""];\n	""53"" [label=""$stack32 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""54"" [label=""$stack33 = $stack32 + 1""];\n	""55"" [label=""$stack34 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""56"" [label=""$stack35 = $stack34 >> 6""];\n	""57"" [label=""$stack36 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""58"" [label=""$stack37 = $stack35 & 63""];\n	""59"" [label=""$stack38 = $stack36[$stack37]""];\n	""60"" [label=""$stack39 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""61"" [label=""$stack40 = $stack39 + 1""];\n	""62"" [label=""$stack41 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""63"" [label=""$stack42 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""64"" [label=""$stack43 = $stack41 & 63""];\n	""65"" [label=""$stack44 = $stack42[$stack43]""];\n	""66"" [label=""$stack45 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""67"" [label=""$stack46 = $stack45 + 4""];\n	""68"" [label=""$stack47 = this.<org.apache.commons.codec.binary.Base64: int lineLength>""];\n	""69"" [label=""$stack48 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""70"" [label=""$stack49 = this.<org.apache.commons.codec.binary.Base64: int lineLength>""];\n	""71"" [label=""$stack50 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""72"" [label=""$stack51 = lengthof $stack50""];\n	""73"" [label=""$stack52 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""74"" [label=""$stack53 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""75"" [label=""$stack54 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""76"" [label=""$stack55 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""77"" [label=""$stack56 = lengthof $stack54""];\n	""78"" [label=""$stack57 = $stack55 + $stack56""];\n	""79"" [label=""$stack58 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""80"" [label=""$stack59 = this.<org.apache.commons.codec.binary.Base64: int encodeSize>""];\n	""81"" [label=""$stack60 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""82"" [label=""$stack61 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""83"" [label=""$stack62 = $stack61 + 1""];\n	""84"" [label=""$stack63 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""85"" [label=""$stack64 = $stack63 >> 10""];\n	""86"" [label=""$stack65 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""87"" [label=""$stack66 = $stack64 & 63""];\n	""88"" [label=""$stack67 = $stack65[$stack66]""];\n	""89"" [label=""$stack68 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""90"" [label=""$stack69 = $stack68 + 1""];\n	""91"" [label=""$stack70 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""92"" [label=""$stack71 = $stack70 >> 4""];\n	""93"" [label=""$stack72 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""94"" [label=""$stack73 = $stack71 & 63""];\n	""95"" [label=""$stack74 = $stack72[$stack73]""];\n	""96"" [label=""$stack75 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""97"" [label=""$stack76 = $stack75 + 1""];\n	""98"" [label=""$stack77 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""99"" [label=""$stack78 = $stack77 << 2""];\n	""100"" [label=""$stack79 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""101"" [label=""$stack8 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""102"" [label=""$stack80 = $stack78 & 63""];\n	""103"" [label=""$stack81 = $stack79[$stack80]""];\n	""104"" [label=""$stack82 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>""];\n	""105"" [label=""$stack83 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""106"" [label=""$stack84 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""107"" [label=""$stack85 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""108"" [label=""$stack86 = $stack84 - savedPos""];\n	""109"" [label=""$stack87 = $stack85 + $stack86""];\n	""110"" [label=""$stack88 = this.<org.apache.commons.codec.binary.Base64: int lineLength>""];\n	""111"" [label=""$stack89 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""112"" [label=""$stack9 = this.<org.apache.commons.codec.binary.Base64: int encodeSize>""];\n	""113"" [label=""$stack90 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""114"" [label=""$stack91 = lengthof $stack90""];\n	""115"" [label=""$stack92 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""116"" [label=""$stack93 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""117"" [label=""$stack94 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""118"" [label=""$stack95 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""119"" [label=""$stack96 = lengthof $stack94""];\n	""120"" [label=""$stack97 = $stack95 + $stack96""];\n	""121"" [label=""$stack98 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""122"" [label=""$stack99 = $stack98 + 1""];\n	""123"" [label=""b = b + 256""];\n	""124"" [label=""b = in[$stack13]""];\n	""125"" [label=""buffer = 0""];\n	""126"" [label=""buffer = buffer + 1""];\n	""127"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack59, context)""];\n	""128"" [label=""buffer[$stack101] = $stack107""];\n	""129"" [label=""buffer[$stack108] = $stack114""];\n	""130"" [label=""buffer[$stack117] = $stack119""];\n	""131"" [label=""buffer[$stack120] = $stack122""];\n	""132"" [label=""buffer[$stack61] = $stack67""];\n	""133"" [label=""buffer[$stack68] = $stack74""];\n	""134"" [label=""buffer[$stack75] = $stack81""];\n	""135"" [label=""buffer[$stack98] = $stack100""];\n	""136"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""137"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""138"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = $stack46""];\n	""139"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = $stack87""];\n	""140"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = 0""];\n	""141"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack16""];\n	""142"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = $stack12""];\n	""143"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack102""];\n	""144"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack109""];\n	""145"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack118""];\n	""146"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack121""];\n	""147"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack19""];\n	""148"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack26""];\n	""149"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack33""];\n	""150"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack40""];\n	""151"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack57""];\n	""152"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack62""];\n	""153"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack69""];\n	""154"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack76""];\n	""155"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack97""];\n	""156"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack99""];\n	""157"" [label=""goto""];\n	""158"" [label=""goto""];\n	""159"" [label=""goto""];\n	""160"" [label=""goto""];\n	""161"" [label=""goto""];\n	""162"" [label=""if $stack116 != $stack115""];\n	""163"" [label=""if $stack129 != 0""];\n	""164"" [label=""if $stack47 <= 0""];\n	""165"" [label=""if $stack49 > $stack48""];\n	""166"" [label=""if $stack8 == 0""];\n	""167"" [label=""if $stack83 != $stack82""];\n	""168"" [label=""if $stack88 <= 0""];\n	""169"" [label=""if $stack89 <= 0""];\n	""170"" [label=""if 0 != $stack17""];\n	""171"" [label=""if 0 != $stack58""];\n	""172"" [label=""if b >= 0""];\n	""173"" [label=""if buffer >= inAvail""];\n	""174"" [label=""if inAvail >= 0""];\n	""175"" [label=""in := @parameter0: byte[]""];\n	""176"" [label=""inAvail := @parameter2: int""];\n	""177"" [label=""inPos := @parameter1: int""];\n	""178"" [label=""inPos = inPos + 1""];\n	""179"" [label=""return""];\n	""180"" [label=""return""];\n	""181"" [label=""return""];\n	""182"" [label=""savedPos = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""183"" [label=""savedPos = virtualinvoke this.<org.apache.commons.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack9, context)""];\n	""184"" [label=""savedPos[$stack18] = $stack24""];\n	""185"" [label=""savedPos[$stack25] = $stack31""];\n	""186"" [label=""savedPos[$stack32] = $stack38""];\n	""187"" [label=""savedPos[$stack39] = $stack44""];\n	""188"" [label=""specialinvoke $stack123.<java.lang.StringBuilder: void <init>()>()""];\n	""189"" [label=""specialinvoke $stack128.<java.lang.IllegalStateException: void <init>(java.lang.String)>($stack127)""];\n	""190"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack53, 0, savedPos, $stack52, $stack51)""];\n	""191"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack93, 0, buffer, $stack92, $stack91)""];\n	""192"" [label=""switch($stack60) \{     case 0:     case 1:     case 2:     default:  \}""];\n	""193"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""194"" [label=""throw $stack128""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""100"" -> ""98""[label=""cfg_next""];\n	""101"" -> ""166""[label=""cfg_next""];\n	""102"" -> ""103""[label=""cfg_next""];\n	""103"" -> ""134""[label=""cfg_next""];\n	""104"" -> ""167""[label=""cfg_next""];\n	""105"" -> ""104""[label=""cfg_next""];\n	""106"" -> ""108""[label=""cfg_next""];\n	""107"" -> ""106""[label=""cfg_next""];\n	""108"" -> ""109""[label=""cfg_next""];\n	""109"" -> ""139""[label=""cfg_next""];\n	""11"" -> ""144""[label=""cfg_next""];\n	""110"" -> ""168""[label=""cfg_next""];\n	""111"" -> ""169""[label=""cfg_next""];\n	""112"" -> ""183""[label=""cfg_next""];\n	""113"" -> ""114""[label=""cfg_next""];\n	""114"" -> ""191""[label=""cfg_next""];\n	""115"" -> ""113""[label=""cfg_next""];\n	""116"" -> ""115""[label=""cfg_next""];\n	""117"" -> ""119""[label=""cfg_next""];\n	""118"" -> ""117""[label=""cfg_next""];\n	""119"" -> ""120""[label=""cfg_next""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""120"" -> ""155""[label=""cfg_next""];\n	""121"" -> ""122""[label=""cfg_next""];\n	""122"" -> ""156""[label=""cfg_next""];\n	""123"" -> ""35""[label=""cfg_next""];\n	""124"" -> ""172""[label=""cfg_next""];\n	""125"" -> ""173""[label=""cfg_next""];\n	""126"" -> ""161""[label=""cfg_next""];\n	""127"" -> ""182""[label=""cfg_next""];\n	""128"" -> ""10""[label=""cfg_next""];\n	""129"" -> ""19""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""130"" -> ""24""[label=""cfg_next""];\n	""131"" -> ""158""[label=""cfg_next""];\n	""132"" -> ""89""[label=""cfg_next""];\n	""133"" -> ""96""[label=""cfg_next""];\n	""134"" -> ""105""[label=""cfg_next""];\n	""135"" -> ""160""[label=""cfg_next""];\n	""136"" -> ""101""[label=""cfg_next""];\n	""137"" -> ""79""[label=""cfg_next""];\n	""138"" -> ""68""[label=""cfg_next""];\n	""139"" -> ""110""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""140"" -> ""126""[label=""cfg_next""];\n	""141"" -> ""38""[label=""cfg_next""];\n	""142"" -> ""34""[label=""cfg_next""];\n	""143"" -> ""7""[label=""cfg_next""];\n	""144"" -> ""15""[label=""cfg_next""];\n	""145"" -> ""22""[label=""cfg_next""];\n	""146"" -> ""26""[label=""cfg_next""];\n	""147"" -> ""43""[label=""cfg_next""];\n	""148"" -> ""50""[label=""cfg_next""];\n	""149"" -> ""57""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""150"" -> ""63""[label=""cfg_next""];\n	""151"" -> ""140""[label=""cfg_next""];\n	""152"" -> ""86""[label=""cfg_next""];\n	""153"" -> ""93""[label=""cfg_next""];\n	""154"" -> ""100""[label=""cfg_next""];\n	""155"" -> ""159""[label=""cfg_next""];\n	""156"" -> ""2""[label=""cfg_next""];\n	""157"" -> ""107""[label=""cfg_goto""];\n	""158"" -> ""107""[label=""cfg_goto""];\n	""159"" -> ""181""[label=""cfg_goto""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""160"" -> ""107""[label=""cfg_goto""];\n	""161"" -> ""173""[label=""cfg_goto""];\n	""162"" -> ""107""[label=""cfg_true""];\n	""162"" -> ""20""[label=""cfg_false""];\n	""163"" -> ""180""[label=""cfg_false""];\n	""163"" -> ""80""[label=""cfg_true""];\n	""164"" -> ""126""[label=""cfg_true""];\n	""164"" -> ""70""[label=""cfg_false""];\n	""165"" -> ""126""[label=""cfg_true""];\n	""165"" -> ""74""[label=""cfg_false""];\n	""166"" -> ""174""[label=""cfg_true""];\n	""166"" -> ""179""[label=""cfg_false""];\n	""167"" -> ""107""[label=""cfg_true""];\n	""167"" -> ""121""[label=""cfg_false""];\n	""168"" -> ""111""[label=""cfg_false""];\n	""168"" -> ""159""[label=""cfg_true""];\n	""169"" -> ""116""[label=""cfg_false""];\n	""169"" -> ""159""[label=""cfg_true""];\n	""17"" -> ""129""[label=""cfg_next""];\n	""170"" -> ""126""[label=""cfg_true""];\n	""170"" -> ""39""[label=""cfg_false""];\n	""171"" -> ""33""[label=""cfg_false""];\n	""171"" -> ""80""[label=""cfg_true""];\n	""172"" -> ""123""[label=""cfg_false""];\n	""172"" -> ""35""[label=""cfg_true""];\n	""173"" -> ""112""[label=""cfg_false""];\n	""173"" -> ""181""[label=""cfg_true""];\n	""174"" -> ""125""[label=""cfg_true""];\n	""174"" -> ""137""[label=""cfg_false""];\n	""175"" -> ""177""[label=""cfg_next""];\n	""176"" -> ""136""[label=""cfg_next""];\n	""177"" -> ""176""[label=""cfg_next""];\n	""178"" -> ""124""[label=""cfg_next""];\n	""18"" -> ""162""[label=""cfg_next""];\n	""182"" -> ""81""[label=""cfg_next""];\n	""183"" -> ""1""[label=""cfg_next""];\n	""184"" -> ""46""[label=""cfg_next""];\n	""185"" -> ""53""[label=""cfg_next""];\n	""186"" -> ""60""[label=""cfg_next""];\n	""187"" -> ""66""[label=""cfg_next""];\n	""188"" -> ""29""[label=""cfg_next""];\n	""189"" -> ""194""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""190"" -> ""76""[label=""cfg_next""];\n	""191"" -> ""118""[label=""cfg_next""];\n	""192"" -> ""157""[label=""cfg_switch""];\n	""192"" -> ""3""[label=""cfg_switch""];\n	""192"" -> ""32""[label=""cfg_switch""];\n	""192"" -> ""82""[label=""cfg_switch""];\n	""193"" -> ""175""[label=""cfg_next""];\n	""2"" -> ""135""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""145""[label=""cfg_next""];\n	""22"" -> ""130""[label=""cfg_next""];\n	""23"" -> ""142""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""146""[label=""cfg_next""];\n	""26"" -> ""131""[label=""cfg_next""];\n	""27"" -> ""188""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""28""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""31""[label=""cfg_next""];\n	""31"" -> ""189""[label=""cfg_next""];\n	""32"" -> ""27""[label=""cfg_next""];\n	""33"" -> ""163""[label=""cfg_next""];\n	""34"" -> ""178""[label=""cfg_next""];\n	""35"" -> ""36""[label=""cfg_next""];\n	""36"" -> ""37""[label=""cfg_next""];\n	""37"" -> ""141""[label=""cfg_next""];\n	""38"" -> ""170""[label=""cfg_next""];\n	""39"" -> ""40""[label=""cfg_next""];\n	""4"" -> ""143""[label=""cfg_next""];\n	""40"" -> ""147""[label=""cfg_next""];\n	""41"" -> ""42""[label=""cfg_next""];\n	""42"" -> ""44""[label=""cfg_next""];\n	""43"" -> ""41""[label=""cfg_next""];\n	""44"" -> ""45""[label=""cfg_next""];\n	""45"" -> ""184""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""148""[label=""cfg_next""];\n	""48"" -> ""49""[label=""cfg_next""];\n	""49"" -> ""51""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""50"" -> ""48""[label=""cfg_next""];\n	""51"" -> ""52""[label=""cfg_next""];\n	""52"" -> ""185""[label=""cfg_next""];\n	""53"" -> ""54""[label=""cfg_next""];\n	""54"" -> ""149""[label=""cfg_next""];\n	""55"" -> ""56""[label=""cfg_next""];\n	""56"" -> ""58""[label=""cfg_next""];\n	""57"" -> ""55""[label=""cfg_next""];\n	""58"" -> ""59""[label=""cfg_next""];\n	""59"" -> ""186""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_next""];\n	""60"" -> ""61""[label=""cfg_next""];\n	""61"" -> ""150""[label=""cfg_next""];\n	""62"" -> ""64""[label=""cfg_next""];\n	""63"" -> ""62""[label=""cfg_next""];\n	""64"" -> ""65""[label=""cfg_next""];\n	""65"" -> ""187""[label=""cfg_next""];\n	""66"" -> ""67""[label=""cfg_next""];\n	""67"" -> ""138""[label=""cfg_next""];\n	""68"" -> ""164""[label=""cfg_next""];\n	""69"" -> ""165""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""70"" -> ""69""[label=""cfg_next""];\n	""71"" -> ""72""[label=""cfg_next""];\n	""72"" -> ""190""[label=""cfg_next""];\n	""73"" -> ""71""[label=""cfg_next""];\n	""74"" -> ""73""[label=""cfg_next""];\n	""75"" -> ""77""[label=""cfg_next""];\n	""76"" -> ""75""[label=""cfg_next""];\n	""77"" -> ""78""[label=""cfg_next""];\n	""78"" -> ""151""[label=""cfg_next""];\n	""79"" -> ""171""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""80"" -> ""127""[label=""cfg_next""];\n	""81"" -> ""192""[label=""cfg_next""];\n	""82"" -> ""83""[label=""cfg_next""];\n	""83"" -> ""152""[label=""cfg_next""];\n	""84"" -> ""85""[label=""cfg_next""];\n	""85"" -> ""87""[label=""cfg_next""];\n	""86"" -> ""84""[label=""cfg_next""];\n	""87"" -> ""88""[label=""cfg_next""];\n	""88"" -> ""132""[label=""cfg_next""];\n	""89"" -> ""90""[label=""cfg_next""];\n	""9"" -> ""128""[label=""cfg_next""];\n	""90"" -> ""153""[label=""cfg_next""];\n	""91"" -> ""92""[label=""cfg_next""];\n	""92"" -> ""94""[label=""cfg_next""];\n	""93"" -> ""91""[label=""cfg_next""];\n	""94"" -> ""95""[label=""cfg_next""];\n	""95"" -> ""133""[label=""cfg_next""];\n	""96"" -> ""97""[label=""cfg_next""];\n	""97"" -> ""154""[label=""cfg_next""];\n	""98"" -> ""99""[label=""cfg_next""];\n	""99"" -> ""102""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base64.getLineSeparator(),Method,* Gets the line separator (for testing only).\n     *\n     * @return the line separator.,byte[] getLineSeparator() {\n    return lineSeparator;\n},byte[] getLineSeparator(),"digraph cfg_getLineSeparator {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base64.isInAlphabet(byte),Method,* Returns whether or not the {@code octet} is in the Base64 alphabet.\n     *\n     * @param octet\n     *            The value to test\n     * @return {@code true} if the value is defined in the Base64 alphabet {@code false} otherwise.,@Override\nprotected boolean isInAlphabet(final byte octet) {\n    return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;\n},boolean isInAlphabet(byte),"digraph cfg_isInAlphabet {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>""];\n	""2"" [label=""$stack3 = lengthof $stack2""];\n	""3"" [label=""$stack4 = this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable>""];\n	""4"" [label=""$stack5 = $stack4[octet]""];\n	""5"" [label=""$stack6 = 0""];\n	""6"" [label=""$stack6 = 1""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack5 == -1""];\n	""9"" [label=""if octet < 0""];\n	""10"" [label=""if octet >= $stack3""];\n	""11"" [label=""octet := @parameter0: byte""];\n	""12"" [label=""return $stack6""];\n	""13"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_false""];\n	""10"" -> ""5""[label=""cfg_true""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""12""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_goto""];\n	""8"" -> ""5""[label=""cfg_true""];\n	""8"" -> ""6""[label=""cfg_false""];\n	""9"" -> ""1""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_true""];\n}\n",protected 
org.apache.commons.codec.binary.Base64.isUrlSafe(),Method,"* Returns our current encode mode. True if we're URL-safe, false otherwise.\n     *\n     * @return true if we're in URL-safe mode, false otherwise.\n     * @since 1.4",public boolean isUrlSafe() {\n    return isUrlSafe;\n},boolean isUrlSafe(),"digraph cfg_isUrlSafe {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.Base64: boolean isUrlSafe>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64.validateCharacter(int,Context)",Method,* Validates whether decoding the final trailing character is possible in the context\n     * of the set of possible base 64 values.\n     * <p>\n     * The character is valid if the lower bits within the provided mask are zero. This\n     * is used to test the final trailing base-64 digit is zero in the bits that will be discarded.\n     * </p>\n     *\n     * @param emptyBitsMask The mask of the lower bits that should be empty\n     * @param context the context to be used\n     * @throws IllegalArgumentException if the bits being checked contain any non-zero value,"private void validateCharacter(final int emptyBitsMask, final Context context) {\n    if (isStrictDecoding() && (context.ibitWorkArea & emptyBitsMask) != 0) {\n        throw new IllegalArgumentException(""Strict decoding: Last encoded character (before the paddings if any) is a valid "" + ""base 64 alphabet but not a possible encoding. "" + ""Expected the discarded bits from the character to be zero."");\n    }\n}","void validateCharacter(int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_validateCharacter {\n	""1"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base64: boolean isStrictDecoding()>()""];\n	""2"" [label=""$stack4 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""3"" [label=""$stack5 = $stack4 & emptyBitsMask""];\n	""4"" [label=""$stack6 = new java.lang.IllegalArgumentException""];\n	""5"" [label=""context := @parameter1: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""6"" [label=""emptyBitsMask := @parameter0: int""];\n	""7"" [label=""if $stack3 == 0""];\n	""8"" [label=""if $stack5 == 0""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\"")""];\n	""11"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""12"" [label=""throw $stack6""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""9""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_false""];\n	""8"" -> ""9""[label=""cfg_true""];\n}\n",private 
org.apache.commons.codec.binary.Base64.validateTrailingCharacter(),Method,* Validates whether decoding allows an entire final trailing character that cannot be\n     * used for a complete byte.\n     *\n     * @throws IllegalArgumentException if strict decoding is enabled,"private void validateTrailingCharacter() {\n    if (isStrictDecoding()) {\n        throw new IllegalArgumentException(""Strict decoding: Last encoded character (before the paddings if any) is a valid "" + ""base 64 alphabet but not a possible encoding. "" + ""Decoding requires at least two trailing 6-bit characters to create bytes."");\n    }\n}",void validateTrailingCharacter(),"digraph cfg_validateTrailingCharacter {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.binary.Base64: boolean isStrictDecoding()>()""];\n	""2"" [label=""$stack2 = new java.lang.IllegalArgumentException""];\n	""3"" [label=""if $stack1 == 0""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\"")""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""7"" [label=""throw $stack2""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_false""];\n	""3"" -> ""4""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.Base64.<init>(),Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>",public Base64() {\n    this(0);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int)>(0)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64.<init>(boolean),Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in the given URL-safe mode.\n     * <p>\n     * When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param urlSafe\n     *            if {@code true}, URL-safe encoding is used. In most cases this should be set to\n     *            {@code false}.\n     * @since 1.4","public Base64(final boolean urlSafe) {\n    this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n}",void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(76, $stack2, urlSafe)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""5"" [label=""urlSafe := @parameter0: boolean""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64.<init>(int),Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length is given in the constructor, the line separator is CRLF, and the encoding table is\n     * STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param lineLength\n     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of\n     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when\n     *            decoding.\n     * @since 1.4","public Base64(final int lineLength) {\n    this(lineLength, CHUNK_SEPARATOR);\n}",void <init>(int),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>""];\n	""2"" [label=""lineLength := @parameter0: int""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(lineLength, $stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64.<init>(int,byte[])",Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor, and the encoding table is\n     * STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param lineLength\n     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of\n     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when\n     *            decoding.\n     * @param lineSeparator\n     *            Each line of encoded data will end with this sequence of bytes.\n     * @throws IllegalArgumentException\n     *             Thrown when the provided lineSeparator included some base64 characters.\n     * @since 1.4","public Base64(final int lineLength, final byte[] lineSeparator) {\n    this(lineLength, lineSeparator, false);\n}","void <init>(int,byte[])","digraph cfg_init {\n	""1"" [label=""lineLength := @parameter0: int""];\n	""2"" [label=""lineSeparator := @parameter1: byte[]""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(lineLength, lineSeparator, 0)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean)",Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor, and the encoding table is\n     * STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param lineLength\n     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of\n     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when\n     *            decoding.\n     * @param lineSeparator\n     *            Each line of encoded data will end with this sequence of bytes.\n     * @param urlSafe\n     *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode\n     *            operations. Decoding seamlessly handles both modes.\n     *            <strong>Note: No padding is added when using the URL-safe alphabet.</strong>\n     * @throws IllegalArgumentException\n     *             Thrown when the {@code lineSeparator} contains Base64 characters.\n     * @since 1.4","public Base64(final int lineLength, final byte[] lineSeparator, final boolean urlSafe) {\n    this(lineLength, lineSeparator, PAD_DEFAULT, toUrlSafeEncodeTable(urlSafe), DECODING_POLICY_DEFAULT);\n}","void <init>(int,byte[],boolean)","digraph cfg_init {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.binary.Base64: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] toUrlSafeEncodeTable(boolean)>(urlSafe)""];\n	""3"" [label=""lineLength := @parameter0: int""];\n	""4"" [label=""lineSeparator := @parameter1: byte[]""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],byte,byte[],org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 61, $stack5, $stack4)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""8"" [label=""urlSafe := @parameter2: boolean""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy)",Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor, and the encoding table is\n     * STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param lineLength\n     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of\n     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when\n     *            decoding.\n     * @param lineSeparator\n     *            Each line of encoded data will end with this sequence of bytes.\n     * @param urlSafe\n     *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode\n     *            operations. Decoding seamlessly handles both modes.\n     *            <strong>Note: No padding is added when using the URL-safe alphabet.</strong>\n     * @param decodingPolicy The decoding policy.\n     * @throws IllegalArgumentException\n     *             Thrown when the {@code lineSeparator} contains Base64 characters.\n     * @since 1.15","public Base64(final int lineLength, final byte[] lineSeparator, final boolean urlSafe, final CodecPolicy decodingPolicy) {\n    this(lineLength, lineSeparator, PAD_DEFAULT, toUrlSafeEncodeTable(urlSafe), decodingPolicy);\n}","void <init>(int,byte[],boolean,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] toUrlSafeEncodeTable(boolean)>(urlSafe)""];\n	""2"" [label=""decodingPolicy := @parameter3: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""lineLength := @parameter0: int""];\n	""4"" [label=""lineSeparator := @parameter1: byte[]""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],byte,byte[],org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 61, $stack5, decodingPolicy)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""8"" [label=""urlSafe := @parameter2: boolean""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy)",Constructor,"* Constructs a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length and line separator are given in the constructor, and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * <p>\n     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.\n     * </p>\n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     *\n     * @param lineLength     Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of 4). If lineLength &lt;= 0,\n     *                       then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator  Each line of encoded data will end with this sequence of bytes; the constructor makes a defensive copy. May be null.\n     * @param padding        padding byte.\n     * @param encodeTable    The manual encodeTable - a byte array of 64 chars.\n     * @param decodingPolicy The decoding policy.\n     * @throws IllegalArgumentException Thrown when the {@code lineSeparator} contains Base64 characters.","private Base64(final int lineLength, final byte[] lineSeparator, final byte padding, final byte[] encodeTable, final CodecPolicy decodingPolicy) {\n    super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, toLength(lineSeparator), padding, decodingPolicy);\n    Objects.requireNonNull(encodeTable, ""encodeTable"");\n    if (encodeTable.length != ALPHABET_LENGTH) {\n        throw new IllegalArgumentException(""encodeTable must have exactly 64 entries."");\n    }\n    this.isUrlSafe = encodeTable == URL_SAFE_ENCODE_TABLE;\n    if (encodeTable == STANDARD_ENCODE_TABLE || this.isUrlSafe) {\n        decodeTable = DECODE_TABLE;\n        // No need of a defensive copy of an internal table.\n        this.encodeTable = encodeTable;\n    } else {\n        this.encodeTable = encodeTable.clone();\n        this.decodeTable = calculateDecodeTable(this.encodeTable);\n    }\n    // TODO could be simplified if there is no requirement to reject invalid line sep when length <=0\n    // @see test case Base64Test.testConstructors()\n    if (lineSeparator != null) {\n        final byte[] lineSeparatorCopy = lineSeparator.clone();\n        if (containsAlphabetOrPad(lineSeparatorCopy)) {\n            final String sep = StringUtils.newStringUtf8(lineSeparatorCopy);\n            throw new IllegalArgumentException(""lineSeparator must not contain base64 characters: ["" + sep + ""]"");\n        }\n        if (lineLength > 0) {\n            // null line-sep forces no chunking rather than throwing IAE\n            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparatorCopy.length;\n            this.lineSeparator = lineSeparatorCopy;\n        } else {\n            this.encodeSize = BYTES_PER_ENCODED_BLOCK;\n            this.lineSeparator = null;\n        }\n    } else {\n        this.encodeSize = BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n}","void <init>(int,byte[],byte,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack10 = <org.apache.commons.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>""];\n	""2"" [label=""$stack11 = <org.apache.commons.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>""];\n	""3"" [label=""$stack12 = <org.apache.commons.codec.binary.Base64: byte[] DECODE_TABLE>""];\n	""4"" [label=""$stack13 = virtualinvoke lineSeparator.<java.lang.Object: java.lang.Object clone()>()""];\n	""5"" [label=""$stack14 = virtualinvoke this.<org.apache.commons.codec.binary.Base64: boolean containsAlphabetOrPad(byte[])>(lineSeparatorCopy)""];\n	""6"" [label=""$stack15 = lengthof lineSeparatorCopy""];\n	""7"" [label=""$stack16 = 4 + $stack15""];\n	""8"" [label=""$stack17 = new java.lang.StringBuilder""];\n	""9"" [label=""$stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""lineSeparator must not contain base64 characters: [\"")""];\n	""10"" [label=""$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sep)""];\n	""11"" [label=""$stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""]\"")""];\n	""12"" [label=""$stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""13"" [label=""$stack22 = new java.lang.IllegalArgumentException""];\n	""14"" [label=""$stack23 = this.<org.apache.commons.codec.binary.Base64: boolean isUrlSafe>""];\n	""15"" [label=""$stack24 = virtualinvoke encodeTable.<java.lang.Object: java.lang.Object clone()>()""];\n	""16"" [label=""$stack25 = (byte[]) $stack24""];\n	""17"" [label=""$stack26 = this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable>""];\n	""18"" [label=""$stack27 = specialinvoke this.<org.apache.commons.codec.binary.Base64: byte[] calculateDecodeTable(byte[])>($stack26)""];\n	""19"" [label=""$stack28 = 0""];\n	""20"" [label=""$stack28 = 1""];\n	""21"" [label=""$stack29 = new java.lang.IllegalArgumentException""];\n	""22"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.binary.Base64: int toLength(byte[])>(lineSeparator)""];\n	""23"" [label=""$stack9 = lengthof encodeTable""];\n	""24"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""25"" [label=""encodeTable := @parameter3: byte[]""];\n	""26"" [label=""goto""];\n	""27"" [label=""goto""];\n	""28"" [label=""goto""];\n	""29"" [label=""goto""];\n	""30"" [label=""if $stack14 == 0""];\n	""31"" [label=""if $stack23 == 0""];\n	""32"" [label=""if $stack9 == 64""];\n	""33"" [label=""if encodeTable != $stack10""];\n	""34"" [label=""if encodeTable == $stack11""];\n	""35"" [label=""if lineLength <= 0""];\n	""36"" [label=""if lineSeparator == null""];\n	""37"" [label=""lineLength := @parameter0: int""];\n	""38"" [label=""lineSeparator := @parameter1: byte[]""];\n	""39"" [label=""lineSeparatorCopy = (byte[]) $stack13""];\n	""40"" [label=""padding := @parameter2: byte""];\n	""41"" [label=""return""];\n	""42"" [label=""sep = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(lineSeparatorCopy)""];\n	""43"" [label=""specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>()""];\n	""44"" [label=""specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21)""];\n	""45"" [label=""specialinvoke $stack29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""encodeTable must have exactly 64 entries.\"")""];\n	""46"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte,org.apache.commons.codec.CodecPolicy)>(3, 4, lineLength, $stack8, padding, decodingPolicy)""];\n	""47"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(encodeTable, \""encodeTable\"")""];\n	""48"" [label=""this := @this: org.apache.commons.codec.binary.Base64""];\n	""49"" [label=""this.<org.apache.commons.codec.binary.Base64: boolean isUrlSafe> = $stack28""];\n	""50"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable> = $stack12""];\n	""51"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] decodeTable> = $stack27""];\n	""52"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable> = $stack25""];\n	""53"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] encodeTable> = encodeTable""];\n	""54"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = lineSeparatorCopy""];\n	""55"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = null""];\n	""56"" [label=""this.<org.apache.commons.codec.binary.Base64: byte[] lineSeparator> = null""];\n	""57"" [label=""this.<org.apache.commons.codec.binary.Base64: int encodeSize> = $stack16""];\n	""58"" [label=""this.<org.apache.commons.codec.binary.Base64: int encodeSize> = 4""];\n	""59"" [label=""this.<org.apache.commons.codec.binary.Base64: int encodeSize> = 4""];\n	""60"" [label=""throw $stack22""];\n	""61"" [label=""throw $stack29""];\n	""1"" -> ""33""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""44""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_next""];\n	""14"" -> ""31""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""52""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""51""[label=""cfg_next""];\n	""19"" -> ""49""[label=""cfg_next""];\n	""2"" -> ""34""[label=""cfg_next""];\n	""20"" -> ""26""[label=""cfg_next""];\n	""21"" -> ""45""[label=""cfg_next""];\n	""22"" -> ""46""[label=""cfg_next""];\n	""23"" -> ""32""[label=""cfg_next""];\n	""24"" -> ""22""[label=""cfg_next""];\n	""25"" -> ""24""[label=""cfg_next""];\n	""26"" -> ""49""[label=""cfg_goto""];\n	""27"" -> ""36""[label=""cfg_goto""];\n	""28"" -> ""29""[label=""cfg_goto""];\n	""29"" -> ""41""[label=""cfg_goto""];\n	""3"" -> ""50""[label=""cfg_next""];\n	""30"" -> ""35""[label=""cfg_true""];\n	""30"" -> ""42""[label=""cfg_false""];\n	""31"" -> ""15""[label=""cfg_true""];\n	""31"" -> ""3""[label=""cfg_false""];\n	""32"" -> ""1""[label=""cfg_true""];\n	""32"" -> ""21""[label=""cfg_false""];\n	""33"" -> ""19""[label=""cfg_true""];\n	""33"" -> ""20""[label=""cfg_false""];\n	""34"" -> ""14""[label=""cfg_false""];\n	""34"" -> ""3""[label=""cfg_true""];\n	""35"" -> ""59""[label=""cfg_true""];\n	""35"" -> ""6""[label=""cfg_false""];\n	""36"" -> ""4""[label=""cfg_false""];\n	""36"" -> ""58""[label=""cfg_true""];\n	""37"" -> ""38""[label=""cfg_next""];\n	""38"" -> ""40""[label=""cfg_next""];\n	""39"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""39""[label=""cfg_next""];\n	""40"" -> ""25""[label=""cfg_next""];\n	""42"" -> ""13""[label=""cfg_next""];\n	""43"" -> ""9""[label=""cfg_next""];\n	""44"" -> ""60""[label=""cfg_next""];\n	""45"" -> ""61""[label=""cfg_next""];\n	""46"" -> ""47""[label=""cfg_next""];\n	""47"" -> ""23""[label=""cfg_next""];\n	""48"" -> ""37""[label=""cfg_next""];\n	""49"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""30""[label=""cfg_next""];\n	""50"" -> ""53""[label=""cfg_next""];\n	""51"" -> ""36""[label=""cfg_next""];\n	""52"" -> ""17""[label=""cfg_next""];\n	""53"" -> ""27""[label=""cfg_next""];\n	""54"" -> ""28""[label=""cfg_next""];\n	""55"" -> ""29""[label=""cfg_next""];\n	""56"" -> ""41""[label=""cfg_next""];\n	""57"" -> ""54""[label=""cfg_next""];\n	""58"" -> ""56""[label=""cfg_next""];\n	""59"" -> ""55""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""57""[label=""cfg_next""];\n	""8"" -> ""43""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.Base64$Builder.get(),Method,No Comment,"@Override\npublic Base64 get() {\n    return new Base64(getLineLength(), getLineSeparator(), getPadding(), getEncodeTable(), getDecodingPolicy());\n}",org.apache.commons.codec.binary.Base64 get(),"digraph cfg_get {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: org.apache.commons.codec.CodecPolicy getDecodingPolicy()>()""];\n	""2"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: byte[] getEncodeTable()>()""];\n	""3"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: byte getPadding()>()""];\n	""4"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: byte[] getLineSeparator()>()""];\n	""5"" [label=""$stack5 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: int getLineLength()>()""];\n	""6"" [label=""$stack6 = new org.apache.commons.codec.binary.Base64""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],byte,byte[],org.apache.commons.codec.CodecPolicy,org.apache.commons.codec.binary.Base64$1)>($stack5, $stack4, $stack3, $stack2, $stack1, null)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base64$Builder""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64$Builder.setUrlSafe(boolean),Method,"* Sets the URL-safe encoding policy.\n         *\n         * @param urlSafe URL-safe encoding policy, null resets to the default.\n         * @return {@code this} instance.",public Builder setUrlSafe(final boolean urlSafe) {\n    return setEncodeTable(toUrlSafeEncodeTable(urlSafe));\n},org.apache.commons.codec.binary.Base64$Builder setUrlSafe(boolean),"digraph cfg_setUrlSafe {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] access$200(boolean)>(urlSafe)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.Base64$Builder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setEncodeTable(byte[])>($stack2)""];\n	""3"" [label=""$stack4 = (org.apache.commons.codec.binary.Base64$Builder) $stack3""];\n	""4"" [label=""return $stack4""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base64$Builder""];\n	""6"" [label=""urlSafe := @parameter0: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64$Builder.<init>(),Constructor,* Constructs a new instance.,public Builder() {\n    super(STANDARD_ENCODE_TABLE);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] access$000()>()""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: void <init>(byte[])>($stack1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base64$Builder""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.createPositiveCapacity(int),Method,* Create a positive capacity at least as large the minimum required capacity.\n     * If the minimum capacity is negative then this throws an OutOfMemoryError as no array\n     * can be allocated.\n     *\n     * @param minCapacity the minimum capacity\n     * @return the capacity\n     * @throws OutOfMemoryError if the {@code minCapacity} is negative,"private static int createPositiveCapacity(final int minCapacity) {\n    if (minCapacity < 0) {\n        // overflow\n        throw new OutOfMemoryError(""Unable to allocate array size: "" + (minCapacity & 0xffffffffL));\n    }\n    // This is called when we require buffer expansion to a very big array.\n    // Use the conservative maximum buffer size if possible, otherwise the biggest required.\n    //\n    // Note: In this situation JDK 1.8 java.util.ArrayList returns Integer.MAX_VALUE.\n    // This excludes some VMs that can exceed MAX_BUFFER_SIZE but not allocate a full\n    // Integer.MAX_VALUE length array.\n    // The result is that we may have to allocate an array of this size more than once if\n    // the capacity must be expanded again.\n    return Math.max(minCapacity, MAX_BUFFER_SIZE);\n}",int createPositiveCapacity(int),"digraph cfg_createPositiveCapacity {\n	""1"" [label=""$stack1 = staticinvoke <java.lang.Math: int max(int,int)>(minCapacity, 2147483639)""];\n	""2"" [label=""$stack2 = new java.lang.StringBuilder""];\n	""3"" [label=""$stack3 = (long) minCapacity""];\n	""4"" [label=""$stack4 = $stack3 & 4294967295L""];\n	""5"" [label=""$stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Unable to allocate array size: \"")""];\n	""6"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($stack4)""];\n	""7"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""8"" [label=""$stack8 = new java.lang.OutOfMemoryError""];\n	""9"" [label=""if minCapacity >= 0""];\n	""10"" [label=""minCapacity := @parameter0: int""];\n	""11"" [label=""return $stack1""];\n	""12"" [label=""specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>()""];\n	""13"" [label=""specialinvoke $stack8.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($stack7)""];\n	""14"" [label=""throw $stack8""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""12"" -> ""5""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_next""];\n	""9"" -> ""1""[label=""cfg_true""];\n	""9"" -> ""8""[label=""cfg_false""];\n}\n","private , static "
org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator(),Method,"* Gets a copy of the chunk separator per RFC 2045 section 2.1.\n     *\n     * @return the chunk separator\n     * @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 2.1</a>\n     * @since 1.15",public static byte[] getChunkSeparator() {\n    return CHUNK_SEPARATOR.clone();\n},byte[] getChunkSeparator(),"digraph cfg_getChunkSeparator {\n	""1"" [label=""$stack0 = <org.apache.commons.codec.binary.BaseNCodec: byte[] CHUNK_SEPARATOR>""];\n	""2"" [label=""$stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>()""];\n	""3"" [label=""$stack2 = (byte[]) $stack1""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte),Method,"* Checks if a byte value is whitespace or not.\n     * @param byteToCheck\n     *            the byte to check\n     * @return true if byte is whitespace, false otherwise\n     * @see Character#isWhitespace(int)\n     * @deprecated Use {@link Character#isWhitespace(int)}.",@Deprecated\nprotected static boolean isWhiteSpace(final byte byteToCheck) {\n    return Character.isWhitespace(byteToCheck);\n},boolean isWhiteSpace(byte),"digraph cfg_isWhiteSpace {\n	""1"" [label=""$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(byteToCheck)""];\n	""2"" [label=""byteToCheck := @parameter0: byte""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","protected , static "
"org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(Context,int)",Method,* Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}.\n     * @param context the context to be used\n     * @param minCapacity the minimum required capacity\n     * @return the resized byte[] buffer\n     * @throws OutOfMemoryError if the {@code minCapacity} is negative,"private static byte[] resizeBuffer(final Context context, final int minCapacity) {\n    // Overflow-conscious code treats the min and new capacity as unsigned.\n    final int oldCapacity = context.buffer.length;\n    int newCapacity = oldCapacity * DEFAULT_BUFFER_RESIZE_FACTOR;\n    if (Integer.compareUnsigned(newCapacity, minCapacity) < 0) {\n        newCapacity = minCapacity;\n    }\n    if (Integer.compareUnsigned(newCapacity, MAX_BUFFER_SIZE) > 0) {\n        newCapacity = createPositiveCapacity(minCapacity);\n    }\n    final byte[] b = Arrays.copyOf(context.buffer, newCapacity);\n    context.buffer = b;\n    return b;\n}","byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context,int)","digraph cfg_resizeBuffer {\n	""1"" [label=""$stack5 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""2"" [label=""$stack6 = staticinvoke <java.lang.Integer: int compareUnsigned(int,int)>(newCapacity, minCapacity)""];\n	""3"" [label=""$stack7 = staticinvoke <java.lang.Integer: int compareUnsigned(int,int)>(newCapacity, 2147483639)""];\n	""4"" [label=""$stack8 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""5"" [label=""b = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($stack8, newCapacity)""];\n	""6"" [label=""context := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""7"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer> = b""];\n	""8"" [label=""if $stack6 >= 0""];\n	""9"" [label=""if $stack7 <= 0""];\n	""10"" [label=""minCapacity := @parameter1: int""];\n	""11"" [label=""newCapacity = minCapacity""];\n	""12"" [label=""newCapacity = oldCapacity * 2""];\n	""13"" [label=""newCapacity = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: int createPositiveCapacity(int)>(minCapacity)""];\n	""14"" [label=""oldCapacity = lengthof $stack5""];\n	""15"" [label=""return b""];\n	""1"" -> ""14""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""12"" -> ""2""[label=""cfg_next""];\n	""13"" -> ""4""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_next""];\n	""7"" -> ""15""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_false""];\n	""8"" -> ""3""[label=""cfg_true""];\n	""9"" -> ""13""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_true""];\n}\n","private , static "
org.apache.commons.codec.binary.BaseNCodec.toLength(byte[]),Method,* Gets the array length or 0 if null.\n     *\n     * @param array the array or null.\n     * @return the array length or 0 if null.,static int toLength(final byte[] array) {\n    return array == null ? 0 : array.length;\n},int toLength(byte[]),"digraph cfg_toLength {\n	""1"" [label=""$stack1 = 0""];\n	""2"" [label=""$stack1 = lengthof array""];\n	""3"" [label=""array := @parameter0: byte[]""];\n	""4"" [label=""goto""];\n	""5"" [label=""if array != null""];\n	""6"" [label=""return $stack1""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""2""[label=""cfg_true""];\n}\n",static 
org.apache.commons.codec.binary.BaseNCodec.available(Context),Method,* Returns the amount of buffered data available for reading.\n     *\n     * @param context the context to be used\n     * @return The amount of buffered data available for reading.,int available(final Context context) {\n    // package protected for access from I/O streams\n    return hasData(context) ? context.pos - context.readPos : 0;\n},int available(org.apache.commons.codec.binary.BaseNCodec$Context),"digraph cfg_available {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>(context)""];\n	""2"" [label=""$stack3 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""3"" [label=""$stack4 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""4"" [label=""$stack5 = $stack3 - $stack4""];\n	""5"" [label=""$stack5 = 0""];\n	""6"" [label=""context := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""7"" [label=""goto""];\n	""8"" [label=""if $stack2 == 0""];\n	""9"" [label=""return $stack5""];\n	""10"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_goto""];\n	""8"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""5""[label=""cfg_true""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[]),Method,* Tests a given byte array to see if it contains any characters within the alphabet or PAD.\n     *\n     * Intended for use in checking line-ending arrays\n     *\n     * @param arrayOctet\n     *            byte array to test\n     * @return {@code true} if any byte is a valid character in the alphabet or PAD; {@code false} otherwise,protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n    if (arrayOctet != null) {\n        for (final byte element : arrayOctet) {\n            if (pad == element || isInAlphabet(element)) {\n                return true;\n            }\n        }\n    }\n    return false;\n},boolean containsAlphabetOrPad(byte[]),"digraph cfg_containsAlphabetOrPad {\n	""1"" [label=""$stack6 = this.<org.apache.commons.codec.binary.BaseNCodec: byte pad>""];\n	""2"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(element)""];\n	""3"" [label=""arrayOctet := @parameter0: byte[]""];\n	""4"" [label=""element = l2[l4]""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack6 == element""];\n	""7"" [label=""if $stack7 == 0""];\n	""8"" [label=""if arrayOctet == null""];\n	""9"" [label=""if l4 >= l3""];\n	""10"" [label=""l2 = arrayOctet""];\n	""11"" [label=""l3 = lengthof l2""];\n	""12"" [label=""l4 = 0""];\n	""13"" [label=""l4 = l4 + 1""];\n	""14"" [label=""return 0""];\n	""15"" [label=""return 1""];\n	""16"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""5""[label=""cfg_next""];\n	""16"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_goto""];\n	""6"" -> ""15""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""13""[label=""cfg_true""];\n	""7"" -> ""15""[label=""cfg_false""];\n	""8"" -> ""10""[label=""cfg_false""];\n	""8"" -> ""14""[label=""cfg_true""];\n	""9"" -> ""14""[label=""cfg_true""];\n	""9"" -> ""4""[label=""cfg_false""];\n}\n",protected 
org.apache.commons.codec.binary.BaseNCodec.decode(byte[]),Method,* Decodes a byte[] containing characters in the Base-N alphabet.\n     *\n     * @param pArray\n     *            A byte array containing Base-N character data\n     * @return a byte array containing binary data,"@Override\npublic byte[] decode(final byte[] pArray) {\n    if (BinaryCodec.isEmpty(pArray)) {\n        return pArray;\n    }\n    final Context context = new Context();\n    decode(pArray, 0, pArray.length, context);\n    // Notify decoder of EOF.\n    decode(pArray, 0, EOF, context);\n    final byte[] result = new byte[context.pos];\n    readResults(result, 0, result.length, context);\n    return result;\n}",byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(pArray)""];\n	""2"" [label=""$stack5 = new org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""3"" [label=""$stack6 = lengthof pArray""];\n	""4"" [label=""$stack7 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""5"" [label=""$stack8 = lengthof result""];\n	""6"" [label=""context = $stack5""];\n	""7"" [label=""if $stack4 == 0""];\n	""8"" [label=""pArray := @parameter0: byte[]""];\n	""9"" [label=""result = newarray (byte)[$stack7]""];\n	""10"" [label=""return pArray""];\n	""11"" [label=""return result""];\n	""12"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>()""];\n	""13"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""14"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(result, 0, $stack8, context)""];\n	""15"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(pArray, 0, $stack6, context)""];\n	""16"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(pArray, 0, -1, context)""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_next""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""15""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_next""];\n	""5"" -> ""14""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_false""];\n	""7"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,Context)",Abstract Method,package protected for access from I/O streams,"abstract void decode(byte[] pArray, int i, int length, Context context);","void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",digraph cfg_decode {\n}\n,abstract 
org.apache.commons.codec.binary.BaseNCodec.decode(Object),Method,"* Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of\n     * the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.\n     *\n     * @param obj\n     *            Object to decode\n     * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String\n     *         supplied.\n     * @throws DecoderException\n     *             if the parameter supplied is not of type byte[]","@Override\npublic Object decode(final Object obj) throws DecoderException {\n    if (obj instanceof byte[]) {\n        return decode((byte[]) obj);\n    }\n    if (obj instanceof String) {\n        return decode((String) obj);\n    }\n    throw new DecoderException(""Parameter supplied to Base-N decode is not a byte[] or a String"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack2 = obj instanceof byte[]""];\n	""2"" [label=""$stack3 = obj instanceof java.lang.String""];\n	""3"" [label=""$stack4 = new org.apache.commons.codec.DecoderException""];\n	""4"" [label=""$stack5 = (java.lang.String) obj""];\n	""5"" [label=""$stack6 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(java.lang.String)>($stack5)""];\n	""6"" [label=""$stack7 = (byte[]) obj""];\n	""7"" [label=""$stack8 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(byte[])>($stack7)""];\n	""8"" [label=""if $stack2 == 0""];\n	""9"" [label=""if $stack3 == 0""];\n	""10"" [label=""obj := @parameter0: java.lang.Object""];\n	""11"" [label=""return $stack6""];\n	""12"" [label=""return $stack8""];\n	""13"" [label=""specialinvoke $stack4.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""Parameter supplied to Base-N decode is not a byte[] or a String\"")""];\n	""14"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""15"" [label=""throw $stack4""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""15""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""11""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""12""[label=""cfg_next""];\n	""8"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""6""[label=""cfg_false""];\n	""9"" -> ""3""[label=""cfg_true""];\n	""9"" -> ""4""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.decode(String),Method,* Decodes a String containing characters in the Base-N alphabet.\n     *\n     * @param pArray\n     *            A String containing Base-N character data\n     * @return a byte array containing binary data,public byte[] decode(final String pArray) {\n    return decode(StringUtils.getBytesUtf8(pArray));\n},byte[] decode(java.lang.String),"digraph cfg_decode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(pArray)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(byte[])>($stack2)""];\n	""3"" [label=""pArray := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.encode(byte[]),Method,"* Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet.\n     *\n     * @param pArray\n     *            a byte array containing binary data\n     * @return A byte array containing only the base N alphabetic character data","@Override\npublic byte[] encode(final byte[] pArray) {\n    if (BinaryCodec.isEmpty(pArray)) {\n        return pArray;\n    }\n    return encode(pArray, 0, pArray.length);\n}",byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(pArray)""];\n	""2"" [label=""$stack3 = lengthof pArray""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[],int,int)>(pArray, 0, $stack3)""];\n	""4"" [label=""if $stack2 == 0""];\n	""5"" [label=""pArray := @parameter0: byte[]""];\n	""6"" [label=""return $stack4""];\n	""7"" [label=""return pArray""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_true""];\n	""4"" -> ""7""[label=""cfg_false""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)",Method,"* Encodes a byte[] containing binary data, into a byte[] containing\n     * characters in the alphabet.\n     *\n     * @param pArray\n     *            a byte array containing binary data\n     * @param offset\n     *            initial offset of the subarray.\n     * @param length\n     *            length of the subarray.\n     * @return A byte array containing only the base N alphabetic character data\n     * @since 1.11","public byte[] encode(final byte[] pArray, final int offset, final int length) {\n    if (BinaryCodec.isEmpty(pArray)) {\n        return pArray;\n    }\n    final Context context = new Context();\n    encode(pArray, offset, length, context);\n    // Notify encoder of EOF.\n    encode(pArray, offset, EOF, context);\n    final byte[] buf = new byte[context.pos - context.readPos];\n    readResults(buf, 0, buf.length, context);\n    return buf;\n}","byte[] encode(byte[],int,int)","digraph cfg_encode {\n	""1"" [label=""$stack10 = $stack8 - $stack9""];\n	""2"" [label=""$stack11 = lengthof buf""];\n	""3"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(pArray)""];\n	""4"" [label=""$stack7 = new org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""5"" [label=""$stack8 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""6"" [label=""$stack9 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""7"" [label=""buf = newarray (byte)[$stack10]""];\n	""8"" [label=""context = $stack7""];\n	""9"" [label=""if $stack6 == 0""];\n	""10"" [label=""length := @parameter2: int""];\n	""11"" [label=""offset := @parameter1: int""];\n	""12"" [label=""pArray := @parameter0: byte[]""];\n	""13"" [label=""return buf""];\n	""14"" [label=""return pArray""];\n	""15"" [label=""specialinvoke $stack7.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>()""];\n	""16"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""17"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(buf, 0, $stack11, context)""];\n	""18"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(pArray, offset, -1, context)""];\n	""19"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(pArray, offset, length, context)""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""3""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""15"" -> ""8""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""13""[label=""cfg_next""];\n	""18"" -> ""5""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""2"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""15""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""19""[label=""cfg_next""];\n	""9"" -> ""14""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_true""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,Context)",Abstract Method,package protected for access from I/O streams,"abstract void encode(byte[] pArray, int i, int length, Context context);","void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",digraph cfg_encode {\n}\n,abstract 
org.apache.commons.codec.binary.BaseNCodec.encode(Object),Method,"* Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n     *\n     * @param obj\n     *            Object to encode\n     * @return An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type byte[]","@Override\npublic Object encode(final Object obj) throws EncoderException {\n    if (!(obj instanceof byte[])) {\n        throw new EncoderException(""Parameter supplied to Base-N encode is not a byte[]"");\n    }\n    return encode((byte[]) obj);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = obj instanceof byte[]""];\n	""2"" [label=""$stack3 = (byte[]) obj""];\n	""3"" [label=""$stack4 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""obj := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""Parameter supplied to Base-N encode is not a byte[]\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[]),Method,"* Encodes a byte[] containing binary data, into a String containing characters in the appropriate alphabet.\n     * Uses UTF8 encoding.\n     * <p>\n     * This is a duplicate of {@link #encodeToString(byte[])}; it was merged during refactoring.\n     * </p>\n     *\n     * @param pArray a byte array containing binary data\n     * @return String containing only character data in the appropriate alphabet.\n     * @since 1.5",public String encodeAsString(final byte[] pArray) {\n    return StringUtils.newStringUtf8(encode(pArray));\n},java.lang.String encodeAsString(byte[]),"digraph cfg_encodeAsString {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>(pArray)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($stack2)""];\n	""3"" [label=""pArray := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[]),Method,"* Encodes a byte[] containing binary data, into a String containing characters in the Base-N alphabet.\n     * Uses UTF8 encoding.\n     *\n     * @param pArray\n     *            a byte array containing binary data\n     * @return A String containing only Base-N character data",public String encodeToString(final byte[] pArray) {\n    return StringUtils.newStringUtf8(encode(pArray));\n},java.lang.String encodeToString(byte[]),"digraph cfg_encodeToString {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>(pArray)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($stack2)""];\n	""3"" [label=""pArray := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,Context)",Method,* Ensure that the buffer has room for {@code size} bytes\n     *\n     * @param size minimum spare space required\n     * @param context the context to be used\n     * @return the buffer,"protected byte[] ensureBufferSize(final int size, final Context context) {\n    if (context.buffer == null) {\n        context.buffer = new byte[Math.max(size, getDefaultBufferSize())];\n        context.pos = 0;\n        context.readPos = 0;\n        // Overflow-conscious:\n        // x + y > z == x + y - z > 0\n    } else if (context.pos + size - context.buffer.length > 0) {\n        return resizeBuffer(context, context.pos + size);\n    }\n    return context.buffer;\n}","byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_ensureBufferSize {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""2"" [label=""$stack11 = $stack10 + size""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context,int)>(context, $stack11)""];\n	""4"" [label=""$stack13 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: int getDefaultBufferSize()>()""];\n	""5"" [label=""$stack14 = staticinvoke <java.lang.Math: int max(int,int)>(size, $stack13)""];\n	""6"" [label=""$stack15 = newarray (byte)[$stack14]""];\n	""7"" [label=""$stack3 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""8"" [label=""$stack4 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""9"" [label=""$stack5 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""10"" [label=""$stack6 = $stack4 + size""];\n	""11"" [label=""$stack7 = lengthof $stack5""];\n	""12"" [label=""$stack8 = $stack6 - $stack7""];\n	""13"" [label=""$stack9 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""14"" [label=""context := @parameter1: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""15"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer> = $stack15""];\n	""16"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = 0""];\n	""17"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos> = 0""];\n	""18"" [label=""goto""];\n	""19"" [label=""if $stack3 != null""];\n	""20"" [label=""if $stack8 <= 0""];\n	""21"" [label=""return $stack12""];\n	""22"" [label=""return $stack9""];\n	""23"" [label=""size := @parameter0: int""];\n	""24"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""12""[label=""cfg_next""];\n	""12"" -> ""20""[label=""cfg_next""];\n	""13"" -> ""22""[label=""cfg_next""];\n	""14"" -> ""7""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""13""[label=""cfg_goto""];\n	""19"" -> ""4""[label=""cfg_false""];\n	""19"" -> ""8""[label=""cfg_true""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""1""[label=""cfg_false""];\n	""20"" -> ""13""[label=""cfg_true""];\n	""23"" -> ""14""[label=""cfg_next""];\n	""24"" -> ""23""[label=""cfg_next""];\n	""3"" -> ""21""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""19""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.binary.BaseNCodec.getCodecPolicy(),Method,"* Returns the decoding behavior policy.\n     *\n     * <p>\n     * The default is lenient. If the decoding policy is strict, then decoding will raise an\n     * {@link IllegalArgumentException} if trailing bits are not part of a valid encoding. Decoding will compose\n     * trailing bits into 8-bit bytes and discard the remainder.\n     * </p>\n     *\n     * @return true if using strict decoding\n     * @since 1.15",public CodecPolicy getCodecPolicy() {\n    return decodingPolicy;\n},org.apache.commons.codec.CodecPolicy getCodecPolicy(),"digraph cfg_getCodecPolicy {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy decodingPolicy>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize(),Method,* Gets the default buffer size. Can be overridden.\n     *\n     * @return the default buffer size.,protected int getDefaultBufferSize() {\n    return DEFAULT_BUFFER_SIZE;\n},int getDefaultBufferSize(),"digraph cfg_getDefaultBufferSize {\n	""1"" [label=""return 8192""];\n	""2"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",protected 
org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[]),Method,* Calculates the amount of space needed to encode the supplied array.\n     *\n     * @param pArray byte[] array which will later be encoded\n     * @return amount of space needed to encode the supplied array.\n     * Returns a long since a max-len array will require &gt; Integer.MAX_VALUE,public long getEncodedLength(final byte[] pArray) {\n    // Calculate non-chunked size - rounded up to allow for padding\n    // cast to long is needed to avoid possibility of overflow\n    long len = (pArray.length + unencodedBlockSize - 1) / unencodedBlockSize * (long) encodedBlockSize;\n    if (lineLength > 0) {\n        // We're using chunking\n        // Round up to nearest multiple\n        len += (len + lineLength - 1) / lineLength * chunkSeparatorLength;\n    }\n    return len;\n},long getEncodedLength(byte[]),"digraph cfg_getEncodedLength {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.binary.BaseNCodec: int encodedBlockSize>""];\n	""2"" [label=""$stack11 = (long) $stack9""];\n	""3"" [label=""$stack12 = (long) $stack10""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>""];\n	""5"" [label=""$stack14 = this.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>""];\n	""6"" [label=""$stack15 = (long) $stack14""];\n	""7"" [label=""$stack16 = len + $stack15""];\n	""8"" [label=""$stack17 = this.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>""];\n	""9"" [label=""$stack18 = $stack16 - 1L""];\n	""10"" [label=""$stack19 = (long) $stack17""];\n	""11"" [label=""$stack20 = this.<org.apache.commons.codec.binary.BaseNCodec: int chunkSeparatorLength>""];\n	""12"" [label=""$stack21 = $stack18 / $stack19""];\n	""13"" [label=""$stack22 = (long) $stack20""];\n	""14"" [label=""$stack23 = $stack21 * $stack22""];\n	""15"" [label=""$stack4 = lengthof pArray""];\n	""16"" [label=""$stack5 = this.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize>""];\n	""17"" [label=""$stack6 = $stack4 + $stack5""];\n	""18"" [label=""$stack7 = $stack6 - 1""];\n	""19"" [label=""$stack8 = this.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize>""];\n	""20"" [label=""$stack9 = $stack7 / $stack8""];\n	""21"" [label=""if $stack13 <= 0""];\n	""22"" [label=""len = $stack11 * $stack12""];\n	""23"" [label=""len = len + $stack23""];\n	""24"" [label=""pArray := @parameter0: byte[]""];\n	""25"" [label=""return len""];\n	""26"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""11""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""23""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""17""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""19""[label=""cfg_next""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""2""[label=""cfg_next""];\n	""21"" -> ""25""[label=""cfg_true""];\n	""21"" -> ""5""[label=""cfg_false""];\n	""22"" -> ""4""[label=""cfg_next""];\n	""23"" -> ""25""[label=""cfg_next""];\n	""24"" -> ""15""[label=""cfg_next""];\n	""26"" -> ""24""[label=""cfg_next""];\n	""3"" -> ""22""[label=""cfg_next""];\n	""4"" -> ""21""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""9""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.hasData(Context),Method,* Returns true if this object has buffered data for reading.\n     *\n     * @param context the context to be used\n     * @return true if there is data still available for reading.,boolean hasData(final Context context) {\n    // package protected for access from I/O streams\n    return context.pos > context.readPos;\n},boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context),"digraph cfg_hasData {\n	""1"" [label=""$stack2 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""2"" [label=""$stack3 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""3"" [label=""$stack4 = 0""];\n	""4"" [label=""$stack4 = 1""];\n	""5"" [label=""context := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack3 <= $stack2""];\n	""8"" [label=""return $stack4""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""8""[label=""cfg_goto""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""7"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte),Abstract Method,"* Returns whether or not the {@code octet} is in the current alphabet.\n     * Does not allow whitespace or pad.\n     *\n     * @param value The value to test\n     * @return {@code true} if the value is defined in the current alphabet, {@code false} otherwise.",protected abstract boolean isInAlphabet(byte value);,boolean isInAlphabet(byte),digraph cfg_isInAlphabet {\n}\n,"protected , abstract "
"org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)",Method,"* Tests a given byte array to see if it contains only valid characters within the alphabet.\n     * The method optionally treats whitespace and pad as valid.\n     *\n     * @param arrayOctet byte array to test\n     * @param allowWSPad if {@code true}, then whitespace and PAD are also allowed\n     * @return {@code true} if all bytes are valid characters in the alphabet or if the byte array is empty;\n     *         {@code false}, otherwise","public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n    for (final byte octet : arrayOctet) {\n        if (!isInAlphabet(octet) && (!allowWSPad || octet != pad && !Character.isWhitespace(octet))) {\n            return false;\n        }\n    }\n    return true;\n}","boolean isInAlphabet(byte[],boolean)","digraph cfg_isInAlphabet {\n	""1"" [label=""$stack7 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(octet)""];\n	""2"" [label=""$stack8 = this.<org.apache.commons.codec.binary.BaseNCodec: byte pad>""];\n	""3"" [label=""$stack9 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(octet)""];\n	""4"" [label=""allowWSPad := @parameter1: boolean""];\n	""5"" [label=""arrayOctet := @parameter0: byte[]""];\n	""6"" [label=""goto""];\n	""7"" [label=""if $stack7 != 0""];\n	""8"" [label=""if $stack9 != 0""];\n	""9"" [label=""if allowWSPad == 0""];\n	""10"" [label=""if l5 >= l4""];\n	""11"" [label=""if octet == $stack8""];\n	""12"" [label=""l3 = arrayOctet""];\n	""13"" [label=""l4 = lengthof l3""];\n	""14"" [label=""l5 = 0""];\n	""15"" [label=""l5 = l5 + 1""];\n	""16"" [label=""octet = l3[l5]""];\n	""17"" [label=""return 0""];\n	""18"" [label=""return 1""];\n	""19"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""16""[label=""cfg_false""];\n	""10"" -> ""18""[label=""cfg_true""];\n	""11"" -> ""15""[label=""cfg_true""];\n	""11"" -> ""3""[label=""cfg_false""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""6""[label=""cfg_next""];\n	""16"" -> ""1""[label=""cfg_next""];\n	""19"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""10""[label=""cfg_goto""];\n	""7"" -> ""15""[label=""cfg_true""];\n	""7"" -> ""9""[label=""cfg_false""];\n	""8"" -> ""15""[label=""cfg_true""];\n	""8"" -> ""17""[label=""cfg_false""];\n	""9"" -> ""17""[label=""cfg_true""];\n	""9"" -> ""2""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(String),Method,"* Tests a given String to see if it contains only valid characters within the alphabet.\n     * The method treats whitespace and PAD as valid.\n     *\n     * @param basen String to test\n     * @return {@code true} if all characters in the String are valid characters in the alphabet or if\n     *         the String is empty; {@code false}, otherwise\n     * @see #isInAlphabet(byte[], boolean)","public boolean isInAlphabet(final String basen) {\n    return isInAlphabet(StringUtils.getBytesUtf8(basen), true);\n}",boolean isInAlphabet(java.lang.String),"digraph cfg_isInAlphabet {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(basen)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($stack2, 1)""];\n	""3"" [label=""basen := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec.isStrictDecoding(),Method,* Returns true if decoding behavior is strict. Decoding will raise an {@link IllegalArgumentException} if trailing\n     * bits are not part of a valid encoding.\n     *\n     * <p>\n     * The default is false for lenient decoding. Decoding will compose trailing bits into 8-bit bytes and discard the\n     * remainder.\n     * </p>\n     *\n     * @return true if using strict decoding\n     * @since 1.15,public boolean isStrictDecoding() {\n    return decodingPolicy == CodecPolicy.STRICT;\n},boolean isStrictDecoding(),"digraph cfg_isStrictDecoding {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.CodecPolicy: org.apache.commons.codec.CodecPolicy STRICT>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy decodingPolicy>""];\n	""3"" [label=""$stack3 = 0""];\n	""4"" [label=""$stack3 = 1""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack2 != $stack1""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_false""];\n	""8"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context)",Method,"* Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     * <p>\n     * Package private for access from I/O streams.\n     * </p>\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @param context\n     *            the context to be used\n     * @return The number of bytes successfully extracted into the provided byte[] array.","int readResults(final byte[] b, final int bPos, final int bAvail, final Context context) {\n    if (hasData(context)) {\n        final int len = Math.min(available(context), bAvail);\n        System.arraycopy(context.buffer, context.readPos, b, bPos, len);\n        context.readPos += len;\n        if (!hasData(context)) {\n            // All data read.\n            // Reset position markers but do not set buffer to null to allow its reuse.\n            // hasData(context) will still return false, and this method will return 0 until\n            // more data is available, or -1 if EOF.\n            context.pos = context.readPos = 0;\n        }\n        return len;\n    }\n    return context.eof ? EOF : 0;\n}","int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_readResults {\n	""1"" [label=""$stack10 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""2"" [label=""$stack11 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""3"" [label=""$stack12 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""4"" [label=""$stack13 = $stack12 + len""];\n	""5"" [label=""$stack14 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>(context)""];\n	""6"" [label=""$stack6 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>(context)""];\n	""7"" [label=""$stack7 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""8"" [label=""$stack8 = -1""];\n	""9"" [label=""$stack8 = 0""];\n	""10"" [label=""$stack9 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec: int available(org.apache.commons.codec.binary.BaseNCodec$Context)>(context)""];\n	""11"" [label=""b := @parameter0: byte[]""];\n	""12"" [label=""bAvail := @parameter2: int""];\n	""13"" [label=""bPos := @parameter1: int""];\n	""14"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""15"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = 0""];\n	""16"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos> = $stack13""];\n	""17"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos> = 0""];\n	""18"" [label=""goto""];\n	""19"" [label=""if $stack14 != 0""];\n	""20"" [label=""if $stack6 == 0""];\n	""21"" [label=""if $stack7 == 0""];\n	""22"" [label=""len = staticinvoke <java.lang.Math: int min(int,int)>($stack9, bAvail)""];\n	""23"" [label=""return $stack8""];\n	""24"" [label=""return len""];\n	""25"" [label=""staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack11, $stack10, b, bPos, len)""];\n	""26"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""1"" -> ""25""[label=""cfg_next""];\n	""10"" -> ""22""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""6""[label=""cfg_next""];\n	""15"" -> ""24""[label=""cfg_next""];\n	""16"" -> ""5""[label=""cfg_next""];\n	""17"" -> ""15""[label=""cfg_next""];\n	""18"" -> ""23""[label=""cfg_goto""];\n	""19"" -> ""17""[label=""cfg_false""];\n	""19"" -> ""24""[label=""cfg_true""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""10""[label=""cfg_false""];\n	""20"" -> ""7""[label=""cfg_true""];\n	""21"" -> ""8""[label=""cfg_false""];\n	""21"" -> ""9""[label=""cfg_true""];\n	""22"" -> ""2""[label=""cfg_next""];\n	""25"" -> ""3""[label=""cfg_next""];\n	""26"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""16""[label=""cfg_next""];\n	""5"" -> ""19""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""18""[label=""cfg_next""];\n	""9"" -> ""23""[label=""cfg_next""];\n}\n",default
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int)",Constructor,"* Constructs a new instance.\n     * <p>\n     * Note {@code lineLength} is rounded down to the nearest multiple of the encoded block size.\n     * If {@code chunkSeparatorLength} is zero, then chunking is disabled.\n     * </p>\n     *\n     * @param unencodedBlockSize the size of an unencoded block (for example Base64 = 3)\n     * @param encodedBlockSize the size of an encoded block (for example Base64 = 4)\n     * @param lineLength if &gt; 0, use chunking with a length {@code lineLength}\n     * @param chunkSeparatorLength the chunk separator length, if relevant","protected BaseNCodec(final int unencodedBlockSize, final int encodedBlockSize, final int lineLength, final int chunkSeparatorLength) {\n    this(unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, PAD_DEFAULT);\n}","void <init>(int,int,int,int)","digraph cfg_init {\n	""1"" [label=""chunkSeparatorLength := @parameter3: int""];\n	""2"" [label=""encodedBlockSize := @parameter1: int""];\n	""3"" [label=""lineLength := @parameter2: int""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte)>(unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, 61)""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""7"" [label=""unencodedBlockSize := @parameter0: int""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""2""[label=""cfg_next""];\n}\n",protected 
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte)",Constructor,"* Constructs a new instance.\n     * <p>\n     * Note {@code lineLength} is rounded down to the nearest multiple of the encoded block size.\n     * If {@code chunkSeparatorLength} is zero, then chunking is disabled.\n     * </p>\n     *\n     * @param unencodedBlockSize the size of an unencoded block (for example Base64 = 3)\n     * @param encodedBlockSize the size of an encoded block (for example Base64 = 4)\n     * @param lineLength if &gt; 0, use chunking with a length {@code lineLength}\n     * @param chunkSeparatorLength the chunk separator length, if relevant\n     * @param pad byte used as padding byte.","protected BaseNCodec(final int unencodedBlockSize, final int encodedBlockSize, final int lineLength, final int chunkSeparatorLength, final byte pad) {\n    this(unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, pad, DECODING_POLICY_DEFAULT);\n}","void <init>(int,int,int,int,byte)","digraph cfg_init {\n	""1"" [label=""$stack6 = <org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""chunkSeparatorLength := @parameter3: int""];\n	""3"" [label=""encodedBlockSize := @parameter1: int""];\n	""4"" [label=""lineLength := @parameter2: int""];\n	""5"" [label=""pad := @parameter4: byte""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte,org.apache.commons.codec.CodecPolicy)>(unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, pad, $stack6)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""9"" [label=""unencodedBlockSize := @parameter0: int""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",protected 
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy)",Constructor,"* Constructs a new instance.\n     * <p>\n     * Note {@code lineLength} is rounded down to the nearest multiple of the encoded block size.\n     * If {@code chunkSeparatorLength} is zero, then chunking is disabled.\n     * </p>\n     *\n     * @param unencodedBlockSize the size of an unencoded block (for example Base64 = 3)\n     * @param encodedBlockSize the size of an encoded block (for example Base64 = 4)\n     * @param lineLength if &gt; 0, use chunking with a length {@code lineLength}\n     * @param chunkSeparatorLength the chunk separator length, if relevant\n     * @param pad byte used as padding byte.\n     * @param decodingPolicy Decoding policy.\n     * @since 1.15","protected BaseNCodec(final int unencodedBlockSize, final int encodedBlockSize, final int lineLength, final int chunkSeparatorLength, final byte pad, final CodecPolicy decodingPolicy) {\n    this.unencodedBlockSize = unencodedBlockSize;\n    this.encodedBlockSize = encodedBlockSize;\n    final boolean useChunking = lineLength > 0 && chunkSeparatorLength > 0;\n    this.lineLength = useChunking ? lineLength / encodedBlockSize * encodedBlockSize : 0;\n    this.chunkSeparatorLength = chunkSeparatorLength;\n    this.pad = pad;\n    this.decodingPolicy = Objects.requireNonNull(decodingPolicy, ""codecPolicy"");\n}","void <init>(int,int,int,int,byte,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack10 = lineLength / encodedBlockSize""];\n	""2"" [label=""$stack11 = $stack10 * encodedBlockSize""];\n	""3"" [label=""$stack11 = 0""];\n	""4"" [label=""$stack8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(decodingPolicy, \""codecPolicy\"")""];\n	""5"" [label=""$stack9 = (org.apache.commons.codec.CodecPolicy) $stack8""];\n	""6"" [label=""chunkSeparatorLength := @parameter3: int""];\n	""7"" [label=""decodingPolicy := @parameter5: org.apache.commons.codec.CodecPolicy""];\n	""8"" [label=""encodedBlockSize := @parameter1: int""];\n	""9"" [label=""goto""];\n	""10"" [label=""goto""];\n	""11"" [label=""if chunkSeparatorLength <= 0""];\n	""12"" [label=""if lineLength <= 0""];\n	""13"" [label=""if useChunking == 0""];\n	""14"" [label=""lineLength := @parameter2: int""];\n	""15"" [label=""pad := @parameter4: byte""];\n	""16"" [label=""return""];\n	""17"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec""];\n	""19"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: byte PAD> = 61""];\n	""20"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: byte pad> = pad""];\n	""21"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: int chunkSeparatorLength> = chunkSeparatorLength""];\n	""22"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: int encodedBlockSize> = encodedBlockSize""];\n	""23"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: int lineLength> = $stack11""];\n	""24"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize> = unencodedBlockSize""];\n	""25"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy decodingPolicy> = $stack9""];\n	""26"" [label=""unencodedBlockSize := @parameter0: int""];\n	""27"" [label=""useChunking = 0""];\n	""28"" [label=""useChunking = 1""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""23""[label=""cfg_goto""];\n	""11"" -> ""27""[label=""cfg_true""];\n	""11"" -> ""28""[label=""cfg_false""];\n	""12"" -> ""11""[label=""cfg_false""];\n	""12"" -> ""27""[label=""cfg_true""];\n	""13"" -> ""1""[label=""cfg_false""];\n	""13"" -> ""3""[label=""cfg_true""];\n	""14"" -> ""6""[label=""cfg_next""];\n	""15"" -> ""7""[label=""cfg_next""];\n	""17"" -> ""19""[label=""cfg_next""];\n	""18"" -> ""26""[label=""cfg_next""];\n	""19"" -> ""24""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""20"" -> ""4""[label=""cfg_next""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""12""[label=""cfg_next""];\n	""23"" -> ""21""[label=""cfg_next""];\n	""24"" -> ""22""[label=""cfg_next""];\n	""25"" -> ""16""[label=""cfg_next""];\n	""26"" -> ""8""[label=""cfg_next""];\n	""27"" -> ""13""[label=""cfg_next""];\n	""28"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""23""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""25""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""17""[label=""cfg_next""];\n	""8"" -> ""14""[label=""cfg_next""];\n	""9"" -> ""13""[label=""cfg_goto""];\n}\n",protected 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.asThis(),Method,* Returns this instance typed as the subclass type {@code B}.\n         * <p>\n         * This is the same as the expression:\n         * </p>\n         * <pre>\n         * (B) this\n         * </pre>\n         *\n         * @return this instance typed as the subclass type {@code B}.,"@SuppressWarnings(""unchecked"")\nB asThis() {\n    return (B) this;\n}",org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis(),"digraph cfg_asThis {\n	""1"" [label=""return this""];\n	""2"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getDecodingPolicy(),Method,No Comment,CodecPolicy getDecodingPolicy() {\n    return decodingPolicy;\n},org.apache.commons.codec.CodecPolicy getDecodingPolicy(),"digraph cfg_getDecodingPolicy {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.CodecPolicy decodingPolicy>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getEncodeTable(),Method,No Comment,byte[] getEncodeTable() {\n    return encodeTable;\n},byte[] getEncodeTable(),"digraph cfg_getEncodeTable {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] encodeTable>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getLineLength(),Method,No Comment,int getLineLength() {\n    return lineLength;\n},int getLineLength(),"digraph cfg_getLineLength {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: int lineLength>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getLineSeparator(),Method,No Comment,byte[] getLineSeparator() {\n    return lineSeparator;\n},byte[] getLineSeparator(),"digraph cfg_getLineSeparator {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] lineSeparator>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getPadding(),Method,No Comment,byte getPadding() {\n    return padding;\n},byte getPadding(),"digraph cfg_getPadding {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte padding>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setDecodingPolicy(CodecPolicy),Method,"* Sets the decoding policy.\n         *\n         * @param decodingPolicy the decoding policy, null resets to the default.\n         * @return {@code this} instance.",public B setDecodingPolicy(final CodecPolicy decodingPolicy) {\n    this.decodingPolicy = decodingPolicy != null ? decodingPolicy : DECODING_POLICY_DEFAULT;\n    return asThis();\n},org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setDecodingPolicy(org.apache.commons.codec.CodecPolicy),"digraph cfg_setDecodingPolicy {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""$stack2 = decodingPolicy""];\n	""3"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis()>()""];\n	""4"" [label=""decodingPolicy := @parameter0: org.apache.commons.codec.CodecPolicy""];\n	""5"" [label=""goto""];\n	""6"" [label=""if decodingPolicy == null""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""9"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.CodecPolicy decodingPolicy> = $stack2""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_goto""];\n	""6"" -> ""1""[label=""cfg_true""];\n	""6"" -> ""2""[label=""cfg_false""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setEncodeTable(byte[]),Method,"* Sets the encode table.\n         *\n         * @param encodeTable the encode table, null resets to the default.\n         * @return {@code this} instance.",public B setEncodeTable(final byte... encodeTable) {\n    this.encodeTable = encodeTable != null ? encodeTable : defaultEncodeTable;\n    return asThis();\n},org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setEncodeTable(byte[]),"digraph cfg_setEncodeTable {\n	""1"" [label=""$stack2 = encodeTable""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] defaultEncodeTable>""];\n	""3"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis()>()""];\n	""4"" [label=""encodeTable := @parameter0: byte[]""];\n	""5"" [label=""goto""];\n	""6"" [label=""if encodeTable == null""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""9"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] encodeTable> = $stack2""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_goto""];\n	""6"" -> ""1""[label=""cfg_false""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineLength(int),Method,"* Sets the line length.\n         *\n         * @param lineLength the line length, less than 0 resets to the default.\n         * @return {@code this} instance.","public B setLineLength(final int lineLength) {\n    this.lineLength = Math.max(0, lineLength);\n    return asThis();\n}",org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setLineLength(int),"digraph cfg_setLineLength {\n	""1"" [label=""$stack2 = staticinvoke <java.lang.Math: int max(int,int)>(0, lineLength)""];\n	""2"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis()>()""];\n	""3"" [label=""lineLength := @parameter0: int""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""6"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: int lineLength> = $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineSeparator(byte[]),Method,"* Sets the line separator.\n         *\n         * @param lineSeparator the line separator, null resets to the default.\n         * @return {@code this} instance.",public B setLineSeparator(final byte... lineSeparator) {\n    this.lineSeparator = lineSeparator != null ? lineSeparator : CHUNK_SEPARATOR;\n    return asThis();\n},org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setLineSeparator(byte[]),"digraph cfg_setLineSeparator {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.BaseNCodec: byte[] CHUNK_SEPARATOR>""];\n	""2"" [label=""$stack2 = lineSeparator""];\n	""3"" [label=""$stack3 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis()>()""];\n	""4"" [label=""goto""];\n	""5"" [label=""if lineSeparator == null""];\n	""6"" [label=""lineSeparator := @parameter0: byte[]""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""9"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] lineSeparator> = $stack2""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""9""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""2""[label=""cfg_false""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setPadding(byte),Method,* Sets the padding byte.\n         *\n         * @param padding the padding byte.\n         * @return {@code this} instance.,public B setPadding(final byte padding) {\n    this.padding = padding;\n    return asThis();\n},org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder setPadding(byte),"digraph cfg_setPadding {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder asThis()>()""];\n	""2"" [label=""padding := @parameter0: byte""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""5"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte padding> = padding""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.<init>(byte[]),Constructor,No Comment,AbstractBuilder(final byte[] defaultEncodeTable) {\n    this.defaultEncodeTable = defaultEncodeTable;\n    this.encodeTable = defaultEncodeTable;\n},void <init>(byte[]),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.BaseNCodec: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""$stack3 = <org.apache.commons.codec.binary.BaseNCodec: byte[] CHUNK_SEPARATOR>""];\n	""3"" [label=""defaultEncodeTable := @parameter0: byte[]""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder""];\n	""7"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte padding> = 61""];\n	""8"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] defaultEncodeTable> = defaultEncodeTable""];\n	""9"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] encodeTable> = defaultEncodeTable""];\n	""10"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: byte[] lineSeparator> = $stack3""];\n	""11"" [label=""this.<org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder: org.apache.commons.codec.CodecPolicy decodingPolicy> = $stack2""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""7""[label=""cfg_next""];\n	""11"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.BaseNCodec$Context.toString(),Method,* Returns a String useful for debugging (especially within a debugger.)\n         *\n         * @return a String useful for debugging.,"@Override\npublic String toString() {\n    return String.format(""%s[buffer=%s, currentLinePos=%s, eof=%s, ibitWorkArea=%s, lbitWorkArea=%s, "" + ""modulus=%s, pos=%s, readPos=%s]"", this.getClass().getSimpleName(), Arrays.toString(buffer), currentLinePos, eof, ibitWorkArea, lbitWorkArea, modulus, pos, readPos);\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>()""];\n	""2"" [label=""$stack10 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""3"" [label=""$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack10)""];\n	""4"" [label=""$stack12 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>""];\n	""5"" [label=""$stack13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack12)""];\n	""6"" [label=""$stack14 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>""];\n	""7"" [label=""$stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack14)""];\n	""8"" [label=""$stack16 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""9"" [label=""$stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack16)""];\n	""10"" [label=""$stack18 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>""];\n	""11"" [label=""$stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack18)""];\n	""12"" [label=""$stack2 = newarray (java.lang.Object)[9]""];\n	""13"" [label=""$stack20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\""%s[buffer=%s, currentLinePos=%s, eof=%s, ibitWorkArea=%s, lbitWorkArea=%s, modulus=%s, pos=%s, readPos=%s]\"", $stack2)""];\n	""14"" [label=""$stack2[0] = $stack3""];\n	""15"" [label=""$stack2[1] = $stack5""];\n	""16"" [label=""$stack2[2] = $stack7""];\n	""17"" [label=""$stack2[3] = $stack9""];\n	""18"" [label=""$stack2[4] = $stack11""];\n	""19"" [label=""$stack2[5] = $stack13""];\n	""20"" [label=""$stack2[6] = $stack15""];\n	""21"" [label=""$stack2[7] = $stack17""];\n	""22"" [label=""$stack2[8] = $stack19""];\n	""23"" [label=""$stack3 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getSimpleName()>()""];\n	""24"" [label=""$stack4 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>""];\n	""25"" [label=""$stack5 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($stack4)""];\n	""26"" [label=""$stack6 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>""];\n	""27"" [label=""$stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6)""];\n	""28"" [label=""$stack8 = this.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""29"" [label=""$stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack8)""];\n	""30"" [label=""return $stack20""];\n	""31"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""1"" -> ""23""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""30""[label=""cfg_next""];\n	""14"" -> ""24""[label=""cfg_next""];\n	""15"" -> ""26""[label=""cfg_next""];\n	""16"" -> ""28""[label=""cfg_next""];\n	""17"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""4""[label=""cfg_next""];\n	""19"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""8""[label=""cfg_next""];\n	""21"" -> ""10""[label=""cfg_next""];\n	""22"" -> ""13""[label=""cfg_next""];\n	""23"" -> ""14""[label=""cfg_next""];\n	""24"" -> ""25""[label=""cfg_next""];\n	""25"" -> ""15""[label=""cfg_next""];\n	""26"" -> ""27""[label=""cfg_next""];\n	""27"" -> ""16""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""18""[label=""cfg_next""];\n	""31"" -> ""12""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""19""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""20""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""21""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream),Constructor,* Constructs a Base16InputStream such that all data read is Base16-decoded from the original provided InputStream.\n     *\n     * @param inputStream InputStream to wrap.,"public Base16InputStream(final InputStream inputStream) {\n    this(inputStream, false);\n}",void <init>(java.io.InputStream),"digraph cfg_init {\n	""1"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16InputStream: void <init>(java.io.InputStream,boolean)>(inputStream, 0)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base16InputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean)",Constructor,"* Constructs a Base16InputStream such that all data read is either Base16-encoded or Base16-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream InputStream to wrap.\n     * @param doEncode true if we should encode all data read from us, false if we should decode.","public Base16InputStream(final InputStream inputStream, final boolean doEncode) {\n    this(inputStream, doEncode, false);\n}","void <init>(java.io.InputStream,boolean)","digraph cfg_init {\n	""1"" [label=""doEncode := @parameter1: boolean""];\n	""2"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16InputStream: void <init>(java.io.InputStream,boolean,boolean)>(inputStream, doEncode, 0)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base16InputStream""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean)",Constructor,"* Constructs a Base16InputStream such that all data read is either Base16-encoded or Base16-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream InputStream to wrap.\n     * @param doEncode true if we should encode all data read from us, false if we should decode.\n     * @param lowerCase if {@code true} then use a lower-case Base16 alphabet.","public Base16InputStream(final InputStream inputStream, final boolean doEncode, final boolean lowerCase) {\n    this(inputStream, doEncode, lowerCase, CodecPolicy.LENIENT);\n}","void <init>(java.io.InputStream,boolean,boolean)","digraph cfg_init {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.CodecPolicy: org.apache.commons.codec.CodecPolicy LENIENT>""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""4"" [label=""lowerCase := @parameter2: boolean""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16InputStream: void <init>(java.io.InputStream,boolean,boolean,org.apache.commons.codec.CodecPolicy)>(inputStream, doEncode, lowerCase, $stack4)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base16InputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy)",Constructor,"* Constructs a Base16InputStream such that all data read is either Base16-encoded or Base16-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream InputStream to wrap.\n     * @param doEncode true if we should encode all data read from us, false if we should decode.\n     * @param lowerCase if {@code true} then use a lower-case Base16 alphabet.\n     * @param decodingPolicy Decoding policy.","public Base16InputStream(final InputStream inputStream, final boolean doEncode, final boolean lowerCase, final CodecPolicy decodingPolicy) {\n    super(inputStream, new Base16(lowerCase, decodingPolicy), doEncode);\n}","void <init>(java.io.InputStream,boolean,boolean,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base16""];\n	""2"" [label=""decodingPolicy := @parameter3: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""5"" [label=""lowerCase := @parameter2: boolean""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base16: void <init>(boolean,org.apache.commons.codec.CodecPolicy)>(lowerCase, decodingPolicy)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base16InputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream),Constructor,* Constructs a Base32InputStream such that all data read is Base32-decoded from the original provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.,"public Base32InputStream(final InputStream inputStream) {\n    this(inputStream, false);\n}",void <init>(java.io.InputStream),"digraph cfg_init {\n	""1"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean)>(inputStream, 0)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base32InputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean)",Constructor,"* Constructs a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.","public Base32InputStream(final InputStream inputStream, final boolean doEncode) {\n    super(inputStream, new Base32(false), doEncode);\n}","void <init>(java.io.InputStream,boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.binary.Base32: void <init>(boolean)>(0)""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack3, doEncode)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base32InputStream""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[])",Constructor,"* Constructs a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.","public Base32InputStream(final InputStream inputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator) {\n    super(inputStream, new Base32(lineLength, lineSeparator), doEncode);\n}","void <init>(java.io.InputStream,boolean,int,byte[])","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""4"" [label=""lineLength := @parameter2: int""];\n	""5"" [label=""lineSeparator := @parameter3: byte[]""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[])>(lineLength, lineSeparator)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base32InputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy)",Constructor,"* Constructs a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.\n     * @param decodingPolicy\n     *            The decoding policy.\n     * @since 1.15","public Base32InputStream(final InputStream inputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator, final CodecPolicy decodingPolicy) {\n    super(inputStream, new Base32(lineLength, lineSeparator, false, BaseNCodec.PAD_DEFAULT, decodingPolicy), doEncode);\n}","void <init>(java.io.InputStream,boolean,int,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack6 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""5"" [label=""lineLength := @parameter2: int""];\n	""6"" [label=""lineSeparator := @parameter3: byte[]""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 0, 61, decodingPolicy)""];\n	""9"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack6, doEncode)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.binary.Base32InputStream""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.decodeHex(char[]),Method,"* Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The\n     * returned array will be half the length of the passed array, as it takes two characters to represent any given\n     * byte. An exception is thrown if the passed char array has an odd number of elements.\n     *\n     * @param data An array of characters containing hexadecimal digits\n     * @return A byte array containing binary data decoded from the supplied char array.\n     * @throws DecoderException Thrown if an odd number of characters or illegal characters are supplied","public static byte[] decodeHex(final char[] data) throws DecoderException {\n    final byte[] out = new byte[data.length >> 1];\n    decodeHex(data, out, 0);\n    return out;\n}",byte[] decodeHex(char[]),"digraph cfg_decodeHex {\n	""1"" [label=""$stack2 = lengthof data""];\n	""2"" [label=""$stack3 = $stack2 >> 1""];\n	""3"" [label=""data := @parameter0: char[]""];\n	""4"" [label=""out = newarray (byte)[$stack3]""];\n	""5"" [label=""return out""];\n	""6"" [label=""staticinvoke <org.apache.commons.codec.binary.Hex: int decodeHex(char[],byte[],int)>(data, out, 0)""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.decodeHex(char[],byte[],int)",Method,"* Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The\n     * returned array will be half the length of the passed array, as it takes two characters to represent any given\n     * byte. An exception is thrown if the passed char array has an odd number of elements.\n     *\n     * @param data An array of characters containing hexadecimal digits\n     * @param out A byte array to contain the binary data decoded from the supplied char array.\n     * @param outOffset The position within {@code out} to start writing the decoded bytes.\n     * @return the number of bytes written to {@code out}.\n     * @throws DecoderException Thrown if an odd number of characters or illegal characters are supplied\n     * @since 1.15","public static int decodeHex(final char[] data, final byte[] out, final int outOffset) throws DecoderException {\n    final int len = data.length;\n    if ((len & 0x01) != 0) {\n        throw new DecoderException(""Odd number of characters."");\n    }\n    final int outLen = len >> 1;\n    if (out.length - outOffset < outLen) {\n        throw new DecoderException(""Output array is not large enough to accommodate decoded data."");\n    }\n    // two characters form the hex value.\n    for (int i = outOffset, j = 0; j < len; i++) {\n        int f = toDigit(data[j], j) << 4;\n        j++;\n        f |= toDigit(data[j], j);\n        j++;\n        out[i] = (byte) (f & 0xFF);\n    }\n    return outLen;\n}","int decodeHex(char[],byte[],int)","digraph cfg_decodeHex {\n	""1"" [label=""$stack10 = $stack9 - outOffset""];\n	""2"" [label=""$stack11 = data[j]""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($stack11, j)""];\n	""4"" [label=""$stack13 = data[j]""];\n	""5"" [label=""$stack14 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($stack13, j)""];\n	""6"" [label=""$stack15 = f & 255""];\n	""7"" [label=""$stack16 = (byte) $stack15""];\n	""8"" [label=""$stack17 = new org.apache.commons.codec.DecoderException""];\n	""9"" [label=""$stack18 = new org.apache.commons.codec.DecoderException""];\n	""10"" [label=""$stack8 = len & 1""];\n	""11"" [label=""$stack9 = lengthof out""];\n	""12"" [label=""data := @parameter0: char[]""];\n	""13"" [label=""f = $stack12 << 4""];\n	""14"" [label=""f = f | $stack14""];\n	""15"" [label=""goto""];\n	""16"" [label=""i = i + 1""];\n	""17"" [label=""i = outOffset""];\n	""18"" [label=""if $stack10 >= outLen""];\n	""19"" [label=""if $stack8 == 0""];\n	""20"" [label=""if j >= len""];\n	""21"" [label=""j = 0""];\n	""22"" [label=""j = j + 1""];\n	""23"" [label=""j = j + 1""];\n	""24"" [label=""len = lengthof data""];\n	""25"" [label=""out := @parameter1: byte[]""];\n	""26"" [label=""outLen = len >> 1""];\n	""27"" [label=""outOffset := @parameter2: int""];\n	""28"" [label=""out[i] = $stack16""];\n	""29"" [label=""return outLen""];\n	""30"" [label=""specialinvoke $stack17.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""Output array is not large enough to accommodate decoded data.\"")""];\n	""31"" [label=""specialinvoke $stack18.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""Odd number of characters.\"")""];\n	""32"" [label=""throw $stack17""];\n	""33"" [label=""throw $stack18""];\n	""1"" -> ""18""[label=""cfg_next""];\n	""10"" -> ""19""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""25""[label=""cfg_next""];\n	""13"" -> ""22""[label=""cfg_next""];\n	""14"" -> ""23""[label=""cfg_next""];\n	""15"" -> ""20""[label=""cfg_goto""];\n	""16"" -> ""15""[label=""cfg_next""];\n	""17"" -> ""21""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_true""];\n	""18"" -> ""8""[label=""cfg_false""];\n	""19"" -> ""26""[label=""cfg_true""];\n	""19"" -> ""9""[label=""cfg_false""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""2""[label=""cfg_false""];\n	""20"" -> ""29""[label=""cfg_true""];\n	""21"" -> ""20""[label=""cfg_next""];\n	""22"" -> ""4""[label=""cfg_next""];\n	""23"" -> ""6""[label=""cfg_next""];\n	""24"" -> ""10""[label=""cfg_next""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""11""[label=""cfg_next""];\n	""27"" -> ""24""[label=""cfg_next""];\n	""28"" -> ""16""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""30"" -> ""32""[label=""cfg_next""];\n	""31"" -> ""33""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""14""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""28""[label=""cfg_next""];\n	""8"" -> ""30""[label=""cfg_next""];\n	""9"" -> ""31""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Hex.decodeHex(String),Method,"* Converts a String representing hexadecimal values into an array of bytes of those same values. The returned array\n     * will be half the length of the passed String, as it takes two characters to represent any given byte. An\n     * exception is thrown if the passed String has an odd number of elements.\n     *\n     * @param data A String containing hexadecimal digits\n     * @return A byte array containing binary data decoded from the supplied char array.\n     * @throws DecoderException Thrown if an odd number of characters or illegal characters are supplied\n     * @since 1.11",public static byte[] decodeHex(final String data) throws DecoderException {\n    return decodeHex(data.toCharArray());\n},byte[] decodeHex(java.lang.String),"digraph cfg_decodeHex {\n	""1"" [label=""$stack1 = virtualinvoke data.<java.lang.String: char[] toCharArray()>()""];\n	""2"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($stack1)""];\n	""3"" [label=""data := @parameter0: java.lang.String""];\n	""4"" [label=""return $stack2""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Hex.encodeHex(byte[]),Method,"* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n     * given byte.\n     *\n     * @param data a byte[] to convert to hexadecimal characters\n     * @return A char[] containing lower-case hexadecimal characters","public static char[] encodeHex(final byte[] data) {\n    return encodeHex(data, true);\n}",char[] encodeHex(byte[]),"digraph cfg_encodeHex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(data, 1)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)",Method,"* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n     * given byte.\n     *\n     * @param data        a byte[] to convert to Hex characters\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @return A char[] containing hexadecimal characters in the selected case\n     * @since 1.4","public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n    return encodeHex(data, toAlphabet(toLowerCase));\n}","char[] encodeHex(byte[],boolean)","digraph cfg_encodeHex {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] toAlphabet(boolean)>(toLowerCase)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],char[])>(data, $stack2)""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""toLowerCase := @parameter1: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[])",Method,"* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n     * given byte.\n     *\n     * @param data     a byte[] to convert to hexadecimal characters\n     * @param toDigits the output alphabet (must contain at least 16 chars)\n     * @return A char[] containing the appropriate characters from the alphabet For best results, this should be either\n     *         upper- or lower-case hex.\n     * @since 1.4","protected static char[] encodeHex(final byte[] data, final char[] toDigits) {\n    final int dataLength = data.length;\n    return encodeHex(data, 0, dataLength, toDigits, new char[dataLength << 1], 0);\n}","char[] encodeHex(byte[],char[])","digraph cfg_encodeHex {\n	""1"" [label=""$stack3 = dataLength << 1""];\n	""2"" [label=""$stack4 = newarray (char)[$stack3]""];\n	""3"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],int,int,char[],char[],int)>(data, 0, dataLength, toDigits, $stack4, 0)""];\n	""4"" [label=""data := @parameter0: byte[]""];\n	""5"" [label=""dataLength = lengthof data""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""toDigits := @parameter1: char[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n}\n","protected , static "
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean)",Method,"* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     *\n     * @param data a byte[] to convert to hexadecimal characters\n     * @param dataOffset the position in {@code data} to start encoding from\n     * @param dataLen the number of bytes from {@code dataOffset} to encode\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @return A char[] containing the appropriate characters from the alphabet For best results, this should be either\n     *         upper- or lower-case hex.\n     * @since 1.15","public static char[] encodeHex(final byte[] data, final int dataOffset, final int dataLen, final boolean toLowerCase) {\n    return encodeHex(data, dataOffset, dataLen, toAlphabet(toLowerCase), new char[dataLen << 1], 0);\n}","char[] encodeHex(byte[],int,int,boolean)","digraph cfg_encodeHex {\n	""1"" [label=""$stack4 = dataLen << 1""];\n	""2"" [label=""$stack5 = newarray (char)[$stack4]""];\n	""3"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] toAlphabet(boolean)>(toLowerCase)""];\n	""4"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],int,int,char[],char[],int)>(data, dataOffset, dataLen, $stack6, $stack5, 0)""];\n	""5"" [label=""data := @parameter0: byte[]""];\n	""6"" [label=""dataLen := @parameter2: int""];\n	""7"" [label=""dataOffset := @parameter1: int""];\n	""8"" [label=""return $stack7""];\n	""9"" [label=""toLowerCase := @parameter3: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int)",Method,"* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     *\n     * @param data a byte[] to convert to hexadecimal characters\n     * @param dataOffset the position in {@code data} to start encoding from\n     * @param dataLen the number of bytes from {@code dataOffset} to encode\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @param out a char[] which will hold the resultant appropriate characters from the alphabet.\n     * @param outOffset the position within {@code out} at which to start writing the encoded characters.\n     * @since 1.15","public static void encodeHex(final byte[] data, final int dataOffset, final int dataLen, final boolean toLowerCase, final char[] out, final int outOffset) {\n    encodeHex(data, dataOffset, dataLen, toAlphabet(toLowerCase), out, outOffset);\n}","void encodeHex(byte[],int,int,boolean,char[],int)","digraph cfg_encodeHex {\n	""1"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] toAlphabet(boolean)>(toLowerCase)""];\n	""2"" [label=""data := @parameter0: byte[]""];\n	""3"" [label=""dataLen := @parameter2: int""];\n	""4"" [label=""dataOffset := @parameter1: int""];\n	""5"" [label=""out := @parameter4: char[]""];\n	""6"" [label=""outOffset := @parameter5: int""];\n	""7"" [label=""return""];\n	""8"" [label=""staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],int,int,char[],char[],int)>(data, dataOffset, dataLen, $stack6, out, outOffset)""];\n	""9"" [label=""toLowerCase := @parameter3: boolean""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""9""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int)",Method,* Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n     *\n     * @param data a byte[] to convert to hexadecimal characters\n     * @param dataOffset the position in {@code data} to start encoding from\n     * @param dataLen the number of bytes from {@code dataOffset} to encode\n     * @param toDigits the output alphabet (must contain at least 16 chars)\n     * @param out a char[] which will hold the resultant appropriate characters from the alphabet.\n     * @param outOffset the position within {@code out} at which to start writing the encoded characters.\n     * @return the given {@code out}.,"private static char[] encodeHex(final byte[] data, final int dataOffset, final int dataLen, final char[] toDigits, final char[] out, final int outOffset) {\n    // two characters form the hex value.\n    for (int i = dataOffset, j = outOffset; i < dataOffset + dataLen; i++) {\n        out[j++] = toDigits[(0xF0 & data[i]) >>> 4];\n        out[j++] = toDigits[0x0F & data[i]];\n    }\n    return out;\n}","char[] encodeHex(byte[],int,int,char[],char[],int)","digraph cfg_encodeHex {\n	""1"" [label=""$stack10 = data[i]""];\n	""2"" [label=""$stack11 = 240 & $stack10""];\n	""3"" [label=""$stack12 = $stack11 >>> 4""];\n	""4"" [label=""$stack13 = toDigits[$stack12]""];\n	""5"" [label=""$stack14 = j""];\n	""6"" [label=""$stack15 = data[i]""];\n	""7"" [label=""$stack16 = 15 & $stack15""];\n	""8"" [label=""$stack17 = toDigits[$stack16]""];\n	""9"" [label=""$stack8 = dataOffset + dataLen""];\n	""10"" [label=""$stack9 = j""];\n	""11"" [label=""data := @parameter0: byte[]""];\n	""12"" [label=""dataLen := @parameter2: int""];\n	""13"" [label=""dataOffset := @parameter1: int""];\n	""14"" [label=""goto""];\n	""15"" [label=""i = dataOffset""];\n	""16"" [label=""i = i + 1""];\n	""17"" [label=""if i >= $stack8""];\n	""18"" [label=""j = j + 1""];\n	""19"" [label=""j = j + 1""];\n	""20"" [label=""j = outOffset""];\n	""21"" [label=""out := @parameter4: char[]""];\n	""22"" [label=""outOffset := @parameter5: int""];\n	""23"" [label=""out[$stack14] = $stack17""];\n	""24"" [label=""out[$stack9] = $stack13""];\n	""25"" [label=""return out""];\n	""26"" [label=""toDigits := @parameter3: char[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""26""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""9""[label=""cfg_goto""];\n	""15"" -> ""20""[label=""cfg_next""];\n	""16"" -> ""14""[label=""cfg_next""];\n	""17"" -> ""10""[label=""cfg_false""];\n	""17"" -> ""25""[label=""cfg_true""];\n	""18"" -> ""1""[label=""cfg_next""];\n	""19"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""9""[label=""cfg_next""];\n	""21"" -> ""22""[label=""cfg_next""];\n	""22"" -> ""15""[label=""cfg_next""];\n	""23"" -> ""16""[label=""cfg_next""];\n	""24"" -> ""5""[label=""cfg_next""];\n	""26"" -> ""21""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""24""[label=""cfg_next""];\n	""5"" -> ""19""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""23""[label=""cfg_next""];\n	""9"" -> ""17""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer),Method,"* Converts a byte buffer into an array of characters representing the hexadecimal values of each byte in order. The\n     * returned array will be double the length of the passed array, as it takes two characters to represent any given\n     * byte.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param data a byte buffer to convert to hexadecimal characters\n     * @return A char[] containing lower-case hexadecimal characters\n     * @since 1.11","public static char[] encodeHex(final ByteBuffer data) {\n    return encodeHex(data, true);\n}",char[] encodeHex(java.nio.ByteBuffer),"digraph cfg_encodeHex {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(java.nio.ByteBuffer,boolean)>(data, 1)""];\n	""2"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""3"" [label=""return $stack1""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,boolean)",Method,"* Converts a byte buffer into an array of characters representing the hexadecimal values of each byte in order. The\n     * returned array will be double the length of the passed array, as it takes two characters to represent any given\n     * byte.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param data        a byte buffer to convert to hexadecimal characters\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @return A char[] containing hexadecimal characters in the selected case\n     * @since 1.11","public static char[] encodeHex(final ByteBuffer data, final boolean toLowerCase) {\n    return encodeHex(data, toAlphabet(toLowerCase));\n}","char[] encodeHex(java.nio.ByteBuffer,boolean)","digraph cfg_encodeHex {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] toAlphabet(boolean)>(toLowerCase)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(java.nio.ByteBuffer,char[])>(data, $stack2)""];\n	""3"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""toLowerCase := @parameter1: boolean""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,char[])",Method,"* Converts a byte buffer into an array of characters representing the hexadecimal values of each byte in order. The\n     * returned array will be double the length of the passed array, as it takes two characters to represent any given\n     * byte.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param byteBuffer a byte buffer to convert to hexadecimal characters\n     * @param toDigits   the output alphabet (must be at least 16 characters)\n     * @return A char[] containing the appropriate characters from the alphabet For best results, this should be either\n     *         upper- or lower-case hex.\n     * @since 1.11","protected static char[] encodeHex(final ByteBuffer byteBuffer, final char[] toDigits) {\n    return encodeHex(toByteArray(byteBuffer), toDigits);\n}","char[] encodeHex(java.nio.ByteBuffer,char[])","digraph cfg_encodeHex {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] toByteArray(java.nio.ByteBuffer)>(byteBuffer)""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],char[])>($stack2, toDigits)""];\n	""3"" [label=""byteBuffer := @parameter0: java.nio.ByteBuffer""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""toDigits := @parameter1: char[]""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n}\n","protected , static "
org.apache.commons.codec.binary.Hex.encodeHexString(byte[]),Method,"* Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned\n     * String will be double the length of the passed array, as it takes two characters to represent any given byte.\n     *\n     * @param data a byte[] to convert to hexadecimal characters\n     * @return A String containing lower-case hexadecimal characters\n     * @since 1.4",public static String encodeHexString(final byte[] data) {\n    return new String(encodeHex(data));\n},java.lang.String encodeHexString(byte[]),"digraph cfg_encodeHexString {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(data)""];\n	""2"" [label=""$stack2 = new java.lang.String""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack1)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHexString(byte[],boolean)",Method,"* Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned\n     * String will be double the length of the passed array, as it takes two characters to represent any given byte.\n     *\n     * @param data        a byte[] to convert to hexadecimal characters\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @return A String containing lower-case hexadecimal characters\n     * @since 1.11","public static String encodeHexString(final byte[] data, final boolean toLowerCase) {\n    return new String(encodeHex(data, toLowerCase));\n}","java.lang.String encodeHexString(byte[],boolean)","digraph cfg_encodeHexString {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(data, toLowerCase)""];\n	""2"" [label=""$stack3 = new java.lang.String""];\n	""3"" [label=""data := @parameter0: byte[]""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""specialinvoke $stack3.<java.lang.String: void <init>(char[])>($stack2)""];\n	""6"" [label=""toLowerCase := @parameter1: boolean""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer),Method,"* Converts a byte buffer into a String representing the hexadecimal values of each byte in order. The returned\n     * String will be double the length of the passed array, as it takes two characters to represent any given byte.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param data a byte buffer to convert to hexadecimal characters\n     * @return A String containing lower-case hexadecimal characters\n     * @since 1.11",public static String encodeHexString(final ByteBuffer data) {\n    return new String(encodeHex(data));\n},java.lang.String encodeHexString(java.nio.ByteBuffer),"digraph cfg_encodeHexString {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(java.nio.ByteBuffer)>(data)""];\n	""2"" [label=""$stack2 = new java.lang.String""];\n	""3"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack1)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
"org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer,boolean)",Method,"* Converts a byte buffer into a String representing the hexadecimal values of each byte in order. The returned\n     * String will be double the length of the passed array, as it takes two characters to represent any given byte.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param data        a byte buffer to convert to hexadecimal characters\n     * @param toLowerCase {@code true} converts to lowercase, {@code false} to uppercase\n     * @return A String containing lower-case hexadecimal characters\n     * @since 1.11","public static String encodeHexString(final ByteBuffer data, final boolean toLowerCase) {\n    return new String(encodeHex(data, toLowerCase));\n}","java.lang.String encodeHexString(java.nio.ByteBuffer,boolean)","digraph cfg_encodeHexString {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(java.nio.ByteBuffer,boolean)>(data, toLowerCase)""];\n	""2"" [label=""$stack3 = new java.lang.String""];\n	""3"" [label=""data := @parameter0: java.nio.ByteBuffer""];\n	""4"" [label=""return $stack3""];\n	""5"" [label=""specialinvoke $stack3.<java.lang.String: void <init>(char[])>($stack2)""];\n	""6"" [label=""toLowerCase := @parameter1: boolean""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.Hex.toAlphabet(boolean),Method,"* Converts a boolean to an alphabet.\n     *\n     * @param toLowerCase true for lowercase, false for uppercase.\n     * @return an alphabet.",private static char[] toAlphabet(final boolean toLowerCase) {\n    return toLowerCase ? DIGITS_LOWER : DIGITS_UPPER;\n},char[] toAlphabet(boolean),"digraph cfg_toAlphabet {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.binary.Hex: char[] DIGITS_LOWER>""];\n	""2"" [label=""$stack1 = <org.apache.commons.codec.binary.Hex: char[] DIGITS_UPPER>""];\n	""3"" [label=""goto""];\n	""4"" [label=""if toLowerCase == 0""];\n	""5"" [label=""return $stack1""];\n	""6"" [label=""toLowerCase := @parameter0: boolean""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_goto""];\n	""4"" -> ""1""[label=""cfg_false""];\n	""4"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n","private , static "
org.apache.commons.codec.binary.Hex.toByteArray(ByteBuffer),Method,* Convert the byte buffer to a byte array. All bytes identified by\n     * {@link ByteBuffer#remaining()} will be used.\n     *\n     * @param byteBuffer the byte buffer\n     * @return the byte[],private static byte[] toByteArray(final ByteBuffer byteBuffer) {\n    final int remaining = byteBuffer.remaining();\n    // Use the underlying buffer if possible\n    if (byteBuffer.hasArray()) {\n        final byte[] byteArray = byteBuffer.array();\n        if (remaining == byteArray.length) {\n            byteBuffer.position(remaining);\n            return byteArray;\n        }\n    }\n    // Copy the bytes\n    final byte[] byteArray = new byte[remaining];\n    byteBuffer.get(byteArray);\n    return byteArray;\n},byte[] toByteArray(java.nio.ByteBuffer),"digraph cfg_toByteArray {\n	""1"" [label=""$stack3 = virtualinvoke byteBuffer.<java.nio.ByteBuffer: boolean hasArray()>()""];\n	""2"" [label=""$stack4 = lengthof byteArray""];\n	""3"" [label=""byteArray = newarray (byte)[remaining]""];\n	""4"" [label=""byteArray = virtualinvoke byteBuffer.<java.nio.ByteBuffer: byte[] array()>()""];\n	""5"" [label=""byteBuffer := @parameter0: java.nio.ByteBuffer""];\n	""6"" [label=""if $stack3 == 0""];\n	""7"" [label=""if remaining != $stack4""];\n	""8"" [label=""remaining = virtualinvoke byteBuffer.<java.nio.ByteBuffer: int remaining()>()""];\n	""9"" [label=""return byteArray""];\n	""10"" [label=""return byteArray""];\n	""11"" [label=""virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(byteArray)""];\n	""12"" [label=""virtualinvoke byteBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(remaining)""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""9""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""11""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_true""];\n	""6"" -> ""4""[label=""cfg_false""];\n	""7"" -> ""12""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n","private , static "
"org.apache.commons.codec.binary.Hex.toDigit(char,int)",Method,* Converts a hexadecimal character to an integer.\n     *\n     * @param ch    A character to convert to an integer digit\n     * @param index The index of the character in the source\n     * @return An integer\n     * @throws DecoderException Thrown if ch is an illegal hexadecimal character,"protected static int toDigit(final char ch, final int index) throws DecoderException {\n    final int digit = Character.digit(ch, 16);\n    if (digit == -1) {\n        throw new DecoderException(""Illegal hexadecimal character "" + ch + "" at index "" + index);\n    }\n    return digit;\n}","int toDigit(char,int)","digraph cfg_toDigit {\n	""1"" [label=""$stack3 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Illegal hexadecimal character \"")""];\n	""3"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(ch)""];\n	""4"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"" at index \"")""];\n	""5"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index)""];\n	""6"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""7"" [label=""$stack9 = new org.apache.commons.codec.DecoderException""];\n	""8"" [label=""ch := @parameter0: char""];\n	""9"" [label=""digit = staticinvoke <java.lang.Character: int digit(char,int)>(ch, 16)""];\n	""10"" [label=""if digit != -1""];\n	""11"" [label=""index := @parameter1: int""];\n	""12"" [label=""return digit""];\n	""13"" [label=""specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>()""];\n	""14"" [label=""specialinvoke $stack9.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($stack8)""];\n	""15"" [label=""throw $stack9""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_true""];\n	""10"" -> ""7""[label=""cfg_false""];\n	""11"" -> ""9""[label=""cfg_next""];\n	""13"" -> ""2""[label=""cfg_next""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""14""[label=""cfg_next""];\n	""7"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""11""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n","protected , static "
org.apache.commons.codec.binary.Hex.decode(byte[]),Method,"* Converts an array of character bytes representing hexadecimal values into an array of bytes of those same values.\n     * The returned array will be half the length of the passed array, as it takes two characters to represent any given\n     * byte. An exception is thrown if the passed char array has an odd number of elements.\n     *\n     * @param array An array of character bytes containing hexadecimal digits\n     * @return A byte array containing binary data decoded from the supplied byte array (representing characters).\n     * @throws DecoderException Thrown if an odd number of characters is supplied to this function\n     * @see #decodeHex(char[])","@Override\npublic byte[] decode(final byte[] array) throws DecoderException {\n    return decodeHex(new String(array, getCharset()).toCharArray());\n}",byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = new java.lang.String""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.String: char[] toCharArray()>()""];\n	""4"" [label=""$stack5 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($stack4)""];\n	""5"" [label=""array := @parameter0: byte[]""];\n	""6"" [label=""return $stack5""];\n	""7"" [label=""specialinvoke $stack3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(array, $stack2)""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.decode(ByteBuffer),Method,"* Converts a buffer of character bytes representing hexadecimal values into an array of bytes of those same values.\n     * The returned array will be half the length of the passed array, as it takes two characters to represent any given\n     * byte. An exception is thrown if the passed char array has an odd number of elements.\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param buffer An array of character bytes containing hexadecimal digits\n     * @return A byte array containing binary data decoded from the supplied byte array (representing characters).\n     * @throws DecoderException Thrown if an odd number of characters is supplied to this function\n     * @see #decodeHex(char[])\n     * @since 1.11","public byte[] decode(final ByteBuffer buffer) throws DecoderException {\n    return decodeHex(new String(toByteArray(buffer), getCharset()).toCharArray());\n}",byte[] decode(java.nio.ByteBuffer),"digraph cfg_decode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] toByteArray(java.nio.ByteBuffer)>(buffer)""];\n	""3"" [label=""$stack4 = new java.lang.String""];\n	""4"" [label=""$stack5 = virtualinvoke $stack4.<java.lang.String: char[] toCharArray()>()""];\n	""5"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($stack5)""];\n	""6"" [label=""buffer := @parameter0: java.nio.ByteBuffer""];\n	""7"" [label=""return $stack6""];\n	""8"" [label=""specialinvoke $stack4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($stack3, $stack2)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""4""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.decode(Object),Method,"* Converts a String or an array of character bytes representing hexadecimal values into an array of bytes of those\n     * same values. The returned array will be half the length of the passed String or array, as it takes two characters\n     * to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.\n     *\n     * @param object A String, ByteBuffer, byte[], or an array of character bytes containing hexadecimal digits\n     * @return A byte array containing binary data decoded from the supplied byte array (representing characters).\n     * @throws DecoderException Thrown if an odd number of characters is supplied to this function or the object is not\n     *                          a String or char[]\n     * @see #decodeHex(char[])","@Override\npublic Object decode(final Object object) throws DecoderException {\n    if (object instanceof String) {\n        return decode(((String) object).toCharArray());\n    }\n    if (object instanceof byte[]) {\n        return decode((byte[]) object);\n    }\n    if (object instanceof ByteBuffer) {\n        return decode((ByteBuffer) object);\n    }\n    try {\n        return decodeHex((char[]) object);\n    } catch (final ClassCastException e) {\n        throw new DecoderException(e.getMessage(), e);\n    }\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = (byte[]) object""];\n	""2"" [label=""$stack11 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])>($stack10)""];\n	""3"" [label=""$stack12 = (java.lang.String) object""];\n	""4"" [label=""$stack13 = virtualinvoke $stack12.<java.lang.String: char[] toCharArray()>()""];\n	""5"" [label=""$stack14 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>($stack13)""];\n	""6"" [label=""$stack15 := @caughtexception""];\n	""7"" [label=""$stack16 = virtualinvoke e.<java.lang.ClassCastException: java.lang.String getMessage()>()""];\n	""8"" [label=""$stack17 = new org.apache.commons.codec.DecoderException""];\n	""9"" [label=""$stack3 = object instanceof java.lang.String""];\n	""10"" [label=""$stack4 = object instanceof byte[]""];\n	""11"" [label=""$stack5 = object instanceof java.nio.ByteBuffer""];\n	""12"" [label=""$stack6 = (char[]) object""];\n	""13"" [label=""$stack7 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($stack6)""];\n	""14"" [label=""$stack8 = (java.nio.ByteBuffer) object""];\n	""15"" [label=""$stack9 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: byte[] decode(java.nio.ByteBuffer)>($stack8)""];\n	""16"" [label=""e = $stack15""];\n	""17"" [label=""if $stack3 == 0""];\n	""18"" [label=""if $stack4 == 0""];\n	""19"" [label=""if $stack5 == 0""];\n	""20"" [label=""object := @parameter0: java.lang.Object""];\n	""21"" [label=""return $stack11""];\n	""22"" [label=""return $stack14""];\n	""23"" [label=""return $stack7""];\n	""24"" [label=""return $stack9""];\n	""25"" [label=""specialinvoke $stack17.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack16, e)""];\n	""26"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""27"" [label=""throw $stack17""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""19""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""12"" -> ""6""[label=""cfg_except""];\n	""13"" -> ""23""[label=""cfg_next""];\n	""13"" -> ""6""[label=""cfg_except""];\n	""14"" -> ""15""[label=""cfg_next""];\n	""15"" -> ""24""[label=""cfg_next""];\n	""16"" -> ""8""[label=""cfg_next""];\n	""17"" -> ""10""[label=""cfg_true""];\n	""17"" -> ""3""[label=""cfg_false""];\n	""18"" -> ""1""[label=""cfg_false""];\n	""18"" -> ""11""[label=""cfg_true""];\n	""19"" -> ""12""[label=""cfg_true""];\n	""19"" -> ""14""[label=""cfg_false""];\n	""2"" -> ""21""[label=""cfg_next""];\n	""20"" -> ""9""[label=""cfg_next""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""20""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""22""[label=""cfg_next""];\n	""6"" -> ""16""[label=""cfg_next""];\n	""7"" -> ""25""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""17""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.encode(byte[]),Method,"* Converts an array of bytes into an array of bytes for the characters representing the hexadecimal values of each\n     * byte in order. The returned array will be double the length of the passed array, as it takes two characters to\n     * represent any given byte.\n     * <p>\n     * The conversion from hexadecimal characters to the returned bytes is performed with the charset named by\n     * {@link #getCharset()}.\n     * </p>\n     *\n     * @param array a byte[] to convert to hexadecimal characters\n     * @return A byte[] containing the bytes of the lower-case hexadecimal characters\n     * @since 1.7 No longer throws IllegalStateException if the charsetName is invalid.\n     * @see #encodeHex(byte[])",@Override\npublic byte[] encode(final byte[] array) {\n    return encodeHexString(array).getBytes(getCharset());\n},byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>(array)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack2)""];\n	""4"" [label=""array := @parameter0: byte[]""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.encode(ByteBuffer),Method,"* Converts byte buffer into an array of bytes for the characters representing the hexadecimal values of each byte\n     * in order. The returned array will be double the length of the passed array, as it takes two characters to\n     * represent any given byte.\n     *\n     * <p>The conversion from hexadecimal characters to the returned bytes is performed with the charset named by\n     * {@link #getCharset()}.</p>\n     *\n     * <p>All bytes identified by {@link ByteBuffer#remaining()} will be used; after this method\n     * the value {@link ByteBuffer#remaining() remaining()} will be zero.</p>\n     *\n     * @param array a byte buffer to convert to hexadecimal characters\n     * @return A byte[] containing the bytes of the lower-case hexadecimal characters\n     * @see #encodeHex(byte[])\n     * @since 1.11",public byte[] encode(final ByteBuffer array) {\n    return encodeHexString(array).getBytes(getCharset());\n},byte[] encode(java.nio.ByteBuffer),"digraph cfg_encode {\n	""1"" [label=""$stack2 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(java.nio.ByteBuffer)>(array)""];\n	""3"" [label=""$stack4 = virtualinvoke $stack3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack2)""];\n	""4"" [label=""array := @parameter0: java.nio.ByteBuffer""];\n	""5"" [label=""return $stack4""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.encode(Object),Method,"* Converts a String or an array of bytes into an array of characters representing the hexadecimal values of each\n     * byte in order. The returned array will be double the length of the passed String or array, as it takes two\n     * characters to represent any given byte.\n     * <p>\n     * The conversion from hexadecimal characters to bytes to be encoded to performed with the charset named by\n     * {@link #getCharset()}.\n     * </p>\n     *\n     * @param object a String, ByteBuffer, or byte[] to convert to hexadecimal characters\n     * @return A char[] containing lower-case hexadecimal characters\n     * @throws EncoderException Thrown if the given object is not a String or byte[]\n     * @see #encodeHex(byte[])","@Override\npublic Object encode(final Object object) throws EncoderException {\n    final byte[] byteArray;\n    if (object instanceof String) {\n        byteArray = ((String) object).getBytes(getCharset());\n    } else if (object instanceof ByteBuffer) {\n        byteArray = toByteArray((ByteBuffer) object);\n    } else {\n        try {\n            byteArray = (byte[]) object;\n        } catch (final ClassCastException e) {\n            throw new EncoderException(e.getMessage(), e);\n        }\n    }\n    return encodeHex(byteArray);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack10 := @caughtexception""];\n	""2"" [label=""$stack11 = virtualinvoke e.<java.lang.ClassCastException: java.lang.String getMessage()>()""];\n	""3"" [label=""$stack12 = new org.apache.commons.codec.EncoderException""];\n	""4"" [label=""$stack4 = object instanceof java.lang.String""];\n	""5"" [label=""$stack5 = object instanceof java.nio.ByteBuffer""];\n	""6"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(byteArray)""];\n	""7"" [label=""$stack7 = (java.nio.ByteBuffer) object""];\n	""8"" [label=""$stack8 = virtualinvoke this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>()""];\n	""9"" [label=""$stack9 = (java.lang.String) object""];\n	""10"" [label=""byteArray = (byte[]) object""];\n	""11"" [label=""byteArray = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] toByteArray(java.nio.ByteBuffer)>($stack7)""];\n	""12"" [label=""byteArray = virtualinvoke $stack9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($stack8)""];\n	""13"" [label=""e = $stack10""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""if $stack4 == 0""];\n	""18"" [label=""if $stack5 == 0""];\n	""19"" [label=""object := @parameter0: java.lang.Object""];\n	""20"" [label=""return $stack6""];\n	""21"" [label=""specialinvoke $stack12.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($stack11, e)""];\n	""22"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""23"" [label=""throw $stack12""];\n	""1"" -> ""13""[label=""cfg_next""];\n	""10"" -> ""1""[label=""cfg_except""];\n	""10"" -> ""16""[label=""cfg_next""];\n	""11"" -> ""15""[label=""cfg_next""];\n	""12"" -> ""14""[label=""cfg_next""];\n	""13"" -> ""3""[label=""cfg_next""];\n	""14"" -> ""6""[label=""cfg_goto""];\n	""15"" -> ""6""[label=""cfg_goto""];\n	""16"" -> ""6""[label=""cfg_goto""];\n	""17"" -> ""5""[label=""cfg_true""];\n	""17"" -> ""9""[label=""cfg_false""];\n	""18"" -> ""10""[label=""cfg_true""];\n	""18"" -> ""7""[label=""cfg_false""];\n	""19"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""23""[label=""cfg_next""];\n	""22"" -> ""19""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""20""[label=""cfg_next""];\n	""7"" -> ""11""[label=""cfg_next""];\n	""8"" -> ""12""[label=""cfg_next""];\n	""9"" -> ""8""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.getCharset(),Method,* Gets the charset.\n     *\n     * @return the charset.\n     * @since 1.7,public Charset getCharset() {\n    return this.charset;\n},java.nio.charset.Charset getCharset(),"digraph cfg_getCharset {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset charset>""];\n	""2"" [label=""return $stack1""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.getCharsetName(),Method,* Gets the charset name.\n     *\n     * @return the charset name.\n     * @since 1.4,public String getCharsetName() {\n    return this.charset.name();\n},java.lang.String getCharsetName(),"digraph cfg_getCharsetName {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset charset>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<java.nio.charset.Charset: java.lang.String name()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.toString(),Method,"* Returns a string representation of the object, which includes the charset name.\n     *\n     * @return a string representation of the object.","@Override\npublic String toString() {\n    return super.toString() + ""[charsetName="" + this.charset + ""]"";\n}",java.lang.String toString(),"digraph cfg_toString {\n	""1"" [label=""$stack1 = new java.lang.StringBuilder""];\n	""2"" [label=""$stack2 = specialinvoke this.<java.lang.Object: java.lang.String toString()>()""];\n	""3"" [label=""$stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2)""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset charset>""];\n	""5"" [label=""$stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""[charsetName=\"")""];\n	""6"" [label=""$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack4)""];\n	""7"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""]\"")""];\n	""8"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""9"" [label=""return $stack8""];\n	""10"" [label=""specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>()""];\n	""11"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""10""[label=""cfg_next""];\n	""10"" -> ""2""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.<init>(),Constructor,* Creates a new codec with the default charset name {@link #DEFAULT_CHARSET},public Hex() {\n    // use default encoding\n    this.charset = DEFAULT_CHARSET;\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""$stack1 = <org.apache.commons.codec.binary.Hex: java.nio.charset.Charset DEFAULT_CHARSET>""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""5"" [label=""this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset charset> = $stack1""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.<init>(Charset),Constructor,* Creates a new codec with the given Charset.\n     *\n     * @param charset the charset.\n     * @since 1.7,public Hex(final Charset charset) {\n    this.charset = charset;\n},void <init>(java.nio.charset.Charset),"digraph cfg_init {\n	""1"" [label=""charset := @parameter0: java.nio.charset.Charset""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""5"" [label=""this.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset charset> = charset""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Hex.<init>(String),Constructor,* Creates a new codec with the given charset name.\n     *\n     * @param charsetName the charset name.\n     * @throws java.nio.charset.UnsupportedCharsetException If the named charset is unavailable\n     * @since 1.4\n     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable,public Hex(final String charsetName) {\n    this(Charset.forName(charsetName));\n},void <init>(java.lang.String),"digraph cfg_init {\n	""1"" [label=""$stack2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName)""];\n	""2"" [label=""charsetName := @parameter0: java.lang.String""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Hex: void <init>(java.nio.charset.Charset)>($stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Hex""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecOutputStream.close(),Method,"* Closes this output stream and releases any system resources associated with the stream.\n     * <p>\n     * To write the EOF marker without closing the stream, call {@link #eof()} or use an\n     * <a href=""https://commons.apache.org/proper/commons-io/"">Apache Commons IO</a> <a href=\n     * ""https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/output/CloseShieldOutputStream.html""\n     * >CloseShieldOutputStream</a>.\n     * </p>\n     *\n     * @throws IOException\n     *             if an I/O error occurs.",@Override\npublic void close() throws IOException {\n    eof();\n    flush();\n    out.close();\n},void close(),"digraph cfg_close {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""4"" [label=""virtualinvoke $stack1.<java.io.OutputStream: void close()>()""];\n	""5"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void eof()>()""];\n	""6"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush()>()""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecOutputStream.eof(),Method,* Writes EOF.\n     *\n     * @since 1.11,"public void eof() {\n    // Notify encoder of EOF (-1).\n    if (doEncode) {\n        baseNCodec.encode(singleByte, 0, EOF, context);\n    } else {\n        baseNCodec.decode(singleByte, 0, EOF, context);\n    }\n}",void eof(),"digraph cfg_eof {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode>""];\n	""2"" [label=""$stack2 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""5"" [label=""$stack5 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""6"" [label=""$stack6 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>""];\n	""7"" [label=""$stack7 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack1 == 0""];\n	""10"" [label=""return""];\n	""11"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""12"" [label=""virtualinvoke $stack4.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack3, 0, -1, $stack2)""];\n	""13"" [label=""virtualinvoke $stack7.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack6, 0, -1, $stack5)""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""11"" -> ""1""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""8""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_goto""];\n	""9"" -> ""4""[label=""cfg_true""];\n	""9"" -> ""7""[label=""cfg_false""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(),Method,* Flushes this output stream and forces any buffered output bytes to be written out to the stream.\n     *\n     * @throws IOException\n     *             if an I/O error occurs.,@Override\npublic void flush() throws IOException {\n    flush(true);\n},void flush(),"digraph cfg_flush {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush(boolean)>(1)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean),Method,"* Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propagate is\n     * true, the wrapped stream will also be flushed.\n     *\n     * @param propagate\n     *            boolean flag to indicate whether the wrapped OutputStream should also be flushed.\n     * @throws IOException\n     *             if an I/O error occurs.","private void flush(final boolean propagate) throws IOException {\n    final int avail = baseNCodec.available(context);\n    if (avail > 0) {\n        final byte[] buf = new byte[avail];\n        final int c = baseNCodec.readResults(buf, 0, avail, context);\n        if (c > 0) {\n            out.write(buf, 0, c);\n        }\n    }\n    if (propagate) {\n        out.flush();\n    }\n}",void flush(boolean),"digraph cfg_flush {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>""];\n	""2"" [label=""$stack5 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""3"" [label=""$stack6 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""4"" [label=""$stack7 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>""];\n	""5"" [label=""$stack8 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""6"" [label=""$stack9 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""7"" [label=""avail = virtualinvoke $stack6.<org.apache.commons.codec.binary.BaseNCodec: int available(org.apache.commons.codec.binary.BaseNCodec$Context)>($stack5)""];\n	""8"" [label=""buf = newarray (byte)[avail]""];\n	""9"" [label=""c = virtualinvoke $stack9.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(buf, 0, avail, $stack8)""];\n	""10"" [label=""if avail <= 0""];\n	""11"" [label=""if c <= 0""];\n	""12"" [label=""if propagate == 0""];\n	""13"" [label=""propagate := @parameter0: boolean""];\n	""14"" [label=""return""];\n	""15"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""16"" [label=""virtualinvoke $stack10.<java.io.OutputStream: void write(byte[],int,int)>(buf, 0, c)""];\n	""17"" [label=""virtualinvoke $stack7.<java.io.OutputStream: void flush()>()""];\n	""1"" -> ""16""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_true""];\n	""10"" -> ""8""[label=""cfg_false""];\n	""11"" -> ""1""[label=""cfg_false""];\n	""11"" -> ""12""[label=""cfg_true""];\n	""12"" -> ""14""[label=""cfg_true""];\n	""12"" -> ""4""[label=""cfg_false""];\n	""13"" -> ""3""[label=""cfg_next""];\n	""15"" -> ""13""[label=""cfg_next""];\n	""16"" -> ""12""[label=""cfg_next""];\n	""17"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""17""[label=""cfg_next""];\n	""5"" -> ""9""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""11""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.BaseNCodecOutputStream.isStrictDecoding(),Method,* Returns true if decoding behavior is strict. Decoding will raise an\n     * {@link IllegalArgumentException} if trailing bits are not part of a valid encoding.\n     *\n     * <p>\n     * The default is false for lenient encoding. Decoding will compose trailing bits\n     * into 8-bit bytes and discard the remainder.\n     * </p>\n     *\n     * @return true if using strict decoding\n     * @since 1.15,public boolean isStrictDecoding() {\n    return baseNCodec.isStrictDecoding();\n},boolean isStrictDecoding(),"digraph cfg_isStrictDecoding {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.binary.BaseNCodec: boolean isStrictDecoding()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)",Method,"* Writes {@code len} bytes from the specified {@code b} array starting at {@code offset} to this\n     * output stream.\n     *\n     * @param array\n     *            source byte array\n     * @param offset\n     *            where to start reading the bytes\n     * @param len\n     *            maximum number of bytes to write\n     *\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid","@Override\npublic void write(final byte[] array, final int offset, final int len) throws IOException {\n    Objects.requireNonNull(array, ""array"");\n    if (offset < 0 || len < 0 || offset > array.length || offset + len > array.length) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (len > 0) {\n        if (doEncode) {\n            baseNCodec.encode(array, offset, len, context);\n        } else {\n            baseNCodec.decode(array, offset, len, context);\n        }\n        flush(false);\n    }\n}","void write(byte[],int,int)","digraph cfg_write {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""3"" [label=""$stack12 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""4"" [label=""$stack4 = new java.lang.IndexOutOfBoundsException""];\n	""5"" [label=""$stack5 = lengthof array""];\n	""6"" [label=""$stack6 = lengthof array""];\n	""7"" [label=""$stack7 = offset + len""];\n	""8"" [label=""$stack8 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode>""];\n	""9"" [label=""$stack9 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""10"" [label=""array := @parameter0: byte[]""];\n	""11"" [label=""goto""];\n	""12"" [label=""if $stack7 <= $stack6""];\n	""13"" [label=""if $stack8 == 0""];\n	""14"" [label=""if len < 0""];\n	""15"" [label=""if len <= 0""];\n	""16"" [label=""if offset < 0""];\n	""17"" [label=""if offset > $stack5""];\n	""18"" [label=""len := @parameter2: int""];\n	""19"" [label=""offset := @parameter1: int""];\n	""20"" [label=""return""];\n	""21"" [label=""specialinvoke $stack4.<java.lang.IndexOutOfBoundsException: void <init>()>()""];\n	""22"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush(boolean)>(0)""];\n	""23"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(array, \""array\"")""];\n	""24"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""25"" [label=""throw $stack4""];\n	""26"" [label=""virtualinvoke $stack10.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(array, offset, len, $stack9)""];\n	""27"" [label=""virtualinvoke $stack12.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(array, offset, len, $stack11)""];\n	""1"" -> ""9""[label=""cfg_next""];\n	""10"" -> ""19""[label=""cfg_next""];\n	""11"" -> ""22""[label=""cfg_goto""];\n	""12"" -> ""15""[label=""cfg_true""];\n	""12"" -> ""4""[label=""cfg_false""];\n	""13"" -> ""1""[label=""cfg_true""];\n	""13"" -> ""3""[label=""cfg_false""];\n	""14"" -> ""4""[label=""cfg_true""];\n	""14"" -> ""5""[label=""cfg_false""];\n	""15"" -> ""20""[label=""cfg_true""];\n	""15"" -> ""8""[label=""cfg_false""];\n	""16"" -> ""14""[label=""cfg_false""];\n	""16"" -> ""4""[label=""cfg_true""];\n	""17"" -> ""4""[label=""cfg_true""];\n	""17"" -> ""7""[label=""cfg_false""];\n	""18"" -> ""23""[label=""cfg_next""];\n	""19"" -> ""18""[label=""cfg_next""];\n	""2"" -> ""27""[label=""cfg_next""];\n	""21"" -> ""25""[label=""cfg_next""];\n	""22"" -> ""20""[label=""cfg_next""];\n	""23"" -> ""16""[label=""cfg_next""];\n	""24"" -> ""10""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""11""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""21""[label=""cfg_next""];\n	""5"" -> ""17""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""13""[label=""cfg_next""];\n	""9"" -> ""26""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecOutputStream.write(int),Method,* Writes the specified {@code byte} to this output stream.\n     *\n     * @param i\n     *            source byte\n     * @throws IOException\n     *             if an I/O error occurs.,"@Override\npublic void write(final int i) throws IOException {\n    singleByte[0] = (byte) i;\n    write(singleByte, 0, 1);\n}",void write(int),"digraph cfg_write {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>""];\n	""2"" [label=""$stack2[0] = $stack3""];\n	""3"" [label=""$stack3 = (byte) i""];\n	""4"" [label=""$stack4 = this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>""];\n	""5"" [label=""i := @parameter0: int""];\n	""6"" [label=""return""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""8"" [label=""virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void write(byte[],int,int)>($stack4, 0, 1)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""5""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodecOutputStream.<init>(OutputStream,BaseNCodec,boolean)",Constructor,"* Constructs a new instance.\n     *\n     * TODO should this be protected?\n     *\n     * @param outputStream the underlying output or null.\n     * @param basedCodec a BaseNCodec.\n     * @param doEncode true to encode, false to decode, TODO should be an enum?","public BaseNCodecOutputStream(final OutputStream outputStream, final BaseNCodec basedCodec, final boolean doEncode) {\n    super(outputStream);\n    this.baseNCodec = basedCodec;\n    this.doEncode = doEncode;\n}","void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)","digraph cfg_init {\n	""1"" [label=""$stack4 = newarray (byte)[1]""];\n	""2"" [label=""$stack5 = new org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""3"" [label=""basedCodec := @parameter1: org.apache.commons.codec.binary.BaseNCodec""];\n	""4"" [label=""doEncode := @parameter2: boolean""];\n	""5"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>()""];\n	""8"" [label=""specialinvoke this.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(outputStream)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream""];\n	""10"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode> = doEncode""];\n	""11"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte> = $stack4""];\n	""12"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = basedCodec""];\n	""13"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context> = $stack5""];\n	""1"" -> ""11""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""11"" -> ""2""[label=""cfg_next""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""2"" -> ""7""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_next""];\n	""8"" -> ""1""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream),Constructor,* Constructs a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.,"public Base64InputStream(final InputStream inputStream) {\n    this(inputStream, false);\n}",void <init>(java.io.InputStream),"digraph cfg_init {\n	""1"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean)>(inputStream, 0)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base64InputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean)",Constructor,"* Constructs a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.","public Base64InputStream(final InputStream inputStream, final boolean doEncode) {\n    super(inputStream, new Base64(false), doEncode);\n}","void <init>(java.io.InputStream,boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(0)""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack3, doEncode)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base64InputStream""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[])",Constructor,"* Constructs a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.","public Base64InputStream(final InputStream inputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator) {\n    super(inputStream, new Base64(lineLength, lineSeparator), doEncode);\n}","void <init>(java.io.InputStream,boolean,int,byte[])","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""4"" [label=""lineLength := @parameter2: int""];\n	""5"" [label=""lineSeparator := @parameter3: byte[]""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(lineLength, lineSeparator)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base64InputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy)",Constructor,"* Constructs a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n     * provided InputStream.\n     *\n     * @param inputStream\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.\n     * @param decodingPolicy The decoding policy.\n     * @since 1.15","public Base64InputStream(final InputStream inputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator, final CodecPolicy decodingPolicy) {\n    super(inputStream, new Base64(lineLength, lineSeparator, false, decodingPolicy), doEncode);\n}","void <init>(java.io.InputStream,boolean,int,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack6 = new org.apache.commons.codec.binary.Base64""];\n	""2"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""5"" [label=""lineLength := @parameter2: int""];\n	""6"" [label=""lineSeparator := @parameter3: byte[]""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 0, decodingPolicy)""];\n	""9"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(inputStream, $stack6, doEncode)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.binary.Base64InputStream""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""2""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[]),Method,* Decodes a byte array where each byte represents an ASCII '0' or '1'.\n     *\n     * @param ascii\n     *                  each byte represents an ASCII '0' or '1'\n     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument,"public static byte[] fromAscii(final byte[] ascii) {\n    if (isEmpty(ascii)) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    final int asciiLength = ascii.length;\n    // get length/8 times bytes with 3 bit shifts to the right of the length\n    final byte[] raw = new byte[asciiLength >> 3];\n    /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n    for (int ii = 0, jj = asciiLength - 1; ii < raw.length; ii++, jj -= 8) {\n        for (int bits = 0; bits < BITS.length; ++bits) {\n            if (ascii[jj - bits] == '1') {\n                raw[ii] |= BITS[bits];\n            }\n        }\n    }\n    return raw;\n}",byte[] fromAscii(byte[]),"digraph cfg_fromAscii {\n	""1"" [label=""$stack10 = lengthof $stack9""];\n	""2"" [label=""$stack11 = jj - bits""];\n	""3"" [label=""$stack12 = ascii[$stack11]""];\n	""4"" [label=""$stack13 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""5"" [label=""$stack14 = raw[ii]""];\n	""6"" [label=""$stack15 = $stack13[bits]""];\n	""7"" [label=""$stack16 = $stack14 | $stack15""];\n	""8"" [label=""$stack17 = (byte) $stack16""];\n	""9"" [label=""$stack18 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>""];\n	""10"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(ascii)""];\n	""11"" [label=""$stack7 = asciiLength >> 3""];\n	""12"" [label=""$stack8 = lengthof raw""];\n	""13"" [label=""$stack9 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""14"" [label=""ascii := @parameter0: byte[]""];\n	""15"" [label=""asciiLength = lengthof ascii""];\n	""16"" [label=""bits = 0""];\n	""17"" [label=""bits = bits + 1""];\n	""18"" [label=""goto""];\n	""19"" [label=""goto""];\n	""20"" [label=""if $stack12 != 49""];\n	""21"" [label=""if $stack6 == 0""];\n	""22"" [label=""if bits >= $stack10""];\n	""23"" [label=""if ii >= $stack8""];\n	""24"" [label=""ii = 0""];\n	""25"" [label=""ii = ii + 1""];\n	""26"" [label=""jj = asciiLength - 1""];\n	""27"" [label=""jj = jj + -8""];\n	""28"" [label=""raw = newarray (byte)[$stack7]""];\n	""29"" [label=""raw[ii] = $stack17""];\n	""30"" [label=""return $stack18""];\n	""31"" [label=""return raw""];\n	""1"" -> ""22""[label=""cfg_next""];\n	""10"" -> ""21""[label=""cfg_next""];\n	""11"" -> ""28""[label=""cfg_next""];\n	""12"" -> ""23""[label=""cfg_next""];\n	""13"" -> ""1""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""13""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""13""[label=""cfg_goto""];\n	""19"" -> ""12""[label=""cfg_goto""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""17""[label=""cfg_true""];\n	""20"" -> ""5""[label=""cfg_false""];\n	""21"" -> ""15""[label=""cfg_true""];\n	""21"" -> ""9""[label=""cfg_false""];\n	""22"" -> ""2""[label=""cfg_false""];\n	""22"" -> ""25""[label=""cfg_true""];\n	""23"" -> ""16""[label=""cfg_false""];\n	""23"" -> ""31""[label=""cfg_true""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""12""[label=""cfg_next""];\n	""27"" -> ""19""[label=""cfg_next""];\n	""28"" -> ""24""[label=""cfg_next""];\n	""29"" -> ""17""[label=""cfg_next""];\n	""3"" -> ""20""[label=""cfg_next""];\n	""4"" -> ""6""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""29""[label=""cfg_next""];\n	""9"" -> ""30""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[]),Method,* Decodes a char array where each char represents an ASCII '0' or '1'.\n     *\n     * @param ascii\n     *                  each char represents an ASCII '0' or '1'\n     * @return the raw encoded binary where each bit corresponds to a char in the char array argument,"public static byte[] fromAscii(final char[] ascii) {\n    if (ascii == null || ascii.length == 0) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    final int asciiLength = ascii.length;\n    // get length/8 times bytes with 3 bit shifts to the right of the length\n    final byte[] raw = new byte[asciiLength >> 3];\n    /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n    for (int ii = 0, jj = asciiLength - 1; ii < raw.length; ii++, jj -= 8) {\n        for (int bits = 0; bits < BITS.length; ++bits) {\n            if (ascii[jj - bits] == '1') {\n                raw[ii] |= BITS[bits];\n            }\n        }\n    }\n    return raw;\n}",byte[] fromAscii(char[]),"digraph cfg_fromAscii {\n	""1"" [label=""$stack10 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""2"" [label=""$stack11 = lengthof $stack10""];\n	""3"" [label=""$stack12 = jj - bits""];\n	""4"" [label=""$stack13 = ascii[$stack12]""];\n	""5"" [label=""$stack14 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""6"" [label=""$stack15 = raw[ii]""];\n	""7"" [label=""$stack16 = $stack14[bits]""];\n	""8"" [label=""$stack17 = $stack15 | $stack16""];\n	""9"" [label=""$stack18 = (byte) $stack17""];\n	""10"" [label=""$stack6 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>""];\n	""11"" [label=""$stack7 = lengthof ascii""];\n	""12"" [label=""$stack8 = asciiLength >> 3""];\n	""13"" [label=""$stack9 = lengthof raw""];\n	""14"" [label=""ascii := @parameter0: char[]""];\n	""15"" [label=""asciiLength = lengthof ascii""];\n	""16"" [label=""bits = 0""];\n	""17"" [label=""bits = bits + 1""];\n	""18"" [label=""goto""];\n	""19"" [label=""goto""];\n	""20"" [label=""if $stack13 != 49""];\n	""21"" [label=""if $stack7 != 0""];\n	""22"" [label=""if ascii == null""];\n	""23"" [label=""if bits >= $stack11""];\n	""24"" [label=""if ii >= $stack9""];\n	""25"" [label=""ii = 0""];\n	""26"" [label=""ii = ii + 1""];\n	""27"" [label=""jj = asciiLength - 1""];\n	""28"" [label=""jj = jj + -8""];\n	""29"" [label=""raw = newarray (byte)[$stack8]""];\n	""30"" [label=""raw[ii] = $stack18""];\n	""31"" [label=""return $stack6""];\n	""32"" [label=""return raw""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""31""[label=""cfg_next""];\n	""11"" -> ""21""[label=""cfg_next""];\n	""12"" -> ""29""[label=""cfg_next""];\n	""13"" -> ""24""[label=""cfg_next""];\n	""14"" -> ""22""[label=""cfg_next""];\n	""15"" -> ""12""[label=""cfg_next""];\n	""16"" -> ""1""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""1""[label=""cfg_goto""];\n	""19"" -> ""13""[label=""cfg_goto""];\n	""2"" -> ""23""[label=""cfg_next""];\n	""20"" -> ""17""[label=""cfg_true""];\n	""20"" -> ""6""[label=""cfg_false""];\n	""21"" -> ""10""[label=""cfg_false""];\n	""21"" -> ""15""[label=""cfg_true""];\n	""22"" -> ""10""[label=""cfg_true""];\n	""22"" -> ""11""[label=""cfg_false""];\n	""23"" -> ""26""[label=""cfg_true""];\n	""23"" -> ""3""[label=""cfg_false""];\n	""24"" -> ""16""[label=""cfg_false""];\n	""24"" -> ""32""[label=""cfg_true""];\n	""25"" -> ""27""[label=""cfg_next""];\n	""26"" -> ""28""[label=""cfg_next""];\n	""27"" -> ""13""[label=""cfg_next""];\n	""28"" -> ""19""[label=""cfg_next""];\n	""29"" -> ""25""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""17""[label=""cfg_next""];\n	""4"" -> ""20""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""30""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[]),Method,* Returns {@code true} if the given array is {@code null} or empty (size 0.)\n     *\n     * @param array\n     *            the source array\n     * @return {@code true} if the given array is {@code null} or empty (size 0.),static boolean isEmpty(final byte[] array) {\n    return array == null || array.length == 0;\n},boolean isEmpty(byte[]),"digraph cfg_isEmpty {\n	""1"" [label=""$stack1 = lengthof array""];\n	""2"" [label=""$stack2 = 0""];\n	""3"" [label=""$stack2 = 1""];\n	""4"" [label=""array := @parameter0: byte[]""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack1 != 0""];\n	""7"" [label=""if array == null""];\n	""8"" [label=""return $stack2""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""8""[label=""cfg_goto""];\n	""6"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""7"" -> ""1""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n}\n",static 
org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[]),Method,* Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated\n     * char.\n     *\n     * @param raw\n     *                  the raw binary data to convert\n     * @return an array of 0 and 1 character bytes for each bit of the argument\n     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[]),"public static byte[] toAsciiBytes(final byte[] raw) {\n    if (isEmpty(raw)) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    final int rawLength = raw.length;\n    // get 8 times the bytes with 3 bit shifts to the left of the length\n    final byte[] l_ascii = new byte[rawLength << 3];\n    /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n    for (int ii = 0, jj = l_ascii.length - 1; ii < rawLength; ii++, jj -= 8) {\n        for (int bits = 0; bits < BITS.length; ++bits) {\n            if ((raw[ii] & BITS[bits]) == 0) {\n                l_ascii[jj - bits] = '0';\n            } else {\n                l_ascii[jj - bits] = '1';\n            }\n        }\n    }\n    return l_ascii;\n}",byte[] toAsciiBytes(byte[]),"digraph cfg_toAsciiBytes {\n	""1"" [label=""$stack10 = lengthof $stack9""];\n	""2"" [label=""$stack11 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""3"" [label=""$stack12 = raw[ii]""];\n	""4"" [label=""$stack13 = $stack11[bits]""];\n	""5"" [label=""$stack14 = $stack12 & $stack13""];\n	""6"" [label=""$stack15 = jj - bits""];\n	""7"" [label=""$stack16 = jj - bits""];\n	""8"" [label=""$stack17 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>""];\n	""9"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(raw)""];\n	""10"" [label=""$stack7 = rawLength << 3""];\n	""11"" [label=""$stack8 = lengthof l_ascii""];\n	""12"" [label=""$stack9 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""13"" [label=""bits = 0""];\n	""14"" [label=""bits = bits + 1""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack14 != 0""];\n	""19"" [label=""if $stack6 == 0""];\n	""20"" [label=""if bits >= $stack10""];\n	""21"" [label=""if ii >= rawLength""];\n	""22"" [label=""ii = 0""];\n	""23"" [label=""ii = ii + 1""];\n	""24"" [label=""jj = $stack8 - 1""];\n	""25"" [label=""jj = jj + -8""];\n	""26"" [label=""l_ascii = newarray (byte)[$stack7]""];\n	""27"" [label=""l_ascii[$stack15] = 49""];\n	""28"" [label=""l_ascii[$stack16] = 48""];\n	""29"" [label=""raw := @parameter0: byte[]""];\n	""30"" [label=""rawLength = lengthof raw""];\n	""31"" [label=""return $stack17""];\n	""32"" [label=""return l_ascii""];\n	""1"" -> ""20""[label=""cfg_next""];\n	""10"" -> ""26""[label=""cfg_next""];\n	""11"" -> ""24""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_goto""];\n	""16"" -> ""12""[label=""cfg_goto""];\n	""17"" -> ""21""[label=""cfg_goto""];\n	""18"" -> ""6""[label=""cfg_true""];\n	""18"" -> ""7""[label=""cfg_false""];\n	""19"" -> ""30""[label=""cfg_true""];\n	""19"" -> ""8""[label=""cfg_false""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""23""[label=""cfg_true""];\n	""20"" -> ""3""[label=""cfg_false""];\n	""21"" -> ""13""[label=""cfg_false""];\n	""21"" -> ""32""[label=""cfg_true""];\n	""22"" -> ""11""[label=""cfg_next""];\n	""23"" -> ""25""[label=""cfg_next""];\n	""24"" -> ""21""[label=""cfg_next""];\n	""25"" -> ""17""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""14""[label=""cfg_next""];\n	""28"" -> ""15""[label=""cfg_next""];\n	""29"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""30"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""27""[label=""cfg_next""];\n	""7"" -> ""28""[label=""cfg_next""];\n	""8"" -> ""31""[label=""cfg_next""];\n	""9"" -> ""19""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[]),Method,* Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n     *\n     * @param raw\n     *                  the raw binary data to convert\n     * @return an array of 0 and 1 characters for each bit of the argument\n     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[]),"public static char[] toAsciiChars(final byte[] raw) {\n    if (isEmpty(raw)) {\n        return EMPTY_CHAR_ARRAY;\n    }\n    final int rawLength = raw.length;\n    // get 8 times the bytes with 3 bit shifts to the left of the length\n    final char[] l_ascii = new char[rawLength << 3];\n    /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n    for (int ii = 0, jj = l_ascii.length - 1; ii < rawLength; ii++, jj -= 8) {\n        for (int bits = 0; bits < BITS.length; ++bits) {\n            if ((raw[ii] & BITS[bits]) == 0) {\n                l_ascii[jj - bits] = '0';\n            } else {\n                l_ascii[jj - bits] = '1';\n            }\n        }\n    }\n    return l_ascii;\n}",char[] toAsciiChars(byte[]),"digraph cfg_toAsciiChars {\n	""1"" [label=""$stack10 = lengthof $stack9""];\n	""2"" [label=""$stack11 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""3"" [label=""$stack12 = raw[ii]""];\n	""4"" [label=""$stack13 = $stack11[bits]""];\n	""5"" [label=""$stack14 = $stack12 & $stack13""];\n	""6"" [label=""$stack15 = jj - bits""];\n	""7"" [label=""$stack16 = jj - bits""];\n	""8"" [label=""$stack17 = <org.apache.commons.codec.binary.BinaryCodec: char[] EMPTY_CHAR_ARRAY>""];\n	""9"" [label=""$stack6 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>(raw)""];\n	""10"" [label=""$stack7 = rawLength << 3""];\n	""11"" [label=""$stack8 = lengthof l_ascii""];\n	""12"" [label=""$stack9 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>""];\n	""13"" [label=""bits = 0""];\n	""14"" [label=""bits = bits + 1""];\n	""15"" [label=""goto""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack14 != 0""];\n	""19"" [label=""if $stack6 == 0""];\n	""20"" [label=""if bits >= $stack10""];\n	""21"" [label=""if ii >= rawLength""];\n	""22"" [label=""ii = 0""];\n	""23"" [label=""ii = ii + 1""];\n	""24"" [label=""jj = $stack8 - 1""];\n	""25"" [label=""jj = jj + -8""];\n	""26"" [label=""l_ascii = newarray (char)[$stack7]""];\n	""27"" [label=""l_ascii[$stack15] = 49""];\n	""28"" [label=""l_ascii[$stack16] = 48""];\n	""29"" [label=""raw := @parameter0: byte[]""];\n	""30"" [label=""rawLength = lengthof raw""];\n	""31"" [label=""return $stack17""];\n	""32"" [label=""return l_ascii""];\n	""1"" -> ""20""[label=""cfg_next""];\n	""10"" -> ""26""[label=""cfg_next""];\n	""11"" -> ""24""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""12""[label=""cfg_next""];\n	""14"" -> ""16""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_goto""];\n	""16"" -> ""12""[label=""cfg_goto""];\n	""17"" -> ""21""[label=""cfg_goto""];\n	""18"" -> ""6""[label=""cfg_true""];\n	""18"" -> ""7""[label=""cfg_false""];\n	""19"" -> ""30""[label=""cfg_true""];\n	""19"" -> ""8""[label=""cfg_false""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""20"" -> ""23""[label=""cfg_true""];\n	""20"" -> ""3""[label=""cfg_false""];\n	""21"" -> ""13""[label=""cfg_false""];\n	""21"" -> ""32""[label=""cfg_true""];\n	""22"" -> ""11""[label=""cfg_next""];\n	""23"" -> ""25""[label=""cfg_next""];\n	""24"" -> ""21""[label=""cfg_next""];\n	""25"" -> ""17""[label=""cfg_next""];\n	""26"" -> ""22""[label=""cfg_next""];\n	""27"" -> ""14""[label=""cfg_next""];\n	""28"" -> ""15""[label=""cfg_next""];\n	""29"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""30"" -> ""10""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""18""[label=""cfg_next""];\n	""6"" -> ""27""[label=""cfg_next""];\n	""7"" -> ""28""[label=""cfg_next""];\n	""8"" -> ""31""[label=""cfg_next""];\n	""9"" -> ""19""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[]),Method,* Converts an array of raw binary data into a String of ASCII 0 and 1 characters.\n     *\n     * @param raw\n     *                  the raw binary data to convert\n     * @return a String of 0 and 1 characters representing the binary data\n     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[]),public static String toAsciiString(final byte[] raw) {\n    return new String(toAsciiChars(raw));\n},java.lang.String toAsciiString(byte[]),"digraph cfg_toAsciiString {\n	""1"" [label=""$stack1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>(raw)""];\n	""2"" [label=""$stack2 = new java.lang.String""];\n	""3"" [label=""raw := @parameter0: byte[]""];\n	""4"" [label=""return $stack2""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack1)""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n}\n","public , static "
org.apache.commons.codec.binary.BinaryCodec.decode(byte[]),Method,* Decodes a byte array where each byte represents an ASCII '0' or '1'.\n     *\n     * @param ascii\n     *                  each byte represents an ASCII '0' or '1'\n     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n     * @see org.apache.commons.codec.Decoder#decode(Object),@Override\npublic byte[] decode(final byte[] ascii) {\n    return fromAscii(ascii);\n},byte[] decode(byte[]),"digraph cfg_decode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>(ascii)""];\n	""2"" [label=""ascii := @parameter0: byte[]""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.decode(Object),Method,"* Decodes a byte array where each byte represents an ASCII '0' or '1'.\n     *\n     * @param ascii\n     *                  each byte represents an ASCII '0' or '1'\n     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n     * @throws DecoderException\n     *                  if argument is not a byte[], char[] or String\n     * @see org.apache.commons.codec.Decoder#decode(Object)","@Override\npublic Object decode(final Object ascii) throws DecoderException {\n    if (ascii == null) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    if (ascii instanceof byte[]) {\n        return fromAscii((byte[]) ascii);\n    }\n    if (ascii instanceof char[]) {\n        return fromAscii((char[]) ascii);\n    }\n    if (ascii instanceof String) {\n        return fromAscii(((String) ascii).toCharArray());\n    }\n    throw new DecoderException(""argument not a byte array"");\n}",java.lang.Object decode(java.lang.Object),"digraph cfg_decode {\n	""1"" [label=""$stack10 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($stack9)""];\n	""2"" [label=""$stack11 = (byte[]) ascii""];\n	""3"" [label=""$stack12 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>($stack11)""];\n	""4"" [label=""$stack13 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>""];\n	""5"" [label=""$stack2 = ascii instanceof byte[]""];\n	""6"" [label=""$stack3 = ascii instanceof char[]""];\n	""7"" [label=""$stack4 = ascii instanceof java.lang.String""];\n	""8"" [label=""$stack5 = new org.apache.commons.codec.DecoderException""];\n	""9"" [label=""$stack6 = (java.lang.String) ascii""];\n	""10"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.String: char[] toCharArray()>()""];\n	""11"" [label=""$stack8 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($stack7)""];\n	""12"" [label=""$stack9 = (char[]) ascii""];\n	""13"" [label=""ascii := @parameter0: java.lang.Object""];\n	""14"" [label=""if $stack2 == 0""];\n	""15"" [label=""if $stack3 == 0""];\n	""16"" [label=""if $stack4 == 0""];\n	""17"" [label=""if ascii != null""];\n	""18"" [label=""return $stack10""];\n	""19"" [label=""return $stack12""];\n	""20"" [label=""return $stack13""];\n	""21"" [label=""return $stack8""];\n	""22"" [label=""specialinvoke $stack5.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(\""argument not a byte array\"")""];\n	""23"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""24"" [label=""throw $stack5""];\n	""1"" -> ""18""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""21""[label=""cfg_next""];\n	""12"" -> ""1""[label=""cfg_next""];\n	""13"" -> ""17""[label=""cfg_next""];\n	""14"" -> ""2""[label=""cfg_false""];\n	""14"" -> ""6""[label=""cfg_true""];\n	""15"" -> ""12""[label=""cfg_false""];\n	""15"" -> ""7""[label=""cfg_true""];\n	""16"" -> ""8""[label=""cfg_true""];\n	""16"" -> ""9""[label=""cfg_false""];\n	""17"" -> ""4""[label=""cfg_false""];\n	""17"" -> ""5""[label=""cfg_true""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""22"" -> ""24""[label=""cfg_next""];\n	""23"" -> ""13""[label=""cfg_next""];\n	""3"" -> ""19""[label=""cfg_next""];\n	""4"" -> ""20""[label=""cfg_next""];\n	""5"" -> ""14""[label=""cfg_next""];\n	""6"" -> ""15""[label=""cfg_next""];\n	""7"" -> ""16""[label=""cfg_next""];\n	""8"" -> ""22""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.encode(byte[]),Method,* Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n     *\n     * @param raw\n     *                  the raw binary data to convert\n     * @return 0 and 1 ASCII character bytes one for each bit of the argument\n     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[]),@Override\npublic byte[] encode(final byte[] raw) {\n    return toAsciiBytes(raw);\n},byte[] encode(byte[]),"digraph cfg_encode {\n	""1"" [label=""$stack2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] toAsciiBytes(byte[])>(raw)""];\n	""2"" [label=""raw := @parameter0: byte[]""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.encode(Object),Method,* Converts an array of raw binary data into an array of ASCII 0 and 1 chars.\n     *\n     * @param raw\n     *                  the raw binary data to convert\n     * @return 0 and 1 ASCII character chars one for each bit of the argument\n     * @throws EncoderException\n     *                  if the argument is not a byte[]\n     * @see org.apache.commons.codec.Encoder#encode(Object),"@Override\npublic Object encode(final Object raw) throws EncoderException {\n    if (!(raw instanceof byte[])) {\n        throw new EncoderException(""argument not a byte array"");\n    }\n    return toAsciiChars((byte[]) raw);\n}",java.lang.Object encode(java.lang.Object),"digraph cfg_encode {\n	""1"" [label=""$stack2 = raw instanceof byte[]""];\n	""2"" [label=""$stack3 = (byte[]) raw""];\n	""3"" [label=""$stack4 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>($stack3)""];\n	""4"" [label=""$stack5 = new org.apache.commons.codec.EncoderException""];\n	""5"" [label=""if $stack2 != 0""];\n	""6"" [label=""raw := @parameter0: java.lang.Object""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""specialinvoke $stack5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(\""argument not a byte array\"")""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""10"" [label=""throw $stack5""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""5"" -> ""4""[label=""cfg_false""];\n	""6"" -> ""1""[label=""cfg_next""];\n	""8"" -> ""10""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.toByteArray(String),Method,* Decodes a String where each char of the String represents an ASCII '0' or '1'.\n     *\n     * @param ascii\n     *                  String of '0' and '1' characters\n     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n     * @see org.apache.commons.codec.Decoder#decode(Object),public byte[] toByteArray(final String ascii) {\n    if (ascii == null) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    return fromAscii(ascii.toCharArray());\n},byte[] toByteArray(java.lang.String),"digraph cfg_toByteArray {\n	""1"" [label=""$stack2 = virtualinvoke ascii.<java.lang.String: char[] toCharArray()>()""];\n	""2"" [label=""$stack3 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($stack2)""];\n	""3"" [label=""$stack4 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>""];\n	""4"" [label=""ascii := @parameter0: java.lang.String""];\n	""5"" [label=""if ascii != null""];\n	""6"" [label=""return $stack3""];\n	""7"" [label=""return $stack4""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""7""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""1""[label=""cfg_true""];\n	""5"" -> ""3""[label=""cfg_false""];\n	""8"" -> ""4""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BinaryCodec.<init>(),Constructor,* Constructs a new instance.,public BinaryCodec() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BinaryCodec""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context)",Method,No Comment,"@Override\nvoid decode(final byte[] data, int offset, final int length, final Context context) {\n    if (context.eof || length < 0) {\n        context.eof = true;\n        if (context.ibitWorkArea != 0) {\n            validateTrailingCharacter();\n        }\n        return;\n    }\n    final int dataLen = Math.min(data.length - offset, length);\n    final int availableChars = (context.ibitWorkArea != 0 ? 1 : 0) + dataLen;\n    // small optimization to short-cut the rest of this method when it is fed byte-by-byte\n    if (availableChars == 1 && availableChars == dataLen) {\n        // store 1/2 byte for next invocation of decode, we offset by +1 as empty-value is 0\n        context.ibitWorkArea = decodeOctet(data[offset]) + 1;\n        return;\n    }\n    // we must have an even number of chars to decode\n    final int charsToProcess = availableChars % BYTES_PER_ENCODED_BLOCK == 0 ? availableChars : availableChars - 1;\n    final int end = offset + dataLen;\n    final byte[] buffer = ensureBufferSize(charsToProcess / BYTES_PER_ENCODED_BLOCK, context);\n    int result;\n    if (dataLen < availableChars) {\n        // we have 1/2 byte from previous invocation to decode\n        result = context.ibitWorkArea - 1 << BITS_PER_ENCODED_BYTE;\n        result |= decodeOctet(data[offset++]);\n        buffer[context.pos++] = (byte) result;\n        // reset to empty-value for next invocation!\n        context.ibitWorkArea = 0;\n    }\n    final int loopEnd = end - 1;\n    while (offset < loopEnd) {\n        result = decodeOctet(data[offset++]) << BITS_PER_ENCODED_BYTE;\n        result |= decodeOctet(data[offset++]);\n        buffer[context.pos++] = (byte) result;\n    }\n    // we have one char of a hex-pair left over\n    if (offset < end) {\n        // store 1/2 byte for next invocation of decode, we offset by +1 as empty-value is 0\n        context.ibitWorkArea = decodeOctet(data[offset]) + 1;\n    }\n}","void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_decode {\n	""1"" [label=""$stack12 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""2"" [label=""$stack13 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""3"" [label=""$stack14 = lengthof data""];\n	""4"" [label=""$stack15 = $stack14 - offset""];\n	""5"" [label=""$stack16 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""6"" [label=""$stack17 = availableChars % 2""];\n	""7"" [label=""$stack18 = charsToProcess / 2""];\n	""8"" [label=""$stack19 = data[offset]""];\n	""9"" [label=""$stack20 = specialinvoke this.<org.apache.commons.codec.binary.Base16: int decodeOctet(byte)>($stack19)""];\n	""10"" [label=""$stack21 = $stack20 + 1""];\n	""11"" [label=""$stack22 = offset""];\n	""12"" [label=""$stack23 = data[$stack22]""];\n	""13"" [label=""$stack24 = specialinvoke this.<org.apache.commons.codec.binary.Base16: int decodeOctet(byte)>($stack23)""];\n	""14"" [label=""$stack25 = offset""];\n	""15"" [label=""$stack26 = data[$stack25]""];\n	""16"" [label=""$stack27 = specialinvoke this.<org.apache.commons.codec.binary.Base16: int decodeOctet(byte)>($stack26)""];\n	""17"" [label=""$stack28 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""18"" [label=""$stack29 = $stack28 + 1""];\n	""19"" [label=""$stack30 = (byte) result""];\n	""20"" [label=""$stack31 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea>""];\n	""21"" [label=""$stack32 = $stack31 - 1""];\n	""22"" [label=""$stack33 = offset""];\n	""23"" [label=""$stack34 = data[$stack33]""];\n	""24"" [label=""$stack35 = specialinvoke this.<org.apache.commons.codec.binary.Base16: int decodeOctet(byte)>($stack34)""];\n	""25"" [label=""$stack36 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""26"" [label=""$stack37 = $stack36 + 1""];\n	""27"" [label=""$stack38 = (byte) result""];\n	""28"" [label=""$stack39 = data[offset]""];\n	""29"" [label=""$stack40 = specialinvoke this.<org.apache.commons.codec.binary.Base16: int decodeOctet(byte)>($stack39)""];\n	""30"" [label=""$stack41 = $stack40 + 1""];\n	""31"" [label=""$stack42 = 0""];\n	""32"" [label=""$stack42 = 1""];\n	""33"" [label=""availableChars = $stack42 + dataLen""];\n	""34"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base16: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack18, context)""];\n	""35"" [label=""buffer[$stack28] = $stack30""];\n	""36"" [label=""buffer[$stack36] = $stack38""];\n	""37"" [label=""charsToProcess = availableChars""];\n	""38"" [label=""charsToProcess = availableChars - 1""];\n	""39"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""40"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""41"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack21""];\n	""42"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $stack41""];\n	""43"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int ibitWorkArea> = 0""];\n	""44"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack29""];\n	""45"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack37""];\n	""46"" [label=""data := @parameter0: byte[]""];\n	""47"" [label=""dataLen = staticinvoke <java.lang.Math: int min(int,int)>($stack15, length)""];\n	""48"" [label=""end = offset + dataLen""];\n	""49"" [label=""goto""];\n	""50"" [label=""goto""];\n	""51"" [label=""goto""];\n	""52"" [label=""if $stack12 != 0""];\n	""53"" [label=""if $stack13 == 0""];\n	""54"" [label=""if $stack16 == 0""];\n	""55"" [label=""if $stack17 != 0""];\n	""56"" [label=""if availableChars != 1""];\n	""57"" [label=""if availableChars != dataLen""];\n	""58"" [label=""if dataLen >= availableChars""];\n	""59"" [label=""if length >= 0""];\n	""60"" [label=""if offset >= end""];\n	""61"" [label=""if offset >= loopEnd""];\n	""62"" [label=""length := @parameter2: int""];\n	""63"" [label=""loopEnd = end - 1""];\n	""64"" [label=""offset := @parameter1: int""];\n	""65"" [label=""offset = offset + 1""];\n	""66"" [label=""offset = offset + 1""];\n	""67"" [label=""offset = offset + 1""];\n	""68"" [label=""result = $stack24 << 4""];\n	""69"" [label=""result = $stack32 << 4""];\n	""70"" [label=""result = result | $stack27""];\n	""71"" [label=""result = result | $stack35""];\n	""72"" [label=""return""];\n	""73"" [label=""return""];\n	""74"" [label=""return""];\n	""75"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16: void validateTrailingCharacter()>()""];\n	""76"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""1"" -> ""52""[label=""cfg_next""];\n	""10"" -> ""41""[label=""cfg_next""];\n	""11"" -> ""66""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""68""[label=""cfg_next""];\n	""14"" -> ""67""[label=""cfg_next""];\n	""15"" -> ""16""[label=""cfg_next""];\n	""16"" -> ""70""[label=""cfg_next""];\n	""17"" -> ""18""[label=""cfg_next""];\n	""18"" -> ""44""[label=""cfg_next""];\n	""19"" -> ""35""[label=""cfg_next""];\n	""2"" -> ""53""[label=""cfg_next""];\n	""20"" -> ""21""[label=""cfg_next""];\n	""21"" -> ""69""[label=""cfg_next""];\n	""22"" -> ""65""[label=""cfg_next""];\n	""23"" -> ""24""[label=""cfg_next""];\n	""24"" -> ""71""[label=""cfg_next""];\n	""25"" -> ""26""[label=""cfg_next""];\n	""26"" -> ""45""[label=""cfg_next""];\n	""27"" -> ""36""[label=""cfg_next""];\n	""28"" -> ""29""[label=""cfg_next""];\n	""29"" -> ""30""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""42""[label=""cfg_next""];\n	""31"" -> ""33""[label=""cfg_next""];\n	""32"" -> ""49""[label=""cfg_next""];\n	""33"" -> ""56""[label=""cfg_next""];\n	""34"" -> ""58""[label=""cfg_next""];\n	""35"" -> ""51""[label=""cfg_next""];\n	""36"" -> ""43""[label=""cfg_next""];\n	""37"" -> ""50""[label=""cfg_next""];\n	""38"" -> ""48""[label=""cfg_next""];\n	""39"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""47""[label=""cfg_next""];\n	""40"" -> ""2""[label=""cfg_next""];\n	""41"" -> ""74""[label=""cfg_next""];\n	""42"" -> ""73""[label=""cfg_next""];\n	""43"" -> ""63""[label=""cfg_next""];\n	""44"" -> ""19""[label=""cfg_next""];\n	""45"" -> ""27""[label=""cfg_next""];\n	""46"" -> ""64""[label=""cfg_next""];\n	""47"" -> ""5""[label=""cfg_next""];\n	""48"" -> ""7""[label=""cfg_next""];\n	""49"" -> ""33""[label=""cfg_goto""];\n	""5"" -> ""54""[label=""cfg_next""];\n	""50"" -> ""48""[label=""cfg_goto""];\n	""51"" -> ""61""[label=""cfg_goto""];\n	""52"" -> ""40""[label=""cfg_true""];\n	""52"" -> ""59""[label=""cfg_false""];\n	""53"" -> ""72""[label=""cfg_true""];\n	""53"" -> ""75""[label=""cfg_false""];\n	""54"" -> ""31""[label=""cfg_true""];\n	""54"" -> ""32""[label=""cfg_false""];\n	""55"" -> ""37""[label=""cfg_false""];\n	""55"" -> ""38""[label=""cfg_true""];\n	""56"" -> ""57""[label=""cfg_false""];\n	""56"" -> ""6""[label=""cfg_true""];\n	""57"" -> ""28""[label=""cfg_false""];\n	""57"" -> ""6""[label=""cfg_true""];\n	""58"" -> ""20""[label=""cfg_false""];\n	""58"" -> ""63""[label=""cfg_true""];\n	""59"" -> ""3""[label=""cfg_true""];\n	""59"" -> ""40""[label=""cfg_false""];\n	""6"" -> ""55""[label=""cfg_next""];\n	""60"" -> ""74""[label=""cfg_true""];\n	""60"" -> ""8""[label=""cfg_false""];\n	""61"" -> ""11""[label=""cfg_false""];\n	""61"" -> ""60""[label=""cfg_true""];\n	""62"" -> ""39""[label=""cfg_next""];\n	""63"" -> ""61""[label=""cfg_next""];\n	""64"" -> ""62""[label=""cfg_next""];\n	""65"" -> ""23""[label=""cfg_next""];\n	""66"" -> ""12""[label=""cfg_next""];\n	""67"" -> ""15""[label=""cfg_next""];\n	""68"" -> ""14""[label=""cfg_next""];\n	""69"" -> ""22""[label=""cfg_next""];\n	""7"" -> ""34""[label=""cfg_next""];\n	""70"" -> ""17""[label=""cfg_next""];\n	""71"" -> ""25""[label=""cfg_next""];\n	""75"" -> ""72""[label=""cfg_next""];\n	""76"" -> ""46""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base16.decodeOctet(byte),Method,No Comment,"private int decodeOctet(final byte octet) {\n    int decoded = -1;\n    if ((octet & 0xff) < decodeTable.length) {\n        decoded = decodeTable[octet];\n    }\n    if (decoded == -1) {\n        throw new IllegalArgumentException(""Invalid octet in encoded value: "" + (int) octet);\n    }\n    return decoded;\n}",int decodeOctet(byte),"digraph cfg_decodeOctet {\n	""1"" [label=""$stack10 = new java.lang.IllegalArgumentException""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.binary.Base16: byte[] decodeTable>""];\n	""3"" [label=""$stack3 = this.<org.apache.commons.codec.binary.Base16: byte[] decodeTable>""];\n	""4"" [label=""$stack4 = lengthof $stack3""];\n	""5"" [label=""$stack5 = octet & 255""];\n	""6"" [label=""$stack6 = new java.lang.StringBuilder""];\n	""7"" [label=""$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Invalid octet in encoded value: \"")""];\n	""8"" [label=""$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(octet)""];\n	""9"" [label=""$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""10"" [label=""decoded = $stack11[octet]""];\n	""11"" [label=""decoded = -1""];\n	""12"" [label=""if $stack5 >= $stack4""];\n	""13"" [label=""if decoded != -1""];\n	""14"" [label=""octet := @parameter0: byte""];\n	""15"" [label=""return decoded""];\n	""16"" [label=""specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)""];\n	""17"" [label=""specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>()""];\n	""18"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""19"" [label=""throw $stack10""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""10"" -> ""13""[label=""cfg_next""];\n	""11"" -> ""5""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_true""];\n	""12"" -> ""2""[label=""cfg_false""];\n	""13"" -> ""1""[label=""cfg_false""];\n	""13"" -> ""15""[label=""cfg_true""];\n	""14"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""19""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""14""[label=""cfg_next""];\n	""2"" -> ""10""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""12""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""16""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context)",Method,No Comment,"@Override\nvoid encode(final byte[] data, final int offset, final int length, final Context context) {\n    if (context.eof) {\n        return;\n    }\n    if (length < 0) {\n        context.eof = true;\n        return;\n    }\n    final int size = length * BYTES_PER_ENCODED_BLOCK;\n    if (size < 0) {\n        throw new IllegalArgumentException(""Input length exceeds maximum size for encoded data: "" + length);\n    }\n    final byte[] buffer = ensureBufferSize(size, context);\n    final int end = offset + length;\n    for (int i = offset; i < end; i++) {\n        final int value = data[i];\n        final int high = value >> BITS_PER_ENCODED_BYTE & MASK_4BITS;\n        final int low = value & MASK_4BITS;\n        buffer[context.pos++] = encodeTable[high];\n        buffer[context.pos++] = encodeTable[low];\n    }\n}","void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)","digraph cfg_encode {\n	""1"" [label=""$stack12 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""2"" [label=""$stack13 = value >> 4""];\n	""3"" [label=""$stack14 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""4"" [label=""$stack15 = $stack14 + 1""];\n	""5"" [label=""$stack16 = this.<org.apache.commons.codec.binary.Base16: byte[] encodeTable>""];\n	""6"" [label=""$stack17 = $stack16[high]""];\n	""7"" [label=""$stack18 = context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>""];\n	""8"" [label=""$stack19 = $stack18 + 1""];\n	""9"" [label=""$stack20 = this.<org.apache.commons.codec.binary.Base16: byte[] encodeTable>""];\n	""10"" [label=""$stack21 = $stack20[low]""];\n	""11"" [label=""$stack22 = new java.lang.StringBuilder""];\n	""12"" [label=""$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Input length exceeds maximum size for encoded data: \"")""];\n	""13"" [label=""$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length)""];\n	""14"" [label=""$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""15"" [label=""$stack26 = new java.lang.IllegalArgumentException""];\n	""16"" [label=""buffer = virtualinvoke this.<org.apache.commons.codec.binary.Base16: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(size, context)""];\n	""17"" [label=""buffer[$stack14] = $stack17""];\n	""18"" [label=""buffer[$stack18] = $stack21""];\n	""19"" [label=""context := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""20"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1""];\n	""21"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack15""];\n	""22"" [label=""context.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $stack19""];\n	""23"" [label=""data := @parameter0: byte[]""];\n	""24"" [label=""end = offset + length""];\n	""25"" [label=""goto""];\n	""26"" [label=""high = $stack13 & 15""];\n	""27"" [label=""i = i + 1""];\n	""28"" [label=""i = offset""];\n	""29"" [label=""if $stack12 == 0""];\n	""30"" [label=""if i >= end""];\n	""31"" [label=""if length >= 0""];\n	""32"" [label=""if size >= 0""];\n	""33"" [label=""length := @parameter2: int""];\n	""34"" [label=""low = value & 15""];\n	""35"" [label=""offset := @parameter1: int""];\n	""36"" [label=""return""];\n	""37"" [label=""return""];\n	""38"" [label=""return""];\n	""39"" [label=""size = length * 2""];\n	""40"" [label=""specialinvoke $stack22.<java.lang.StringBuilder: void <init>()>()""];\n	""41"" [label=""specialinvoke $stack26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack25)""];\n	""42"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""43"" [label=""throw $stack26""];\n	""44"" [label=""value = data[i]""];\n	""1"" -> ""29""[label=""cfg_next""];\n	""10"" -> ""18""[label=""cfg_next""];\n	""11"" -> ""40""[label=""cfg_next""];\n	""12"" -> ""13""[label=""cfg_next""];\n	""13"" -> ""14""[label=""cfg_next""];\n	""14"" -> ""41""[label=""cfg_next""];\n	""15"" -> ""11""[label=""cfg_next""];\n	""16"" -> ""24""[label=""cfg_next""];\n	""17"" -> ""7""[label=""cfg_next""];\n	""18"" -> ""27""[label=""cfg_next""];\n	""19"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""26""[label=""cfg_next""];\n	""20"" -> ""37""[label=""cfg_next""];\n	""21"" -> ""5""[label=""cfg_next""];\n	""22"" -> ""9""[label=""cfg_next""];\n	""23"" -> ""35""[label=""cfg_next""];\n	""24"" -> ""28""[label=""cfg_next""];\n	""25"" -> ""30""[label=""cfg_goto""];\n	""26"" -> ""34""[label=""cfg_next""];\n	""27"" -> ""25""[label=""cfg_next""];\n	""28"" -> ""30""[label=""cfg_next""];\n	""29"" -> ""31""[label=""cfg_true""];\n	""29"" -> ""36""[label=""cfg_false""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""30"" -> ""38""[label=""cfg_true""];\n	""30"" -> ""44""[label=""cfg_false""];\n	""31"" -> ""20""[label=""cfg_false""];\n	""31"" -> ""39""[label=""cfg_true""];\n	""32"" -> ""15""[label=""cfg_false""];\n	""32"" -> ""16""[label=""cfg_true""];\n	""33"" -> ""19""[label=""cfg_next""];\n	""34"" -> ""3""[label=""cfg_next""];\n	""35"" -> ""33""[label=""cfg_next""];\n	""39"" -> ""32""[label=""cfg_next""];\n	""4"" -> ""21""[label=""cfg_next""];\n	""40"" -> ""12""[label=""cfg_next""];\n	""41"" -> ""43""[label=""cfg_next""];\n	""42"" -> ""23""[label=""cfg_next""];\n	""44"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""17""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""22""[label=""cfg_next""];\n	""9"" -> ""10""[label=""cfg_next""];\n}\n",default
org.apache.commons.codec.binary.Base16.isInAlphabet(byte),Method,* Returns whether or not the {@code octet} is in the Base16 alphabet.\n     *\n     * @param octet The value to test.\n     * @return {@code true} if the value is defined in the Base16 alphabet {@code false} otherwise.,@Override\npublic boolean isInAlphabet(final byte octet) {\n    return (octet & 0xff) < decodeTable.length && decodeTable[octet] != -1;\n},boolean isInAlphabet(byte),"digraph cfg_isInAlphabet {\n	""1"" [label=""$stack2 = this.<org.apache.commons.codec.binary.Base16: byte[] decodeTable>""];\n	""2"" [label=""$stack3 = lengthof $stack2""];\n	""3"" [label=""$stack4 = octet & 255""];\n	""4"" [label=""$stack5 = this.<org.apache.commons.codec.binary.Base16: byte[] decodeTable>""];\n	""5"" [label=""$stack6 = $stack5[octet]""];\n	""6"" [label=""$stack7 = 0""];\n	""7"" [label=""$stack7 = 1""];\n	""8"" [label=""goto""];\n	""9"" [label=""if $stack4 >= $stack3""];\n	""10"" [label=""if $stack6 == -1""];\n	""11"" [label=""octet := @parameter0: byte""];\n	""12"" [label=""return $stack7""];\n	""13"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_true""];\n	""10"" -> ""7""[label=""cfg_false""];\n	""11"" -> ""3""[label=""cfg_next""];\n	""13"" -> ""11""[label=""cfg_next""];\n	""2"" -> ""9""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""10""[label=""cfg_next""];\n	""6"" -> ""12""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""12""[label=""cfg_goto""];\n	""9"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""6""[label=""cfg_true""];\n}\n",public 
org.apache.commons.codec.binary.Base16.validateTrailingCharacter(),Method,* Validates whether decoding allows an entire final trailing character that cannot be used for a complete byte.\n     *\n     * @throws IllegalArgumentException if strict decoding is enabled,"private void validateTrailingCharacter() {\n    if (isStrictDecoding()) {\n        throw new IllegalArgumentException(""Strict decoding: Last encoded character is a valid base 16 alphabet character but not a possible encoding. "" + ""Decoding requires at least two characters to create one byte."");\n    }\n}",void validateTrailingCharacter(),"digraph cfg_validateTrailingCharacter {\n	""1"" [label=""$stack1 = virtualinvoke this.<org.apache.commons.codec.binary.Base16: boolean isStrictDecoding()>()""];\n	""2"" [label=""$stack2 = new java.lang.IllegalArgumentException""];\n	""3"" [label=""if $stack1 == 0""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\""Strict decoding: Last encoded character is a valid base 16 alphabet character but not a possible encoding. Decoding requires at least two characters to create one byte.\"")""];\n	""6"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""7"" [label=""throw $stack2""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""2"" -> ""5""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_false""];\n	""3"" -> ""4""[label=""cfg_true""];\n	""5"" -> ""7""[label=""cfg_next""];\n	""6"" -> ""1""[label=""cfg_next""];\n}\n",private 
org.apache.commons.codec.binary.Base16.<init>(),Constructor,* Constructs a Base16 codec used for decoding and encoding.,public Base16() {\n    this(false);\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16: void <init>(boolean)>(0)""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base16.<init>(boolean),Constructor,* Constructs a Base16 codec used for decoding and encoding.\n     *\n     * @param lowerCase if {@code true} then use a lower-case Base16 alphabet.,"public Base16(final boolean lowerCase) {\n    this(lowerCase, DECODING_POLICY_DEFAULT);\n}",void <init>(boolean),"digraph cfg_init {\n	""1"" [label=""$stack2 = <org.apache.commons.codec.binary.Base16: org.apache.commons.codec.CodecPolicy DECODING_POLICY_DEFAULT>""];\n	""2"" [label=""lowerCase := @parameter0: boolean""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16: void <init>(boolean,org.apache.commons.codec.CodecPolicy)>(lowerCase, $stack2)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16.<init>(boolean,byte[],CodecPolicy)",Constructor,* Constructs a Base16 codec used for decoding and encoding.\n     *\n     * @param lowerCase      if {@code true} then use a lower-case Base16 alphabet.\n     * @param encodeTable    the encode table.\n     * @param decodingPolicy Decoding policy.,"private Base16(final boolean lowerCase, final byte[] encodeTable, final CodecPolicy decodingPolicy) {\n    super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, 0, 0, PAD_DEFAULT, decodingPolicy);\n    Objects.requireNonNull(encodeTable, ""encodeTable"");\n    this.encodeTable = encodeTable;\n    this.decodeTable = encodeTable == LOWER_CASE_ENCODE_TABLE ? LOWER_CASE_DECODE_TABLE : UPPER_CASE_DECODE_TABLE;\n}","void <init>(boolean,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.binary.Base16: byte[] LOWER_CASE_ENCODE_TABLE>""];\n	""2"" [label=""$stack5 = <org.apache.commons.codec.binary.Base16: byte[] LOWER_CASE_DECODE_TABLE>""];\n	""3"" [label=""$stack5 = <org.apache.commons.codec.binary.Base16: byte[] UPPER_CASE_DECODE_TABLE>""];\n	""4"" [label=""decodingPolicy := @parameter2: org.apache.commons.codec.CodecPolicy""];\n	""5"" [label=""encodeTable := @parameter1: byte[]""];\n	""6"" [label=""goto""];\n	""7"" [label=""if encodeTable != $stack4""];\n	""8"" [label=""lowerCase := @parameter0: boolean""];\n	""9"" [label=""return""];\n	""10"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte,org.apache.commons.codec.CodecPolicy)>(1, 2, 0, 0, 61, decodingPolicy)""];\n	""11"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(encodeTable, \""encodeTable\"")""];\n	""12"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""13"" [label=""this.<org.apache.commons.codec.binary.Base16: byte[] decodeTable> = $stack5""];\n	""14"" [label=""this.<org.apache.commons.codec.binary.Base16: byte[] encodeTable> = encodeTable""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_next""];\n	""11"" -> ""14""[label=""cfg_next""];\n	""12"" -> ""8""[label=""cfg_next""];\n	""13"" -> ""9""[label=""cfg_next""];\n	""14"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""13""[label=""cfg_next""];\n	""4"" -> ""10""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""6"" -> ""13""[label=""cfg_goto""];\n	""7"" -> ""2""[label=""cfg_false""];\n	""7"" -> ""3""[label=""cfg_true""];\n	""8"" -> ""5""[label=""cfg_next""];\n}\n",private 
"org.apache.commons.codec.binary.Base16.<init>(boolean,CodecPolicy)",Constructor,* Constructs a Base16 codec used for decoding and encoding.\n     *\n     * @param lowerCase      if {@code true} then use a lower-case Base16 alphabet.\n     * @param decodingPolicy Decoding policy.,"public Base16(final boolean lowerCase, final CodecPolicy decodingPolicy) {\n    this(lowerCase, lowerCase ? LOWER_CASE_ENCODE_TABLE : UPPER_CASE_ENCODE_TABLE, decodingPolicy);\n}","void <init>(boolean,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack3 = <org.apache.commons.codec.binary.Base16: byte[] LOWER_CASE_ENCODE_TABLE>""];\n	""2"" [label=""$stack3 = <org.apache.commons.codec.binary.Base16: byte[] UPPER_CASE_ENCODE_TABLE>""];\n	""3"" [label=""decodingPolicy := @parameter1: org.apache.commons.codec.CodecPolicy""];\n	""4"" [label=""goto""];\n	""5"" [label=""if lowerCase == 0""];\n	""6"" [label=""lowerCase := @parameter0: boolean""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16: void <init>(boolean,byte[],org.apache.commons.codec.CodecPolicy)>(lowerCase, $stack3, decodingPolicy)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base16""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""8""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_goto""];\n	""5"" -> ""1""[label=""cfg_false""];\n	""5"" -> ""2""[label=""cfg_true""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""6""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int)",Method,* Green implementation of regionMatches.\n     *\n     * <p>\n     * Note: This function differs from the current implementation in Apache Commons Lang\n     * where the input indices are not valid. It is only used within this package.\n     * </p>\n     *\n     * @param cs\n     *            the {@code CharSequence} to be processed\n     * @param ignoreCase\n     *            whether or not to be case-insensitive\n     * @param thisStart\n     *            the index to start on the {@code cs} CharSequence\n     * @param substring\n     *            the {@code CharSequence} to be looked for\n     * @param start\n     *            the index to start on the {@code substring} CharSequence\n     * @param length\n     *            character length of the region\n     * @return whether the region matched,"static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n    if (cs instanceof String && substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    }\n    int index1 = thisStart;\n    int index2 = start;\n    int tmpLen = length;\n    while (tmpLen-- > 0) {\n        final char c1 = cs.charAt(index1++);\n        final char c2 = substring.charAt(index2++);\n        if (c1 == c2) {\n            continue;\n        }\n        if (!ignoreCase) {\n            return false;\n        }\n        // The same check as in String.regionMatches():\n        if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n            return false;\n        }\n    }\n    return true;\n}","boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)","digraph cfg_regionMatches {\n	""1"" [label=""$stack11 = cs instanceof java.lang.String""];\n	""2"" [label=""$stack12 = tmpLen""];\n	""3"" [label=""$stack13 = index1""];\n	""4"" [label=""$stack14 = index2""];\n	""5"" [label=""$stack15 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2)""];\n	""6"" [label=""$stack16 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1)""];\n	""7"" [label=""$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c2)""];\n	""8"" [label=""$stack18 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c1)""];\n	""9"" [label=""$stack19 = substring instanceof java.lang.String""];\n	""10"" [label=""$stack20 = (java.lang.String) substring""];\n	""11"" [label=""$stack21 = (java.lang.String) cs""];\n	""12"" [label=""$stack22 = virtualinvoke $stack21.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(ignoreCase, thisStart, $stack20, start, length)""];\n	""13"" [label=""c1 = interfaceinvoke cs.<java.lang.CharSequence: char charAt(int)>($stack13)""];\n	""14"" [label=""c2 = interfaceinvoke substring.<java.lang.CharSequence: char charAt(int)>($stack14)""];\n	""15"" [label=""cs := @parameter0: java.lang.CharSequence""];\n	""16"" [label=""goto""];\n	""17"" [label=""goto""];\n	""18"" [label=""if $stack11 == 0""];\n	""19"" [label=""if $stack12 <= 0""];\n	""20"" [label=""if $stack16 == $stack15""];\n	""21"" [label=""if $stack18 == $stack17""];\n	""22"" [label=""if $stack19 == 0""];\n	""23"" [label=""if c1 != c2""];\n	""24"" [label=""if ignoreCase != 0""];\n	""25"" [label=""ignoreCase := @parameter1: boolean""];\n	""26"" [label=""index1 = index1 + 1""];\n	""27"" [label=""index1 = thisStart""];\n	""28"" [label=""index2 = index2 + 1""];\n	""29"" [label=""index2 = start""];\n	""30"" [label=""length := @parameter5: int""];\n	""31"" [label=""return $stack22""];\n	""32"" [label=""return 0""];\n	""33"" [label=""return 0""];\n	""34"" [label=""return 1""];\n	""35"" [label=""start := @parameter4: int""];\n	""36"" [label=""substring := @parameter3: java.lang.CharSequence""];\n	""37"" [label=""thisStart := @parameter2: int""];\n	""38"" [label=""tmpLen = length""];\n	""39"" [label=""tmpLen = tmpLen + -1""];\n	""1"" -> ""18""[label=""cfg_next""];\n	""10"" -> ""12""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""31""[label=""cfg_next""];\n	""13"" -> ""4""[label=""cfg_next""];\n	""14"" -> ""23""[label=""cfg_next""];\n	""15"" -> ""25""[label=""cfg_next""];\n	""16"" -> ""2""[label=""cfg_goto""];\n	""17"" -> ""2""[label=""cfg_goto""];\n	""18"" -> ""27""[label=""cfg_true""];\n	""18"" -> ""9""[label=""cfg_false""];\n	""19"" -> ""3""[label=""cfg_false""];\n	""19"" -> ""34""[label=""cfg_true""];\n	""2"" -> ""39""[label=""cfg_next""];\n	""20"" -> ""17""[label=""cfg_true""];\n	""20"" -> ""8""[label=""cfg_false""];\n	""21"" -> ""17""[label=""cfg_true""];\n	""21"" -> ""33""[label=""cfg_false""];\n	""22"" -> ""11""[label=""cfg_false""];\n	""22"" -> ""27""[label=""cfg_true""];\n	""23"" -> ""16""[label=""cfg_false""];\n	""23"" -> ""24""[label=""cfg_true""];\n	""24"" -> ""32""[label=""cfg_false""];\n	""24"" -> ""6""[label=""cfg_true""];\n	""25"" -> ""37""[label=""cfg_next""];\n	""26"" -> ""13""[label=""cfg_next""];\n	""27"" -> ""29""[label=""cfg_next""];\n	""28"" -> ""14""[label=""cfg_next""];\n	""29"" -> ""38""[label=""cfg_next""];\n	""3"" -> ""26""[label=""cfg_next""];\n	""30"" -> ""1""[label=""cfg_next""];\n	""35"" -> ""30""[label=""cfg_next""];\n	""36"" -> ""35""[label=""cfg_next""];\n	""37"" -> ""36""[label=""cfg_next""];\n	""38"" -> ""2""[label=""cfg_next""];\n	""39"" -> ""19""[label=""cfg_next""];\n	""4"" -> ""28""[label=""cfg_next""];\n	""5"" -> ""20""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""21""[label=""cfg_next""];\n	""8"" -> ""7""[label=""cfg_next""];\n	""9"" -> ""22""[label=""cfg_next""];\n}\n",static 
org.apache.commons.codec.binary.CharSequenceUtils.<init>(),Constructor,* Consider private.\n     *\n     * @deprecated Will be private in the next major version.,@Deprecated\npublic CharSequenceUtils() {\n    // empty\n},void <init>(),"digraph cfg_init {\n	""1"" [label=""return""];\n	""2"" [label=""specialinvoke this.<java.lang.Object: void <init>()>()""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.CharSequenceUtils""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecInputStream.available(),Method,"* {@inheritDoc}\n     *\n     * @return {@code 0} if the {@link InputStream} has reached {@code EOF},\n     * {@code 1} otherwise\n     * @since 1.7","@Override\npublic int available() throws IOException {\n    // Note: The logic is similar to the InflaterInputStream:\n    //       as long as we have not reached EOF, indicate that there is more\n    //       data available. As we do not know for sure how much data is left,\n    //       just return 1 as a safe guess.\n    return context.eof ? 0 : 1;\n}",int available(),"digraph cfg_available {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""2"" [label=""$stack2 = $stack1.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>""];\n	""3"" [label=""$stack3 = 0""];\n	""4"" [label=""$stack3 = 1""];\n	""5"" [label=""goto""];\n	""6"" [label=""if $stack2 == 0""];\n	""7"" [label=""return $stack3""];\n	""8"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""5""[label=""cfg_next""];\n	""4"" -> ""7""[label=""cfg_next""];\n	""5"" -> ""7""[label=""cfg_goto""];\n	""6"" -> ""3""[label=""cfg_false""];\n	""6"" -> ""4""[label=""cfg_true""];\n	""8"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecInputStream.isStrictDecoding(),Method,* Returns true if decoding behavior is strict. Decoding will raise an\n     * {@link IllegalArgumentException} if trailing bits are not part of a valid encoding.\n     *\n     * <p>\n     * The default is false for lenient encoding. Decoding will compose trailing bits\n     * into 8-bit bytes and discard the remainder.\n     * </p>\n     *\n     * @return true if using strict decoding\n     * @since 1.15,public boolean isStrictDecoding() {\n    return baseNCodec.isStrictDecoding();\n},boolean isStrictDecoding(),"digraph cfg_isStrictDecoding {\n	""1"" [label=""$stack1 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""2"" [label=""$stack2 = virtualinvoke $stack1.<org.apache.commons.codec.binary.BaseNCodec: boolean isStrictDecoding()>()""];\n	""3"" [label=""return $stack2""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int),Method,* Marks the current position in this input stream.\n     * <p>\n     * The {@link #mark} method of {@link BaseNCodecInputStream} does nothing.\n     * </p>\n     *\n     * @param readLimit the maximum limit of bytes that can be read before the mark position becomes invalid.\n     * @see #markSupported()\n     * @since 1.7,@Override\npublic synchronized void mark(final int readLimit) {\n    // noop\n},void mark(int),"digraph cfg_mark {\n	""1"" [label=""readLimit := @parameter0: int""];\n	""2"" [label=""return""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , synchronized "
org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported(),Method,* {@inheritDoc}\n     *\n     * @return Always returns {@code false},@Override\npublic boolean markSupported() {\n    // not an easy job to support marks\n    return false;\n},boolean markSupported(),"digraph cfg_markSupported {\n	""1"" [label=""return 0""];\n	""2"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""2"" -> ""1""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecInputStream.read(),Method,* Reads one {@code byte} from this input stream.\n     *\n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.,"@Override\npublic int read() throws IOException {\n    int r = read(singleByte, 0, 1);\n    while (r == 0) {\n        r = read(singleByte, 0, 1);\n    }\n    if (r > 0) {\n        final byte b = singleByte[0];\n        return b < 0 ? 256 + b : b;\n    }\n    return EOF;\n}",int read(),"digraph cfg_read {\n	""1"" [label=""$stack3 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>""];\n	""2"" [label=""$stack4 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>""];\n	""3"" [label=""$stack5 = 256 + b""];\n	""4"" [label=""$stack5 = b""];\n	""5"" [label=""$stack6 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>""];\n	""6"" [label=""b = $stack4[0]""];\n	""7"" [label=""goto""];\n	""8"" [label=""goto""];\n	""9"" [label=""if b >= 0""];\n	""10"" [label=""if r != 0""];\n	""11"" [label=""if r <= 0""];\n	""12"" [label=""r = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($stack3, 0, 1)""];\n	""13"" [label=""r = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($stack6, 0, 1)""];\n	""14"" [label=""return $stack5""];\n	""15"" [label=""return -1""];\n	""16"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""1"" -> ""12""[label=""cfg_next""];\n	""10"" -> ""11""[label=""cfg_true""];\n	""10"" -> ""5""[label=""cfg_false""];\n	""11"" -> ""15""[label=""cfg_true""];\n	""11"" -> ""2""[label=""cfg_false""];\n	""12"" -> ""10""[label=""cfg_next""];\n	""13"" -> ""7""[label=""cfg_next""];\n	""16"" -> ""1""[label=""cfg_next""];\n	""2"" -> ""6""[label=""cfg_next""];\n	""3"" -> ""8""[label=""cfg_next""];\n	""4"" -> ""14""[label=""cfg_next""];\n	""5"" -> ""13""[label=""cfg_next""];\n	""6"" -> ""9""[label=""cfg_next""];\n	""7"" -> ""10""[label=""cfg_goto""];\n	""8"" -> ""14""[label=""cfg_goto""];\n	""9"" -> ""3""[label=""cfg_false""];\n	""9"" -> ""4""[label=""cfg_true""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)",Method,"* Attempts to read {@code len} bytes into the specified {@code b} array starting at {@code offset}\n     * from this InputStream.\n     *\n     * @param array\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     *\n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid","@Override\npublic int read(final byte[] array, final int offset, final int len) throws IOException {\n    Objects.requireNonNull(array, ""array"");\n    if (offset < 0 || len < 0 || offset > array.length || offset + len > array.length) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (len == 0) {\n        return 0;\n    }\n    int readLen = 0;\n    /*\n         Rationale for while-loop on (readLen == 0):\n         -----\n         Base32.readResults() usually returns > 0 or EOF (-1).  In the\n         rare case where it returns 0, we just keep trying.\n\n         This is essentially an undocumented contract for InputStream\n         implementors that want their code to work properly with\n         java.io.InputStreamReader, since the latter hates it when\n         InputStream.read(byte[]) returns a zero.  Unfortunately our\n         readResults() call must return 0 if a large amount of the data\n         being decoded was non-base32, so this while-loop enables proper\n         interop with InputStreamReader for that scenario.\n         -----\n         This is a fix for CODEC-101\n        */\n    // Attempt to read the request length\n    while (readLen < len) {\n        if (!baseNCodec.hasData(context)) {\n            // Obtain more data.\n            // buf is reused across calls to read to avoid repeated allocations\n            final int c = in.read(buf);\n            if (doEncode) {\n                baseNCodec.encode(buf, 0, c, context);\n            } else {\n                baseNCodec.decode(buf, 0, c, context);\n            }\n        }\n        final int read = baseNCodec.readResults(array, offset + readLen, len - readLen, context);\n        if (read < 0) {\n            // Return the amount read or EOF\n            return readLen != 0 ? readLen : -1;\n        }\n        readLen += read;\n    }\n    return readLen;\n}","int read(byte[],int,int)","digraph cfg_read {\n	""1"" [label=""$stack10 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""2"" [label=""$stack11 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""3"" [label=""$stack12 = virtualinvoke $stack11.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>($stack10)""];\n	""4"" [label=""$stack13 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""5"" [label=""$stack14 = len - readLen""];\n	""6"" [label=""$stack15 = offset + readLen""];\n	""7"" [label=""$stack16 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""8"" [label=""$stack17 = -1""];\n	""9"" [label=""$stack17 = readLen""];\n	""10"" [label=""$stack18 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] buf>""];\n	""11"" [label=""$stack19 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: java.io.InputStream in>""];\n	""12"" [label=""$stack20 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>""];\n	""13"" [label=""$stack21 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""14"" [label=""$stack22 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] buf>""];\n	""15"" [label=""$stack23 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""16"" [label=""$stack24 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>""];\n	""17"" [label=""$stack25 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] buf>""];\n	""18"" [label=""$stack26 = this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>""];\n	""19"" [label=""$stack6 = new java.lang.IndexOutOfBoundsException""];\n	""20"" [label=""$stack7 = lengthof array""];\n	""21"" [label=""$stack8 = lengthof array""];\n	""22"" [label=""$stack9 = offset + len""];\n	""23"" [label=""array := @parameter0: byte[]""];\n	""24"" [label=""c = virtualinvoke $stack16.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(array, $stack15, $stack14, $stack13)""];\n	""25"" [label=""c = virtualinvoke $stack19.<java.io.InputStream: int read(byte[])>($stack18)""];\n	""26"" [label=""goto""];\n	""27"" [label=""goto""];\n	""28"" [label=""goto""];\n	""29"" [label=""if $stack12 != 0""];\n	""30"" [label=""if $stack20 == 0""];\n	""31"" [label=""if $stack9 <= $stack8""];\n	""32"" [label=""if c >= 0""];\n	""33"" [label=""if len != 0""];\n	""34"" [label=""if len < 0""];\n	""35"" [label=""if offset < 0""];\n	""36"" [label=""if offset > $stack7""];\n	""37"" [label=""if readLen == 0""];\n	""38"" [label=""if readLen >= len""];\n	""39"" [label=""len := @parameter2: int""];\n	""40"" [label=""offset := @parameter1: int""];\n	""41"" [label=""readLen = 0""];\n	""42"" [label=""readLen = readLen + c""];\n	""43"" [label=""return $stack17""];\n	""44"" [label=""return 0""];\n	""45"" [label=""return readLen""];\n	""46"" [label=""specialinvoke $stack6.<java.lang.IndexOutOfBoundsException: void <init>()>()""];\n	""47"" [label=""staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(array, \""array\"")""];\n	""48"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""49"" [label=""throw $stack6""];\n	""50"" [label=""virtualinvoke $stack23.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack22, 0, c, $stack21)""];\n	""51"" [label=""virtualinvoke $stack26.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($stack25, 0, c, $stack24)""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""10"" -> ""25""[label=""cfg_next""];\n	""11"" -> ""10""[label=""cfg_next""];\n	""12"" -> ""30""[label=""cfg_next""];\n	""13"" -> ""50""[label=""cfg_next""];\n	""14"" -> ""13""[label=""cfg_next""];\n	""15"" -> ""14""[label=""cfg_next""];\n	""16"" -> ""51""[label=""cfg_next""];\n	""17"" -> ""16""[label=""cfg_next""];\n	""18"" -> ""17""[label=""cfg_next""];\n	""19"" -> ""46""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""20"" -> ""36""[label=""cfg_next""];\n	""21"" -> ""31""[label=""cfg_next""];\n	""22"" -> ""21""[label=""cfg_next""];\n	""23"" -> ""40""[label=""cfg_next""];\n	""24"" -> ""32""[label=""cfg_next""];\n	""25"" -> ""12""[label=""cfg_next""];\n	""26"" -> ""7""[label=""cfg_goto""];\n	""27"" -> ""43""[label=""cfg_goto""];\n	""28"" -> ""38""[label=""cfg_goto""];\n	""29"" -> ""11""[label=""cfg_false""];\n	""29"" -> ""7""[label=""cfg_true""];\n	""3"" -> ""29""[label=""cfg_next""];\n	""30"" -> ""15""[label=""cfg_true""];\n	""30"" -> ""18""[label=""cfg_false""];\n	""31"" -> ""19""[label=""cfg_false""];\n	""31"" -> ""33""[label=""cfg_true""];\n	""32"" -> ""37""[label=""cfg_false""];\n	""32"" -> ""42""[label=""cfg_true""];\n	""33"" -> ""41""[label=""cfg_true""];\n	""33"" -> ""44""[label=""cfg_false""];\n	""34"" -> ""19""[label=""cfg_true""];\n	""34"" -> ""20""[label=""cfg_false""];\n	""35"" -> ""19""[label=""cfg_true""];\n	""35"" -> ""34""[label=""cfg_false""];\n	""36"" -> ""19""[label=""cfg_true""];\n	""36"" -> ""22""[label=""cfg_false""];\n	""37"" -> ""8""[label=""cfg_true""];\n	""37"" -> ""9""[label=""cfg_false""];\n	""38"" -> ""2""[label=""cfg_false""];\n	""38"" -> ""45""[label=""cfg_true""];\n	""39"" -> ""47""[label=""cfg_next""];\n	""4"" -> ""24""[label=""cfg_next""];\n	""40"" -> ""39""[label=""cfg_next""];\n	""41"" -> ""38""[label=""cfg_next""];\n	""42"" -> ""28""[label=""cfg_next""];\n	""46"" -> ""49""[label=""cfg_next""];\n	""47"" -> ""35""[label=""cfg_next""];\n	""48"" -> ""23""[label=""cfg_next""];\n	""5"" -> ""4""[label=""cfg_next""];\n	""50"" -> ""7""[label=""cfg_next""];\n	""51"" -> ""26""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""6""[label=""cfg_next""];\n	""8"" -> ""43""[label=""cfg_next""];\n	""9"" -> ""27""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.BaseNCodecInputStream.reset(),Method,* Repositions this stream to the position at the time the mark method was last called on this input stream.\n     * <p>\n     * The {@link #reset} method of {@link BaseNCodecInputStream} does nothing except throw an {@link IOException}.\n     * </p>\n     *\n     * @throws IOException if this method is invoked\n     * @since 1.7,"@Override\npublic synchronized void reset() throws IOException {\n    throw new IOException(""mark/reset not supported"");\n}",void reset(),"digraph cfg_reset {\n	""1"" [label=""$stack1 = new java.io.IOException""];\n	""2"" [label=""specialinvoke $stack1.<java.io.IOException: void <init>(java.lang.String)>(\""mark/reset not supported\"")""];\n	""3"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""4"" [label=""throw $stack1""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""2"" -> ""4""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n}\n","public , synchronized "
org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long),Method,* {@inheritDoc}\n     *\n     * @throws IllegalArgumentException if the provided skip length is negative\n     * @since 1.7,"@Override\npublic long skip(final long n) throws IOException {\n    if (n < 0) {\n        throw new IllegalArgumentException(""Negative skip length: "" + n);\n    }\n    // skip in chunks of 512 bytes\n    final byte[] b = new byte[512];\n    long todo = n;\n    while (todo > 0) {\n        int len = (int) Math.min(b.length, todo);\n        len = this.read(b, 0, len);\n        if (len == EOF) {\n            break;\n        }\n        todo -= len;\n    }\n    return n - todo;\n}",long skip(long),"digraph cfg_skip {\n	""1"" [label=""$stack10 = lengthof b""];\n	""2"" [label=""$stack11 = (long) $stack10""];\n	""3"" [label=""$stack12 = staticinvoke <java.lang.Math: long min(long,long)>($stack11, todo)""];\n	""4"" [label=""$stack13 = (long) len""];\n	""5"" [label=""$stack14 = new java.lang.StringBuilder""];\n	""6"" [label=""$stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\""Negative skip length: \"")""];\n	""7"" [label=""$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(n)""];\n	""8"" [label=""$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>()""];\n	""9"" [label=""$stack18 = new java.lang.IllegalArgumentException""];\n	""10"" [label=""$stack7 = n cmp 0L""];\n	""11"" [label=""$stack8 = todo cmp 0L""];\n	""12"" [label=""$stack9 = n - todo""];\n	""13"" [label=""b = newarray (byte)[512]""];\n	""14"" [label=""goto""];\n	""15"" [label=""goto""];\n	""16"" [label=""if $stack7 >= 0""];\n	""17"" [label=""if $stack8 <= 0""];\n	""18"" [label=""if len != -1""];\n	""19"" [label=""len = (int) $stack12""];\n	""20"" [label=""len = virtualinvoke this.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>(b, 0, len)""];\n	""21"" [label=""n := @parameter0: long""];\n	""22"" [label=""return $stack9""];\n	""23"" [label=""specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>()""];\n	""24"" [label=""specialinvoke $stack18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack17)""];\n	""25"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""26"" [label=""throw $stack18""];\n	""27"" [label=""todo = n""];\n	""28"" [label=""todo = todo - $stack13""];\n	""1"" -> ""2""[label=""cfg_next""];\n	""10"" -> ""16""[label=""cfg_next""];\n	""11"" -> ""17""[label=""cfg_next""];\n	""12"" -> ""22""[label=""cfg_next""];\n	""13"" -> ""27""[label=""cfg_next""];\n	""14"" -> ""12""[label=""cfg_goto""];\n	""15"" -> ""11""[label=""cfg_goto""];\n	""16"" -> ""13""[label=""cfg_true""];\n	""16"" -> ""9""[label=""cfg_false""];\n	""17"" -> ""1""[label=""cfg_false""];\n	""17"" -> ""12""[label=""cfg_true""];\n	""18"" -> ""14""[label=""cfg_false""];\n	""18"" -> ""4""[label=""cfg_true""];\n	""19"" -> ""20""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""20"" -> ""18""[label=""cfg_next""];\n	""21"" -> ""10""[label=""cfg_next""];\n	""23"" -> ""6""[label=""cfg_next""];\n	""24"" -> ""26""[label=""cfg_next""];\n	""25"" -> ""21""[label=""cfg_next""];\n	""27"" -> ""11""[label=""cfg_next""];\n	""28"" -> ""15""[label=""cfg_next""];\n	""3"" -> ""19""[label=""cfg_next""];\n	""4"" -> ""28""[label=""cfg_next""];\n	""5"" -> ""23""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""24""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.BaseNCodecInputStream.<init>(InputStream,BaseNCodec,boolean)",Constructor,"* Constructs a new instance.\n     *\n     * @param inputStream the input stream\n     * @param baseNCodec the codec\n     * @param doEncode set to true to perform encoding, else decoding","protected BaseNCodecInputStream(final InputStream inputStream, final BaseNCodec baseNCodec, final boolean doEncode) {\n    super(inputStream);\n    this.doEncode = doEncode;\n    this.baseNCodec = baseNCodec;\n    this.buf = new byte[doEncode ? 4096 : 8192];\n}","void <init>(java.io.InputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)","digraph cfg_init {\n	""1"" [label=""$stack4 = newarray (byte)[1]""];\n	""2"" [label=""$stack5 = new org.apache.commons.codec.binary.BaseNCodec$Context""];\n	""3"" [label=""$stack6 = newarray (byte)[$stack7]""];\n	""4"" [label=""$stack7 = 4096""];\n	""5"" [label=""$stack7 = 8192""];\n	""6"" [label=""baseNCodec := @parameter1: org.apache.commons.codec.binary.BaseNCodec""];\n	""7"" [label=""doEncode := @parameter2: boolean""];\n	""8"" [label=""goto""];\n	""9"" [label=""if doEncode == 0""];\n	""10"" [label=""inputStream := @parameter0: java.io.InputStream""];\n	""11"" [label=""return""];\n	""12"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>()""];\n	""13"" [label=""specialinvoke this.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(inputStream)""];\n	""14"" [label=""this := @this: org.apache.commons.codec.binary.BaseNCodecInputStream""];\n	""15"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode> = doEncode""];\n	""16"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] buf> = $stack6""];\n	""17"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte> = $stack4""];\n	""18"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = baseNCodec""];\n	""19"" [label=""this.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context> = $stack5""];\n	""1"" -> ""17""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""12"" -> ""19""[label=""cfg_next""];\n	""13"" -> ""1""[label=""cfg_next""];\n	""14"" -> ""10""[label=""cfg_next""];\n	""15"" -> ""18""[label=""cfg_next""];\n	""16"" -> ""11""[label=""cfg_next""];\n	""17"" -> ""2""[label=""cfg_next""];\n	""18"" -> ""9""[label=""cfg_next""];\n	""19"" -> ""15""[label=""cfg_next""];\n	""2"" -> ""12""[label=""cfg_next""];\n	""3"" -> ""16""[label=""cfg_next""];\n	""4"" -> ""8""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""6"" -> ""7""[label=""cfg_next""];\n	""7"" -> ""13""[label=""cfg_next""];\n	""8"" -> ""3""[label=""cfg_goto""];\n	""9"" -> ""4""[label=""cfg_false""];\n	""9"" -> ""5""[label=""cfg_true""];\n}\n",protected 
org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream),Constructor,* Constructs a Base32OutputStream such that all data written is Base32-encoded to the original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.,"public Base32OutputStream(final OutputStream outputStream) {\n    this(outputStream, true);\n}",void <init>(java.io.OutputStream),"digraph cfg_init {\n	""1"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base32OutputStream: void <init>(java.io.OutputStream,boolean)>(outputStream, 1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base32OutputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean)",Constructor,"* Constructs a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.","public Base32OutputStream(final OutputStream outputStream, final boolean doEncode) {\n    super(outputStream, new Base32(false), doEncode);\n}","void <init>(java.io.OutputStream,boolean)","digraph cfg_init {\n	""1"" [label=""$stack3 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""4"" [label=""return""];\n	""5"" [label=""specialinvoke $stack3.<org.apache.commons.codec.binary.Base32: void <init>(boolean)>(0)""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack3, doEncode)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base32OutputStream""];\n	""1"" -> ""5""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""6""[label=""cfg_next""];\n	""6"" -> ""4""[label=""cfg_next""];\n	""7"" -> ""3""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[])",Constructor,"* Constructs a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.","public Base32OutputStream(final OutputStream outputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator) {\n    super(outputStream, new Base32(lineLength, lineSeparator), doEncode);\n}","void <init>(java.io.OutputStream,boolean,int,byte[])","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""lineLength := @parameter2: int""];\n	""4"" [label=""lineSeparator := @parameter3: byte[]""];\n	""5"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[])>(lineLength, lineSeparator)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base32OutputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy)",Constructor,"* Constructs a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream\n     *            OutputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data written to us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            the nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If\n     *            doEncode is false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (for example \r\n).\n     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.\n     * @param decodingPolicy The decoding policy.\n     * @since 1.15","public Base32OutputStream(final OutputStream outputStream, final boolean doEncode, final int lineLength, final byte[] lineSeparator, final CodecPolicy decodingPolicy) {\n    super(outputStream, new Base32(lineLength, lineSeparator, false, BaseNCodec.PAD_DEFAULT, decodingPolicy), doEncode);\n}","void <init>(java.io.OutputStream,boolean,int,byte[],org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack6 = new org.apache.commons.codec.binary.Base32""];\n	""2"" [label=""decodingPolicy := @parameter4: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""lineLength := @parameter2: int""];\n	""5"" [label=""lineSeparator := @parameter3: byte[]""];\n	""6"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""7"" [label=""return""];\n	""8"" [label=""specialinvoke $stack6.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean,byte,org.apache.commons.codec.CodecPolicy)>(lineLength, lineSeparator, 0, 61, decodingPolicy)""];\n	""9"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack6, doEncode)""];\n	""10"" [label=""this := @this: org.apache.commons.codec.binary.Base32OutputStream""];\n	""1"" -> ""8""[label=""cfg_next""];\n	""10"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""5""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""3""[label=""cfg_next""];\n	""8"" -> ""9""[label=""cfg_next""];\n	""9"" -> ""7""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream),Constructor,* Constructs a Base16OutputStream such that all data written is Hex-encoded to the original provided OutputStream.\n     *\n     * @param outputStream OutputStream to wrap.,"public Base16OutputStream(final OutputStream outputStream) {\n    this(outputStream, true);\n}",void <init>(java.io.OutputStream),"digraph cfg_init {\n	""1"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""2"" [label=""return""];\n	""3"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16OutputStream: void <init>(java.io.OutputStream,boolean)>(outputStream, 1)""];\n	""4"" [label=""this := @this: org.apache.commons.codec.binary.Base16OutputStream""];\n	""1"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""2""[label=""cfg_next""];\n	""4"" -> ""1""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean)",Constructor,"* Constructs a Base16OutputStream such that all data written is either Hex-encoded or Hex-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream OutputStream to wrap.\n     * @param doEncode true if we should encode all data written to us, false if we should decode.","public Base16OutputStream(final OutputStream outputStream, final boolean doEncode) {\n    this(outputStream, doEncode, false);\n}","void <init>(java.io.OutputStream,boolean)","digraph cfg_init {\n	""1"" [label=""doEncode := @parameter1: boolean""];\n	""2"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""3"" [label=""return""];\n	""4"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16OutputStream: void <init>(java.io.OutputStream,boolean,boolean)>(outputStream, doEncode, 0)""];\n	""5"" [label=""this := @this: org.apache.commons.codec.binary.Base16OutputStream""];\n	""1"" -> ""4""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""3""[label=""cfg_next""];\n	""5"" -> ""2""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean)",Constructor,"* Constructs a Base16OutputStream such that all data written is either Hex-encoded or Hex-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream OutputStream to wrap.\n     * @param doEncode true if we should encode all data written to us, false if we should decode.\n     * @param lowerCase if {@code true} then use a lower-case Base16 alphabet.","public Base16OutputStream(final OutputStream outputStream, final boolean doEncode, final boolean lowerCase) {\n    this(outputStream, doEncode, lowerCase, CodecPolicy.LENIENT);\n}","void <init>(java.io.OutputStream,boolean,boolean)","digraph cfg_init {\n	""1"" [label=""$stack4 = <org.apache.commons.codec.CodecPolicy: org.apache.commons.codec.CodecPolicy LENIENT>""];\n	""2"" [label=""doEncode := @parameter1: boolean""];\n	""3"" [label=""lowerCase := @parameter2: boolean""];\n	""4"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""5"" [label=""return""];\n	""6"" [label=""specialinvoke this.<org.apache.commons.codec.binary.Base16OutputStream: void <init>(java.io.OutputStream,boolean,boolean,org.apache.commons.codec.CodecPolicy)>(outputStream, doEncode, lowerCase, $stack4)""];\n	""7"" [label=""this := @this: org.apache.commons.codec.binary.Base16OutputStream""];\n	""1"" -> ""6""[label=""cfg_next""];\n	""2"" -> ""3""[label=""cfg_next""];\n	""3"" -> ""1""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""6"" -> ""5""[label=""cfg_next""];\n	""7"" -> ""4""[label=""cfg_next""];\n}\n",public 
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy)",Constructor,"* Constructs a Base16OutputStream such that all data written is either Hex-encoded or Hex-decoded to the\n     * original provided OutputStream.\n     *\n     * @param outputStream OutputStream to wrap.\n     * @param doEncode true if we should encode all data written to us, false if we should decode.\n     * @param lowerCase if {@code true} then use a lower-case Base16 alphabet.\n     * @param decodingPolicy Decoding policy.","public Base16OutputStream(final OutputStream outputStream, final boolean doEncode, final boolean lowerCase, final CodecPolicy decodingPolicy) {\n    super(outputStream, new Base16(lowerCase, decodingPolicy), doEncode);\n}","void <init>(java.io.OutputStream,boolean,boolean,org.apache.commons.codec.CodecPolicy)","digraph cfg_init {\n	""1"" [label=""$stack5 = new org.apache.commons.codec.binary.Base16""];\n	""2"" [label=""decodingPolicy := @parameter3: org.apache.commons.codec.CodecPolicy""];\n	""3"" [label=""doEncode := @parameter1: boolean""];\n	""4"" [label=""lowerCase := @parameter2: boolean""];\n	""5"" [label=""outputStream := @parameter0: java.io.OutputStream""];\n	""6"" [label=""return""];\n	""7"" [label=""specialinvoke $stack5.<org.apache.commons.codec.binary.Base16: void <init>(boolean,org.apache.commons.codec.CodecPolicy)>(lowerCase, decodingPolicy)""];\n	""8"" [label=""specialinvoke this.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void <init>(java.io.OutputStream,org.apache.commons.codec.binary.BaseNCodec,boolean)>(outputStream, $stack5, doEncode)""];\n	""9"" [label=""this := @this: org.apache.commons.codec.binary.Base16OutputStream""];\n	""1"" -> ""7""[label=""cfg_next""];\n	""2"" -> ""1""[label=""cfg_next""];\n	""3"" -> ""4""[label=""cfg_next""];\n	""4"" -> ""2""[label=""cfg_next""];\n	""5"" -> ""3""[label=""cfg_next""];\n	""7"" -> ""8""[label=""cfg_next""];\n	""8"" -> ""6""[label=""cfg_next""];\n	""9"" -> ""5""[label=""cfg_next""];\n}\n",public 
org.apache.commons.codec.Encoder.encode(Object),Abstract Method,"* Encodes an ""Object"" and returns the encoded content as an Object. The Objects here may just be\n     * {@code byte[]} or {@code String}s depending on the implementation used.\n     *\n     * @param source\n     *            An object to encode\n     * @return An ""encoded"" Object\n     * @throws EncoderException\n     *             An encoder exception is thrown if the encoder experiences a failure condition during the encoding\n     *             process.",Object encode(Object source) throws EncoderException;,java.lang.Object encode(java.lang.Object),digraph cfg_encode {\n}\n,default
org.apache.commons.codec.StringEncoder.encode(String),Abstract Method,* Encodes a String and returns a String.\n     *\n     * @param source\n     *            the String to encode\n     * @return the encoded String\n     * @throws EncoderException\n     *             thrown if there is an error condition during the encoding process.,String encode(String source) throws EncoderException;,java.lang.String encode(java.lang.String),digraph cfg_encode {\n}\n,default
