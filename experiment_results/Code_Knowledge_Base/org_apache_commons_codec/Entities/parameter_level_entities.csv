FEN:ID,:LABEL,Parameter Name,Data Type
org.apache.commons.codec.BinaryDecoder.decode(byte[]).source,Parameter_1,source,byte[]
org.apache.commons.codec.DecoderException.<init>(String).message,Parameter_1,message,java.lang.String
"org.apache.commons.codec.DecoderException.<init>(String,Throwable).message",Parameter_1,message,java.lang.String
"org.apache.commons.codec.DecoderException.<init>(String,Throwable).cause",Parameter_2,cause,java.lang.Throwable
org.apache.commons.codec.DecoderException.<init>(Throwable).cause,Parameter_1,cause,java.lang.Throwable
org.apache.commons.codec.net.Utils.digit16(byte).b,Parameter_1,b,byte
org.apache.commons.codec.net.Utils.hexDigit(int).b,Parameter_1,b,int
org.apache.commons.codec.net.RFC1522Codec.decodeText(String).text,Parameter_1,text,java.lang.String
org.apache.commons.codec.net.RFC1522Codec.doDecoding(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.RFC1522Codec.doEncoding(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,Charset).text",Parameter_1,text,java.lang.String
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,String).text",Parameter_1,text,java.lang.String
"org.apache.commons.codec.net.RFC1522Codec.encodeText(String,String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.codec.net.RFC1522Codec.<init>(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,ByteArrayOutputStream).b",Parameter_1,b,int
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,ByteArrayOutputStream).encode",Parameter_2,encode,boolean
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,ByteArrayOutputStream).buffer",Parameter_3,buffer,java.io.ByteArrayOutputStream
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[]).printable",Parameter_1,printable,java.util.BitSet
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[]).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[],boolean).printable",Parameter_1,printable,java.util.BitSet
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[],boolean).bytes",Parameter_2,bytes,byte[]
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[],boolean).strict",Parameter_3,strict,boolean
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,ByteArrayOutputStream).b",Parameter_1,b,int
"org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,ByteArrayOutputStream).buffer",Parameter_2,buffer,java.io.ByteArrayOutputStream
"org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[]).index",Parameter_1,index,int
"org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[]).bytes",Parameter_2,bytes,byte[]
org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int).b,Parameter_1,b,int
org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.QuotedPrintableCodec.decode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.QuotedPrintableCodec.decode(String).sourceStr,Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,Charset).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,Charset).sourceCharset",Parameter_2,sourceCharset,java.nio.charset.Charset
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,String).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,String).sourceCharset",Parameter_2,sourceCharset,java.lang.String
org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.QuotedPrintableCodec.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.QuotedPrintableCodec.encode(String).sourceStr,Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,Charset).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,Charset).sourceCharset",Parameter_2,sourceCharset,java.nio.charset.Charset
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,String).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,String).sourceCharset",Parameter_2,sourceCharset,java.lang.String
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(boolean).strict,Parameter_1,strict,boolean
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
"org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset,boolean).charset",Parameter_1,charset,java.nio.charset.Charset
"org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset,boolean).strict",Parameter_2,strict,boolean
org.apache.commons.codec.net.QuotedPrintableCodec.<init>(String).charsetName,Parameter_1,charsetName,java.lang.String
org.apache.commons.codec.net.QCodec.decode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.QCodec.decode(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.net.QCodec.doDecoding(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.QCodec.doEncoding(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.QCodec.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.QCodec.encode(String).sourceStr,Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QCodec.encode(String,Charset).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QCodec.encode(String,Charset).sourceCharset",Parameter_2,sourceCharset,java.nio.charset.Charset
"org.apache.commons.codec.net.QCodec.encode(String,String).sourceStr",Parameter_1,sourceStr,java.lang.String
"org.apache.commons.codec.net.QCodec.encode(String,String).sourceCharset",Parameter_2,sourceCharset,java.lang.String
org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean).b,Parameter_1,b,boolean
org.apache.commons.codec.net.QCodec.<init>(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.codec.net.QCodec.<init>(String).charsetName,Parameter_1,charsetName,java.lang.String
org.apache.commons.codec.net.PercentCodec.canEncode(byte).c,Parameter_1,c,byte
org.apache.commons.codec.net.PercentCodec.containsSpace(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.PercentCodec.decode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.PercentCodec.decode(Object).obj,Parameter_1,obj,java.lang.Object
"org.apache.commons.codec.net.PercentCodec.doEncode(byte[],int,boolean).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.codec.net.PercentCodec.doEncode(byte[],int,boolean).expectedLength",Parameter_2,expectedLength,int
"org.apache.commons.codec.net.PercentCodec.doEncode(byte[],int,boolean).willEncode",Parameter_3,willEncode,boolean
org.apache.commons.codec.net.PercentCodec.encode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.PercentCodec.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.PercentCodec.expectedDecodingBytes(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.PercentCodec.expectedEncodingBytes(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.PercentCodec.inAlwaysEncodeCharsRange(byte).c,Parameter_1,c,byte
org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChar(byte).b,Parameter_1,b,byte
org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChars(byte[]).alwaysEncodeCharsArray,Parameter_1,alwaysEncodeCharsArray,byte[]
org.apache.commons.codec.net.PercentCodec.isAsciiChar(byte).c,Parameter_1,c,byte
"org.apache.commons.codec.net.PercentCodec.<init>(byte[],boolean).alwaysEncodeChars",Parameter_1,alwaysEncodeChars,byte[]
"org.apache.commons.codec.net.PercentCodec.<init>(byte[],boolean).plusForSpace",Parameter_2,plusForSpace,boolean
org.apache.commons.codec.net.URLCodec.decodeUrl(byte[]).bytes,Parameter_1,bytes,byte[]
"org.apache.commons.codec.net.URLCodec.encodeUrl(BitSet,byte[]).urlsafe",Parameter_1,urlsafe,java.util.BitSet
"org.apache.commons.codec.net.URLCodec.encodeUrl(BitSet,byte[]).bytes",Parameter_2,bytes,byte[]
org.apache.commons.codec.net.URLCodec.decode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.URLCodec.decode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.URLCodec.decode(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.net.URLCodec.decode(String,String).str",Parameter_1,str,java.lang.String
"org.apache.commons.codec.net.URLCodec.decode(String,String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.codec.net.URLCodec.encode(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.URLCodec.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.net.URLCodec.encode(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.net.URLCodec.encode(String,String).str",Parameter_1,str,java.lang.String
"org.apache.commons.codec.net.URLCodec.encode(String,String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.codec.net.URLCodec.<init>(String).charset,Parameter_1,charset,java.lang.String
org.apache.commons.codec.net.BCodec.decode(Object).value,Parameter_1,value,java.lang.Object
org.apache.commons.codec.net.BCodec.decode(String).value,Parameter_1,value,java.lang.String
org.apache.commons.codec.net.BCodec.doDecoding(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.BCodec.doEncoding(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.net.BCodec.encode(Object).value,Parameter_1,value,java.lang.Object
org.apache.commons.codec.net.BCodec.encode(String).strSource,Parameter_1,strSource,java.lang.String
"org.apache.commons.codec.net.BCodec.encode(String,Charset).strSource",Parameter_1,strSource,java.lang.String
"org.apache.commons.codec.net.BCodec.encode(String,Charset).sourceCharset",Parameter_2,sourceCharset,java.nio.charset.Charset
"org.apache.commons.codec.net.BCodec.encode(String,String).strSource",Parameter_1,strSource,java.lang.String
"org.apache.commons.codec.net.BCodec.encode(String,String).sourceCharset",Parameter_2,sourceCharset,java.lang.String
org.apache.commons.codec.net.BCodec.<init>(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
"org.apache.commons.codec.net.BCodec.<init>(Charset,CodecPolicy).charset",Parameter_1,charset,java.nio.charset.Charset
"org.apache.commons.codec.net.BCodec.<init>(Charset,CodecPolicy).decodingPolicy",Parameter_2,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.net.BCodec.<init>(String).charsetName,Parameter_1,charsetName,java.lang.String
org.apache.commons.codec.Charsets.toCharset(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.codec.Charsets.toCharset(String).charset,Parameter_1,charset,java.lang.String
org.apache.commons.codec.Decoder.decode(Object).source,Parameter_1,source,java.lang.Object
org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[]).keyBytes,Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],Random).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],Random).random",Parameter_2,random,java.util.Random
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String).keyBytes,Parameter_1,keyBytes,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String,String).keyBytes",Parameter_1,keyBytes,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String,String).salt",Parameter_2,salt,java.lang.String
org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[]).keyBytes,Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],Random).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],Random).random",Parameter_2,random,java.util.Random
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String).prefix",Parameter_3,prefix,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random).prefix",Parameter_3,prefix,java.lang.String
"org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random).random",Parameter_4,random,java.util.Random
org.apache.commons.codec.digest.Crypt.crypt(byte[]).keyBytes,Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Crypt.crypt(byte[],String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Crypt.crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
org.apache.commons.codec.digest.Crypt.crypt(String).key,Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.Crypt.crypt(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.Crypt.crypt(String,String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder).b2",Parameter_1,b2,byte
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder).b1",Parameter_2,b1,byte
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder).b0",Parameter_3,b0,byte
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder).outLen",Parameter_4,outLen,int
"org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder).buffer",Parameter_5,buffer,java.lang.StringBuilder
org.apache.commons.codec.digest.B64.getRandomSalt(int).num,Parameter_1,num,int
"org.apache.commons.codec.digest.B64.getRandomSalt(int,Random).num",Parameter_1,num,int
"org.apache.commons.codec.digest.B64.getRandomSalt(int,Random).random",Parameter_2,random,java.util.Random
"org.apache.commons.codec.digest.PureJavaCrc32.update(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.codec.digest.PureJavaCrc32.update(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.PureJavaCrc32.update(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.codec.digest.PureJavaCrc32.update(int).b,Parameter_1,b,int
org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]).key,Parameter_1,key,byte[]
org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]).key,Parameter_1,key,byte[]
org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]).key,Parameter_1,key,byte[]
org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[]).key,Parameter_1,key,byte[]
org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]).key,Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(HmacAlgorithms,byte[]).algorithm",Parameter_1,algorithm,org.apache.commons.codec.digest.HmacAlgorithms
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(HmacAlgorithms,byte[]).key",Parameter_2,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(String,byte[]).algorithm",Parameter_1,algorithm,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.getInitializedMac(String,byte[]).key",Parameter_2,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacMd5(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha1(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha256(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha384(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha512(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],InputStream).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(String,String).key",Parameter_1,key,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(String,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
org.apache.commons.codec.digest.HmacUtils.isAvailable(HmacAlgorithms).name,Parameter_1,name,org.apache.commons.codec.digest.HmacAlgorithms
org.apache.commons.codec.digest.HmacUtils.isAvailable(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,byte[]).mac",Parameter_1,mac,javax.crypto.Mac
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,InputStream).mac",Parameter_1,mac,javax.crypto.Mac
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,InputStream).valueToDigest",Parameter_2,valueToDigest,java.io.InputStream
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,String).mac",Parameter_1,mac,javax.crypto.Mac
"org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
org.apache.commons.codec.digest.HmacUtils.hmac(byte[]).valueToDigest,Parameter_1,valueToDigest,byte[]
org.apache.commons.codec.digest.HmacUtils.hmac(ByteBuffer).valueToDigest,Parameter_1,valueToDigest,java.nio.ByteBuffer
org.apache.commons.codec.digest.HmacUtils.hmac(File).valueToDigest,Parameter_1,valueToDigest,java.io.File
org.apache.commons.codec.digest.HmacUtils.hmac(InputStream).valueToDigest,Parameter_1,valueToDigest,java.io.InputStream
org.apache.commons.codec.digest.HmacUtils.hmac(String).valueToDigest,Parameter_1,valueToDigest,java.lang.String
org.apache.commons.codec.digest.HmacUtils.hmacHex(byte[]).valueToDigest,Parameter_1,valueToDigest,byte[]
org.apache.commons.codec.digest.HmacUtils.hmacHex(ByteBuffer).valueToDigest,Parameter_1,valueToDigest,java.nio.ByteBuffer
org.apache.commons.codec.digest.HmacUtils.hmacHex(File).valueToDigest,Parameter_1,valueToDigest,java.io.File
org.apache.commons.codec.digest.HmacUtils.hmacHex(InputStream).valueToDigest,Parameter_1,valueToDigest,java.io.InputStream
org.apache.commons.codec.digest.HmacUtils.hmacHex(String).valueToDigest,Parameter_1,valueToDigest,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,byte[]).algorithm",Parameter_1,algorithm,org.apache.commons.codec.digest.HmacAlgorithms
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,byte[]).key",Parameter_2,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,String).algorithm",Parameter_1,algorithm,org.apache.commons.codec.digest.HmacAlgorithms
"org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,String).key",Parameter_2,key,java.lang.String
org.apache.commons.codec.digest.HmacUtils.<init>(Mac).mac,Parameter_1,mac,javax.crypto.Mac
"org.apache.commons.codec.digest.HmacUtils.<init>(String,byte[]).algorithm",Parameter_1,algorithm,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.<init>(String,byte[]).key",Parameter_2,key,byte[]
"org.apache.commons.codec.digest.HmacUtils.<init>(String,String).algorithm",Parameter_1,algorithm,java.lang.String
"org.apache.commons.codec.digest.HmacUtils.<init>(String,String).key",Parameter_2,key,java.lang.String
"org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int).schedule",Parameter_1,schedule,int[]
"org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int).eSwap0",Parameter_2,eSwap0,int
"org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int).eSwap1",Parameter_3,eSwap1,int
org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte).b,Parameter_1,b,byte
org.apache.commons.codec.digest.UnixCrypt.crypt(byte[]).original,Parameter_1,original,byte[]
"org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],String).original",Parameter_1,original,byte[]
"org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
org.apache.commons.codec.digest.UnixCrypt.crypt(String).original,Parameter_1,original,java.lang.String
"org.apache.commons.codec.digest.UnixCrypt.crypt(String,String).original",Parameter_1,original,java.lang.String
"org.apache.commons.codec.digest.UnixCrypt.crypt(String,String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).el",Parameter_1,el,int
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).r",Parameter_2,r,int
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).s",Parameter_3,s,int
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).e0",Parameter_4,e0,int
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).e1",Parameter_5,e1,int
"org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[]).sArr",Parameter_6,sArr,int[]
org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[]).key,Parameter_1,key,byte[]
"org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int).b",Parameter_1,b,byte[]
"org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int).a",Parameter_1,a,int
"org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int).n",Parameter_2,n,int
"org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int).m",Parameter_3,m,int
"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int).iValue",Parameter_1,iValue,int
"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int).b",Parameter_2,b,byte[]
"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int).offset",Parameter_3,offset,int
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[]).a",Parameter_1,a,int
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[]).b",Parameter_2,b,int
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[]).n",Parameter_3,n,int
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[]).m",Parameter_4,m,int
"org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[]).results",Parameter_5,results,int[]
"org.apache.commons.codec.digest.Blake3.checkBufferArgs(byte[],int,int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.codec.digest.Blake3.checkBufferArgs(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3.checkBufferArgs(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int).chainingValue",Parameter_1,chainingValue,int[]
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int).blockWords",Parameter_2,blockWords,int[]
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int).blockLength",Parameter_3,blockLength,int
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int).counter",Parameter_4,counter,long
"org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int).flags",Parameter_5,flags,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).state",Parameter_1,state,int[]
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).a",Parameter_2,a,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).b",Parameter_3,b,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).c",Parameter_4,c,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).d",Parameter_5,d,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).mx",Parameter_6,mx,int
"org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int).my",Parameter_7,my,int
org.apache.commons.codec.digest.Blake3.hash(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byte[]).kdfContext,Parameter_1,kdfContext,byte[]
org.apache.commons.codec.digest.Blake3.initKeyedHash(byte[]).key,Parameter_1,key,byte[]
"org.apache.commons.codec.digest.Blake3.keyedHash(byte[],byte[]).key",Parameter_1,key,byte[]
"org.apache.commons.codec.digest.Blake3.keyedHash(byte[],byte[]).data",Parameter_2,data,byte[]
"org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int).value",Parameter_1,value,int
"org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int).dst",Parameter_2,dst,byte[]
"org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int).off",Parameter_3,off,int
"org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int).len",Parameter_4,len,int
"org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int).leftChildCV",Parameter_1,leftChildCV,int[]
"org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int).rightChildCV",Parameter_2,rightChildCV,int[]
"org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int).key",Parameter_3,key,int[]
"org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int).flags",Parameter_4,flags,int
"org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int).leftChildCV",Parameter_1,leftChildCV,int[]
"org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int).rightChildCV",Parameter_2,rightChildCV,int[]
"org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int).key",Parameter_3,key,int[]
"org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int).flags",Parameter_4,flags,int
"org.apache.commons.codec.digest.Blake3.round(int[],int[],byte[]).state",Parameter_1,state,int[]
"org.apache.commons.codec.digest.Blake3.round(int[],int[],byte[]).msg",Parameter_2,msg,int[]
"org.apache.commons.codec.digest.Blake3.round(int[],int[],byte[]).schedule",Parameter_3,schedule,byte[]
"org.apache.commons.codec.digest.Blake3.unpackInt(byte[],int).buf",Parameter_1,buf,byte[]
"org.apache.commons.codec.digest.Blake3.unpackInt(byte[],int).off",Parameter_2,off,int
"org.apache.commons.codec.digest.Blake3.unpackInts(byte[],int).buf",Parameter_1,buf,byte[]
"org.apache.commons.codec.digest.Blake3.unpackInts(byte[],int).nrInts",Parameter_2,nrInts,int
org.apache.commons.codec.digest.Blake3.doFinalize(byte[]).out,Parameter_1,out,byte[]
"org.apache.commons.codec.digest.Blake3.doFinalize(byte[],int,int).out",Parameter_1,out,byte[]
"org.apache.commons.codec.digest.Blake3.doFinalize(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3.doFinalize(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.codec.digest.Blake3.doFinalize(int).nrBytes,Parameter_1,nrBytes,int
org.apache.commons.codec.digest.Blake3.update(byte[]).in,Parameter_1,in,byte[]
"org.apache.commons.codec.digest.Blake3.update(byte[],int,int).in",Parameter_1,in,byte[]
"org.apache.commons.codec.digest.Blake3.update(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3.update(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.Blake3.<init>(int[],int).key",Parameter_1,key,int[]
"org.apache.commons.codec.digest.Blake3.<init>(int[],int).flags",Parameter_2,flags,int
"org.apache.commons.codec.digest.Blake3$ChunkState.update(byte[],int,int).input",Parameter_1,input,byte[]
"org.apache.commons.codec.digest.Blake3$ChunkState.update(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3$ChunkState.update(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.Blake3$ChunkState.<init>(int[],long,int).key",Parameter_1,key,int[]
"org.apache.commons.codec.digest.Blake3$ChunkState.<init>(int[],long,int).chunkCounter",Parameter_2,chunkCounter,long
"org.apache.commons.codec.digest.Blake3$ChunkState.<init>(int[],long,int).flags",Parameter_3,flags,int
"org.apache.commons.codec.digest.Blake3$EngineState.addChunkCV(int[],long).firstCV",Parameter_1,firstCV,int[]
"org.apache.commons.codec.digest.Blake3$EngineState.addChunkCV(int[],long).totalChunks",Parameter_2,totalChunks,long
"org.apache.commons.codec.digest.Blake3$EngineState.inputData(byte[],int,int).in",Parameter_1,in,byte[]
"org.apache.commons.codec.digest.Blake3$EngineState.inputData(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3$EngineState.inputData(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.Blake3$EngineState.outputHash(byte[],int,int).out",Parameter_1,out,byte[]
"org.apache.commons.codec.digest.Blake3$EngineState.outputHash(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3$EngineState.outputHash(byte[],int,int).length",Parameter_3,length,int
org.apache.commons.codec.digest.Blake3$EngineState.pushCV(int[]).cv,Parameter_1,cv,int[]
"org.apache.commons.codec.digest.Blake3$EngineState.<init>(int[],int).key",Parameter_1,key,int[]
"org.apache.commons.codec.digest.Blake3$EngineState.<init>(int[],int).flags",Parameter_2,flags,int
"org.apache.commons.codec.digest.Blake3$Output.rootOutputBytes(byte[],int,int).out",Parameter_1,out,byte[]
"org.apache.commons.codec.digest.Blake3$Output.rootOutputBytes(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.Blake3$Output.rootOutputBytes(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int).inputChainingValue",Parameter_1,inputChainingValue,int[]
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int).blockWords",Parameter_2,blockWords,int[]
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int).counter",Parameter_3,counter,long
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int).blockLength",Parameter_4,blockLength,int
"org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int).flags",Parameter_5,flags,int
org.apache.commons.codec.digest.MurmurHash3.fmix32(int).hash,Parameter_1,hash,int
org.apache.commons.codec.digest.MurmurHash3.fmix64(long).hash,Parameter_1,hash,long
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianInt(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianInt(byte[],int).index",Parameter_2,index,int
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianLong(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.getLittleEndianLong(byte[],int).index",Parameter_2,index,int
org.apache.commons.codec.digest.MurmurHash3.hash128(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int).seed",Parameter_4,seed,int
org.apache.commons.codec.digest.MurmurHash3.hash128(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int).seed",Parameter_4,seed,int
"org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long).seed",Parameter_4,seed,long
org.apache.commons.codec.digest.MurmurHash3.hash32(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int).seed",Parameter_3,seed,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int).seed",Parameter_4,seed,int
org.apache.commons.codec.digest.MurmurHash3.hash32(long).data,Parameter_1,data,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,int).data",Parameter_1,data,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,int).seed",Parameter_2,seed,int
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long).data1",Parameter_1,data1,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long).data2",Parameter_2,data2,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int).data1",Parameter_1,data1,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int).data2",Parameter_2,data2,long
"org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int).seed",Parameter_3,seed,int
org.apache.commons.codec.digest.MurmurHash3.hash32(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int).seed",Parameter_4,seed,int
org.apache.commons.codec.digest.MurmurHash3.hash64(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int).seed",Parameter_4,seed,int
org.apache.commons.codec.digest.MurmurHash3.hash64(int).data,Parameter_1,data,int
org.apache.commons.codec.digest.MurmurHash3.hash64(long).data,Parameter_1,data,long
org.apache.commons.codec.digest.MurmurHash3.hash64(short).data,Parameter_1,data,short
"org.apache.commons.codec.digest.MurmurHash3.mix32(int,int).k",Parameter_1,k,int
"org.apache.commons.codec.digest.MurmurHash3.mix32(int,int).hash",Parameter_2,hash,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int).hash",Parameter_1,hash,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int).unprocessedLength",Parameter_2,unprocessedLength,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int).unprocessed",Parameter_3,unprocessed,byte[]
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int).totalLen",Parameter_4,totalLen,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte).b1",Parameter_1,b1,byte
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte).b2",Parameter_2,b2,byte
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte).b3",Parameter_3,b3,byte
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte).b4",Parameter_4,b4,byte
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.add(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.add(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.add(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int).hash",Parameter_1,hash,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int).unprocessedLength",Parameter_2,unprocessedLength,int
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int).unprocessed",Parameter_3,unprocessed,byte[]
"org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int).totalLen",Parameter_4,totalLen,int
org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.start(int).seed,Parameter_1,seed,int
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,byte[]).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,byte[]).data",Parameter_2,data,byte[]
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,ByteBuffer).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,ByteBuffer).data",Parameter_2,data,java.nio.ByteBuffer
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,File).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,File).data",Parameter_2,data,java.io.File
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,InputStream).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,InputStream).data",Parameter_2,data,java.io.InputStream
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,Path,OpenOption[]).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,Path,OpenOption[]).data",Parameter_2,data,java.nio.file.Path
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,Path,OpenOption[]).options",Parameter_3,options,java.nio.file.OpenOption[]
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,RandomAccessFile).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,RandomAccessFile).data",Parameter_2,data,java.io.RandomAccessFile
org.apache.commons.codec.digest.DigestUtils.getDigest(String).algorithm,Parameter_1,algorithm,java.lang.String
"org.apache.commons.codec.digest.DigestUtils.getDigest(String,MessageDigest).algorithm",Parameter_1,algorithm,java.lang.String
"org.apache.commons.codec.digest.DigestUtils.getDigest(String,MessageDigest).defaultMessageDigest",Parameter_2,defaultMessageDigest,java.security.MessageDigest
org.apache.commons.codec.digest.DigestUtils.getMessageDigest(String).algorithm,Parameter_1,algorithm,java.lang.String
org.apache.commons.codec.digest.DigestUtils.isAvailable(String).messageDigestAlgorithm,Parameter_1,messageDigestAlgorithm,java.lang.String
org.apache.commons.codec.digest.DigestUtils.md2(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.md2(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.md2(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.md2Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.md2Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.md5(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.md5(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.md5(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.md5Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.md5Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha1(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha1(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha1(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha1Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha1Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha256(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha256(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha256(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha256Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha256Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_224(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_224(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_224(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_256(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_256(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_256(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_384(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_384(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_384(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_512(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_512(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_512(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha384(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha384(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha384(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha384Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha384Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512_224(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512_224(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512_224(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512_256(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512_256(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512_256(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.sha512Hex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.sha512Hex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.shaHex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.shaHex(InputStream).data,Parameter_1,data,java.io.InputStream
org.apache.commons.codec.digest.DigestUtils.shaHex(String).data,Parameter_1,data,java.lang.String
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,byte[]).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,byte[]).valueToDigest",Parameter_2,valueToDigest,byte[]
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,ByteBuffer).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,ByteBuffer).valueToDigest",Parameter_2,valueToDigest,java.nio.ByteBuffer
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,File).digest",Parameter_1,digest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,File).data",Parameter_2,data,java.io.File
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,FileChannel).digest",Parameter_1,digest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,FileChannel).data",Parameter_2,data,java.nio.channels.FileChannel
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,InputStream).digest",Parameter_1,digest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,InputStream).inputStream",Parameter_2,inputStream,java.io.InputStream
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,Path,OpenOption[]).digest",Parameter_1,digest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,Path,OpenOption[]).path",Parameter_2,path,java.nio.file.Path
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,Path,OpenOption[]).options",Parameter_3,options,java.nio.file.OpenOption[]
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,RandomAccessFile).digest",Parameter_1,digest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,RandomAccessFile).data",Parameter_2,data,java.io.RandomAccessFile
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,String).messageDigest",Parameter_1,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,String).valueToDigest",Parameter_2,valueToDigest,java.lang.String
org.apache.commons.codec.digest.DigestUtils.digest(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.digest(ByteBuffer).data,Parameter_1,data,java.nio.ByteBuffer
org.apache.commons.codec.digest.DigestUtils.digest(File).data,Parameter_1,data,java.io.File
org.apache.commons.codec.digest.DigestUtils.digest(InputStream).data,Parameter_1,data,java.io.InputStream
"org.apache.commons.codec.digest.DigestUtils.digest(Path,OpenOption[]).data",Parameter_1,data,java.nio.file.Path
"org.apache.commons.codec.digest.DigestUtils.digest(Path,OpenOption[]).options",Parameter_2,options,java.nio.file.OpenOption[]
org.apache.commons.codec.digest.DigestUtils.digest(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.digestAsHex(byte[]).data,Parameter_1,data,byte[]
org.apache.commons.codec.digest.DigestUtils.digestAsHex(ByteBuffer).data,Parameter_1,data,java.nio.ByteBuffer
org.apache.commons.codec.digest.DigestUtils.digestAsHex(File).data,Parameter_1,data,java.io.File
org.apache.commons.codec.digest.DigestUtils.digestAsHex(InputStream).data,Parameter_1,data,java.io.InputStream
"org.apache.commons.codec.digest.DigestUtils.digestAsHex(Path,OpenOption[]).data",Parameter_1,data,java.nio.file.Path
"org.apache.commons.codec.digest.DigestUtils.digestAsHex(Path,OpenOption[]).options",Parameter_2,options,java.nio.file.OpenOption[]
org.apache.commons.codec.digest.DigestUtils.digestAsHex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.digest.DigestUtils.<init>(MessageDigest).digest,Parameter_1,digest,java.security.MessageDigest
org.apache.commons.codec.digest.DigestUtils.<init>(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianInt(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianInt(byte[],int).index",Parameter_2,index,int
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianLong(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.getLittleEndianLong(byte[],int).index",Parameter_2,index,int
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int,int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int,int).seed",Parameter_3,seed,int
org.apache.commons.codec.digest.MurmurHash2.hash32(String).text,Parameter_1,text,java.lang.String
"org.apache.commons.codec.digest.MurmurHash2.hash32(String,int,int).text",Parameter_1,text,java.lang.String
"org.apache.commons.codec.digest.MurmurHash2.hash32(String,int,int).from",Parameter_2,from,int
"org.apache.commons.codec.digest.MurmurHash2.hash32(String,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int,int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int,int).length",Parameter_2,length,int
"org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int,int).seed",Parameter_3,seed,int
org.apache.commons.codec.digest.MurmurHash2.hash64(String).text,Parameter_1,text,java.lang.String
"org.apache.commons.codec.digest.MurmurHash2.hash64(String,int,int).text",Parameter_1,text,java.lang.String
"org.apache.commons.codec.digest.MurmurHash2.hash64(String,int,int).from",Parameter_2,from,int
"org.apache.commons.codec.digest.MurmurHash2.hash64(String,int,int).length",Parameter_3,length,int
"org.apache.commons.codec.digest.PureJavaCrc32C.update(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.codec.digest.PureJavaCrc32C.update(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.codec.digest.PureJavaCrc32C.update(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.codec.digest.PureJavaCrc32C.update(int).b,Parameter_1,b,int
org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[]).keyBytes,Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String,Random).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String,Random).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String,Random).random",Parameter_3,random,java.util.Random
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String).saltPrefix",Parameter_3,saltPrefix,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String).blocksize",Parameter_4,blocksize,int
"org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String).algorithm",Parameter_5,algorithm,java.lang.String
org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[]).keyBytes,Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String,Random).keyBytes",Parameter_1,keyBytes,byte[]
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String,Random).salt",Parameter_2,salt,java.lang.String
"org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String,Random).random",Parameter_3,random,java.util.Random
"org.apache.commons.codec.digest.XXHash32.getInt(byte[],int).buffer",Parameter_1,buffer,byte[]
"org.apache.commons.codec.digest.XXHash32.getInt(byte[],int).idx",Parameter_2,idx,int
"org.apache.commons.codec.digest.XXHash32.process(byte[],int).b",Parameter_1,b,byte[]
"org.apache.commons.codec.digest.XXHash32.process(byte[],int).offset",Parameter_2,offset,int
"org.apache.commons.codec.digest.XXHash32.update(byte[],int,int).b",Parameter_1,b,byte[]
"org.apache.commons.codec.digest.XXHash32.update(byte[],int,int).off",Parameter_2,off,int
"org.apache.commons.codec.digest.XXHash32.update(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.codec.digest.XXHash32.update(int).b,Parameter_1,b,int
org.apache.commons.codec.digest.XXHash32.<init>(int).seed,Parameter_1,seed,int
org.apache.commons.codec.EncoderException.<init>(String).message,Parameter_1,message,java.lang.String
"org.apache.commons.codec.EncoderException.<init>(String,Throwable).message",Parameter_1,message,java.lang.String
"org.apache.commons.codec.EncoderException.<init>(String,Throwable).cause",Parameter_2,cause,java.lang.Throwable
org.apache.commons.codec.EncoderException.<init>(Throwable).cause,Parameter_1,cause,java.lang.Throwable
org.apache.commons.codec.StringDecoder.decode(String).source,Parameter_1,source,java.lang.String
"org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char).arr",Parameter_1,arr,char[]
"org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char).key",Parameter_2,key,char
org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(String).text,Parameter_1,text,java.lang.String
org.apache.commons.codec.language.ColognePhonetic.encode(Object).object,Parameter_1,object,java.lang.Object
org.apache.commons.codec.language.ColognePhonetic.encode(String).text,Parameter_1,text,java.lang.String
"org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(String,String).text1",Parameter_1,text1,java.lang.String
"org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(String,String).text2",Parameter_2,text2,java.lang.String
org.apache.commons.codec.language.ColognePhonetic.preprocess(String).text,Parameter_1,text,java.lang.String
"org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.copyData(int,int).start",Parameter_1,start,int
"org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.copyData(int,int).length",Parameter_2,length,int
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(char[]).data,Parameter_1,data,char[]
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(int).buffSize,Parameter_1,buffSize,int
"org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.copyData(int,int).start",Parameter_1,start,int
"org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.copyData(int,int).length",Parameter_2,length,int
"org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.copyData(int,int).start",Parameter_1,start,int
"org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.copyData(int,int).length",Parameter_2,length,int
org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.put(char).code,Parameter_1,code,char
"org.apache.commons.codec.language.RefinedSoundex.difference(String,String).s1",Parameter_1,s1,java.lang.String
"org.apache.commons.codec.language.RefinedSoundex.difference(String,String).s2",Parameter_2,s2,java.lang.String
org.apache.commons.codec.language.RefinedSoundex.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.RefinedSoundex.encode(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char).c,Parameter_1,c,char
org.apache.commons.codec.language.RefinedSoundex.soundex(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.RefinedSoundex.<init>(char[]).mapping,Parameter_1,mapping,char[]
org.apache.commons.codec.language.RefinedSoundex.<init>(String).mapping,Parameter_1,mapping,java.lang.String
org.apache.commons.codec.language.AbstractCaverphone.encode(Object).source,Parameter_1,source,java.lang.Object
"org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(String,String).str1",Parameter_1,str1,java.lang.String
"org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(String,String).str2",Parameter_2,str2,java.lang.String
org.apache.commons.codec.language.Metaphone.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.Metaphone.encode(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.language.Metaphone.isLastChar(int,int).wdsz",Parameter_1,wdsz,int
"org.apache.commons.codec.language.Metaphone.isLastChar(int,int).n",Parameter_2,n,int
"org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(String,String).str1",Parameter_1,str1,java.lang.String
"org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(String,String).str2",Parameter_2,str2,java.lang.String
"org.apache.commons.codec.language.Metaphone.isNextChar(StringBuilder,int,char).string",Parameter_1,string,java.lang.StringBuilder
"org.apache.commons.codec.language.Metaphone.isNextChar(StringBuilder,int,char).index",Parameter_2,index,int
"org.apache.commons.codec.language.Metaphone.isNextChar(StringBuilder,int,char).c",Parameter_3,c,char
"org.apache.commons.codec.language.Metaphone.isPreviousChar(StringBuilder,int,char).string",Parameter_1,string,java.lang.StringBuilder
"org.apache.commons.codec.language.Metaphone.isPreviousChar(StringBuilder,int,char).index",Parameter_2,index,int
"org.apache.commons.codec.language.Metaphone.isPreviousChar(StringBuilder,int,char).c",Parameter_3,c,char
"org.apache.commons.codec.language.Metaphone.isVowel(StringBuilder,int).string",Parameter_1,string,java.lang.StringBuilder
"org.apache.commons.codec.language.Metaphone.isVowel(StringBuilder,int).index",Parameter_2,index,int
org.apache.commons.codec.language.Metaphone.metaphone(String).txt,Parameter_1,txt,java.lang.String
"org.apache.commons.codec.language.Metaphone.regionMatch(StringBuilder,int,String).string",Parameter_1,string,java.lang.StringBuilder
"org.apache.commons.codec.language.Metaphone.regionMatch(StringBuilder,int,String).index",Parameter_2,index,int
"org.apache.commons.codec.language.Metaphone.regionMatch(StringBuilder,int,String).test",Parameter_3,test,java.lang.String
org.apache.commons.codec.language.Metaphone.setMaxCodeLen(int).maxCodeLen,Parameter_1,maxCodeLen,int
"org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[]).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[]).start",Parameter_2,start,int
"org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[]).length",Parameter_3,length,int
"org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[]).criteria",Parameter_4,criteria,java.lang.String[]
"org.apache.commons.codec.language.DoubleMetaphone.charAt(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.charAt(String,int).index",Parameter_2,index,int
org.apache.commons.codec.language.DoubleMetaphone.cleanInput(String).input,Parameter_1,input,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionC0(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionC0(String,int).index",Parameter_2,index,int
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(String,int).index",Parameter_2,index,int
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(String,int).index",Parameter_2,index,int
"org.apache.commons.codec.language.DoubleMetaphone.conditionL0(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionL0(String,int).index",Parameter_2,index,int
"org.apache.commons.codec.language.DoubleMetaphone.conditionM0(String,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.conditionM0(String,int).index",Parameter_2,index,int
org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String,boolean).alternate",Parameter_2,alternate,boolean
org.apache.commons.codec.language.DoubleMetaphone.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.DoubleMetaphone.encode(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(DoubleMetaphoneResult,int).result",Parameter_1,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(DoubleMetaphoneResult,int).index",Parameter_2,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleC(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleC(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleC(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleCC(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleCC(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleCC(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleCH(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleCH(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleCH(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleD(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleD(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleD(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean).slavoGermanic",Parameter_4,slavoGermanic,boolean
"org.apache.commons.codec.language.DoubleMetaphone.handleGH(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleGH(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleGH(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleH(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleH(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleH(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean).slavoGermanic",Parameter_4,slavoGermanic,boolean
"org.apache.commons.codec.language.DoubleMetaphone.handleL(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleL(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleL(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleP(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleP(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleP(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean).slavoGermanic",Parameter_4,slavoGermanic,boolean
"org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean).slavoGermanic",Parameter_4,slavoGermanic,boolean
"org.apache.commons.codec.language.DoubleMetaphone.handleSC(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleSC(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleSC(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleT(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleT(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleT(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleW(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleW(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleW(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleX(String,DoubleMetaphoneResult,int).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleX(String,DoubleMetaphoneResult,int).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleX(String,DoubleMetaphoneResult,int).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean).value",Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean).result",Parameter_2,result,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult
"org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean).index",Parameter_3,index,int
"org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean).slavoGermanic",Parameter_4,slavoGermanic,boolean
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String).value1",Parameter_1,value1,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String).value2",Parameter_2,value2,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean).value1",Parameter_1,value1,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean).value2",Parameter_2,value2,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean).alternate",Parameter_3,alternate,boolean
org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(String).value,Parameter_1,value,java.lang.String
org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(String).value,Parameter_1,value,java.lang.String
org.apache.commons.codec.language.DoubleMetaphone.isVowel(char).ch,Parameter_1,ch,char
org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int).maxCodeLen,Parameter_1,maxCodeLen,int
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char).value,Parameter_1,value,char
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char).primary",Parameter_1,primary,char
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char).alternate",Parameter_2,alternate,char
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String).value,Parameter_1,value,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String,String).primary",Parameter_1,primary,java.lang.String
"org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String,String).alternate",Parameter_2,alternate,java.lang.String
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char).value,Parameter_1,value,char
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(String).value,Parameter_1,value,java.lang.String
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char).value,Parameter_1,value,char
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(String).value,Parameter_1,value,java.lang.String
org.apache.commons.codec.language.Caverphone2.encode(String).source,Parameter_1,source,java.lang.String
org.apache.commons.codec.language.bm.Lang.instance(NameType).nameType,Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.Lang.loadFromResource(String,Languages).languageRulesResourceName",Parameter_1,languageRulesResourceName,java.lang.String
"org.apache.commons.codec.language.bm.Lang.loadFromResource(String,Languages).languages",Parameter_2,languages,org.apache.commons.codec.language.bm.Languages
org.apache.commons.codec.language.bm.Lang.guessLanguage(String).text,Parameter_1,text,java.lang.String
org.apache.commons.codec.language.bm.Lang.guessLanguages(String).input,Parameter_1,input,java.lang.String
"org.apache.commons.codec.language.bm.Lang.<init>(List,Languages).rules",Parameter_1,rules,java.util.List
"org.apache.commons.codec.language.bm.Lang.<init>(List,Languages).languages",Parameter_2,languages,org.apache.commons.codec.language.bm.Languages
org.apache.commons.codec.language.bm.Lang$LangRule.matches(String).txt,Parameter_1,txt,java.lang.String
"org.apache.commons.codec.language.bm.Lang$LangRule.<init>(Pattern,Set,boolean).pattern",Parameter_1,pattern,java.util.regex.Pattern
"org.apache.commons.codec.language.bm.Lang$LangRule.<init>(Pattern,Set,boolean).languages",Parameter_2,languages,java.util.Set
"org.apache.commons.codec.language.bm.Lang$LangRule.<init>(Pattern,Set,boolean).acceptOnMatch",Parameter_3,acceptOnMatch,boolean
org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(Object).source,Parameter_1,source,java.lang.Object
org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(String).source,Parameter_1,source,java.lang.String
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean).concat,Parameter_1,concat,boolean
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int).maxPhonemes,Parameter_1,maxPhonemes,int
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(NameType).nameType,Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(RuleType).ruleType,Parameter_1,ruleType,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.PhoneticEngine.join(List,String).strings",Parameter_1,strings,java.util.List
"org.apache.commons.codec.language.bm.PhoneticEngine.join(List,String).sep",Parameter_2,sep,java.lang.String
"org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(PhonemeBuilder,Map).phonemeBuilder",Parameter_1,phonemeBuilder,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder
"org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(PhonemeBuilder,Map).finalRules",Parameter_2,finalRules,java.util.Map
org.apache.commons.codec.language.bm.PhoneticEngine.encode(String).input,Parameter_1,input,java.lang.String
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean).ruleType",Parameter_2,ruleType,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean).concatenate",Parameter_3,concatenate,boolean
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int).ruleType",Parameter_2,ruleType,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int).concatenate",Parameter_3,concatenate,boolean
"org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int).maxPhonemes",Parameter_4,maxPhonemes,int
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(CharSequence).str,Parameter_1,str,java.lang.CharSequence
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.<init>(Set).phonemes,Parameter_1,phonemes,java.util.Set
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int).finalRules",Parameter_1,finalRules,java.util.Map
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int).input",Parameter_2,input,java.lang.CharSequence
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int).phonemeBuilder",Parameter_3,phonemeBuilder,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int).i",Parameter_4,i,int
"org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int).maxPhonemes",Parameter_5,maxPhonemes,int
org.apache.commons.codec.language.bm.Languages.getInstance(NameType).nameType,Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
org.apache.commons.codec.language.bm.Languages.getInstance(String).languagesResourceName,Parameter_1,languagesResourceName,java.lang.String
org.apache.commons.codec.language.bm.Languages.langResourceName(NameType).nameType,Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
org.apache.commons.codec.language.bm.Languages.<init>(Set).languages,Parameter_1,languages,java.util.Set
org.apache.commons.codec.language.bm.Languages$LanguageSet.from(Set).languages,Parameter_1,languages,java.util.Set
org.apache.commons.codec.language.bm.Languages$LanguageSet.contains(String).language,Parameter_1,language,java.lang.String
org.apache.commons.codec.language.bm.Languages$SomeLanguages.contains(String).language,Parameter_1,language,java.lang.String
org.apache.commons.codec.language.bm.Languages$SomeLanguages.merge(LanguageSet).other,Parameter_1,other,org.apache.commons.codec.language.bm.Languages$LanguageSet
org.apache.commons.codec.language.bm.Languages$SomeLanguages.restrictTo(LanguageSet).other,Parameter_1,other,org.apache.commons.codec.language.bm.Languages$LanguageSet
org.apache.commons.codec.language.bm.Languages$SomeLanguages.<init>(Set).languages,Parameter_1,languages,java.util.Set
"org.apache.commons.codec.language.bm.Rule.contains(CharSequence,char).chars",Parameter_1,chars,java.lang.CharSequence
"org.apache.commons.codec.language.bm.Rule.contains(CharSequence,char).input",Parameter_2,input,char
"org.apache.commons.codec.language.bm.Rule.createResourceName(NameType,RuleType,String).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.Rule.createResourceName(NameType,RuleType,String).rt",Parameter_2,rt,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.Rule.createResourceName(NameType,RuleType,String).lang",Parameter_3,lang,java.lang.String
"org.apache.commons.codec.language.bm.Rule.createScanner(NameType,RuleType,String).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.Rule.createScanner(NameType,RuleType,String).rt",Parameter_2,rt,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.Rule.createScanner(NameType,RuleType,String).lang",Parameter_3,lang,java.lang.String
org.apache.commons.codec.language.bm.Rule.createScanner(String).lang,Parameter_1,lang,java.lang.String
"org.apache.commons.codec.language.bm.Rule.endsWith(CharSequence,CharSequence).input",Parameter_1,input,java.lang.CharSequence
"org.apache.commons.codec.language.bm.Rule.endsWith(CharSequence,CharSequence).suffix",Parameter_2,suffix,java.lang.CharSequence
"org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,String).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,String).rt",Parameter_2,rt,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,String).lang",Parameter_3,lang,java.lang.String
"org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,String).nameType",Parameter_1,nameType,org.apache.commons.codec.language.bm.NameType
"org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,String).rt",Parameter_2,rt,org.apache.commons.codec.language.bm.RuleType
"org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,String).lang",Parameter_3,lang,java.lang.String
org.apache.commons.codec.language.bm.Rule.parsePhoneme(String).ph,Parameter_1,ph,java.lang.String
org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(String).ph,Parameter_1,ph,java.lang.String
"org.apache.commons.codec.language.bm.Rule.parseRules(Scanner,String).scanner",Parameter_1,scanner,java.util.Scanner
"org.apache.commons.codec.language.bm.Rule.parseRules(Scanner,String).location",Parameter_2,location,java.lang.String
org.apache.commons.codec.language.bm.Rule.pattern(String).regex,Parameter_1,regex,java.lang.String
"org.apache.commons.codec.language.bm.Rule.startsWith(CharSequence,CharSequence).input",Parameter_1,input,java.lang.CharSequence
"org.apache.commons.codec.language.bm.Rule.startsWith(CharSequence,CharSequence).prefix",Parameter_2,prefix,java.lang.CharSequence
org.apache.commons.codec.language.bm.Rule.stripQuotes(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(CharSequence,int).input",Parameter_1,input,java.lang.CharSequence
"org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(CharSequence,int).i",Parameter_2,i,int
"org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr).pattern",Parameter_1,pattern,java.lang.String
"org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr).lContext",Parameter_2,lContext,java.lang.String
"org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr).rContext",Parameter_3,rContext,java.lang.String
"org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr).phoneme",Parameter_4,phoneme,org.apache.commons.codec.language.bm.Rule$PhonemeExpr
org.apache.commons.codec.language.bm.Rule$Phoneme.append(CharSequence).sequence,Parameter_1,sequence,java.lang.CharSequence
org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(LanguageSet).lang,Parameter_1,lang,org.apache.commons.codec.language.bm.Languages$LanguageSet
"org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme).phonemeLeft",Parameter_1,phonemeLeft,org.apache.commons.codec.language.bm.Rule$Phoneme
"org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme).phonemeRight",Parameter_2,phonemeRight,org.apache.commons.codec.language.bm.Rule$Phoneme
org.apache.commons.codec.language.bm.Rule$PhonemeList.<init>(List).phonemes,Parameter_1,phonemes,java.util.List
org.apache.commons.codec.language.bm.Rule$RPattern.isMatch(CharSequence).input,Parameter_1,input,java.lang.CharSequence
org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(String).name,Parameter_1,name,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(Object).pObject,Parameter_1,pObject,java.lang.Object
org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(String).name,Parameter_1,name,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(String).name,Parameter_1,name,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int).sumLength,Parameter_1,sumLength,int
"org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(String,String).name1",Parameter_1,name1,java.lang.String
"org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(String,String).name2",Parameter_2,name2,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(String).letter,Parameter_1,letter,java.lang.String
"org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(String,String).name1",Parameter_1,name1,java.lang.String
"org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(String,String).name2",Parameter_2,name2,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(String).accentedWord,Parameter_1,accentedWord,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(String).name,Parameter_1,name,java.lang.String
org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(String).name,Parameter_1,name,java.lang.String
"org.apache.commons.codec.language.Soundex.difference(String,String).s1",Parameter_1,s1,java.lang.String
"org.apache.commons.codec.language.Soundex.difference(String,String).s2",Parameter_2,s2,java.lang.String
org.apache.commons.codec.language.Soundex.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.Soundex.encode(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.Soundex.hasMarker(char[]).mapping,Parameter_1,mapping,char[]
org.apache.commons.codec.language.Soundex.map(char).ch,Parameter_1,ch,char
org.apache.commons.codec.language.Soundex.setMaxLength(int).maxLength,Parameter_1,maxLength,int
org.apache.commons.codec.language.Soundex.soundex(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.Soundex.<init>(char[]).mapping,Parameter_1,mapping,char[]
org.apache.commons.codec.language.Soundex.<init>(String).mapping,Parameter_1,mapping,java.lang.String
"org.apache.commons.codec.language.Soundex.<init>(String,boolean).mapping",Parameter_1,mapping,java.lang.String
"org.apache.commons.codec.language.Soundex.<init>(String,boolean).specialCaseHW",Parameter_2,specialCaseHW,boolean
"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map).scanner",Parameter_1,scanner,java.util.Scanner
"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map).location",Parameter_2,location,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map).ruleMapping",Parameter_3,ruleMapping,java.util.Map
"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map).asciiFoldings",Parameter_4,asciiFoldings,java.util.Map
org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(String).input,Parameter_1,input,java.lang.String
org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(String).source,Parameter_1,source,java.lang.String
org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String).source,Parameter_1,source,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String,boolean).source",Parameter_1,source,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String,boolean).branching",Parameter_2,branching,boolean
org.apache.commons.codec.language.DaitchMokotoffSoundex.<init>(boolean).folding,Parameter_1,folding,boolean
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.equals(Object).other,Parameter_1,other,java.lang.Object
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(String,boolean).replacement",Parameter_1,replacement,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(String,boolean).forceAppend",Parameter_2,forceAppend,boolean
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(String,boolean).context",Parameter_1,context,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(String,boolean).atStart",Parameter_2,atStart,boolean
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.isVowel(char).ch,Parameter_1,ch,char
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.matches(String).context,Parameter_1,context,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String).pattern",Parameter_1,pattern,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String).replacementAtStart",Parameter_2,replacementAtStart,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String).replacementBeforeVowel",Parameter_3,replacementBeforeVowel,java.lang.String
"org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String).replacementDefault",Parameter_4,replacementDefault,java.lang.String
org.apache.commons.codec.language.Nysiis.isVowel(char).c,Parameter_1,c,char
"org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char).prev",Parameter_1,prev,char
"org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char).curr",Parameter_2,curr,char
"org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char).next",Parameter_3,next,char
"org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char).aNext",Parameter_4,aNext,char
org.apache.commons.codec.language.Nysiis.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.Nysiis.encode(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.Nysiis.nysiis(String).str,Parameter_1,str,java.lang.String
org.apache.commons.codec.language.Nysiis.<init>(boolean).strict,Parameter_1,strict,boolean
org.apache.commons.codec.language.Caverphone.caverphone(String).source,Parameter_1,source,java.lang.String
org.apache.commons.codec.language.Caverphone.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.language.Caverphone.encode(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(String,String).str1",Parameter_1,str1,java.lang.String
"org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(String,String).str2",Parameter_2,str2,java.lang.String
org.apache.commons.codec.language.Caverphone1.encode(String).source,Parameter_1,source,java.lang.String
org.apache.commons.codec.language.SoundexUtils.clean(String).str,Parameter_1,str,java.lang.String
"org.apache.commons.codec.language.SoundexUtils.difference(StringEncoder,String,String).encoder",Parameter_1,encoder,org.apache.commons.codec.StringEncoder
"org.apache.commons.codec.language.SoundexUtils.difference(StringEncoder,String,String).s1",Parameter_2,s1,java.lang.String
"org.apache.commons.codec.language.SoundexUtils.difference(StringEncoder,String,String).s2",Parameter_3,s2,java.lang.String
"org.apache.commons.codec.language.SoundexUtils.differenceEncoded(String,String).es1",Parameter_1,es1,java.lang.String
"org.apache.commons.codec.language.SoundexUtils.differenceEncoded(String,String).es2",Parameter_2,es2,java.lang.String
org.apache.commons.codec.language.SoundexUtils.isEmpty(CharSequence).cs,Parameter_1,cs,java.lang.CharSequence
org.apache.commons.codec.cli.Digest.main(String[]).args,Parameter_1,args,java.lang.String[]
"org.apache.commons.codec.cli.Digest.println(String,byte[]).prefix",Parameter_1,prefix,java.lang.String
"org.apache.commons.codec.cli.Digest.println(String,byte[]).digest",Parameter_2,digest,byte[]
"org.apache.commons.codec.cli.Digest.println(String,byte[],String).prefix",Parameter_1,prefix,java.lang.String
"org.apache.commons.codec.cli.Digest.println(String,byte[],String).digest",Parameter_2,digest,byte[]
"org.apache.commons.codec.cli.Digest.println(String,byte[],String).fileName",Parameter_3,fileName,java.lang.String
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest).prefix",Parameter_1,prefix,java.lang.String
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest).messageDigest",Parameter_2,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest,File[]).prefix",Parameter_1,prefix,java.lang.String
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest,File[]).messageDigest",Parameter_2,messageDigest,java.security.MessageDigest
"org.apache.commons.codec.cli.Digest.run(String,MessageDigest,File[]).files",Parameter_3,files,java.io.File[]
"org.apache.commons.codec.cli.Digest.run(String,String).prefix",Parameter_1,prefix,java.lang.String
"org.apache.commons.codec.cli.Digest.run(String,String).messageDigestAlgorithm",Parameter_2,messageDigestAlgorithm,java.lang.String
org.apache.commons.codec.cli.Digest.run(String[]).digestAlgorithms,Parameter_1,digestAlgorithms,java.lang.String[]
org.apache.commons.codec.cli.Digest.<init>(String[]).args,Parameter_1,args,java.lang.String[]
org.apache.commons.codec.Resources.getInputStream(String).name,Parameter_1,name,java.lang.String
org.apache.commons.codec.BinaryEncoder.encode(byte[]).source,Parameter_1,source,byte[]
"org.apache.commons.codec.StringEncoderComparator.compare(Object,Object).o1",Parameter_1,o1,java.lang.Object
"org.apache.commons.codec.StringEncoderComparator.compare(Object,Object).o2",Parameter_2,o2,java.lang.Object
org.apache.commons.codec.StringEncoderComparator.<init>(StringEncoder).stringEncoder,Parameter_1,stringEncoder,org.apache.commons.codec.StringEncoder
org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[]).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[]).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[]).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[]).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Base32.decodeTable(boolean).useHex,Parameter_1,useHex,boolean
org.apache.commons.codec.binary.Base32.encodeTable(boolean).useHex,Parameter_1,useHex,boolean
"org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context).input",Parameter_1,input,byte[]
"org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context).inPos",Parameter_2,inPos,int
"org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context).inAvail",Parameter_3,inAvail,int
"org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
"org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context).input",Parameter_1,input,byte[]
"org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context).inPos",Parameter_2,inPos,int
"org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context).inAvail",Parameter_3,inAvail,int
"org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base32.isInAlphabet(byte).octet,Parameter_1,octet,byte
"org.apache.commons.codec.binary.Base32.validateCharacter(long,Context).emptyBitsMask",Parameter_1,emptyBitsMask,long
"org.apache.commons.codec.binary.Base32.validateCharacter(long,Context).context",Parameter_2,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base32.<init>(boolean).useHex,Parameter_1,useHex,boolean
"org.apache.commons.codec.binary.Base32.<init>(boolean,byte).useHex",Parameter_1,useHex,boolean
"org.apache.commons.codec.binary.Base32.<init>(boolean,byte).padding",Parameter_2,padding,byte
org.apache.commons.codec.binary.Base32.<init>(byte).pad,Parameter_1,pad,byte
org.apache.commons.codec.binary.Base32.<init>(int).lineLength,Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[]).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[]).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean).useHex",Parameter_3,useHex,boolean
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte).useHex",Parameter_3,useHex,boolean
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte).padding",Parameter_4,padding,byte
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy).useHex",Parameter_3,useHex,boolean
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy).padding",Parameter_4,padding,byte
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy).encodeTable",Parameter_3,encodeTable,byte[]
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy).padding",Parameter_4,padding,byte
"org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Base32$Builder.setHexDecodeTable(boolean).useHex,Parameter_1,useHex,boolean
org.apache.commons.codec.binary.Base32$Builder.setHexEncodeTable(boolean).useHex,Parameter_1,useHex,boolean
"org.apache.commons.codec.binary.StringUtils.equals(CharSequence,CharSequence).cs1",Parameter_1,cs1,java.lang.CharSequence
"org.apache.commons.codec.binary.StringUtils.equals(CharSequence,CharSequence).cs2",Parameter_2,cs2,java.lang.CharSequence
"org.apache.commons.codec.binary.StringUtils.getByteBuffer(String,Charset).string",Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.getByteBuffer(String,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.getBytes(String,Charset).string",Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.getBytes(String,Charset).charset",Parameter_2,charset,java.nio.charset.Charset
org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(String,String).string",Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(String,String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(String).string,Parameter_1,string,java.lang.String
org.apache.commons.codec.binary.StringUtils.getBytesUtf16(String).string,Parameter_1,string,java.lang.String
org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(String).string,Parameter_1,string,java.lang.String
org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(String).string,Parameter_1,string,java.lang.String
org.apache.commons.codec.binary.StringUtils.getBytesUtf8(String).string,Parameter_1,string,java.lang.String
"org.apache.commons.codec.binary.StringUtils.newIllegalStateException(String,UnsupportedEncodingException).charsetName",Parameter_1,charsetName,java.lang.String
"org.apache.commons.codec.binary.StringUtils.newIllegalStateException(String,UnsupportedEncodingException).e",Parameter_2,e,java.io.UnsupportedEncodingException
"org.apache.commons.codec.binary.StringUtils.newString(byte[],Charset).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.codec.binary.StringUtils.newString(byte[],Charset).charset",Parameter_2,charset,java.nio.charset.Charset
"org.apache.commons.codec.binary.StringUtils.newString(byte[],String).bytes",Parameter_1,bytes,byte[]
"org.apache.commons.codec.binary.StringUtils.newString(byte[],String).charsetName",Parameter_2,charsetName,java.lang.String
org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]).bytes,Parameter_1,bytes,byte[]
org.apache.commons.codec.binary.Base64.decodeBase64(byte[]).base64Data,Parameter_1,base64Data,byte[]
org.apache.commons.codec.binary.Base64.decodeBase64(String).base64String,Parameter_1,base64String,java.lang.String
org.apache.commons.codec.binary.Base64.decodeInteger(byte[]).pArray,Parameter_1,pArray,byte[]
org.apache.commons.codec.binary.Base64.encodeBase64(byte[]).binaryData,Parameter_1,binaryData,byte[]
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean).binaryData",Parameter_1,binaryData,byte[]
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean).isChunked",Parameter_2,isChunked,boolean
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean).binaryData",Parameter_1,binaryData,byte[]
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean).isChunked",Parameter_2,isChunked,boolean
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean).urlSafe",Parameter_3,urlSafe,boolean
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int).binaryData",Parameter_1,binaryData,byte[]
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int).isChunked",Parameter_2,isChunked,boolean
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int).urlSafe",Parameter_3,urlSafe,boolean
"org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int).maxResultSize",Parameter_4,maxResultSize,int
org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[]).binaryData,Parameter_1,binaryData,byte[]
org.apache.commons.codec.binary.Base64.encodeBase64String(byte[]).binaryData,Parameter_1,binaryData,byte[]
org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[]).binaryData,Parameter_1,binaryData,byte[]
org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[]).binaryData,Parameter_1,binaryData,byte[]
org.apache.commons.codec.binary.Base64.encodeInteger(BigInteger).bigInteger,Parameter_1,bigInteger,java.math.BigInteger
org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[]).arrayOctet,Parameter_1,arrayOctet,byte[]
org.apache.commons.codec.binary.Base64.isBase64(byte).octet,Parameter_1,octet,byte
org.apache.commons.codec.binary.Base64.isBase64(byte[]).arrayOctet,Parameter_1,arrayOctet,byte[]
org.apache.commons.codec.binary.Base64.isBase64(String).base64,Parameter_1,base64,java.lang.String
org.apache.commons.codec.binary.Base64.toIntegerBytes(BigInteger).bigInt,Parameter_1,bigInt,java.math.BigInteger
org.apache.commons.codec.binary.Base64.toUrlSafeEncodeTable(boolean).urlSafe,Parameter_1,urlSafe,boolean
org.apache.commons.codec.binary.Base64.calculateDecodeTable(byte[]).encodeTable,Parameter_1,encodeTable,byte[]
"org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context).input",Parameter_1,input,byte[]
"org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context).inPos",Parameter_2,inPos,int
"org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context).inAvail",Parameter_3,inAvail,int
"org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
"org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context).in",Parameter_1,in,byte[]
"org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context).inPos",Parameter_2,inPos,int
"org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context).inAvail",Parameter_3,inAvail,int
"org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base64.isInAlphabet(byte).octet,Parameter_1,octet,byte
"org.apache.commons.codec.binary.Base64.validateCharacter(int,Context).emptyBitsMask",Parameter_1,emptyBitsMask,int
"org.apache.commons.codec.binary.Base64.validateCharacter(int,Context).context",Parameter_2,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base64.<init>(boolean).urlSafe,Parameter_1,urlSafe,boolean
org.apache.commons.codec.binary.Base64.<init>(int).lineLength,Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base64.<init>(int,byte[]).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base64.<init>(int,byte[]).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean).urlSafe",Parameter_3,urlSafe,boolean
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy).urlSafe",Parameter_3,urlSafe,boolean
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy).decodingPolicy",Parameter_4,decodingPolicy,org.apache.commons.codec.CodecPolicy
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy).lineLength",Parameter_1,lineLength,int
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy).lineSeparator",Parameter_2,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy).padding",Parameter_3,padding,byte
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy).encodeTable",Parameter_4,encodeTable,byte[]
"org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Base64$Builder.setUrlSafe(boolean).urlSafe,Parameter_1,urlSafe,boolean
org.apache.commons.codec.binary.BaseNCodec.createPositiveCapacity(int).minCapacity,Parameter_1,minCapacity,int
org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte).byteToCheck,Parameter_1,byteToCheck,byte
"org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(Context,int).context",Parameter_1,context,org.apache.commons.codec.binary.BaseNCodec$Context
"org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(Context,int).minCapacity",Parameter_2,minCapacity,int
org.apache.commons.codec.binary.BaseNCodec.toLength(byte[]).array,Parameter_1,array,byte[]
org.apache.commons.codec.binary.BaseNCodec.available(Context).context,Parameter_1,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[]).arrayOctet,Parameter_1,arrayOctet,byte[]
org.apache.commons.codec.binary.BaseNCodec.decode(byte[]).pArray,Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,Context).pArray",Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,Context).i",Parameter_2,i,int
"org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,Context).length",Parameter_3,length,int
"org.apache.commons.codec.binary.BaseNCodec.decode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.BaseNCodec.decode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.binary.BaseNCodec.decode(String).pArray,Parameter_1,pArray,java.lang.String
org.apache.commons.codec.binary.BaseNCodec.encode(byte[]).pArray,Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int).pArray",Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int).length",Parameter_3,length,int
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,Context).pArray",Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,Context).i",Parameter_2,i,int
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,Context).length",Parameter_3,length,int
"org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.BaseNCodec.encode(Object).obj,Parameter_1,obj,java.lang.Object
org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[]).pArray,Parameter_1,pArray,byte[]
org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[]).pArray,Parameter_1,pArray,byte[]
"org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,Context).size",Parameter_1,size,int
"org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,Context).context",Parameter_2,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[]).pArray,Parameter_1,pArray,byte[]
org.apache.commons.codec.binary.BaseNCodec.hasData(Context).context,Parameter_1,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte).value,Parameter_1,value,byte
"org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean).arrayOctet",Parameter_1,arrayOctet,byte[]
"org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean).allowWSPad",Parameter_2,allowWSPad,boolean
org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(String).basen,Parameter_1,basen,java.lang.String
"org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context).b",Parameter_1,b,byte[]
"org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context).bPos",Parameter_2,bPos,int
"org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context).bAvail",Parameter_3,bAvail,int
"org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int).unencodedBlockSize",Parameter_1,unencodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int).encodedBlockSize",Parameter_2,encodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int).chunkSeparatorLength",Parameter_4,chunkSeparatorLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte).unencodedBlockSize",Parameter_1,unencodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte).encodedBlockSize",Parameter_2,encodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte).chunkSeparatorLength",Parameter_4,chunkSeparatorLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte).pad",Parameter_5,pad,byte
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).unencodedBlockSize",Parameter_1,unencodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).encodedBlockSize",Parameter_2,encodedBlockSize,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).chunkSeparatorLength",Parameter_4,chunkSeparatorLength,int
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).pad",Parameter_5,pad,byte
"org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy).decodingPolicy",Parameter_6,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setDecodingPolicy(CodecPolicy).decodingPolicy,Parameter_1,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setEncodeTable(byte[]).encodeTable,Parameter_1,encodeTable,byte[]
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineLength(int).lineLength,Parameter_1,lineLength,int
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineSeparator(byte[]).lineSeparator,Parameter_1,lineSeparator,byte[]
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setPadding(byte).padding,Parameter_1,padding,byte
org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.<init>(byte[]).defaultEncodeTable,Parameter_1,defaultEncodeTable,byte[]
org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean).lowerCase",Parameter_3,lowerCase,boolean
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy).lowerCase",Parameter_3,lowerCase,boolean
"org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy).decodingPolicy",Parameter_4,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[]).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[]).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[]).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[]).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Hex.decodeHex(char[]).data,Parameter_1,data,char[]
"org.apache.commons.codec.binary.Hex.decodeHex(char[],byte[],int).data",Parameter_1,data,char[]
"org.apache.commons.codec.binary.Hex.decodeHex(char[],byte[],int).out",Parameter_2,out,byte[]
"org.apache.commons.codec.binary.Hex.decodeHex(char[],byte[],int).outOffset",Parameter_3,outOffset,int
org.apache.commons.codec.binary.Hex.decodeHex(String).data,Parameter_1,data,java.lang.String
org.apache.commons.codec.binary.Hex.encodeHex(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean).toLowerCase",Parameter_2,toLowerCase,boolean
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[]).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[]).toDigits",Parameter_2,toDigits,char[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean).dataOffset",Parameter_2,dataOffset,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean).dataLen",Parameter_3,dataLen,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean).toLowerCase",Parameter_4,toLowerCase,boolean
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).dataOffset",Parameter_2,dataOffset,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).dataLen",Parameter_3,dataLen,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).toLowerCase",Parameter_4,toLowerCase,boolean
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).out",Parameter_5,out,char[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int).outOffset",Parameter_6,outOffset,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).dataOffset",Parameter_2,dataOffset,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).dataLen",Parameter_3,dataLen,int
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).toDigits",Parameter_4,toDigits,char[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).out",Parameter_5,out,char[]
"org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int).outOffset",Parameter_6,outOffset,int
org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer).data,Parameter_1,data,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,boolean).data",Parameter_1,data,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,boolean).toLowerCase",Parameter_2,toLowerCase,boolean
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,char[]).byteBuffer",Parameter_1,byteBuffer,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,char[]).toDigits",Parameter_2,toDigits,char[]
org.apache.commons.codec.binary.Hex.encodeHexString(byte[]).data,Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHexString(byte[],boolean).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Hex.encodeHexString(byte[],boolean).toLowerCase",Parameter_2,toLowerCase,boolean
org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer).data,Parameter_1,data,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer,boolean).data",Parameter_1,data,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer,boolean).toLowerCase",Parameter_2,toLowerCase,boolean
org.apache.commons.codec.binary.Hex.toAlphabet(boolean).toLowerCase,Parameter_1,toLowerCase,boolean
org.apache.commons.codec.binary.Hex.toByteArray(ByteBuffer).byteBuffer,Parameter_1,byteBuffer,java.nio.ByteBuffer
"org.apache.commons.codec.binary.Hex.toDigit(char,int).ch",Parameter_1,ch,char
"org.apache.commons.codec.binary.Hex.toDigit(char,int).index",Parameter_2,index,int
org.apache.commons.codec.binary.Hex.decode(byte[]).array,Parameter_1,array,byte[]
org.apache.commons.codec.binary.Hex.decode(ByteBuffer).buffer,Parameter_1,buffer,java.nio.ByteBuffer
org.apache.commons.codec.binary.Hex.decode(Object).object,Parameter_1,object,java.lang.Object
org.apache.commons.codec.binary.Hex.encode(byte[]).array,Parameter_1,array,byte[]
org.apache.commons.codec.binary.Hex.encode(ByteBuffer).array,Parameter_1,array,java.nio.ByteBuffer
org.apache.commons.codec.binary.Hex.encode(Object).object,Parameter_1,object,java.lang.Object
org.apache.commons.codec.binary.Hex.<init>(Charset).charset,Parameter_1,charset,java.nio.charset.Charset
org.apache.commons.codec.binary.Hex.<init>(String).charsetName,Parameter_1,charsetName,java.lang.String
org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean).propagate,Parameter_1,propagate,boolean
"org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int).array",Parameter_1,array,byte[]
"org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.codec.binary.BaseNCodecOutputStream.write(int).i,Parameter_1,i,int
"org.apache.commons.codec.binary.BaseNCodecOutputStream.<init>(OutputStream,BaseNCodec,boolean).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.BaseNCodecOutputStream.<init>(OutputStream,BaseNCodec,boolean).basedCodec",Parameter_2,basedCodec,org.apache.commons.codec.binary.BaseNCodec
"org.apache.commons.codec.binary.BaseNCodecOutputStream.<init>(OutputStream,BaseNCodec,boolean).doEncode",Parameter_3,doEncode,boolean
org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream).inputStream,Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[]).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[]).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[]).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[]).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[]).ascii,Parameter_1,ascii,byte[]
org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[]).ascii,Parameter_1,ascii,char[]
org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[]).array,Parameter_1,array,byte[]
org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[]).raw,Parameter_1,raw,byte[]
org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[]).raw,Parameter_1,raw,byte[]
org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[]).raw,Parameter_1,raw,byte[]
org.apache.commons.codec.binary.BinaryCodec.decode(byte[]).ascii,Parameter_1,ascii,byte[]
org.apache.commons.codec.binary.BinaryCodec.decode(Object).ascii,Parameter_1,ascii,java.lang.Object
org.apache.commons.codec.binary.BinaryCodec.encode(byte[]).raw,Parameter_1,raw,byte[]
org.apache.commons.codec.binary.BinaryCodec.encode(Object).raw,Parameter_1,raw,java.lang.Object
org.apache.commons.codec.binary.BinaryCodec.toByteArray(String).ascii,Parameter_1,ascii,java.lang.String
"org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context).offset",Parameter_2,offset,int
"org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context).length",Parameter_3,length,int
"org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base16.decodeOctet(byte).octet,Parameter_1,octet,byte
"org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context).data",Parameter_1,data,byte[]
"org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context).offset",Parameter_2,offset,int
"org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context).length",Parameter_3,length,int
"org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context).context",Parameter_4,context,org.apache.commons.codec.binary.BaseNCodec$Context
org.apache.commons.codec.binary.Base16.isInAlphabet(byte).octet,Parameter_1,octet,byte
org.apache.commons.codec.binary.Base16.<init>(boolean).lowerCase,Parameter_1,lowerCase,boolean
"org.apache.commons.codec.binary.Base16.<init>(boolean,byte[],CodecPolicy).lowerCase",Parameter_1,lowerCase,boolean
"org.apache.commons.codec.binary.Base16.<init>(boolean,byte[],CodecPolicy).encodeTable",Parameter_2,encodeTable,byte[]
"org.apache.commons.codec.binary.Base16.<init>(boolean,byte[],CodecPolicy).decodingPolicy",Parameter_3,decodingPolicy,org.apache.commons.codec.CodecPolicy
"org.apache.commons.codec.binary.Base16.<init>(boolean,CodecPolicy).lowerCase",Parameter_1,lowerCase,boolean
"org.apache.commons.codec.binary.Base16.<init>(boolean,CodecPolicy).decodingPolicy",Parameter_2,decodingPolicy,org.apache.commons.codec.CodecPolicy
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).cs",Parameter_1,cs,java.lang.CharSequence
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).ignoreCase",Parameter_2,ignoreCase,boolean
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).thisStart",Parameter_3,thisStart,int
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).substring",Parameter_4,substring,java.lang.CharSequence
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).start",Parameter_5,start,int
"org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int).length",Parameter_6,length,int
org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int).readLimit,Parameter_1,readLimit,int
"org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int).array",Parameter_1,array,byte[]
"org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int).offset",Parameter_2,offset,int
"org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int).len",Parameter_3,len,int
org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long).n,Parameter_1,n,long
"org.apache.commons.codec.binary.BaseNCodecInputStream.<init>(InputStream,BaseNCodec,boolean).inputStream",Parameter_1,inputStream,java.io.InputStream
"org.apache.commons.codec.binary.BaseNCodecInputStream.<init>(InputStream,BaseNCodec,boolean).baseNCodec",Parameter_2,baseNCodec,org.apache.commons.codec.binary.BaseNCodec
"org.apache.commons.codec.binary.BaseNCodecInputStream.<init>(InputStream,BaseNCodec,boolean).doEncode",Parameter_3,doEncode,boolean
org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[]).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[]).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[]).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[]).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).lineLength",Parameter_3,lineLength,int
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).lineSeparator",Parameter_4,lineSeparator,byte[]
"org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy).decodingPolicy",Parameter_5,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream).outputStream,Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean).lowerCase",Parameter_3,lowerCase,boolean
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy).outputStream",Parameter_1,outputStream,java.io.OutputStream
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy).doEncode",Parameter_2,doEncode,boolean
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy).lowerCase",Parameter_3,lowerCase,boolean
"org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy).decodingPolicy",Parameter_4,decodingPolicy,org.apache.commons.codec.CodecPolicy
org.apache.commons.codec.Encoder.encode(Object).source,Parameter_1,source,java.lang.Object
org.apache.commons.codec.StringEncoder.encode(String).source,Parameter_1,source,java.lang.String
