package_name,class_name,method_name,method_signature,method_FEN,missed_instr,covered_instr,percentage_instr,missed_branches,covered_branches,percentage_branches,complexity,missed_lines,covered_lines,percentage_lines,missed_methods,covered_methods,percentage_methods
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,<init>,() → void,org.apache.commons.codec.language.MatchRatingApproachEncoder.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,cleanName,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(String),0,57,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(Object),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.encode(String),4,46,0.92,4,12,0.75,9,2,8,0.8,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,getFirst3Last3,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(String),0,29,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,getMinRating,(int) → int,org.apache.commons.codec.language.MatchRatingApproachEncoder.getMinRating(int),20,10,0.3333333333333333,7,1,0.125,5,7,4,0.36363636363636365,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,isEncodeEquals,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(String,String)",1,104,0.9904761904761905,1,21,0.9545454545454546,12,0,22,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,isVowel,(java.lang.String) → boolean,org.apache.commons.codec.language.MatchRatingApproachEncoder.isVowel(String),0,24,1.0,2,8,0.8,6,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,leftToRightThenRightToLeftProcessing,"(java.lang.String, java.lang.String) → int","org.apache.commons.codec.language.MatchRatingApproachEncoder.leftToRightThenRightToLeftProcessing(String,String)",27,106,0.7969924812030075,4,6,0.6,6,6,20,0.7692307692307693,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,removeAccents,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.removeAccents(String),9,34,0.7906976744186046,2,4,0.6666666666666666,4,2,9,0.8181818181818182,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,removeDoubleConsonants,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.removeDoubleConsonants(String),0,36,1.0,0,4,1.0,3,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,removeVowels,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.MatchRatingApproachEncoder.removeVowels(String),0,50,1.0,0,2,1.0,2,0,10,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/MatchRatingApproachEncoder,<clinit>,() → void,org.apache.commons.codec.language.MatchRatingApproachEncoder.<clinit>(),0,88,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,arrayContains,"(char[], char) → boolean","org.apache.commons.codec.language.ColognePhonetic.arrayContains(char[],char)",0,23,1.0,0,4,1.0,3,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,<init>,() → void,org.apache.commons.codec.language.ColognePhonetic.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,colognePhonetic,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.ColognePhonetic.colognePhonetic(String),84,102,0.5483870967741935,31,22,0.41509433962264153,29,21,27,0.5625,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.ColognePhonetic.encode(Object),0,29,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.ColognePhonetic.encode(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,isEncodeEqual,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.ColognePhonetic.isEncodeEqual(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,preprocess,(java.lang.String) → char[],org.apache.commons.codec.language.ColognePhonetic.preprocess(String),15,19,0.5588235294117647,3,3,0.5,5,6,4,0.4,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic,<clinit>,() → void,org.apache.commons.codec.language.ColognePhonetic.<clinit>(),0,192,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,contains,"(java.lang.String, int, int, java.lang.String[]) → boolean","org.apache.commons.codec.language.DoubleMetaphone.contains(String,int,int,String[])",0,42,1.0,0,8,1.0,5,0,8,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,<init>,() → void,org.apache.commons.codec.language.DoubleMetaphone.<init>(),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,charAt,"(java.lang.String, int) → char","org.apache.commons.codec.language.DoubleMetaphone.charAt(String,int)",0,12,1.0,1,3,0.75,3,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,cleanInput,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DoubleMetaphone.cleanInput(String),4,12,0.75,2,2,0.5,3,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,conditionC0,"(java.lang.String, int) → boolean","org.apache.commons.codec.language.DoubleMetaphone.conditionC0(String,int)",9,69,0.8846153846153846,6,8,0.5714285714285714,8,2,9,0.8181818181818182,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,conditionCH0,"(java.lang.String, int) → boolean","org.apache.commons.codec.language.DoubleMetaphone.conditionCH0(String,int)",2,61,0.9682539682539683,2,6,0.75,5,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,conditionCH1,"(java.lang.String, int) → boolean","org.apache.commons.codec.language.DoubleMetaphone.conditionCH1(String,int)",0,111,1.0,4,12,0.75,9,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,conditionL0,"(java.lang.String, int) → boolean","org.apache.commons.codec.language.DoubleMetaphone.conditionL0(String,int)",4,78,0.9512195121951219,2,8,0.8,6,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,conditionM0,"(java.lang.String, int) → boolean","org.apache.commons.codec.language.DoubleMetaphone.conditionM0(String,int)",25,23,0.4791666666666667,6,2,0.25,5,1,3,0.75,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,doubleMetaphone,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,doubleMetaphone,"(java.lang.String, boolean) → java.lang.String","org.apache.commons.codec.language.DoubleMetaphone.doubleMetaphone(String,boolean)",141,158,0.5284280936454849,25,23,0.4791666666666667,36,29,37,0.5606060606060606,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.DoubleMetaphone.encode(Object),0,13,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DoubleMetaphone.encode(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,getMaxCodeLen,() → int,org.apache.commons.codec.language.DoubleMetaphone.getMaxCodeLen(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleAEIOUY,"(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleAEIOUY(DoubleMetaphoneResult,int)",0,9,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleC,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleC(String,DoubleMetaphoneResult,int)",261,0,0.0,32,0,0.0,17,34,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleCC,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleCC(String,DoubleMetaphoneResult,int)",77,0,0.0,10,0,0.0,6,10,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleCH,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleCH(String,DoubleMetaphoneResult,int)",74,0,0.0,12,0,0.0,7,15,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleD,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleD(String,DoubleMetaphoneResult,int)",10,58,0.8529411764705882,2,4,0.6666666666666666,4,4,8,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleG,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int, boolean) → int","org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean)",148,170,0.5345911949685535,36,14,0.28,26,22,18,0.45,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleGH,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleGH(String,DoubleMetaphoneResult,int)",124,41,0.24848484848484848,25,5,0.16666666666666666,16,14,5,0.2631578947368421,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleH,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleH(String,DoubleMetaphoneResult,int)",9,19,0.6785714285714286,3,3,0.5,4,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleJ,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int, boolean) → int","org.apache.commons.codec.language.DoubleMetaphone.handleJ(String,DoubleMetaphoneResult,int,boolean)",163,0,0.0,32,0,0.0,17,20,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleL,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleL(String,DoubleMetaphoneResult,int)",4,24,0.8571428571428571,1,3,0.75,3,1,7,0.875,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleP,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleP(String,DoubleMetaphoneResult,int)",43,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleR,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int, boolean) → int","org.apache.commons.codec.language.DoubleMetaphone.handleR(String,DoubleMetaphoneResult,int,boolean)",40,21,0.3442622950819672,8,2,0.2,6,3,3,0.5,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleS,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int, boolean) → int","org.apache.commons.codec.language.DoubleMetaphone.handleS(String,DoubleMetaphoneResult,int,boolean)",103,159,0.6068702290076335,17,15,0.46875,17,12,14,0.5384615384615384,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleSC,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleSC(String,DoubleMetaphoneResult,int)",33,90,0.7317073170731707,9,5,0.35714285714285715,8,5,7,0.5833333333333334,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleT,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleT(String,DoubleMetaphoneResult,int)",13,123,0.9044117647058824,7,9,0.5625,9,3,10,0.7692307692307693,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleW,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleW(String,DoubleMetaphoneResult,int)",64,73,0.5328467153284672,14,6,0.3,11,11,8,0.42105263157894735,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleX,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int) → int","org.apache.commons.codec.language.DoubleMetaphone.handleX(String,DoubleMetaphoneResult,int)",43,34,0.44155844155844154,7,3,0.3,6,4,5,0.5555555555555556,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,handleZ,"(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult, int, boolean) → int","org.apache.commons.codec.language.DoubleMetaphone.handleZ(String,DoubleMetaphoneResult,int,boolean)",17,55,0.7638888888888888,5,7,0.5833333333333334,7,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,isDoubleMetaphoneEqual,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,isDoubleMetaphoneEqual,"(java.lang.String, java.lang.String, boolean) → boolean","org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,isSilentStart,(java.lang.String) → boolean,org.apache.commons.codec.language.DoubleMetaphone.isSilentStart(String),3,24,0.8888888888888888,1,3,0.75,3,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,isSlavoGermanic,(java.lang.String) → boolean,org.apache.commons.codec.language.DoubleMetaphone.isSlavoGermanic(String),0,22,1.0,3,5,0.625,5,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,isVowel,(char) → boolean,org.apache.commons.codec.language.DoubleMetaphone.isVowel(char),0,9,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,setMaxCodeLen,(int) → void,org.apache.commons.codec.language.DoubleMetaphone.setMaxCodeLen(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone,<clinit>,() → void,org.apache.commons.codec.language.DoubleMetaphone.<clinit>(),0,149,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,<init>,() → void,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.<init>(),0,14,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,createBranch,() → org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.createBranch(),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,equals,(java.lang.Object) → boolean,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.equals(Object),17,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,finish,() → void,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.finish(),0,15,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,hashCode,() → int,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.hashCode(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,processNextReplacement,"(java.lang.String, boolean) → void","org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(String,boolean)",8,38,0.8260869565217391,3,9,0.75,7,1,7,0.875,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Branch,toString,() → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch.toString(),0,11,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,<init>,() → void,org.apache.commons.codec.language.Soundex.<init>(),0,12,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,<init>,(char[]) → void,org.apache.commons.codec.language.Soundex.<init>(char[]),21,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,<init>,(java.lang.String) → void,org.apache.commons.codec.language.Soundex.<init>(String),2,18,0.9,1,1,0.5,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,<init>,"(java.lang.String, boolean) → void","org.apache.commons.codec.language.Soundex.<init>(String,boolean)",0,13,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,difference,"(java.lang.String, java.lang.String) → int","org.apache.commons.codec.language.Soundex.difference(String,String)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.Soundex.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Soundex.encode(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,getMaxLength,() → int,org.apache.commons.codec.language.Soundex.getMaxLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,hasMarker,(char[]) → boolean,org.apache.commons.codec.language.Soundex.hasMarker(char[]),4,19,0.8260869565217391,2,2,0.5,3,1,3,0.75,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,map,(char) → char,org.apache.commons.codec.language.Soundex.map(char),0,34,1.0,0,4,1.0,3,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,setMaxLength,(int) → void,org.apache.commons.codec.language.Soundex.setMaxLength(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,soundex,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Soundex.soundex(String),1,97,0.9897959183673469,1,19,0.95,11,1,20,0.9523809523809523,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Soundex,<clinit>,() → void,org.apache.commons.codec.language.Soundex.<clinit>(),0,19,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/AbstractCaverphone,<init>,() → void,org.apache.commons.codec.language.AbstractCaverphone.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/AbstractCaverphone,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.AbstractCaverphone.encode(Object),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/AbstractCaverphone,isEncodeEqual,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.AbstractCaverphone.isEncodeEqual(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,parseRules,"(java.util.Scanner, java.lang.String, java.util.Map, java.util.Map) → void","org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(Scanner,String,Map,Map)",76,142,0.6513761467889908,4,18,0.8181818181818182,12,5,38,0.8837209302325582,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,stripQuotes,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(String),0,22,1.0,2,2,0.5,3,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,<init>,() → void,org.apache.commons.codec.language.DaitchMokotoffSoundex.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,<init>,(boolean) → void,org.apache.commons.codec.language.DaitchMokotoffSoundex.<init>(boolean),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,cleanup,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex.cleanup(String),4,49,0.9245283018867925,3,7,0.7,6,1,10,0.9090909090909091,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex.encode(String),0,11,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,soundex,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,soundex,"(java.lang.String, boolean) → java.lang.String[]","org.apache.commons.codec.language.DaitchMokotoffSoundex.soundex(String,boolean)",31,171,0.8465346534653465,15,27,0.6428571428571429,22,7,37,0.8409090909090909,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,lambda$parseRules$2,(java.lang.Character) → java.util.List,org.apache.commons.codec.language.DaitchMokotoffSoundex.lambda$parseRules$2(Character),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,lambda$static$1,"(java.lang.Character, java.util.List) → void","org.apache.commons.codec.language.DaitchMokotoffSoundex.lambda$static$1(Character,List)",0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,lambda$null$0,"(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule, org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule) → int","org.apache.commons.codec.language.DaitchMokotoffSoundex.lambda$null$0(Rule,Rule)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex,<clinit>,() → void,org.apache.commons.codec.language.DaitchMokotoffSoundex.<clinit>(),0,26,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,isVowel,(char) → boolean,org.apache.commons.codec.language.Nysiis.isVowel(char),0,19,1.0,2,8,0.8,6,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,transcodeRemaining,"(char, char, char, char) → char[]","org.apache.commons.codec.language.Nysiis.transcodeRemaining(char,char,char,char)",41,42,0.5060240963855421,21,12,0.36363636363636365,19,10,10,0.5,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,<init>,() → void,org.apache.commons.codec.language.Nysiis.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,<init>,(boolean) → void,org.apache.commons.codec.language.Nysiis.<init>(boolean),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.Nysiis.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Nysiis.encode(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,isStrict,() → boolean,org.apache.commons.codec.language.Nysiis.isStrict(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,nysiis,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Nysiis.nysiis(String),36,181,0.8341013824884793,10,16,0.6153846153846154,14,6,30,0.8333333333333334,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Nysiis,<clinit>,() → void,org.apache.commons.codec.language.Nysiis.<clinit>(),0,105,1.0,0,0,coverage not available since no branches,1,0,16,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,<init>,() → void,org.apache.commons.codec.language.RefinedSoundex.<init>(),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,<init>,(char[]) → void,org.apache.commons.codec.language.RefinedSoundex.<init>(char[]),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,<init>,(java.lang.String) → void,org.apache.commons.codec.language.RefinedSoundex.<init>(String),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,difference,"(java.lang.String, java.lang.String) → int","org.apache.commons.codec.language.RefinedSoundex.difference(String,String)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.RefinedSoundex.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.RefinedSoundex.encode(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,getMappingCode,(char) → char,org.apache.commons.codec.language.RefinedSoundex.getMappingCode(char),0,24,1.0,1,5,0.8333333333333334,4,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,soundex,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.RefinedSoundex.soundex(String),0,53,1.0,1,9,0.9,6,0,16,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/RefinedSoundex,<clinit>,() → void,org.apache.commons.codec.language.RefinedSoundex.<clinit>(),0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneBuffer,<init>,(char[]) → void,org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(char[]),0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneBuffer,<init>,(int) → void,org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.<init>(int),0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneBuffer,isEmpty,() → boolean,org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.isEmpty(),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneBuffer,length,() → int,org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.length(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneBuffer,toString,() → java.lang.String,org.apache.commons.codec.language.ColognePhonetic$CologneBuffer.toString(),0,9,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,<init>,() → void,org.apache.commons.codec.language.Metaphone.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.Metaphone.encode(Object),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Metaphone.encode(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,getMaxCodeLen,() → int,org.apache.commons.codec.language.Metaphone.getMaxCodeLen(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,isLastChar,"(int, int) → boolean","org.apache.commons.codec.language.Metaphone.isLastChar(int,int)",9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,isMetaphoneEqual,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.Metaphone.isMetaphoneEqual(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,isNextChar,"(java.lang.StringBuilder, int, char) → boolean","org.apache.commons.codec.language.Metaphone.isNextChar(StringBuilder,int,char)",23,0,0.0,6,0,0.0,4,4,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,isPreviousChar,"(java.lang.StringBuilder, int, char) → boolean","org.apache.commons.codec.language.Metaphone.isPreviousChar(StringBuilder,int,char)",21,0,0.0,6,0,0.0,4,4,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,isVowel,"(java.lang.StringBuilder, int) → boolean","org.apache.commons.codec.language.Metaphone.isVowel(StringBuilder,int)",10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,metaphone,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Metaphone.metaphone(String),578,0,0.0,136,0,0.0,78,118,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,regionMatch,"(java.lang.StringBuilder, int, java.lang.String) → boolean","org.apache.commons.codec.language.Metaphone.regionMatch(StringBuilder,int,String)",27,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Metaphone,setMaxCodeLen,(int) → void,org.apache.commons.codec.language.Metaphone.setMaxCodeLen(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/SoundexUtils,<init>,() → void,org.apache.commons.codec.language.SoundexUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/SoundexUtils,clean,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.SoundexUtils.clean(String),0,48,1.0,0,8,1.0,5,0,11,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/SoundexUtils,difference,"(org.apache.commons.codec.StringEncoder, java.lang.String, java.lang.String) → int","org.apache.commons.codec.language.SoundexUtils.difference(StringEncoder,String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/SoundexUtils,differenceEncoded,"(java.lang.String, java.lang.String) → int","org.apache.commons.codec.language.SoundexUtils.differenceEncoded(String,String)",31,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/SoundexUtils,isEmpty,(java.lang.CharSequence) → boolean,org.apache.commons.codec.language.SoundexUtils.isEmpty(CharSequence),0,9,1.0,1,3,0.75,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone,<init>,() → void,org.apache.commons.codec.language.Caverphone.<init>(),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone,caverphone,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Caverphone.caverphone(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.Caverphone.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Caverphone.encode(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone,isCaverphoneEqual,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.codec.language.Caverphone.isCaverphoneEqual(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,<init>,"(org.apache.commons.codec.language.DoubleMetaphone, int) → void","org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.<init>(DoubleMetaphone,int)",0,25,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,append,(char) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,append,"(char, char) → void","org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char,char)",0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,append,(java.lang.String) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,append,"(java.lang.String, java.lang.String) → void","org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,appendAlternate,(char) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char),0,12,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,appendAlternate,(java.lang.String) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(String),0,25,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,appendPrimary,(char) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char),0,12,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,appendPrimary,(java.lang.String) → void,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(String),0,25,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,getAlternate,() → java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,getPrimary,() → java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult,isComplete,() → boolean,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete(),0,16,1.0,1,3,0.75,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone2,<init>,() → void,org.apache.commons.codec.language.Caverphone2.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone2,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Caverphone2.encode(String),304,7,0.022508038585209004,1,1,0.5,2,60,3,0.047619047619047616,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneInputBuffer,<init>,"(org.apache.commons.codec.language.ColognePhonetic, char[]) → void","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.<init>(ColognePhonetic,char[])",0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneInputBuffer,copyData,"(int, int) → char[]","org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.copyData(int,int)",19,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneInputBuffer,getNextChar,() → char,org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneInputBuffer,getNextPos,() → int,org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.getNextPos(),0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneInputBuffer,removeNext,() → char,org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext(),0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone1,<init>,() → void,org.apache.commons.codec.language.Caverphone1.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/Caverphone1,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.Caverphone1.encode(String),298,0,0.0,4,0,0.0,3,60,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,<init>,"(java.lang.String, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.<init>(String,String,String,String)",0,21,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,getPatternLength,() → int,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,getReplacements,"(java.lang.String, boolean) → java.lang.String[]","org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(String,boolean)",0,30,1.0,0,8,1.0,5,0,7,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,isVowel,(char) → boolean,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.isVowel(char),0,19,1.0,1,9,0.9,6,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,matches,(java.lang.String) → boolean,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.matches(String),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/DaitchMokotoffSoundex$Rule,toString,() → java.lang.String,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule.toString(),28,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneOutputBuffer,<init>,"(org.apache.commons.codec.language.ColognePhonetic, int) → void","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.<init>(ColognePhonetic,int)",0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneOutputBuffer,copyData,"(int, int) → char[]","org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.copyData(int,int)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language,org/apache/commons/codec/language/ColognePhonetic$CologneOutputBuffer,put,(char) → void,org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer.put(char),0,29,1.0,0,8,1.0,5,0,5,1.0,0,1,1.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,main,(java.lang.String[]) → void,org.apache.commons.codec.cli.Digest.main(String[]),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,<init>,(java.lang.String[]) → void,org.apache.commons.codec.cli.Digest.<init>(String[]),23,23,0.5,3,1,0.25,3,6,6,0.5,0,1,1.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,println,"(java.lang.String, byte[]) → void","org.apache.commons.codec.cli.Digest.println(String,byte[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,println,"(java.lang.String, byte[], java.lang.String) → void","org.apache.commons.codec.cli.Digest.println(String,byte[],String)",25,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,run,() → void,org.apache.commons.codec.cli.Digest.run(),35,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,run,"(java.lang.String, java.security.MessageDigest) → void","org.apache.commons.codec.cli.Digest.run(String,MessageDigest)",68,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,run,"(java.lang.String, java.security.MessageDigest, java.io.File[]) → void","org.apache.commons.codec.cli.Digest.run(String,MessageDigest,File[])",28,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,run,"(java.lang.String, java.lang.String) → void","org.apache.commons.codec.cli.Digest.run(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,run,(java.lang.String[]) → void,org.apache.commons.codec.cli.Digest.run(String[]),31,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/codec/cli,org/apache/commons/codec/cli/Digest,toString,() → java.lang.String,org.apache.commons.codec.cli.Digest.toString(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getHmacMd5,(byte[]) → javax.crypto.Mac,org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getHmacSha1,(byte[]) → javax.crypto.Mac,org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getHmacSha256,(byte[]) → javax.crypto.Mac,org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getHmacSha384,(byte[]) → javax.crypto.Mac,org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getHmacSha512,(byte[]) → javax.crypto.Mac,org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getInitializedMac,"(org.apache.commons.codec.digest.HmacAlgorithms, byte[]) → javax.crypto.Mac","org.apache.commons.codec.digest.HmacUtils.getInitializedMac(HmacAlgorithms,byte[])",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,getInitializedMac,"(java.lang.String, byte[]) → javax.crypto.Mac","org.apache.commons.codec.digest.HmacUtils.getInitializedMac(String,byte[])",11,16,0.5925925925925926,1,1,0.5,2,3,5,0.625,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5,"(byte[], java.io.InputStream) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacMd5(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacMd5(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5Hex,"(byte[], byte[]) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5Hex,"(byte[], java.io.InputStream) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacMd5Hex,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1,"(byte[], java.io.InputStream) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha1(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha1(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1Hex,"(byte[], byte[]) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1Hex,"(byte[], java.io.InputStream) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha1Hex,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256,"(byte[], java.io.InputStream) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha256(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha256(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256Hex,"(byte[], byte[]) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256Hex,"(byte[], java.io.InputStream) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha256Hex,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384,"(byte[], java.io.InputStream) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha384(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha384(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384Hex,"(byte[], byte[]) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384Hex,"(byte[], java.io.InputStream) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha384Hex,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512,"(byte[], java.io.InputStream) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha512(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.digest.HmacUtils.hmacSha512(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512Hex,"(byte[], byte[]) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],byte[])",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512Hex,"(byte[], java.io.InputStream) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byte[],InputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacSha512Hex,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,isAvailable,(org.apache.commons.codec.digest.HmacAlgorithms) → boolean,org.apache.commons.codec.digest.HmacUtils.isAvailable(HmacAlgorithms),3,6,0.6666666666666666,0,0,coverage not available since no branches,1,2,2,0.5,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,isAvailable,(java.lang.String) → boolean,org.apache.commons.codec.digest.HmacUtils.isAvailable(String),0,8,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,updateHmac,"(javax.crypto.Mac, byte[]) → javax.crypto.Mac","org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,byte[])",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,updateHmac,"(javax.crypto.Mac, java.io.InputStream) → javax.crypto.Mac","org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,InputStream)",28,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,updateHmac,"(javax.crypto.Mac, java.lang.String) → javax.crypto.Mac","org.apache.commons.codec.digest.HmacUtils.updateHmac(Mac,String)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,() → void,org.apache.commons.codec.digest.HmacUtils.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,"(org.apache.commons.codec.digest.HmacAlgorithms, byte[]) → void","org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,byte[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,"(org.apache.commons.codec.digest.HmacAlgorithms, java.lang.String) → void","org.apache.commons.codec.digest.HmacUtils.<init>(HmacAlgorithms,String)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,(javax.crypto.Mac) → void,org.apache.commons.codec.digest.HmacUtils.<init>(Mac),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,"(java.lang.String, byte[]) → void","org.apache.commons.codec.digest.HmacUtils.<init>(String,byte[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,<init>,"(java.lang.String, java.lang.String) → void","org.apache.commons.codec.digest.HmacUtils.<init>(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmac,(byte[]) → byte[],org.apache.commons.codec.digest.HmacUtils.hmac(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmac,(java.nio.ByteBuffer) → byte[],org.apache.commons.codec.digest.HmacUtils.hmac(ByteBuffer),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmac,(java.io.File) → byte[],org.apache.commons.codec.digest.HmacUtils.hmac(File),0,16,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmac,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.HmacUtils.hmac(InputStream),0,23,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmac,(java.lang.String) → byte[],org.apache.commons.codec.digest.HmacUtils.hmac(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacHex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.HmacUtils.hmacHex(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacHex,(java.nio.ByteBuffer) → java.lang.String,org.apache.commons.codec.digest.HmacUtils.hmacHex(ByteBuffer),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacHex,(java.io.File) → java.lang.String,org.apache.commons.codec.digest.HmacUtils.hmacHex(File),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacHex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.HmacUtils.hmacHex(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacUtils,hmacHex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.HmacUtils.hmacHex(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha256Crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha256Crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String)",10,9,0.47368421052631576,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha256Crypt,"(byte[], java.lang.String, java.util.Random) → java.lang.String","org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byte[],String,Random)",0,20,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha2Crypt,"(byte[], java.lang.String, java.lang.String, int, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(byte[],String,String,int,String)",62,672,0.9155313351498637,6,28,0.8235294117647058,18,13,104,0.8888888888888888,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha512Crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[]),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha512Crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String)",0,19,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,sha512Crypt,"(byte[], java.lang.String, java.util.Random) → java.lang.String","org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byte[],String,Random)",0,20,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,<init>,() → void,org.apache.commons.codec.digest.Sha2Crypt.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Sha2Crypt,<clinit>,() → void,org.apache.commons.codec.digest.Sha2Crypt.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,checkBufferArgs,"(byte[], int, int) → void","org.apache.commons.codec.digest.Blake3.checkBufferArgs(byte[],int,int)",46,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,compress,"(int[], int[], int, long, int) → int[]","org.apache.commons.codec.digest.Blake3.compress(int[],int[],int,long,int)",0,79,1.0,0,4,1.0,3,0,13,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,g,"(int[], int, int, int, int, int, int) → void","org.apache.commons.codec.digest.Blake3.g(int[],int,int,int,int,int,int)",0,89,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,hash,(byte[]) → byte[],org.apache.commons.codec.digest.Blake3.hash(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,initHash,() → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.initHash(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,initKeyDerivationFunction,(byte[]) → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byte[]),33,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,initKeyedHash,(byte[]) → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.initKeyedHash(byte[]),0,20,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,keyedHash,"(byte[], byte[]) → byte[]","org.apache.commons.codec.digest.Blake3.keyedHash(byte[],byte[])",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,packInt,"(int, byte[], int, int) → void","org.apache.commons.codec.digest.Blake3.packInt(int,byte[],int,int)",19,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,parentChainingValue,"(int[], int[], int[], int) → int[]","org.apache.commons.codec.digest.Blake3.parentChainingValue(int[],int[],int[],int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,parentOutput,"(int[], int[], int[], int) → org.apache.commons.codec.digest.Blake3$Output","org.apache.commons.codec.digest.Blake3.parentOutput(int[],int[],int[],int)",24,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,round,"(int[], int[], byte[]) → void","org.apache.commons.codec.digest.Blake3.round(int[],int[],byte[])",0,129,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,unpackInt,"(byte[], int) → int","org.apache.commons.codec.digest.Blake3.unpackInt(byte[],int)",0,36,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,unpackInts,"(byte[], int) → int[]","org.apache.commons.codec.digest.Blake3.unpackInts(byte[],int)",0,21,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,<init>,"(int[], int) → void","org.apache.commons.codec.digest.Blake3.<init>(int[],int)",0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,doFinalize,(byte[]) → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.doFinalize(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,doFinalize,"(byte[], int, int) → org.apache.commons.codec.digest.Blake3","org.apache.commons.codec.digest.Blake3.doFinalize(byte[],int,int)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,doFinalize,(int) → byte[],org.apache.commons.codec.digest.Blake3.doFinalize(int),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,reset,() → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.reset(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,update,(byte[]) → org.apache.commons.codec.digest.Blake3,org.apache.commons.codec.digest.Blake3.update(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,update,"(byte[], int, int) → org.apache.commons.codec.digest.Blake3","org.apache.commons.codec.digest.Blake3.update(byte[],int,int)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3,<clinit>,() → void,org.apache.commons.codec.digest.Blake3.<clinit>(),0,522,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,<init>,"(int[], int) → void","org.apache.commons.codec.digest.Blake3$EngineState.<init>(int[],int)",0,22,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,addChunkCV,"(int[], long) → void","org.apache.commons.codec.digest.Blake3$EngineState.addChunkCV(int[],long)",28,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,inputData,"(byte[], int, int) → void","org.apache.commons.codec.digest.Blake3$EngineState.inputData(byte[],int,int)",59,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,outputHash,"(byte[], int, int) → void","org.apache.commons.codec.digest.Blake3$EngineState.outputHash(byte[],int,int)",31,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,popCV,() → int[],org.apache.commons.codec.digest.Blake3$EngineState.popCV(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,pushCV,(int[]) → void,org.apache.commons.codec.digest.Blake3$EngineState.pushCV(int[]),12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$EngineState,reset,() → void,org.apache.commons.codec.digest.Blake3$EngineState.reset(),19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32,<init>,() → void,org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32,finalise,"(int, int, byte[], int) → int","org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32.finalise(int,int,byte[],int)",51,0,0.0,4,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,<init>,() → void,org.apache.commons.codec.digest.PureJavaCrc32C.<init>(),0,5,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,getValue,() → long,org.apache.commons.codec.digest.PureJavaCrc32C.getValue(),0,10,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,reset,() → void,org.apache.commons.codec.digest.PureJavaCrc32C.reset(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,update,"(byte[], int, int) → void","org.apache.commons.codec.digest.PureJavaCrc32C.update(byte[],int,int)",34,234,0.8731343283582089,5,5,0.5,9,2,23,0.92,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,update,(int) → void,org.apache.commons.codec.digest.PureJavaCrc32C.update(int),0,18,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32C,<clinit>,() → void,org.apache.commons.codec.digest.PureJavaCrc32C.<clinit>(),0,8196,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,body,"(int[], int, int) → int[]","org.apache.commons.codec.digest.UnixCrypt.body(int[],int,int)",0,148,1.0,0,4,1.0,3,0,33,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,byteToUnsigned,(byte) → int,org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(byte),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.UnixCrypt.crypt(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.UnixCrypt.crypt(byte[],String)",0,165,1.0,0,16,1.0,9,0,39,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,crypt,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.UnixCrypt.crypt(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,crypt,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.UnixCrypt.crypt(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,dEncrypt,"(int, int, int, int, int, int[]) → int","org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int,int,int,int,int,int[])",0,128,1.0,0,0,coverage not available since no branches,1,0,8,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,desSetKey,(byte[]) → int[],org.apache.commons.codec.digest.UnixCrypt.desSetKey(byte[]),0,306,1.0,0,4,1.0,3,0,36,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,fourBytesToInt,"(byte[], int) → int","org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(byte[],int)",0,38,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,hPermOp,"(int, int, int) → int","org.apache.commons.codec.digest.UnixCrypt.hPermOp(int,int,int)",0,20,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,intToFourBytes,"(int, byte[], int) → void","org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(int,byte[],int)",0,39,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,permOp,"(int, int, int, int, int[]) → void","org.apache.commons.codec.digest.UnixCrypt.permOp(int,int,int,int,int[])",0,27,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,<init>,() → void,org.apache.commons.codec.digest.UnixCrypt.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/UnixCrypt,<clinit>,() → void,org.apache.commons.codec.digest.UnixCrypt.<clinit>(),0,5027,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MessageDigestAlgorithms,values,() → java.lang.String[],org.apache.commons.codec.digest.MessageDigestAlgorithms.values(),55,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacAlgorithms,<init>,"(java.lang.String, int, java.lang.String) → void","org.apache.commons.codec.digest.HmacAlgorithms.<init>(String,int,String)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacAlgorithms,getName,() → java.lang.String,org.apache.commons.codec.digest.HmacAlgorithms.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacAlgorithms,toString,() → java.lang.String,org.apache.commons.codec.digest.HmacAlgorithms.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/HmacAlgorithms,<clinit>,() → void,org.apache.commons.codec.digest.HmacAlgorithms.<clinit>(),0,70,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, byte[]) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,byte[])",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, java.nio.ByteBuffer) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,ByteBuffer)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, java.io.File) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,File)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, java.io.InputStream) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,InputStream)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, java.nio.file.Path, java.nio.file.OpenOption[]) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,Path,OpenOption[])",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.security.MessageDigest, java.io.RandomAccessFile) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(MessageDigest,RandomAccessFile)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getDigest,(java.lang.String) → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getDigest(String),6,3,0.3333333333333333,0,0,coverage not available since no branches,1,2,1,0.3333333333333333,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getDigest,"(java.lang.String, java.security.MessageDigest) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.getDigest(String,MessageDigest)",0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getMd2Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getMd2Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getMd5Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getMd5Digest(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getMessageDigest,(java.lang.String) → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getMessageDigest(String),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha1Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha1Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha256Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha256Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha3_224Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha3_224Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha3_256Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha3_256Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha3_384Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha3_512Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha3_512Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha384Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha384Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha512_224Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha512_256Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getSha512Digest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getSha512Digest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getShaDigest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getShaDigest(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,isAvailable,(java.lang.String) → boolean,org.apache.commons.codec.digest.DigestUtils.isAvailable(String),0,8,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.md2(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.md2(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.md2(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md2Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md2Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md2Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md2Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.md5(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.md5(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.md5(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md5Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,md5Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.md5Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha(byte[]),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha(InputStream),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha(String),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha1(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha1(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha1(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha1Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha1Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha1Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha256(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha256(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha256(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha256Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha256Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha256Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha256Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_224(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_224(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_224(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_224Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_256(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_256(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_256(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_256Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_384(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_384(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_384(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_384Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_512(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_512(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha3_512(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha3_512Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha384(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha384(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha384(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha384Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha384Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha384Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha384Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_224(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_224(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_224(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_224Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_256(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_256(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.sha512_256(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512_256Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512Hex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512Hex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512Hex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512Hex(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,sha512Hex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.sha512Hex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,shaHex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.shaHex(byte[]),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,shaHex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.shaHex(InputStream),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,shaHex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.shaHex(String),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, byte[]) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,byte[])",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.nio.ByteBuffer) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,ByteBuffer)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.io.File) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,File)",16,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.nio.channels.FileChannel) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,FileChannel)",19,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.io.InputStream) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,InputStream)",0,26,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.nio.file.Path, java.nio.file.OpenOption[]) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,Path,OpenOption[])",0,15,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.io.RandomAccessFile) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,RandomAccessFile)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,updateDigest,"(java.security.MessageDigest, java.lang.String) → java.security.MessageDigest","org.apache.commons.codec.digest.DigestUtils.updateDigest(MessageDigest,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,<init>,() → void,org.apache.commons.codec.digest.DigestUtils.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,<init>,(java.security.MessageDigest) → void,org.apache.commons.codec.digest.DigestUtils.<init>(MessageDigest),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,<init>,(java.lang.String) → void,org.apache.commons.codec.digest.DigestUtils.<init>(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,(byte[]) → byte[],org.apache.commons.codec.digest.DigestUtils.digest(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,(java.nio.ByteBuffer) → byte[],org.apache.commons.codec.digest.DigestUtils.digest(ByteBuffer),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,(java.io.File) → byte[],org.apache.commons.codec.digest.DigestUtils.digest(File),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,(java.io.InputStream) → byte[],org.apache.commons.codec.digest.DigestUtils.digest(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,"(java.nio.file.Path, java.nio.file.OpenOption[]) → byte[]","org.apache.commons.codec.digest.DigestUtils.digest(Path,OpenOption[])",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digest,(java.lang.String) → byte[],org.apache.commons.codec.digest.DigestUtils.digest(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,(byte[]) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.digestAsHex(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,(java.nio.ByteBuffer) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.digestAsHex(ByteBuffer),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,(java.io.File) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.digestAsHex(File),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,(java.io.InputStream) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.digestAsHex(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,"(java.nio.file.Path, java.nio.file.OpenOption[]) → java.lang.String","org.apache.commons.codec.digest.DigestUtils.digestAsHex(Path,OpenOption[])",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,digestAsHex,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.DigestUtils.digestAsHex(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/DigestUtils,getMessageDigest,() → java.security.MessageDigest,org.apache.commons.codec.digest.DigestUtils.getMessageDigest(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$ChunkState,<init>,"(int[], long, int) → void","org.apache.commons.codec.digest.Blake3$ChunkState.<init>(int[],long,int)",0,16,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$ChunkState,length,() → int,org.apache.commons.codec.digest.Blake3$ChunkState.length(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$ChunkState,output,() → org.apache.commons.codec.digest.Blake3$Output,org.apache.commons.codec.digest.Blake3$ChunkState.output(),26,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$ChunkState,startFlag,() → int,org.apache.commons.codec.digest.Blake3$ChunkState.startFlag(),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$ChunkState,update,"(byte[], int, int) → void","org.apache.commons.codec.digest.Blake3$ChunkState.update(byte[],int,int)",73,0,0.0,4,0,0.0,3,16,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,orBytes,"(byte, byte, byte, byte) → int","org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.orBytes(byte,byte,byte,byte)",22,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,<init>,() → void,org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.<init>(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,add,"(byte[], int, int) → void","org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.add(byte[],int,int)",183,0,0.0,14,0,0.0,9,34,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,end,() → int,org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.end(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,finalise,"(int, int, byte[], int) → int","org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.finalise(int,int,byte[],int)",57,0,0.0,4,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3$IncrementalHash32x86,start,(int) → void,org.apache.commons.codec.digest.MurmurHash3$IncrementalHash32x86.start(int),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,getLittleEndianInt,"(byte[], int) → int","org.apache.commons.codec.digest.MurmurHash2.getLittleEndianInt(byte[],int)",36,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,getLittleEndianLong,"(byte[], int) → long","org.apache.commons.codec.digest.MurmurHash2.getLittleEndianLong(byte[],int)",0,84,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash32,"(byte[], int) → int","org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash32,"(byte[], int, int) → int","org.apache.commons.codec.digest.MurmurHash2.hash32(byte[],int,int)",107,0,0.0,6,0,0.0,5,20,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash32,(java.lang.String) → int,org.apache.commons.codec.digest.MurmurHash2.hash32(String),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash32,"(java.lang.String, int, int) → int","org.apache.commons.codec.digest.MurmurHash2.hash32(String,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash64,"(byte[], int) → long","org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash64,"(byte[], int, int) → long","org.apache.commons.codec.digest.MurmurHash2.hash64(byte[],int,int)",26,142,0.8452380952380952,3,7,0.7,9,2,22,0.9166666666666666,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash64,(java.lang.String) → long,org.apache.commons.codec.digest.MurmurHash2.hash64(String),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash2,hash64,"(java.lang.String, int, int) → long","org.apache.commons.codec.digest.MurmurHash2.hash64(String,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,fmix32,(int) → int,org.apache.commons.codec.digest.MurmurHash3.fmix32(int),0,28,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,fmix64,(long) → long,org.apache.commons.codec.digest.MurmurHash3.fmix64(long),0,28,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,getLittleEndianInt,"(byte[], int) → int","org.apache.commons.codec.digest.MurmurHash3.getLittleEndianInt(byte[],int)",0,36,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,getLittleEndianLong,"(byte[], int) → long","org.apache.commons.codec.digest.MurmurHash3.getLittleEndianLong(byte[],int)",0,84,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128,(byte[]) → long[],org.apache.commons.codec.digest.MurmurHash3.hash128(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128,"(byte[], int, int, int) → long[]","org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128,(java.lang.String) → long[],org.apache.commons.codec.digest.MurmurHash3.hash128(String),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128x64,(byte[]) → long[],org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128x64,"(byte[], int, int, int) → long[]","org.apache.commons.codec.digest.MurmurHash3.hash128x64(byte[],int,int,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash128x64Internal,"(byte[], int, int, long) → long[]","org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal(byte[],int,int,long)",371,0,0.0,18,0,0.0,17,57,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,(byte[]) → int,org.apache.commons.codec.digest.MurmurHash3.hash32(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(byte[], int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(byte[], int, int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(byte[], int, int, int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int)",90,0,0.0,6,0,0.0,5,18,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,(long) → int,org.apache.commons.codec.digest.MurmurHash3.hash32(long),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(long, int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(long,int)",24,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(long, long) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(long,long)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,"(long, long, int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int)",39,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32,(java.lang.String) → int,org.apache.commons.codec.digest.MurmurHash3.hash32(String),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32x86,(byte[]) → int,org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash32x86,"(byte[], int, int, int) → int","org.apache.commons.codec.digest.MurmurHash3.hash32x86(byte[],int,int,int)",0,96,1.0,0,6,1.0,5,0,18,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,(byte[]) → long,org.apache.commons.codec.digest.MurmurHash3.hash64(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,"(byte[], int, int) → long","org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,"(byte[], int, int, int) → long","org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int)",0,173,1.0,2,8,0.8,9,0,26,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,(int) → long,org.apache.commons.codec.digest.MurmurHash3.hash64(int),31,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,(long) → long,org.apache.commons.codec.digest.MurmurHash3.hash64(long),36,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,hash64,(short) → long,org.apache.commons.codec.digest.MurmurHash3.hash64(short),47,0,0.0,0,0,coverage not available since no branches,1,10,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/MurmurHash3,mix32,"(int, int) → int","org.apache.commons.codec.digest.MurmurHash3.mix32(int,int)",0,24,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,<init>,() → void,org.apache.commons.codec.digest.PureJavaCrc32.<init>(),0,5,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,getValue,() → long,org.apache.commons.codec.digest.PureJavaCrc32.getValue(),0,8,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,reset,() → void,org.apache.commons.codec.digest.PureJavaCrc32.reset(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,resetCrc,() → void,org.apache.commons.codec.digest.PureJavaCrc32.resetCrc(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,update,"(byte[], int, int) → void","org.apache.commons.codec.digest.PureJavaCrc32.update(byte[],int,int)",34,241,0.8763636363636363,5,5,0.5,9,2,14,0.875,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,update,(int) → void,org.apache.commons.codec.digest.PureJavaCrc32.update(int),18,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/PureJavaCrc32,<clinit>,() → void,org.apache.commons.codec.digest.PureJavaCrc32.<clinit>(),0,8196,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,getInt,"(byte[], int) → int","org.apache.commons.codec.digest.XXHash32.getInt(byte[],int)",0,36,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,<init>,() → void,org.apache.commons.codec.digest.XXHash32.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,<init>,(int) → void,org.apache.commons.codec.digest.XXHash32.<init>(int),0,20,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,getValue,() → long,org.apache.commons.codec.digest.XXHash32.getValue(),17,104,0.859504132231405,1,5,0.8333333333333334,4,1,19,0.95,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,initializeState,() → void,org.apache.commons.codec.digest.XXHash32.initializeState(),0,33,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,process,"(byte[], int) → void","org.apache.commons.codec.digest.XXHash32.process(byte[],int)",0,98,1.0,0,0,coverage not available since no branches,1,0,14,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,reset,() → void,org.apache.commons.codec.digest.XXHash32.reset(),0,12,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,update,"(byte[], int, int) → void","org.apache.commons.codec.digest.XXHash32.update(byte[],int,int)",37,57,0.6063829787234043,3,7,0.7,6,7,15,0.6818181818181818,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/XXHash32,update,(int) → void,org.apache.commons.codec.digest.XXHash32.update(int),15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Crypt,crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.Crypt.crypt(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Crypt,crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Crypt.crypt(byte[],String)",4,29,0.8787878787878788,1,7,0.875,5,1,8,0.8888888888888888,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Crypt,crypt,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.Crypt.crypt(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Crypt,crypt,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Crypt.crypt(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Crypt,<init>,() → void,org.apache.commons.codec.digest.Crypt.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,apr1Crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[]),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,apr1Crypt,"(byte[], java.util.Random) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],Random)",13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,apr1Crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],String)",9,11,0.55,2,2,0.5,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,apr1Crypt,(java.lang.String) → java.lang.String,org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,apr1Crypt,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String,String)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,md5Crypt,(byte[]) → java.lang.String,org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[]),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,md5Crypt,"(byte[], java.util.Random) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],Random)",13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,md5Crypt,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,md5Crypt,"(byte[], java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String)",0,8,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,md5Crypt,"(byte[], java.lang.String, java.lang.String, java.util.Random) → java.lang.String","org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],String,String,Random)",44,276,0.8625,5,21,0.8076923076923077,14,3,59,0.9516129032258065,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Md5Crypt,<init>,() → void,org.apache.commons.codec.digest.Md5Crypt.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$Output,<init>,"(int[], int[], long, int, int) → void","org.apache.commons.codec.digest.Blake3$Output.<init>(int[],int[],long,int,int)",18,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$Output,chainingValue,() → int[],org.apache.commons.codec.digest.Blake3$Output.chainingValue(),14,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/Blake3$Output,rootOutputBytes,"(byte[], int, int) → void","org.apache.commons.codec.digest.Blake3$Output.rootOutputBytes(byte[],int,int)",54,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/B64,<init>,() → void,org.apache.commons.codec.digest.B64.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/B64,b64from24bit,"(byte, byte, byte, int, java.lang.StringBuilder) → void","org.apache.commons.codec.digest.B64.b64from24bit(byte,byte,byte,int,StringBuilder)",0,35,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/B64,getRandomSalt,(int) → java.lang.String,org.apache.commons.codec.digest.B64.getRandomSalt(int),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/B64,getRandomSalt,"(int, java.util.Random) → java.lang.String","org.apache.commons.codec.digest.B64.getRandomSalt(int,Random)",0,24,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/digest,org/apache/commons/codec/digest/B64,<clinit>,() → void,org.apache.commons.codec.digest.B64.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$Context,<init>,() → void,org.apache.commons.codec.binary.BaseNCodec$Context.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$Context,toString,() → java.lang.String,org.apache.commons.codec.binary.BaseNCodec$Context.toString(),59,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,equals,"(java.lang.CharSequence, java.lang.CharSequence) → boolean","org.apache.commons.codec.binary.StringUtils.equals(CharSequence,CharSequence)",39,0,0.0,14,0,0.0,8,7,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getByteBuffer,"(java.lang.String, java.nio.charset.Charset) → java.nio.ByteBuffer","org.apache.commons.codec.binary.StringUtils.getByteBuffer(String,Charset)",9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getByteBufferUtf8,(java.lang.String) → java.nio.ByteBuffer,org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytes,"(java.lang.String, java.nio.charset.Charset) → byte[]","org.apache.commons.codec.binary.StringUtils.getBytes(String,Charset)",2,6,0.75,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesIso8859_1,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUnchecked,"(java.lang.String, java.lang.String) → byte[]","org.apache.commons.codec.binary.StringUtils.getBytesUnchecked(String,String)",0,13,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUsAscii,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUtf16,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesUtf16(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUtf16Be,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUtf16Le,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,getBytesUtf8,(java.lang.String) → byte[],org.apache.commons.codec.binary.StringUtils.getBytesUtf8(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newIllegalStateException,"(java.lang.String, java.io.UnsupportedEncodingException) → java.lang.IllegalStateException","org.apache.commons.codec.binary.StringUtils.newIllegalStateException(String,UnsupportedEncodingException)",0,14,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newString,"(byte[], java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.binary.StringUtils.newString(byte[],Charset)",2,8,0.8,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newString,"(byte[], java.lang.String) → java.lang.String","org.apache.commons.codec.binary.StringUtils.newString(byte[],String)",0,15,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringIso8859_1,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringUsAscii,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byte[]),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringUtf16,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringUtf16(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringUtf16Be,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringUtf16Le,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,newStringUtf8,(byte[]) → java.lang.String,org.apache.commons.codec.binary.StringUtils.newStringUtf8(byte[]),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/StringUtils,<init>,() → void,org.apache.commons.codec.binary.StringUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32OutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32OutputStream,<init>,"(java.io.OutputStream, boolean) → void","org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32OutputStream,<init>,"(java.io.OutputStream, boolean, int, byte[]) → void","org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[])",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32OutputStream,<init>,"(java.io.OutputStream, boolean, int, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base32OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy)",13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,builder,() → org.apache.commons.codec.binary.Base32$Builder,org.apache.commons.codec.binary.Base32.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,decodeTable,(boolean) → byte[],org.apache.commons.codec.binary.Base32.decodeTable(boolean),0,6,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,encodeTable,(boolean) → byte[],org.apache.commons.codec.binary.Base32.encodeTable(boolean),0,6,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,() → void,org.apache.commons.codec.binary.Base32.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,(boolean) → void,org.apache.commons.codec.binary.Base32.<init>(boolean),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(boolean, byte) → void","org.apache.commons.codec.binary.Base32.<init>(boolean,byte)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,(byte) → void,org.apache.commons.codec.binary.Base32.<init>(byte),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,(int) → void,org.apache.commons.codec.binary.Base32.<init>(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(int, byte[]) → void","org.apache.commons.codec.binary.Base32.<init>(int,byte[])",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(int, byte[], boolean) → void","org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(int, byte[], boolean, byte) → void","org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte)",0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(int, byte[], boolean, byte, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base32.<init>(int,byte[],boolean,byte,CodecPolicy)",0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<init>,"(int, byte[], byte[], byte, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base32.<init>(int,byte[],byte[],byte,CodecPolicy)",29,67,0.6979166666666666,4,8,0.6666666666666666,7,5,14,0.7368421052631579,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,decode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base32.decode(byte[],int,int,Context)",301,165,0.3540772532188841,9,19,0.6785714285714286,18,30,28,0.4827586206896552,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,encode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base32.encode(byte[],int,int,Context)",169,636,0.7900621118012422,9,19,0.6785714285714286,17,15,59,0.7972972972972973,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,getLineSeparator,() → byte[],org.apache.commons.codec.binary.Base32.getLineSeparator(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,isInAlphabet,(byte) → boolean,org.apache.commons.codec.binary.Base32.isInAlphabet(byte),0,17,1.0,2,4,0.6666666666666666,4,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,validateCharacter,"(long, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base32.validateCharacter(long,Context)",12,4,0.25,3,1,0.25,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,validateTrailingCharacters,() → void,org.apache.commons.codec.binary.Base32.validateTrailingCharacters(),9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32,<clinit>,() → void,org.apache.commons.codec.binary.Base32.<clinit>(),0,1237,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decodeHex,(char[]) → byte[],org.apache.commons.codec.binary.Hex.decodeHex(char[]),0,13,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decodeHex,"(char[], byte[], int) → int","org.apache.commons.codec.binary.Hex.decodeHex(char[],byte[],int)",0,63,1.0,0,6,1.0,4,0,13,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decodeHex,(java.lang.String) → byte[],org.apache.commons.codec.binary.Hex.decodeHex(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,(byte[]) → char[],org.apache.commons.codec.binary.Hex.encodeHex(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(byte[], boolean) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(byte[],boolean)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(byte[], char[]) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(byte[],char[])",14,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(byte[], int, int, boolean) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean)",12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(byte[], int, int, boolean, char[], int) → void","org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,boolean,char[],int)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(byte[], int, int, char[], char[], int) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(byte[],int,int,char[],char[],int)",37,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,(java.nio.ByteBuffer) → char[],org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(java.nio.ByteBuffer, boolean) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,boolean)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHex,"(java.nio.ByteBuffer, char[]) → char[]","org.apache.commons.codec.binary.Hex.encodeHex(ByteBuffer,char[])",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHexString,(byte[]) → java.lang.String,org.apache.commons.codec.binary.Hex.encodeHexString(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHexString,"(byte[], boolean) → java.lang.String","org.apache.commons.codec.binary.Hex.encodeHexString(byte[],boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHexString,(java.nio.ByteBuffer) → java.lang.String,org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encodeHexString,"(java.nio.ByteBuffer, boolean) → java.lang.String","org.apache.commons.codec.binary.Hex.encodeHexString(ByteBuffer,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,toAlphabet,(boolean) → char[],org.apache.commons.codec.binary.Hex.toAlphabet(boolean),1,5,0.8333333333333334,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,toByteArray,(java.nio.ByteBuffer) → byte[],org.apache.commons.codec.binary.Hex.toByteArray(ByteBuffer),9,19,0.6785714285714286,2,2,0.5,3,3,6,0.6666666666666666,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,toDigit,"(char, int) → int","org.apache.commons.codec.binary.Hex.toDigit(char,int)",0,25,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,<init>,() → void,org.apache.commons.codec.binary.Hex.<init>(),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,<init>,(java.nio.charset.Charset) → void,org.apache.commons.codec.binary.Hex.<init>(Charset),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,<init>,(java.lang.String) → void,org.apache.commons.codec.binary.Hex.<init>(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decode,(byte[]) → byte[],org.apache.commons.codec.binary.Hex.decode(byte[]),0,9,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decode,(java.nio.ByteBuffer) → byte[],org.apache.commons.codec.binary.Hex.decode(ByteBuffer),0,10,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.Hex.decode(Object),0,39,1.0,0,6,1.0,4,0,9,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encode,(byte[]) → byte[],org.apache.commons.codec.binary.Hex.encode(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encode,(java.nio.ByteBuffer) → byte[],org.apache.commons.codec.binary.Hex.encode(ByteBuffer),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.Hex.encode(Object),34,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,getCharset,() → java.nio.charset.Charset,org.apache.commons.codec.binary.Hex.getCharset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,getCharsetName,() → java.lang.String,org.apache.commons.codec.binary.Hex.getCharsetName(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,toString,() → java.lang.String,org.apache.commons.codec.binary.Hex.toString(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Hex,<clinit>,() → void,org.apache.commons.codec.binary.Hex.<clinit>(),0,139,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.codec.binary.BaseNCodec, boolean) → void","org.apache.commons.codec.binary.BaseNCodecOutputStream.<init>(OutputStream,BaseNCodec,boolean)",0,19,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,close,() → void,org.apache.commons.codec.binary.BaseNCodecOutputStream.close(),8,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,eof,() → void,org.apache.commons.codec.binary.BaseNCodecOutputStream.eof(),10,13,0.5652173913043478,1,1,0.5,2,1,3,0.75,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,flush,() → void,org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,flush,(boolean) → void,org.apache.commons.codec.binary.BaseNCodecOutputStream.flush(boolean),34,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,isStrictDecoding,() → boolean,org.apache.commons.codec.binary.BaseNCodecOutputStream.isStrictDecoding(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,write,"(byte[], int, int) → void","org.apache.commons.codec.binary.BaseNCodecOutputStream.write(byte[],int,int)",48,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecOutputStream,write,(int) → void,org.apache.commons.codec.binary.BaseNCodecOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,<init>,() → void,org.apache.commons.codec.binary.Base16.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,<init>,(boolean) → void,org.apache.commons.codec.binary.Base16.<init>(boolean),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,<init>,"(boolean, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base16.<init>(boolean,byte[],CodecPolicy)",2,22,0.9166666666666666,1,1,0.5,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,<init>,"(boolean, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base16.<init>(boolean,CodecPolicy)",2,8,0.8,1,1,0.5,2,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,decode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base16.decode(byte[],int,int,Context)",41,109,0.7266666666666667,4,16,0.8,11,5,21,0.8076923076923077,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,decodeOctet,(byte) → int,org.apache.commons.codec.binary.Base16.decodeOctet(byte),0,31,1.0,0,4,1.0,3,0,6,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,encode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base16.encode(byte[],int,int,Context)",85,0,0.0,8,0,0.0,5,17,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,isInAlphabet,(byte) → boolean,org.apache.commons.codec.binary.Base16.isInAlphabet(byte),17,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,validateTrailingCharacter,() → void,org.apache.commons.codec.binary.Base16.validateTrailingCharacter(),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16,<clinit>,() → void,org.apache.commons.codec.binary.Base16.<clinit>(),0,837,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,<init>,"(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean) → void","org.apache.commons.codec.binary.BaseNCodecInputStream.<init>(InputStream,BaseNCodec,boolean)",0,27,1.0,0,2,1.0,2,0,7,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,available,() → int,org.apache.commons.codec.binary.BaseNCodecInputStream.available(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,isStrictDecoding,() → boolean,org.apache.commons.codec.binary.BaseNCodecInputStream.isStrictDecoding(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,mark,(int) → void,org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,markSupported,() → boolean,org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,read,() → int,org.apache.commons.codec.binary.BaseNCodecInputStream.read(),34,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,read,"(byte[], int, int) → int","org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)",68,25,0.26881720430107525,14,6,0.3,11,13,5,0.2777777777777778,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,reset,() → void,org.apache.commons.codec.binary.BaseNCodecInputStream.reset(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodecInputStream,skip,(long) → long,org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long),16,36,0.6923076923076923,2,4,0.6666666666666666,4,5,7,0.5833333333333334,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/CharSequenceUtils,regionMatches,"(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int) → boolean","org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int)",58,0,0.0,14,0,0.0,8,17,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/CharSequenceUtils,<init>,() → void,org.apache.commons.codec.binary.CharSequenceUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64$Builder,<init>,() → void,org.apache.commons.codec.binary.Base64$Builder.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64$Builder,get,() → org.apache.commons.codec.binary.Base64,org.apache.commons.codec.binary.Base64$Builder.get(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64$Builder,setUrlSafe,(boolean) → org.apache.commons.codec.binary.Base64$Builder,org.apache.commons.codec.binary.Base64$Builder.setUrlSafe(boolean),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32$Builder,<init>,() → void,org.apache.commons.codec.binary.Base32$Builder.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32$Builder,get,() → org.apache.commons.codec.binary.Base32,org.apache.commons.codec.binary.Base32$Builder.get(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32$Builder,setHexDecodeTable,(boolean) → org.apache.commons.codec.binary.Base32$Builder,org.apache.commons.codec.binary.Base32$Builder.setHexDecodeTable(boolean),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32$Builder,setHexEncodeTable,(boolean) → org.apache.commons.codec.binary.Base32$Builder,org.apache.commons.codec.binary.Base32$Builder.setHexEncodeTable(boolean),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16OutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16OutputStream,<init>,"(java.io.OutputStream, boolean) → void","org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16OutputStream,<init>,"(java.io.OutputStream, boolean, boolean) → void","org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16OutputStream,<init>,"(java.io.OutputStream, boolean, boolean, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base16OutputStream.<init>(OutputStream,boolean,boolean,CodecPolicy)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64InputStream,<init>,(java.io.InputStream) → void,org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64InputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64InputStream,<init>,"(java.io.InputStream, boolean, int, byte[]) → void","org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[])",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64InputStream,<init>,"(java.io.InputStream, boolean, int, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base64InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,fromAscii,(byte[]) → byte[],org.apache.commons.codec.binary.BinaryCodec.fromAscii(byte[]),10,43,0.8113207547169812,1,7,0.875,5,1,8,0.8888888888888888,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,fromAscii,(char[]) → byte[],org.apache.commons.codec.binary.BinaryCodec.fromAscii(char[]),0,55,1.0,0,10,1.0,6,0,9,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,isEmpty,(byte[]) → boolean,org.apache.commons.codec.binary.BinaryCodec.isEmpty(byte[]),0,9,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,toAsciiBytes,(byte[]) → byte[],org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byte[]),2,55,0.9649122807017544,1,7,0.875,5,1,9,0.9,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,toAsciiChars,(byte[]) → char[],org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byte[]),0,57,1.0,0,8,1.0,5,0,10,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,toAsciiString,(byte[]) → java.lang.String,org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,<init>,() → void,org.apache.commons.codec.binary.BinaryCodec.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,decode,(byte[]) → byte[],org.apache.commons.codec.binary.BinaryCodec.decode(byte[]),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.BinaryCodec.decode(Object),5,28,0.8484848484848485,1,7,0.875,5,1,8,0.8888888888888888,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,encode,(byte[]) → byte[],org.apache.commons.codec.binary.BinaryCodec.encode(byte[]),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.BinaryCodec.encode(Object),5,8,0.6153846153846154,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,toByteArray,(java.lang.String) → byte[],org.apache.commons.codec.binary.BinaryCodec.toByteArray(String),0,8,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BinaryCodec,<clinit>,() → void,org.apache.commons.codec.binary.BinaryCodec.<clinit>(),0,42,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,createPositiveCapacity,(int) → int,org.apache.commons.codec.binary.BaseNCodec.createPositiveCapacity(int),21,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,getChunkSeparator,() → byte[],org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,isWhiteSpace,(byte) → boolean,org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,resizeBuffer,"(org.apache.commons.codec.binary.BaseNCodec$Context, int) → byte[]","org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(Context,int)",5,26,0.8387096774193549,2,2,0.5,3,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,toLength,(byte[]) → int,org.apache.commons.codec.binary.BaseNCodec.toLength(byte[]),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,<init>,"(int, int, int, int) → void","org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,<init>,"(int, int, int, int, byte) → void","org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte)",0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,<init>,"(int, int, int, int, byte, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.BaseNCodec.<init>(int,int,int,int,byte,CodecPolicy)",0,43,1.0,0,6,1.0,4,0,10,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,available,(org.apache.commons.codec.binary.BaseNCodec$Context) → int,org.apache.commons.codec.binary.BaseNCodec.available(Context),1,11,0.9166666666666666,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,containsAlphabetOrPad,(byte[]) → boolean,org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[]),0,30,1.0,0,8,1.0,5,0,5,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,decode,(byte[]) → byte[],org.apache.commons.codec.binary.BaseNCodec.decode(byte[]),0,36,1.0,0,2,1.0,2,0,8,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.BaseNCodec.decode(Object),22,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,decode,(java.lang.String) → byte[],org.apache.commons.codec.binary.BaseNCodec.decode(String),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,encode,(byte[]) → byte[],org.apache.commons.codec.binary.BaseNCodec.encode(byte[]),0,12,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,encode,"(byte[], int, int) → byte[]","org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)",2,36,0.9473684210526315,1,1,0.5,2,1,7,0.875,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.binary.BaseNCodec.encode(Object),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,encodeAsString,(byte[]) → java.lang.String,org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[]),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,encodeToString,(byte[]) → java.lang.String,org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,ensureBufferSize,"(int, org.apache.commons.codec.binary.BaseNCodec$Context) → byte[]","org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,Context)",0,36,1.0,0,4,1.0,3,0,7,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,getCodecPolicy,() → org.apache.commons.codec.CodecPolicy,org.apache.commons.codec.binary.BaseNCodec.getCodecPolicy(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,getDefaultBufferSize,() → int,org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,getEncodedLength,(byte[]) → long,org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[]),18,21,0.5384615384615384,1,1,0.5,2,1,3,0.75,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,hasData,(org.apache.commons.codec.binary.BaseNCodec$Context) → boolean,org.apache.commons.codec.binary.BaseNCodec.hasData(Context),0,9,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,isInAlphabet,"(byte[], boolean) → boolean","org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)",33,0,0.0,10,0,0.0,6,4,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,isInAlphabet,(java.lang.String) → boolean,org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,isStrictDecoding,() → boolean,org.apache.commons.codec.binary.BaseNCodec.isStrictDecoding(),2,6,0.75,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,readResults,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → int","org.apache.commons.codec.binary.BaseNCodec.readResults(byte[],int,int,Context)",1,42,0.9767441860465116,2,4,0.6666666666666666,4,0,8,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec,<clinit>,() → void,org.apache.commons.codec.binary.BaseNCodec.<clinit>(),0,14,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64OutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64OutputStream,<init>,"(java.io.OutputStream, boolean) → void","org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64OutputStream,<init>,"(java.io.OutputStream, boolean, int, byte[]) → void","org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[])",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64OutputStream,<init>,"(java.io.OutputStream, boolean, int, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base64OutputStream.<init>(OutputStream,boolean,int,byte[],CodecPolicy)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16InputStream,<init>,(java.io.InputStream) → void,org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16InputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16InputStream,<init>,"(java.io.InputStream, boolean, boolean) → void","org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base16InputStream,<init>,"(java.io.InputStream, boolean, boolean, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base16InputStream.<init>(InputStream,boolean,boolean,CodecPolicy)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,builder,() → org.apache.commons.codec.binary.Base64$Builder,org.apache.commons.codec.binary.Base64.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,decodeBase64,(byte[]) → byte[],org.apache.commons.codec.binary.Base64.decodeBase64(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,decodeBase64,(java.lang.String) → byte[],org.apache.commons.codec.binary.Base64.decodeBase64(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,decodeInteger,(byte[]) → java.math.BigInteger,org.apache.commons.codec.binary.Base64.decodeInteger(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64,(byte[]) → byte[],org.apache.commons.codec.binary.Base64.encodeBase64(byte[]),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64,"(byte[], boolean) → byte[]","org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64,"(byte[], boolean, boolean) → byte[]","org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64,"(byte[], boolean, boolean, int) → byte[]","org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)",5,43,0.8958333333333334,1,5,0.8333333333333334,4,0,7,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64Chunked,(byte[]) → byte[],org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64String,(byte[]) → java.lang.String,org.apache.commons.codec.binary.Base64.encodeBase64String(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64URLSafe,(byte[]) → byte[],org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[]),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeBase64URLSafeString,(byte[]) → java.lang.String,org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encodeInteger,(java.math.BigInteger) → byte[],org.apache.commons.codec.binary.Base64.encodeInteger(BigInteger),9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isArrayByteBase64,(byte[]) → boolean,org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[]),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isBase64,(byte) → boolean,org.apache.commons.codec.binary.Base64.isBase64(byte),18,0,0.0,8,0,0.0,5,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isBase64,(byte[]) → boolean,org.apache.commons.codec.binary.Base64.isBase64(byte[]),26,0,0.0,6,0,0.0,4,4,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isBase64,(java.lang.String) → boolean,org.apache.commons.codec.binary.Base64.isBase64(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,toIntegerBytes,(java.math.BigInteger) → byte[],org.apache.commons.codec.binary.Base64.toIntegerBytes(BigInteger),63,0,0.0,6,0,0.0,4,14,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,toUrlSafeEncodeTable,(boolean) → byte[],org.apache.commons.codec.binary.Base64.toUrlSafeEncodeTable(boolean),0,6,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,() → void,org.apache.commons.codec.binary.Base64.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,(boolean) → void,org.apache.commons.codec.binary.Base64.<init>(boolean),0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,(int) → void,org.apache.commons.codec.binary.Base64.<init>(int),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,"(int, byte[]) → void","org.apache.commons.codec.binary.Base64.<init>(int,byte[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,"(int, byte[], boolean) → void","org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,"(int, byte[], boolean, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base64.<init>(int,byte[],boolean,CodecPolicy)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<init>,"(int, byte[], byte, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base64.<init>(int,byte[],byte,byte[],CodecPolicy)",5,102,0.9532710280373832,1,13,0.9285714285714286,8,1,23,0.9583333333333334,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,calculateDecodeTable,(byte[]) → byte[],org.apache.commons.codec.binary.Base64.calculateDecodeTable(byte[]),0,23,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,decode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base64.decode(byte[],int,int,Context)",95,120,0.5581395348837209,9,15,0.625,14,17,19,0.5277777777777778,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,encode,"(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base64.encode(byte[],int,int,Context)",133,224,0.6274509803921569,15,15,0.5,17,14,30,0.6818181818181818,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,getLineSeparator,() → byte[],org.apache.commons.codec.binary.Base64.getLineSeparator(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isInAlphabet,(byte) → boolean,org.apache.commons.codec.binary.Base64.isInAlphabet(byte),0,17,1.0,0,6,1.0,4,0,1,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,isUrlSafe,() → boolean,org.apache.commons.codec.binary.Base64.isUrlSafe(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,validateCharacter,"(int, org.apache.commons.codec.binary.BaseNCodec$Context) → void","org.apache.commons.codec.binary.Base64.validateCharacter(int,Context)",10,4,0.2857142857142857,3,1,0.25,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,validateTrailingCharacter,() → void,org.apache.commons.codec.binary.Base64.validateTrailingCharacter(),9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base64,<clinit>,() → void,org.apache.commons.codec.binary.Base64.<clinit>(),0,1014,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32InputStream,<init>,(java.io.InputStream) → void,org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32InputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32InputStream,<init>,"(java.io.InputStream, boolean, int, byte[]) → void","org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[])",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/Base32InputStream,<init>,"(java.io.InputStream, boolean, int, byte[], org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.binary.Base32InputStream.<init>(InputStream,boolean,int,byte[],CodecPolicy)",13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,<init>,(byte[]) → void,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.<init>(byte[]),18,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,asThis,() → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.asThis(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,getDecodingPolicy,() → org.apache.commons.codec.CodecPolicy,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getDecodingPolicy(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,getEncodeTable,() → byte[],org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getEncodeTable(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,getLineLength,() → int,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getLineLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,getLineSeparator,() → byte[],org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getLineSeparator(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,getPadding,() → byte,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.getPadding(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,setDecodingPolicy,(org.apache.commons.codec.CodecPolicy) → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setDecodingPolicy(CodecPolicy),10,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,setEncodeTable,(byte[]) → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setEncodeTable(byte[]),11,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,setLineLength,(int) → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineLength(int),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,setLineSeparator,(byte[]) → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setLineSeparator(byte[]),10,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/codec/binary,org/apache/commons/codec/binary/BaseNCodec$AbstractBuilder,setPadding,(byte) → org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder,org.apache.commons.codec.binary.BaseNCodec$AbstractBuilder.setPadding(byte),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/Resources,getInputStream,(java.lang.String) → java.io.InputStream,org.apache.commons.codec.Resources.getInputStream(String),12,8,0.4,1,1,0.5,2,1,3,0.75,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/Resources,<init>,() → void,org.apache.commons.codec.Resources.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/DecoderException,<init>,() → void,org.apache.commons.codec.DecoderException.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/DecoderException,<init>,(java.lang.String) → void,org.apache.commons.codec.DecoderException.<init>(String),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/DecoderException,<init>,"(java.lang.String, java.lang.Throwable) → void","org.apache.commons.codec.DecoderException.<init>(String,Throwable)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/DecoderException,<init>,(java.lang.Throwable) → void,org.apache.commons.codec.DecoderException.<init>(Throwable),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/StringEncoderComparator,<init>,() → void,org.apache.commons.codec.StringEncoderComparator.<init>(),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/StringEncoderComparator,<init>,(org.apache.commons.codec.StringEncoder) → void,org.apache.commons.codec.StringEncoderComparator.<init>(StringEncoder),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/StringEncoderComparator,compare,"(java.lang.Object, java.lang.Object) → int","org.apache.commons.codec.StringEncoderComparator.compare(Object,Object)",3,21,0.875,0,0,coverage not available since no branches,1,2,6,0.75,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/CodecPolicy,<clinit>,() → void,org.apache.commons.codec.CodecPolicy.<clinit>(),0,24,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/CharEncoding,<init>,() → void,org.apache.commons.codec.CharEncoding.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/CharEncoding,<clinit>,() → void,org.apache.commons.codec.CharEncoding.<clinit>(),0,19,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/EncoderException,<init>,() → void,org.apache.commons.codec.EncoderException.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/EncoderException,<init>,(java.lang.String) → void,org.apache.commons.codec.EncoderException.<init>(String),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/EncoderException,<init>,"(java.lang.String, java.lang.Throwable) → void","org.apache.commons.codec.EncoderException.<init>(String,Throwable)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec,org/apache/commons/codec/EncoderException,<init>,(java.lang.Throwable) → void,org.apache.commons.codec.EncoderException.<init>(Throwable),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/Charsets,toCharset,(java.nio.charset.Charset) → java.nio.charset.Charset,org.apache.commons.codec.Charsets.toCharset(Charset),6,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/Charsets,toCharset,(java.lang.String) → java.nio.charset.Charset,org.apache.commons.codec.Charsets.toCharset(String),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/Charsets,<init>,() → void,org.apache.commons.codec.Charsets.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec,org/apache/commons/codec/Charsets,<clinit>,() → void,org.apache.commons.codec.Charsets.<clinit>(),13,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decodeQuotedPrintable,(byte[]) → byte[],org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[]),36,33,0.4782608695652174,5,7,0.5833333333333334,7,9,8,0.47058823529411764,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encodeByte,"(int, boolean, java.io.ByteArrayOutputStream) → int","org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(int,boolean,ByteArrayOutputStream)",0,11,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encodeQuotedPrintable,"(java.util.BitSet, byte[]) → byte[]","org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[])",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encodeQuotedPrintable,"(java.util.BitSet, byte[], boolean) → byte[]","org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[],boolean)",144,48,0.25,32,8,0.2,21,27,12,0.3076923076923077,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encodeQuotedPrintable,"(int, java.io.ByteArrayOutputStream) → int","org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,ByteArrayOutputStream)",0,19,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,getUnsignedOctet,"(int, byte[]) → int","org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(int,byte[])",12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,isWhitespace,(int) → boolean,org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(int),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<init>,() → void,org.apache.commons.codec.net.QuotedPrintableCodec.<init>(),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<init>,(boolean) → void,org.apache.commons.codec.net.QuotedPrintableCodec.<init>(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<init>,(java.nio.charset.Charset) → void,org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<init>,"(java.nio.charset.Charset, boolean) → void","org.apache.commons.codec.net.QuotedPrintableCodec.<init>(Charset,boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<init>,(java.lang.String) → void,org.apache.commons.codec.net.QuotedPrintableCodec.<init>(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decode,(byte[]) → byte[],org.apache.commons.codec.net.QuotedPrintableCodec.decode(byte[]),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.QuotedPrintableCodec.decode(Object),37,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.QuotedPrintableCodec.decode(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decode,"(java.lang.String, java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,Charset)",0,13,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,decode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.QuotedPrintableCodec.decode(String,String)",13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encode,(byte[]) → byte[],org.apache.commons.codec.net.QuotedPrintableCodec.encode(byte[]),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.QuotedPrintableCodec.encode(Object),33,4,0.10810810810810811,5,1,0.16666666666666666,4,5,2,0.2857142857142857,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.QuotedPrintableCodec.encode(String),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encode,"(java.lang.String, java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,Charset)",0,11,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,encode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.QuotedPrintableCodec.encode(String,String)",11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,getCharset,() → java.nio.charset.Charset,org.apache.commons.codec.net.QuotedPrintableCodec.getCharset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,getDefaultCharset,() → java.lang.String,org.apache.commons.codec.net.QuotedPrintableCodec.getDefaultCharset(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QuotedPrintableCodec,<clinit>,() → void,org.apache.commons.codec.net.QuotedPrintableCodec.<clinit>(),0,32,1.0,0,4,1.0,3,0,8,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,<init>,() → void,org.apache.commons.codec.net.PercentCodec.<init>(),0,20,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,<init>,"(byte[], boolean) → void","org.apache.commons.codec.net.PercentCodec.<init>(byte[],boolean)",0,20,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,canEncode,(byte) → boolean,org.apache.commons.codec.net.PercentCodec.canEncode(byte),0,17,1.0,1,5,0.8333333333333334,4,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,containsSpace,(byte[]) → boolean,org.apache.commons.codec.net.PercentCodec.containsSpace(byte[]),2,21,0.9130434782608695,1,3,0.75,3,1,3,0.75,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,decode,(byte[]) → byte[],org.apache.commons.codec.net.PercentCodec.decode(byte[]),67,4,0.056338028169014086,9,1,0.1,6,14,2,0.125,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.PercentCodec.decode(Object),6,23,0.7931034482758621,1,3,0.75,3,1,4,0.8,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,doEncode,"(byte[], int, boolean) → byte[]","org.apache.commons.codec.net.PercentCodec.doEncode(byte[],int,boolean)",5,70,0.9333333333333333,1,11,0.9166666666666666,7,1,14,0.9333333333333333,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,encode,(byte[]) → byte[],org.apache.commons.codec.net.PercentCodec.encode(byte[]),0,33,1.0,1,9,0.9,6,0,7,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.PercentCodec.encode(Object),29,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,expectedDecodingBytes,(byte[]) → int,org.apache.commons.codec.net.PercentCodec.expectedDecodingBytes(byte[]),25,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,expectedEncodingBytes,(byte[]) → int,org.apache.commons.codec.net.PercentCodec.expectedEncodingBytes(byte[]),0,30,1.0,0,4,1.0,3,0,4,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,inAlwaysEncodeCharsRange,(byte) → boolean,org.apache.commons.codec.net.PercentCodec.inAlwaysEncodeCharsRange(byte),0,12,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,insertAlwaysEncodeChar,(byte) → void,org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChar(byte),0,26,1.0,0,6,1.0,4,0,8,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,insertAlwaysEncodeChars,(byte[]) → void,org.apache.commons.codec.net.PercentCodec.insertAlwaysEncodeChars(byte[]),9,16,0.64,1,3,0.75,3,1,4,0.8,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/PercentCodec,isAsciiChar,(byte) → boolean,org.apache.commons.codec.net.PercentCodec.isAsciiChar(byte),0,6,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,<init>,() → void,org.apache.commons.codec.net.BCodec.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,<init>,(java.nio.charset.Charset) → void,org.apache.commons.codec.net.BCodec.<init>(Charset),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,<init>,"(java.nio.charset.Charset, org.apache.commons.codec.CodecPolicy) → void","org.apache.commons.codec.net.BCodec.<init>(Charset,CodecPolicy)",0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,<init>,(java.lang.String) → void,org.apache.commons.codec.net.BCodec.<init>(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.BCodec.decode(Object),28,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,decode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.BCodec.decode(String),12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,doDecoding,(byte[]) → byte[],org.apache.commons.codec.net.BCodec.doDecoding(byte[]),11,4,0.26666666666666666,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,doEncoding,(byte[]) → byte[],org.apache.commons.codec.net.BCodec.doEncoding(byte[]),0,7,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.BCodec.encode(Object),28,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.BCodec.encode(String),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,encode,"(java.lang.String, java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.net.BCodec.encode(String,Charset)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,encode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.BCodec.encode(String,String)",0,13,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,getEncoding,() → java.lang.String,org.apache.commons.codec.net.BCodec.getEncoding(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,isStrictDecoding,() → boolean,org.apache.commons.codec.net.BCodec.isStrictDecoding(),2,6,0.75,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/BCodec,<clinit>,() → void,org.apache.commons.codec.net.BCodec.<clinit>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,<init>,() → void,org.apache.commons.codec.net.QCodec.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,<init>,(java.nio.charset.Charset) → void,org.apache.commons.codec.net.QCodec.<init>(Charset),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,<init>,(java.lang.String) → void,org.apache.commons.codec.net.QCodec.<init>(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.QCodec.decode(Object),7,21,0.75,2,2,0.5,3,2,3,0.6,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,decode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.QCodec.decode(String),8,4,0.3333333333333333,0,0,coverage not available since no branches,1,2,1,0.3333333333333333,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,doDecoding,(byte[]) → byte[],org.apache.commons.codec.net.QCodec.doDecoding(byte[]),0,64,1.0,0,12,1.0,7,0,16,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,doEncoding,(byte[]) → byte[],org.apache.commons.codec.net.QCodec.doEncoding(byte[]),4,26,0.8666666666666667,1,7,0.875,5,1,7,0.875,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.QCodec.encode(Object),28,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.QCodec.encode(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,encode,"(java.lang.String, java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.net.QCodec.encode(String,Charset)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,encode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.QCodec.encode(String,String)",5,8,0.6153846153846154,0,0,coverage not available since no branches,1,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,getEncoding,() → java.lang.String,org.apache.commons.codec.net.QCodec.getEncoding(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,isEncodeBlanks,() → boolean,org.apache.commons.codec.net.QCodec.isEncodeBlanks(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,setEncodeBlanks,(boolean) → void,org.apache.commons.codec.net.QCodec.setEncodeBlanks(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/QCodec,<clinit>,() → void,org.apache.commons.codec.net.QCodec.<clinit>(),0,126,1.0,0,6,1.0,4,0,38,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/Utils,<init>,() → void,org.apache.commons.codec.net.Utils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/Utils,digit16,(byte) → int,org.apache.commons.codec.net.Utils.digit16(byte),0,22,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/Utils,hexDigit,(int) → char,org.apache.commons.codec.net.Utils.hexDigit(int),0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,decodeUrl,(byte[]) → byte[],org.apache.commons.codec.net.URLCodec.decodeUrl(byte[]),13,51,0.796875,2,6,0.75,5,4,12,0.75,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,encodeUrl,"(java.util.BitSet, byte[]) → byte[]","org.apache.commons.codec.net.URLCodec.encodeUrl(BitSet,byte[])",0,69,1.0,0,12,1.0,7,0,19,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,<init>,() → void,org.apache.commons.codec.net.URLCodec.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,<init>,(java.lang.String) → void,org.apache.commons.codec.net.URLCodec.<init>(String),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,decode,(byte[]) → byte[],org.apache.commons.codec.net.URLCodec.decode(byte[]),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,decode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.URLCodec.decode(Object),11,26,0.7027027027027027,2,4,0.6666666666666666,4,2,5,0.7142857142857143,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,decode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.URLCodec.decode(String),0,18,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,decode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.URLCodec.decode(String,String)",2,11,0.8461538461538461,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,encode,(byte[]) → byte[],org.apache.commons.codec.net.URLCodec.encode(byte[]),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.net.URLCodec.encode(Object),0,37,1.0,0,6,1.0,4,0,7,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.URLCodec.encode(String),0,18,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,encode,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.URLCodec.encode(String,String)",0,11,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,getDefaultCharset,() → java.lang.String,org.apache.commons.codec.net.URLCodec.getDefaultCharset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,getEncoding,() → java.lang.String,org.apache.commons.codec.net.URLCodec.getEncoding(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/net,org/apache/commons/codec/net/URLCodec,<clinit>,() → void,org.apache.commons.codec.net.URLCodec.<clinit>(),0,55,1.0,0,6,1.0,4,0,14,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,<init>,(java.nio.charset.Charset) → void,org.apache.commons.codec.net.RFC1522Codec.<init>(Charset),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,decodeText,(java.lang.String) → java.lang.String,org.apache.commons.codec.net.RFC1522Codec.decodeText(String),29,87,0.75,5,9,0.6428571428571429,8,4,20,0.8333333333333334,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,encodeText,"(java.lang.String, java.nio.charset.Charset) → java.lang.String","org.apache.commons.codec.net.RFC1522Codec.encodeText(String,Charset)",0,45,1.0,0,2,1.0,2,0,11,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,encodeText,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.codec.net.RFC1522Codec.encodeText(String,String)",0,10,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,getCharset,() → java.nio.charset.Charset,org.apache.commons.codec.net.RFC1522Codec.getCharset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/net,org/apache/commons/codec/net/RFC1522Codec,getDefaultCharset,() → java.lang.String,org.apache.commons.codec.net.RFC1522Codec.getDefaultCharset(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,<init>,(java.util.Set) → void,org.apache.commons.codec.language.bm.Languages$SomeLanguages.<init>(Set),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,contains,(java.lang.String) → boolean,org.apache.commons.codec.language.bm.Languages$SomeLanguages.contains(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,getAny,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$SomeLanguages.getAny(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,getLanguages,() → java.util.Set,org.apache.commons.codec.language.bm.Languages$SomeLanguages.getLanguages(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,isEmpty,() → boolean,org.apache.commons.codec.language.bm.Languages$SomeLanguages.isEmpty(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,isSingleton,() → boolean,org.apache.commons.codec.language.bm.Languages$SomeLanguages.isSingleton(),2,7,0.7777777777777778,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,merge,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$SomeLanguages.merge(LanguageSet),4,23,0.8518518518518519,2,2,0.5,3,2,6,0.75,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,restrictTo,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$SomeLanguages.restrictTo(LanguageSet),2,22,0.9166666666666666,1,3,0.75,3,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,toString,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$SomeLanguages.toString(),0,13,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$SomeLanguages,lambda$restrictTo$0,"(org.apache.commons.codec.language.bm.Languages$SomeLanguages, java.lang.String) → boolean","org.apache.commons.codec.language.bm.Languages$SomeLanguages.lambda$restrictTo$0(SomeLanguages,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$PhonemeExpr,size,() → int,org.apache.commons.codec.language.bm.Rule$PhonemeExpr.size(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,<init>,() → void,org.apache.commons.codec.language.bm.Languages$1.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,contains,(java.lang.String) → boolean,org.apache.commons.codec.language.bm.Languages$1.contains(String),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,getAny,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$1.getAny(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,isEmpty,() → boolean,org.apache.commons.codec.language.bm.Languages$1.isEmpty(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,isSingleton,() → boolean,org.apache.commons.codec.language.bm.Languages$1.isSingleton(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,merge,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$1.merge(LanguageSet),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,restrictTo,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$1.restrictTo(LanguageSet),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$1,toString,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$1.toString(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,<init>,() → void,org.apache.commons.codec.language.bm.Languages$2.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,contains,(java.lang.String) → boolean,org.apache.commons.codec.language.bm.Languages$2.contains(String),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,getAny,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$2.getAny(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,isEmpty,() → boolean,org.apache.commons.codec.language.bm.Languages$2.isEmpty(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,isSingleton,() → boolean,org.apache.commons.codec.language.bm.Languages$2.isSingleton(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,merge,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$2.merge(LanguageSet),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,restrictTo,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$2.restrictTo(LanguageSet),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$2,toString,() → java.lang.String,org.apache.commons.codec.language.bm.Languages$2.toString(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/RuleType,<init>,"(java.lang.String, int, java.lang.String) → void","org.apache.commons.codec.language.bm.RuleType.<init>(String,int,String)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/RuleType,getName,() → java.lang.String,org.apache.commons.codec.language.bm.RuleType.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/RuleType,<clinit>,() → void,org.apache.commons.codec.language.bm.RuleType.<clinit>(),0,37,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication,<init>,"(java.util.Map, java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int) → void","org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.<init>(Map,CharSequence,PhonemeBuilder,int,int)",0,22,1.0,0,0,coverage not available since no branches,1,0,8,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication,getI,() → int,org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication,getPhonemeBuilder,() → org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication,invoke,() → org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication,org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke(),0,69,1.0,1,7,0.875,5,0,16,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication,isFound,() → boolean,org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.isFound(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/NameType,<init>,"(java.lang.String, int, java.lang.String) → void","org.apache.commons.codec.language.bm.NameType.<init>(String,int,String)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/NameType,getName,() → java.lang.String,org.apache.commons.codec.language.bm.NameType.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/NameType,<clinit>,() → void,org.apache.commons.codec.language.bm.NameType.<clinit>(),0,37,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang$LangRule,<init>,"(java.util.regex.Pattern, java.util.Set, boolean) → void","org.apache.commons.codec.language.bm.Lang$LangRule.<init>(Pattern,Set,boolean)",0,12,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang$LangRule,matches,(java.lang.String) → boolean,org.apache.commons.codec.language.bm.Lang$LangRule.matches(String),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$LanguageSet,from,(java.util.Set) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Languages$LanguageSet.from(Set),0,11,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages$LanguageSet,<init>,() → void,org.apache.commons.codec.language.bm.Languages$LanguageSet.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,empty,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(LanguageSet),0,9,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,<init>,(org.apache.commons.codec.language.bm.Rule$Phoneme) → void,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.<init>(Phoneme),0,13,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,<init>,(java.util.Set) → void,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.<init>(Set),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,append,(java.lang.CharSequence) → void,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(CharSequence),0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,apply,"(org.apache.commons.codec.language.bm.Rule$PhonemeExpr, int) → void","org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(PhonemeExpr,int)",1,73,0.9864864864864865,2,8,0.8,6,1,14,0.9333333333333333,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,getPhonemes,() → java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,makeString,() → java.lang.String,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString(),0,10,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder,lambda$append$0,"(java.lang.CharSequence, org.apache.commons.codec.language.bm.Rule$Phoneme) → void","org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.lambda$append$0(CharSequence,Phoneme)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,join,"(java.util.List, java.lang.String) → java.lang.String","org.apache.commons.codec.language.bm.PhoneticEngine.join(List,String)",0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,<init>,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean) → void","org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,<init>,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean, int) → void","org.apache.commons.codec.language.bm.PhoneticEngine.<init>(NameType,RuleType,boolean,int)",12,22,0.6470588235294118,1,1,0.5,2,1,8,0.8888888888888888,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,applyFinalRules,"(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, java.util.Map) → org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder","org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(PhonemeBuilder,Map)",2,26,0.9285714285714286,1,1,0.5,2,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.bm.PhoneticEngine.encode(String),0,10,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,encode,"(java.lang.String, org.apache.commons.codec.language.bm.Languages$LanguageSet) → java.lang.String","org.apache.commons.codec.language.bm.PhoneticEngine.encode(String,LanguageSet)",132,130,0.4961832061068702,11,9,0.45,12,19,26,0.5777777777777777,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,getLang,() → org.apache.commons.codec.language.bm.Lang,org.apache.commons.codec.language.bm.PhoneticEngine.getLang(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,getMaxPhonemes,() → int,org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,getNameType,() → org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.PhoneticEngine.getNameType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,getRuleType,() → org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,isConcat,() → boolean,org.apache.commons.codec.language.bm.PhoneticEngine.isConcat(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,lambda$encode$3,"(java.lang.StringBuilder, java.lang.String) → void","org.apache.commons.codec.language.bm.PhoneticEngine.lambda$encode$3(StringBuilder,String)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,lambda$encode$2,"(java.util.List, java.lang.String) → void","org.apache.commons.codec.language.bm.PhoneticEngine.lambda$encode$2(List,String)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,lambda$applyFinalRules$1,"(java.util.Map, java.util.Map, org.apache.commons.codec.language.bm.Rule$Phoneme) → void","org.apache.commons.codec.language.bm.PhoneticEngine.lambda$applyFinalRules$1(Map,Map,Phoneme)",0,51,1.0,0,4,1.0,3,0,12,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,lambda$null$0,"(java.util.Map, org.apache.commons.codec.language.bm.Rule$Phoneme) → void","org.apache.commons.codec.language.bm.PhoneticEngine.lambda$null$0(Map,Phoneme)",0,26,1.0,0,2,1.0,2,0,7,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/PhoneticEngine,<clinit>,() → void,org.apache.commons.codec.language.bm.PhoneticEngine.<clinit>(),0,183,1.0,0,0,coverage not available since no branches,1,0,11,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,<init>,"(java.lang.CharSequence, org.apache.commons.codec.language.bm.Languages$LanguageSet) → void","org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(CharSequence,LanguageSet)",0,12,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,<init>,"(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme) → void","org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme)",13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,<init>,"(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Languages$LanguageSet) → void","org.apache.commons.codec.language.bm.Rule$Phoneme.<init>(Phoneme,Phoneme,LanguageSet)",0,12,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,append,(java.lang.CharSequence) → org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme.append(CharSequence),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,getLanguages,() → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,getPhonemes,() → java.lang.Iterable,org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemes(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,getPhonemeText,() → java.lang.CharSequence,org.apache.commons.codec.language.bm.Rule$Phoneme.getPhonemeText(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,join,(org.apache.commons.codec.language.bm.Rule$Phoneme) → org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme.join(Phoneme),21,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,mergeWithLanguage,(org.apache.commons.codec.language.bm.Languages$LanguageSet) → org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(LanguageSet),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,size,() → int,org.apache.commons.codec.language.bm.Rule$Phoneme.size(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,toString,() → java.lang.String,org.apache.commons.codec.language.bm.Rule$Phoneme.toString(),0,16,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,lambda$static$0,"(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme) → int","org.apache.commons.codec.language.bm.Rule$Phoneme.lambda$static$0(Phoneme,Phoneme)",2,39,0.9512195121951219,1,7,0.875,5,1,10,0.9090909090909091,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$Phoneme,<clinit>,() → void,org.apache.commons.codec.language.bm.Rule$Phoneme.<clinit>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,<init>,() → void,org.apache.commons.codec.language.bm.BeiderMorseEncoder.<init>(),0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,encode,(java.lang.Object) → java.lang.Object,org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(Object),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,encode,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(String),0,9,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,getNameType,() → org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,getRuleType,() → org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,isConcat,() → boolean,org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,setConcat,(boolean) → void,org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,setMaxPhonemes,(int) → void,org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,setNameType,(org.apache.commons.codec.language.bm.NameType) → void,org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(NameType),16,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/BeiderMorseEncoder,setRuleType,(org.apache.commons.codec.language.bm.RuleType) → void,org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(RuleType),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$PhonemeList,<init>,(java.util.List) → void,org.apache.commons.codec.language.bm.Rule$PhonemeList.<init>(List),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$PhonemeList,getPhonemes,() → java.util.List,org.apache.commons.codec.language.bm.Rule$PhonemeList.getPhonemes(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$PhonemeList,size,() → int,org.apache.commons.codec.language.bm.Rule$PhonemeList.size(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/ResourceConstants,<init>,() → void,org.apache.commons.codec.language.bm.ResourceConstants.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/ResourceConstants,<clinit>,() → void,org.apache.commons.codec.language.bm.ResourceConstants.<clinit>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,getInstance,(org.apache.commons.codec.language.bm.NameType) → org.apache.commons.codec.language.bm.Languages,org.apache.commons.codec.language.bm.Languages.getInstance(NameType),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,getInstance,(java.lang.String) → org.apache.commons.codec.language.bm.Languages,org.apache.commons.codec.language.bm.Languages.getInstance(String),0,54,1.0,0,10,1.0,6,0,14,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,langResourceName,(org.apache.commons.codec.language.bm.NameType) → java.lang.String,org.apache.commons.codec.language.bm.Languages.langResourceName(NameType),0,10,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,<init>,(java.util.Set) → void,org.apache.commons.codec.language.bm.Languages.<init>(Set),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,getLanguages,() → java.util.Set,org.apache.commons.codec.language.bm.Languages.getLanguages(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Languages,<clinit>,() → void,org.apache.commons.codec.language.bm.Languages.<clinit>(),0,37,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$2,<init>,(java.lang.String) → void,org.apache.commons.codec.language.bm.Rule$2.<init>(String),0,11,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$2,isMatch,(java.lang.CharSequence) → boolean,org.apache.commons.codec.language.bm.Rule$2.isMatch(CharSequence),0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,instance,(org.apache.commons.codec.language.bm.NameType) → org.apache.commons.codec.language.bm.Lang,org.apache.commons.codec.language.bm.Lang.instance(NameType),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,loadFromResource,"(java.lang.String, org.apache.commons.codec.language.bm.Languages) → org.apache.commons.codec.language.bm.Lang","org.apache.commons.codec.language.bm.Lang.loadFromResource(String,Languages)",18,103,0.8512396694214877,1,13,0.9285714285714286,8,1,25,0.9615384615384616,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,<init>,"(java.util.List, org.apache.commons.codec.language.bm.Languages) → void","org.apache.commons.codec.language.bm.Lang.<init>(List,Languages)",0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,guessLanguage,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.bm.Lang.guessLanguage(String),12,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,guessLanguages,(java.lang.String) → org.apache.commons.codec.language.bm.Languages$LanguageSet,org.apache.commons.codec.language.bm.Lang.guessLanguages(String),2,26,0.9285714285714286,1,1,0.5,2,0,5,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,lambda$guessLanguages$0,"(java.lang.String, java.util.Set, org.apache.commons.codec.language.bm.Lang$LangRule) → void","org.apache.commons.codec.language.bm.Lang.lambda$guessLanguages$0(String,Set,LangRule)",6,13,0.6842105263157895,1,3,0.75,3,1,4,0.8,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Lang,<clinit>,() → void,org.apache.commons.codec.language.bm.Lang.<clinit>(),0,38,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$1,<init>,"(java.lang.String, java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.Rule$PhonemeExpr, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.codec.language.bm.Rule$1.<init>(String,String,String,PhonemeExpr,int,String,String,String,String)",0,30,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule$1,toString,() → java.lang.String,org.apache.commons.codec.language.bm.Rule$1.toString(),58,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,contains,"(java.lang.CharSequence, char) → boolean","org.apache.commons.codec.language.bm.Rule.contains(CharSequence,char)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,createResourceName,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String) → java.lang.String","org.apache.commons.codec.language.bm.Rule.createResourceName(NameType,RuleType,String)",0,19,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,createScanner,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String) → java.util.Scanner","org.apache.commons.codec.language.bm.Rule.createScanner(NameType,RuleType,String)",0,12,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,createScanner,(java.lang.String) → java.util.Scanner,org.apache.commons.codec.language.bm.Rule.createScanner(String),0,16,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,endsWith,"(java.lang.CharSequence, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.endsWith(CharSequence,CharSequence)",35,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getInstance,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages$LanguageSet) → java.util.List","org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,LanguageSet)",16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getInstance,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String) → java.util.List","org.apache.commons.codec.language.bm.Rule.getInstance(NameType,RuleType,String)",15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getInstanceMap,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages$LanguageSet) → java.util.Map","org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,LanguageSet)",6,8,0.5714285714285714,1,1,0.5,2,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getInstanceMap,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String) → java.util.Map","org.apache.commons.codec.language.bm.Rule.getInstanceMap(NameType,RuleType,String)",22,15,0.40540540540540543,1,1,0.5,2,2,3,0.6,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,parsePhoneme,(java.lang.String) → org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule.parsePhoneme(String),0,51,1.0,0,4,1.0,3,0,9,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,parsePhonemeExpr,(java.lang.String) → org.apache.commons.codec.language.bm.Rule$PhonemeExpr,org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(String),0,72,1.0,0,10,1.0,6,0,11,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,parseRules,"(java.util.Scanner, java.lang.String) → java.util.Map","org.apache.commons.codec.language.bm.Rule.parseRules(Scanner,String)",55,148,0.729064039408867,2,16,0.8888888888888888,10,4,38,0.9047619047619048,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,pattern,(java.lang.String) → org.apache.commons.codec.language.bm.Rule$RPattern,org.apache.commons.codec.language.bm.Rule.pattern(String),0,129,1.0,3,37,0.925,21,0,32,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,startsWith,"(java.lang.CharSequence, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.startsWith(CharSequence,CharSequence)",4,22,0.8461538461538461,2,4,0.6666666666666666,4,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,stripQuotes,(java.lang.String) → java.lang.String,org.apache.commons.codec.language.bm.Rule.stripQuotes(String),0,22,1.0,2,2,0.5,3,0,5,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,<init>,"(java.lang.String, java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.Rule$PhonemeExpr) → void","org.apache.commons.codec.language.bm.Rule.<init>(String,String,String,PhonemeExpr)",0,31,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getLContext,() → org.apache.commons.codec.language.bm.Rule$RPattern,org.apache.commons.codec.language.bm.Rule.getLContext(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getPattern,() → java.lang.String,org.apache.commons.codec.language.bm.Rule.getPattern(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getPhoneme,() → org.apache.commons.codec.language.bm.Rule$PhonemeExpr,org.apache.commons.codec.language.bm.Rule.getPhoneme(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,getRContext,() → org.apache.commons.codec.language.bm.Rule$RPattern,org.apache.commons.codec.language.bm.Rule.getRContext(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,patternAndContextMatches,"(java.lang.CharSequence, int) → boolean","org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(CharSequence,int)",0,50,1.0,0,8,1.0,5,0,11,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$11,"(java.lang.String, boolean, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$11(String,boolean,CharSequence)",0,17,1.0,1,3,0.75,3,0,2,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$10,"(java.lang.String, boolean, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$10(String,boolean,CharSequence)",0,14,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$9,"(java.lang.String, boolean, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$9(String,boolean,CharSequence)",9,6,0.4,3,1,0.25,3,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$8,"(java.lang.String, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$8(String,CharSequence)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$7,"(java.lang.String, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$7(String,CharSequence)",0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$6,"(java.lang.String, java.lang.CharSequence) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$pattern$6(String,CharSequence)",0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$pattern$5,(java.lang.CharSequence) → boolean,org.apache.commons.codec.language.bm.Rule.lambda$pattern$5(CharSequence),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$parseRules$4,(java.lang.String) → java.util.List,org.apache.commons.codec.language.bm.Rule.lambda$parseRules$4(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$getInstance$3,"(java.util.List, java.util.List) → void","org.apache.commons.codec.language.bm.Rule.lambda$getInstance$3(List,List)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$contains$2,"(char, int) → boolean","org.apache.commons.codec.language.bm.Rule.lambda$contains$2(char,int)",0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$static$1,"(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.util.Map, java.lang.String) → void","org.apache.commons.codec.language.bm.Rule.lambda$static$1(NameType,RuleType,Map,String)",17,19,0.5277777777777778,0,0,coverage not available since no branches,1,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,lambda$static$0,(java.lang.CharSequence) → boolean,org.apache.commons.codec.language.bm.Rule.lambda$static$0(CharSequence),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/codec/language/bm,org/apache/commons/codec/language/bm/Rule,<clinit>,() → void,org.apache.commons.codec.language.bm.Rule.<clinit>(),0,95,1.0,0,6,1.0,4,0,15,1.0,0,1,1.0
