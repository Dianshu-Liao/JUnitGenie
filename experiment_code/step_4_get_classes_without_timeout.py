import pandas as pd
from utils import Util
import re
from config import Config
import tqdm

def find_access_denied_code_classes(mvn_test_log_path):
    """
    Parses the Surefire log to identify test classes that failed due to
    SecurityManager permission issues (e.g., access denied,
    AccessControlException, or SecurityException).

    :param mvn_test_log_path: The full console output file generated by mvn test
    :return: list[str] Fully qualified names of test classes that triggered permission issues
    """
    running_re       = re.compile(r'^\[INFO\] Running\s+(\S+)')
    access_denied_re = re.compile(
        r'(access denied\s*\()|AccessControlException|SecurityException',
        re.I
    )

    access_denied_classes = set()
    current_class = None
    has_access_denied = False

    with open(mvn_test_log_path, 'r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            m = running_re.match(line)
            if m:
                # Process the last block before entering a new test class
                if current_class and has_access_denied:
                    access_denied_classes.add(current_class)

                current_class = m.group(1)
                has_access_denied = False      # reset for the new class
            else:
                # Flag only the first hit to avoid duplicate regular tests
                if (not has_access_denied) and access_denied_re.search(line):
                    has_access_denied = True

        # Process the last block at the end of the file
        if current_class and has_access_denied:
            access_denied_classes.add(current_class)

    return list(access_denied_classes)




def find_timeout_code_classes(mvn_test_log_path):
    with open(mvn_test_log_path, 'r') as f:
        lines = f.readlines()

    timeout_code_classes = set()
    current_class = None
    block_lines = []

    # Iterate over all log lines
    for line in lines:
        # Check for ‘[INFO] Running ...’ line, indicating that a new test class is starting to run
        running_match = re.match(r'^\[INFO\] Running\s+(\S+)', line)
        if running_match:
            # If there was a previous block (the current test class), determine if there is a timeout message
            if current_class is not None:
                block_text = "".join(block_lines)
                # Determine if the block contains a timeout-related keyword (this can be adjusted to the actual log)
                if "TestTimedOut" in block_text or "timed out" in block_text:
                    timeout_code_classes.add(current_class)
            # 更新当前测试类
            current_class = running_match.group(1)
            block_lines = []  # Clear the rows of this block
        else:
            # Add the current line to the current test block
            block_lines.append(line)

    # Process the last block
    if current_class is not None:
        block_text = "".join(block_lines)
        if "TestTimedOut" in block_text or "timed out" in block_text:
            timeout_code_classes.add(current_class)

    return list(timeout_code_classes)




if __name__ == '__main__':
    for package_name, test_dir in tqdm.tqdm(Config.package_name_to_test_dir.items()):

        # test_dir = '/Users/dianshuliao/Documents/Research/Knowledge_Distillation_for_LLM_Test_Gen/UnitTestGeneration/saved_data/TenJavaProjects/commons-jxpath-master/src/test/java'
        test_classes_should_be_run_file_path = test_dir.replace('src/test/java', 'test_classes_should_be_run.txt')
        # test_classes_should_be_run_file_path = '/Users/dianshuliao/Documents/Research/Knowledge_Distillation_for_LLM_Test_Gen/UnitTestGeneration/test_classes_should_be_run.txt'
        all_java_files = Util.find_files(test_dir, '.java')
        all_test_classes = []
        for java_file in all_java_files:
            test_class = java_file.replace(test_dir, '').strip('/').replace('.java', '').replace('/', '.')
            all_test_classes.append(test_class)

        # mvn_test_log_path = '/Users/dianshuliao/Documents/Research/Knowledge_Distillation_for_LLM_Test_Gen/UnitTestGeneration/saved_data/TenJavaProjects/commons-jxpath-master/mvn-test.log'

        mvn_test_log_path = test_dir.replace('src/test/java', 'mvn-test.log')
        timeout_code_classes = find_timeout_code_classes(mvn_test_log_path)
        access_denied_code_classes =  find_access_denied_code_classes(mvn_test_log_path)
        test_classes_removed_timeout_code = list(set(all_test_classes) - set(timeout_code_classes) - set(access_denied_code_classes))
        f = open(test_classes_should_be_run_file_path, 'w')
        for test_class in test_classes_removed_timeout_code:
            f.write(test_class + '\n')
        f.close()
